#AUTOMATICALLY GENERATED SKRIPT FILE
#COPYRIGHT JOHN HEIKENS
#https://github.com/JohnHeikens/IntelliSkript
#json element
#Represent the json class
#since 2.8.0 - performance & clean
type:
	patterns:
		json

#json file
#Represent the json file class
#since 2.8.0 - performance & clean
type:
	patterns:
		jsonfile

#Execute a http (post|get) request
#You can execute a web request to rest api. with json encoded body/headers
#since 2.8.0 performance & clean
#Examples:
#set {_headers} to json from text "{'Content-type': 'application/json}"
#execute GET request to "https://dummyjson.com/products/1" with headers {_headers}
#send request's body with pretty print
effect:
	patterns:
		execute GET request to %string% [(:with headers) %string/json%]
		execute POST request to %string% [:(with headers) %string/json%] [[and] [with] (:body) %string/json%]

#JsonWatcher - Start listening to file
#You can register listener for json file, and while the file is updated the cache for this file will be also so.
#since 2.8.0 - performance & clean
#Examples:
#on script load
#	make jsonwatcher listen to "mine.id"
effect:
	patterns:
		make [json]watcher listen to %string%

#JsonWatcher - Stop listening to file
#That will be stop listen file for given id
#since 2.8.0 - performance & clean
#Examples:
#on script load
#	stop jsonwatcher listen to id "mine.id"
effect:
	patterns:
		stop [json]watcher listen to [id] %string%

#Link json file with defined cache.
#You can works with the cache instead of reopening the file again & again.
#since 2.8.0 - performance & clean
#Examples:
#on load:
#	link json file "<path to file>" as "mine.id"
#	link json file "<path to file>" as "mine.id" and make jsonwatcher listen
effect:
	patterns:
		link [json] file %string% as %string% [(:and make) [json]watcher listen]

#Map json to skript list
#@Deprecated
#Mapping json to the List and get those values
#since 2.8.0 - performance & clean
#Examples:
#on load:
#	set {_json} to json from string "{'test': 'test2': {}}"
#	set {_json} to "{""test"": ""test2"": {}}"
#	map {_json} to {_json::*}
#	send {_json::*}
effect:
	patterns:
		(map|copy) %json/string% to %objects%

#New json file
#You can create a new json file.
#since 2.8.0 - performance & clean
effect:
	patterns:
		[:async] new json file %string% [(:with) (object|content)[s] %object%]

#RunTimer
effect:
	patterns:
		skJson debug timer (:start|:stop)
		skJson debug class %objects%

#Save cached json to file
#It's allow save cached json back to the file
#since 2.8.0 - performance & clean
#Examples:
#on unload:
#	save cached json "test"
effect:
	patterns:
		[:async] save cached json %string%
		[:async] save all cached jsons

#UnLink or Unload json file
#You can unload the json file.
#since 2.8.0 - performance & clean
#Examples:
#on load:
#	lunink json "mine.id"
effect:
	patterns:
		unlink json %string%

#Write json file with contents
#You can write/re-write to jsons
#since 2.8.0 performance & clean
#Examples:
#command sk-example:
#	trigger:
#		set {_json} to json from player's world
#		write {_json} to json file "*.json"
effect:
	patterns:
		[re[-]]write %object% to [json file] %string/jsonfile%

#change json file
#You can change json file.
#since 2.8.0 - performance & clean
#Examples:
#command jsonFileValue:
#	trigger:
#		change key "A" of jsonfile("plugins/<>/test.json") to "B"
effect:
	patterns:
		[:async] change (:value|:key) %string% of (%jsonfile/string%|(:json file) %string%) to %objects%

#Json file exists
#You can check if the json file already exists or not.
#since 2.8.0 - performance & clean
#Examples:
#command FileExists:
#  trigger:
#    if json file "plugins/test/main.json" already exists:
#        set {_json} to json from string "{'A': [{'B': {}}, false, true, 10, 20, 22.22, 'A']}"
#
condition:
	patterns:
		json [file] %string% [already] exists
		json [file] %string% [already] does(n't| not) exists

#Json file is cached
#Check if the file for given id is cached
#since 2.8.0 - performance & clean
#Examples:
#on load:
#	if cached json "test" if linked:
#		send true
condition:
	patterns:
		cached json %string% is (load|linked)
		cached json %string% is(n't| not) (load|linked)

#Json file is empty
#You can check if the json file empty
#since 2.8.0 - performance & clean
#Examples:
#Command jsonFileIsEmpty:
#    trigger:
#        if json file "plugins/raw/test.json" is empty:
#            send true
#        else:
#            send false
#
condition:
	patterns:
		json file %string% is empty
		json file %string% is(n't| not) empty

#Json file is listening
#Check if the file for given id is listening via JsonWatcher
#since 2.8.0 - performance & clean
#Examples:
#on load:
#	if cached json "test" is listen:
#		send true
condition:
	patterns:
		[cached] json [id] %string% is listen
		[cached] json [id] %string% is(n't| not) listen

#Json has value/key
# You can check if the inserted keys or values already in your specified json
#since 2.8.0 - performance & clean
#Examples:
#on load:
#    set {_json} to json from string "{'test5': [1], 'test6': ['key', 'key2', 'key3']}"
#    if {_json} has keys "test5", "test6", "A":
#        send true
#    else:
#        send false
condition:
	patterns:
		%json% has (:value|:key)[s] %objects%
		%json% does(n't| not) have (:value|:key)[s] %objects%

#Type of json
#You check json type of Json
#since 2.8.0 - performance & clean
#Examples:
#on load:
#	if type of {_json} is primitive:
#	send true
condition:
	patterns:
		type of %json% (is|=) (1:primitive|2:[json]object|3:array)
		type of %json% (is(n't| not)|!=) (1:primitive|2:[json]object|3:array)

#All cached jsons
#That will return jsons from your cache.
#since 2.8.0 performance & clean
#Examples:
#command AllCachedJsons:
#	trigger:
#		send all cached jsons
expression:
	patterns:
		all cached jsons
	add:
#		(internal code)
	remove:
#		(internal code)
	return type: json element
#Array or List formatted to JSON.
#It allows you to convert the sheet back to Json!
#Value changes don't work for nested objects, to change the values of a nested object use Change
#since 1.3.0
#Examples:
#on script load:
#	set {-json} to json from string "{'test': [1,2,3,false,null,'some'], 'test2': {'something': false}}"
#	map {-json} to {_json::*}
#	send "&9%{_json::*}'s form with pretty print%"
expression:
	patterns:
		[the] form[atted json] of %objects%
		%objects%'[s] form[atted json]
	add:
#		(internal code)
	remove:
#		(internal code)
	return type: json element
#Count of objects/phrases
#You can get the exact number of identical keys or values from the entire json because `count of` works recursively.
#since 2.8.0 performance & clean
#Examples:
#set {_json} to json from string "{'A': [{'B': {}}], 'X': {}, 'UN': 'A'}"
#add diamond sword to {_json} for given path "A[1]:B"
#send {_json}
#send count of diamond sword in {_json}
#send number of key "A" in {_json}
#send count of "A" in {_json}
expression:
	patterns:
		(count|number) of (:key|[value]) %object% in %json%
	return type: integer
#Elements/Values of the json
#You can get the main json values, or you can also get the use values for a given object/array you can also get a single value
#loop-value, loop-element, loop-key
#Means :  -> entries entries mean the entry for the looped element, for example we have element {"B": false}
#    its entry will be loop-key = B, loop-element = false, loop-value = {B=false}
#!Warnings: loop-key or loop-element you can use only for entries!
#LOOP-PATTERNS ->
#	loop-value, loop-element, loop-key
#since 2.8.0 performance & clean
#Examples:
#command GetElements:
#  trigger:
#    set {_json} to json from string "{'A': [{'B': {}}, false, true, 10, 20, 22.22, 'A']}"
#    add diamond sword to {_json} for given path "A[1]:B"
#        loop {_json}'s values:
#            send loop-value
#        loop {_json}'s elements "A[]":
#            send loop-element
#
#        send {_json}'s value "A[1]"
#        loop {_json}'s entries:
#            send loop-key
#            send loop-value
#            send loop-element
#
expression:
	patterns:
		(value|element) %string% of %object%
		(values|elements) [%string%] of %object%
		entr(y|ies) [%string%] of %object%
	return type: object
#ExprJsonLoopExpressions
#since 2.8.0 - performance & clean
expression:
	patterns:
		[the] [json-]loop-(value|:element|:key)[-<(\d+)>]
	return type: object
#Get cached json
#You can get json from cached internal storage by with a key defined by you
#since 2.8.0 - performance & clean
#Examples:
#on script load:
#	set {_json} to cached json "your"
#	send {_json} with pretty print
expression:
	patterns:
		cached json %string%
	add:
#		(internal code)
	remove:
#		(internal code)
	return type: json element
#Json size of current element
#since 2.8.0 - performance & clean
#Examples:
#command SizeJson:
#  trigger:
#    set {_json} to json from text "{'A': 1, 'B': 2, 'C': {'A': 'B', 'X': 'Y'}}"
#    send size of {_json}  = 3 (A, B, C)
#    send size of (element "C" of {_json})  = 2 (A, X)
expression:
	patterns:
		[the] size of %jsons%
		%jsons%'[s] size
	return type: integer
#JsonChanger
expression:
	patterns:
		json list %string% in %json%
		(:keys|:values) of json object [%string%] in %json%
		json (:value|:key) %string% in %json%
	add:
#		(internal code)
	set:
#		(internal code)
	remove:
#		(internal code)
	return type: json element
#JsonRequest - request body
#since 2.8.0 - performance & clean
#Examples:
#send request's body
expression:
	patterns:
		[SkJson] [current] request's body
		[skJson] body of [current] request
	add:
#		(internal code)
	remove:
#		(internal code)
	return type: json element
#New json
#It's allow create json from any source also from the file
#since 2.8.0 - performance & clean
#Examples:
#set {_json} to json from file "plugins/Skript/json-storage/database.json"
#set {_json} to json from "{""test"":true}"
#set {_json} to json from diamond sword
#set {_json} to json from player's location
#set {_json} to json from player's inventory
expression:
	patterns:
		json[s] from [text|string] %object%
		json from [json] file %string%
		[empty] json(-| )(0:array|1:object)
	add:
#		(internal code)
	remove:
#		(internal code)
	return type: json element
#Pretty json
#Allows you to better parse json
#<pre>
#{
#	"test": "skJson"
#	"Object": {
#		"new": "data"
#	}
#</pre>
#since 2.8.0 - performance & clean
#Examples:
#set {_json} to json from "{'test': 'skJson', 'Object' : {'new': 'data'}}"
#send {_json} with pretty print
expression:
	patterns:
		%json% with pretty print
	return type: text
#SupportExpressions
expression:
	patterns:
		(:1st|:first|:2nd|:second|:3rd|:third|:last|%integer%) element
	add:
#		(internal code)
	remove:
#		(internal code)
	return type: json element