#AUTOMATICALLY GENERATED SKRIPT FILE
#COPYRIGHT JOHN HEIKENS
#https://github.com/JohnHeikens/IntelliSkript

#Advancement
#Represents an advancement. These CAN be parsed, see examples.
#since 1.17.0
#Examples:
#set {_a} to "minecraft:nether/use_lodestone" parsed as advancement
type:
	patterns:
		advancement[s]

#ArmorTrim
#Represents an armor trim that may be applied to an item.
#Requires MC 1.19.4+
#since 2.13.0
type:
	patterns:
		armor[ ]trim[s]

#ArmorTrim - TrimMaterial
#Represents a material that may be used in an ArmorTrim.
#NOTE: These are auto-generated and may differ between server versions.
#since 2.13.0
type:
	patterns:
		trim[ ]material[s]

expression:
	return type: trimmaterial
	patterns:
		amethyst_material
		copper_material
		diamond_material
		emerald_material
		gold_material
		iron_material
		lapis_material
		netherite_material
		quartz_material
		redstone_material
		resin_material

#ArmorTrim - TrimPattern
#Represents a pattern that may be used in an ArmorTrim.
#NOTE: These are auto-generated and may differ between server versions.
#since 2.13.0
type:
	patterns:
		trim[ ]pattern[s]

expression:
	return type: trimpattern
	patterns:
		bolt_pattern
		coast_pattern
		dune_pattern
		eye_pattern
		flow_pattern
		host_pattern
		raiser_pattern
		rib_pattern
		sentry_pattern
		shaper_pattern
		silence_pattern
		snout_pattern
		spire_pattern
		tide_pattern
		vex_pattern
		ward_pattern
		wayfinder_pattern
		wild_pattern

#Attribute Modifier
#Represents an attribute modifier from an item/living entity.
type:
	patterns:
		attribute[ ]modifier[s]

#Attribute Modifier Operation
#Represents the different operations of an attribute modifer.
#NOTE: These are auto-generated and may differ between server versions.
type:
	patterns:
		attribute[ ]operation[s]

#Block Action
#Represents different wants to interact.
#NOTE: These are auto-generated and may differ between server versions.
#since 3.4.0
type:
	patterns:
		block[ ]action[s]

expression:
	return type: blockaction
	patterns:
		left_click_air
		left_click_block
		physical
		right_click_air
		right_click_block

#BlockFace
#Represents the face of a block.
#NOTE: These are auto-generated and may differ between server versions.
#since 2.6.0
type:
	patterns:
		blockface[s]

expression:
	return type: blockface
	patterns:
		down_face
		east_face
		east_north_east_face
		east_south_east_face
		north_east_face
		north_face
		north_north_east_face
		north_north_west_face
		north_west_face
		self_face
		south_east_face
		south_face
		south_south_east_face
		south_south_west_face
		south_west_face
		up_face
		west_face
		west_north_west_face
		west_south_west_face

#BlockState
#Represents a captured state of a block, which will not change automatically.
#Unlike Block, which only one object can exist per coordinate, BlockState can exist multiple times for any given Block.
#In a structure, this represents how the block is saved to the structure.
#Requires MC 1.17.1+
#since 1.12.3
type:
	patterns:
		blockstate[s]

#BossBar
#Represents a BossBar. Either from an entity or a custom one.
#Players can be added to/removed from BossBars.
#Custom BossBars can be deleted, BossBars of entities cannot be deleted.
#NOTE: BossBars from entities cannot be saved in global variables, as the entity may not be loaded
#on the server when that variable is trying to load. Custom BossBars can be saved in variables.
#since 1.16.0
#Examples:
#set {_bar} to boss bar named "le-bar"
#add all players to {_bar}
type:
	patterns:
		boss[ ]bar[s]

#BossBar Flag
#Represents the flag options of a BossBar.
#since 1.16.0
#Examples:
#set bar flag darken sky of {_bar} to true
type:
	patterns:
		boss[ ]bar[ ]flag[s]

expression:
	return type: bossbarflag
	patterns:
		create_fog
		darken_sky
		play_boss_music

#BossBar Style
#Represents the style options of a BossBar.
#since 1.16.0
#Examples:
#set bar style of {_bar} to segmented 20
type:
	patterns:
		boss[ ]bar[ ]style[s]

#Bound
#Represents a 3D bounding box between 2 points
#since 1.0.0
type:
	patterns:
		bound

#Bukkit Color
#Represents a Bukkit color. This is different than a Skript color
#as it adds an alpha channel.
#since 2.8.0
type:
	patterns:
		bukkit[ ]color[s]

#Bukkit Tree Type
#Represents the different types of trees.
#NOTE: These are auto-generated and may differ between server versions.
#since 3.5.3
type:
	patterns:
		bukkit[ ]tree[ ]type[s]

expression:
	return type: bukkittreetype
	patterns:
		acacia_tree
		azalea_tree
		big_tree
		birch_tree
		brown_mushroom_tree
		cherry_tree
		chorus_plant_tree
		cocoa_tree
		crimson_fungus_tree
		dark_oak_tree
		jungle_bush_tree
		jungle_tree
		mangrove_tree
		mega_pine_tree
		mega_redwood_tree
		pale_oak_creaking_tree
		pale_oak_tree
		red_mushroom_tree
		redwood_tree
		small_jungle_tree
		swamp_tree
		tall_birch_tree
		tall_mangrove_tree
		tall_redwood_tree
		tree
		warped_fungus_tree

#Chunk Load Level
#Represents the types of load levels of a chunk.
#- `border_level` = Most game logic is not processed, including entities and redstone.
#- `entity_ticking_level` = All game logic is processed.
#- `inaccessible_level` = No game logic is processed, world generation may still occur.
#- `ticking_level` = All game logic except entities is processed.
#- `unloaded_level` = This chunk is not loaded.
#NOTE: These are auto-generated and may differ between server versions.
#since 2.17.0
type:
	patterns:
		chunk[ ]load[ ]level[s]

expression:
	return type: chunkloadlevel
	patterns:
		border_level
		entity_ticking_level
		inaccessible_level
		ticking_level
		unloaded_level

#ChunkGenerator - Biome Parameter Point
#The parameter points of a biome during chunk generation.
#See [**World Generation/Biomes**](https://minecraft.wiki/w/World_generationBiomes) on McWiki for more details.
#since 3.9.0
type:
	patterns:
		biome[ ]parameter[ ]point[s]

#Damage Source
#Represents a source of damage. Requires MC 1.20.4+
#since 3.3.0
type:
	patterns:
		damage[ ]source[s]

#Damage Type
#Represents a type of damage.
#See [**DamageType**](https://minecraft.wiki/w/Damage_type) on McWiki for more details.
#Requires MC 1.20.4+
#NOTE: These are auto-generated and may differ between server versions.
#since 3.3.0
type:
	patterns:
		damage[ ]type[s]

expression:
	return type: damagetype
	patterns:
		arrow
		bad_respawn_point
		cactus
		campfire
		cramming
		dragon_breath
		drown
		dry_out
		ender_pearl
		explosion
		fall
		falling_anvil
		falling_block
		falling_stalactite
		fireball
		fireworks
		fly_into_wall
		freeze
		generic
		generic_kill
		hot_floor
		in_fire
		in_wall
		indirect_magic
		lava
		lightning_bolt
		mace_smash
		magic
		mob_attack
		mob_attack_no_aggro
		mob_projectile
		on_fire
		out_of_world
		outside_border
		player_attack
		player_explosion
		sonic_boom
		spit
		stalagmite
		starve
		sting
		sweet_berry_bush
		thorns
		thrown
		trident
		unattributed_fireball
		wind_charge
		wither
		wither_skull

#DisplayEntity - Display Brightness
#Represents the brightness attributes of a Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
type:
	patterns:
		display[ ]brightness[es]

#DisplayEntity - Transformation
#Represents a transformation of a Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
type:
	patterns:
		transformation[s]

#Entity Effect
#Represents an effect that can be played on an entity.
#NOTE: These are auto-generated and may differ between server versions.
#since 3.0.0
type:
	patterns:
		entit(y|ies)[ ]effect[s]

expression:
	return type: entityeffect
	patterns:
		armadillo_peek
		armor_stand_hit
		arrow_particles
		body_break
		break_equipment_body
		break_equipment_boots
		break_equipment_chestplate
		break_equipment_helmet
		break_equipment_leggings
		break_equipment_main_hand
		break_equipment_off_hand
		cat_tame_fail
		cat_tame_success
		death
		dolphin_fed
		egg_break
		entity_attack
		entity_death
		entity_poof
		fang_attack
		firework_explode
		fox_chew
		goat_lower_head
		goat_raise_head
		guardian_target
		hoglin_attack
		honey_block_fall_particles
		honey_block_slide_particles
		hurt
		hurt_berry_bush
		hurt_drown
		hurt_explosion
		iron_golem_rose
		iron_golem_sheath
		iron_golen_attack
		love_hearts
		player_bad_omen_raid
		projectile_crack
		protected_from_death
		rabbit_jump
		ravager_attack
		ravager_stunned
		reset_spawner_minecart_delay
		shake
		sheep_eat
		sheep_eat_grass
		shield_block
		shield_break
		sniffer_dig
		snowball_break
		spawn_death_smoke
		squid_rotate
		swap_hand_items
		taming_failed
		taming_succeeded
		teleport_ender
		thorns_hurt
		tnt_minecart_ignite
		totem_resurrect
		trusting_failed
		trusting_succeeded
		villager_angry
		villager_happy
		villager_heart
		villager_splash
		warden_attack
		warden_sonic_attack
		warden_tendril_shake
		witch_magic
		wolf_hearts
		wolf_shake
		wolf_shake_stop
		wolf_smoke
		zoglin_attack
		zombie_transform

#Entity Pose
#Represents the pose of an entity.
#NOTE: These are auto-generated and may differ between server versions.
#since 3.5.4
type:
	patterns:
		pose[s]

expression:
	return type: pose
	patterns:
		croaking_pose
		digging_pose
		dying_pose
		emerging_pose
		fall_flying_pose
		inhaling_pose
		long_jumping_pose
		roaring_pose
		shooting_pose
		sitting_pose
		sleeping_pose
		sliding_pose
		sneaking_pose
		sniffing_pose
		spin_attack_pose
		standing_pose
		swimming_pose
		using_tongue_pose

#Entity Remove Cause
#Represents the reasons an entity was removed from the world.
#NOTE: These are auto-generated and may differ between server versions.
#since 3.4.0
type:
	patterns:
		entity[ ]remove[ ]cause[s]

expression:
	return type: entityremovecause
	patterns:
		death
		despawn
		discard
		drop
		enter_block
		explode
		hit
		merge
		out_of_world
		pickup
		player_quit
		plugin
		transformation
		unload

#Equipment Slot Group
#Represents different groups of equipment slots.
#NOTE: These are auto-generated and may differ between server versions.
type:
	patterns:
		equipment[ ]slot[ ]group[s]

expression:
	return type: equipmentslotgroup
	patterns:
		any_slot_group
		armor_slot_group
		body_slot_group
		chest_slot_group
		feet_slot_group
		hand_slot_group
		head_slot_group
		legs_slot_group
		mainhand_slot_group
		offhand_slot_group

#Fish Hook State
#since 2.8.0
type:
	patterns:
		fish[ ]hook[ ]state[s]

expression:
	return type: fishhookstate
	patterns:
		bobbing
		hooked_entity
		unhooked

#Game Event
#Represents a Minecraft 'GameEvent', mainly used by Skulk Sensors. Requires MC 1.17+.
#See [**GameEvents**](https://minecraft.wiki/w/Sculk_SensorVibration_frequencies) on McWiki for more details.
#NOTE: These are auto-generated and may differ between server versions.
#since 1.14.0
type:
	patterns:
		game[ ]event[s]

#Instrument
#Represents the instruments used by goat horns.
#Requires Minecraft 1.20.6+
#NOTE: These are auto-generated and may differ between server versions.
#since 3.8.0
type:
	patterns:
		instrument[s]

expression:
	return type: instrument
	patterns:
		admire_goat_horn
		call_goat_horn
		dream_goat_horn
		feel_goat_horn
		ponder_goat_horn
		seek_goat_horn
		sing_goat_horn
		yearn_goat_horn

#Instrument
#Represents the songs for jukeboxes.
#Requires Minecraft 1.21+
#NOTE: These are auto-generated and may differ between server versions.
#since 3.8.0
type:
	patterns:
		jukebox[ ]song[s]

#ItemComponent - Consume Effect
#Represents an effect that is used in a consumable/death_protection item component.
#There are 5 consume effects: apply_effects, remove_effects, clear_all_effects, teleport_randomly and play_sound.
#Each of these has a function with the same name.
#since 3.8.0
type:
	patterns:
		consume[ ]effect[s]

#Memory
#Represents the different memories of an entity.
#NOTE: These are auto-generated and may differ between server versions.
type:
	patterns:
		memor(y|ies)

expression:
	return type: memory
	patterns:
		admiring_disabled
		admiring_item
		angry_at
		golem_detected_recently
		has_hunting_cooldown
		home
		hunted_recently
		is_tempted
		item_pickup_cooldown_ticks
		job_site
		last_slept
		last_woken
		last_worked_at_poi
		liked_noteblock
		liked_noteblock_cooldown_ticks
		liked_player
		long_jump_cooling_down
		meeting_point
		play_dead_ticks
		potential_job_site
		ram_cooldown_ticks
		sniffer_explored_positions
		temptation_cooldown_ticks
		universal_anger

#Merchant
#Represents a merchant.
#A merchant is a special type of inventory which can facilitate custom trades between items.
#since 1.17.0
type:
	patterns:
		merchant[s]

#Merchant Inventory
#Represents a trading inventory between a player and a merchant.
#The holder of this Inventory is the owning Villager, or null if the player is trading with a custom merchant.
#since 1.17.0
type:
	patterns:
		merchant[ ]inventor(y|ies)

#Merchant Recipe
#Represents a merchant's trade. Trades can take one or two ingredients, and provide one result.
#since 1.17.0
type:
	patterns:
		merchant[ ]recipe[s]

#Minecraft - EntityType
#Represents a Minecraft entity.
#These differ slightly from Skript's EntityType as the names match Minecraft namespaces.
#These also support the use of the Minecraft namespace as well as underscores.
#NOTE: These are auto-generated and may differ between server versions.
#since 3.5.0
#Examples:
#mc spawn sheep at player
#mc spawn minecraft:sheep at player
#mc spawn minecraft:armor_stand at player
type:
	patterns:
		minecraft[ ]entity[ ]type[s]

expression:
	return type: minecraftentitytype
	patterns:
		acacia_boat
		acacia_chest_boat
		allay
		area_effect_cloud
		armadillo
		armor_stand
		arrow
		axolotl
		bamboo_chest_raft
		bamboo_raft
		bat
		bee
		birch_boat
		birch_chest_boat
		blaze
		block_display
		bogged
		breeze
		breeze_wind_charge
		camel
		cat
		cave_spider
		cherry_boat
		cherry_chest_boat
		chest_minecart
		chicken
		cod
		command_block_minecart
		cow
		creaking
		creeper
		dark_oak_boat
		dark_oak_chest_boat
		dolphin
		donkey
		dragon_fireball
		drowned
		egg
		elder_guardian
		end_crystal
		ender_dragon
		ender_pearl
		enderman
		endermite
		evoker
		evoker_fangs
		experience_bottle
		experience_orb
		eye_of_ender
		falling_block
		fireball
		firework_rocket
		fishing_bobber
		fox
		frog
		furnace_minecart
		ghast
		giant
		glow_item_frame
		glow_squid
		goat
		guardian
		hoglin
		hopper_minecart
		horse
		husk
		illusioner
		interaction
		iron_golem
		item
		item_display
		item_frame
		jungle_boat
		jungle_chest_boat
		leash_knot
		lightning_bolt
		llama
		llama_spit
		magma_cube
		mangrove_boat
		mangrove_chest_boat
		marker
		minecart
		mooshroom
		mule
		oak_boat
		oak_chest_boat
		ocelot
		ominous_item_spawner
		painting
		pale_oak_boat
		pale_oak_chest_boat
		panda
		parrot
		phantom
		pig
		piglin
		piglin_brute
		pillager
		player
		polar_bear
		potion
		pufferfish
		rabbit
		ravager
		salmon
		sheep
		shulker
		shulker_bullet
		silverfish
		skeleton
		skeleton_horse
		slime
		small_fireball
		sniffer
		snow_golem
		snowball
		spawner_minecart
		spectral_arrow
		spider
		spruce_boat
		spruce_chest_boat
		squid
		stray
		strider
		tadpole
		text_display
		tnt
		tnt_minecart
		trader_llama
		trident
		tropical_fish
		turtle
		vex
		villager
		vindicator
		wandering_trader
		warden
		wind_charge
		witch
		wither
		wither_skeleton
		wither_skull
		wolf
		zoglin
		zombie
		zombie_horse
		zombie_villager
		zombified_piglin

#NBT - Compound
#Represents the NBT compound of an entity/block/item/file/string.
#NBT compounds can be merged by adding together, see examples.
#since 1.6.0
#Examples:
#set {_a} to nbt compound of player
#set {_nbt} to nbt compound of last spawned entity
#set {_n} to nbt compound from "{Invisible:1b}"
#add {_n} to nbt of target entity
type:
	patterns:
		nbt[ ]compound

#NBT - Tag Type
#Represents a type of NBT tag.
#You can read more about NBT types:
#
#McWiki [**NBT Data Types**](https://minecraft.wiki/w/NBT_formatData_types)
#
#SkBee Wiki [**NBT Data Types**](https://github.com/ShaneBeee/SkBee/wiki/NBT-Introdatatypes-in-nbt)
#since 1.10.0
#Examples:
#set byte tag "points" of {_nbt} to 1
#set compound tag "tool" of {_nbt} to nbt compound of player's tool
type:
	patterns:
		nbt[ ]type[s]

expression:
	return type: nbttype
	patterns:
		boolean tag
		byte array tag
		byte tag
		compound list tag
		compound tag
		double list tag
		double tag
		float list tag
		float tag
		int array tag
		int list tag
		int tag
		long list tag
		long tag
		short tag
		string list tag
		string tag
		uuid tag

#NamespacedKey
#NamespacedKeys are a way to declare and specify game objects in Minecraft,
#which can identify built-in and user-defined objects without potential ambiguity or conflicts.
#For more information see [**Resource Location**](https://minecraft.wiki/w/Resource_location) on McWiki.
#since 2.6.0
type:
	patterns:
		namespacedkey[s]

#Particle
#Represents a particle which can be used in the 'Particle Spawn' effect.
#Some particles require extra data, these are distinguished by their data type within the square brackets.
#DustOption, DustTransition and Vibration each have their own functions to build the appropriate data for these particles.
#NOTE: These are auto-generated and may differ between server versions.
#since 1.9.0
type:
	patterns:
		particle[s]

#Player Spawn Change Reason
#Represents the reasons why a player changed their spawn location.
#NOTE: These are auto-generated and may differ between server versions.
#since 3.4.0
type:
	patterns:
		player[ ]spawn[ ]change[ ]reason[s]

expression:
	return type: playerspawnchangereason
	patterns:
		bed
		command
		plugin
		reset
		respawn_anchor
		unknown

#Potion Type
#Represents the different types of potions (not potion effect types) used in vanilla potion items.
#since 3.8.0
type:
	patterns:
		potion[ ]type[s]

expression:
	return type: potiontype
	patterns:
		awkward
		fire_resistance
		harming
		healing
		infested
		invisibility
		leaping
		long_fire_resistance
		long_invisibility
		long_leaping
		long_night_vision
		long_poison
		long_regeneration
		long_slow_falling
		long_slowness
		long_strength
		long_swiftness
		long_turtle_master
		long_water_breathing
		long_weakness
		luck
		mundane
		night_vision
		oozing
		poison
		regeneration
		slow_falling
		slowness
		strength
		strong_harming
		strong_healing
		strong_leaping
		strong_poison
		strong_regeneration
		strong_slowness
		strong_strength
		strong_swiftness
		strong_turtle_master
		swiftness
		thick
		turtle_master
		water
		water_breathing
		weakness
		weaving
		wind_charged

#Property
#Represents the diffrent kinds of properties.
#See [**Property Wiki**](https://github.com/ShaneBeee/SkBee/wiki/Properties) for available properties.
type:
	patterns:
		propert(y|ies)

#RayTrace - Result
#The hit result of a ray trace.
#Only the hit position is guaranteed to always be available.
#The availability of the other attributes depends on what got hit
#and on the context in which the ray trace was performed.
#since 2.6.0
type:
	patterns:
		ray[ ]trace[ ]result[s]

#Recipe Choice
#Represents an Exact/Material Choice.
#MaterialChoice represents a set of materials/minecraft tags which can be used in some recipes.
#ExactChoice represents a special ItemStack used in some recipes.
#Requires Minecraft 1.13+
#since 1.10.0
#Examples:
#set {_a} to material choice of diamond sword, diamond shovel and diamond hoe
#set {_a} to material choice of every sword
#set {_a} to material choice of minecraft tag "doors"
type:
	patterns:
		recipe[ ]choice[s]

expression:
	return type: recipechoice
	patterns:
		see material choice expression

#Recipe Type
#Represents the types of recipes.
#since 2.6.0
type:
	patterns:
		recipe[ ]type[s]

expression:
	return type: recipetype
	patterns:
		blasting_recipe
		campfire_recipe
		complex_recipe
		furnace_recipe
		merchant_recipe
		shaped_recipe
		shapeless_recipe
		smithing_recipe
		smoking_recipe
		stonecutting_recipe

#Registry - Registry Key
#Represents a key for a Minecraft registry.
#Values in square brackets resemble the Skript type linked to the registry.
#Registry names are auto-generated based on the Minecraft registry, these may change at any time.
#since 3.8.0
type:
	patterns:
		registry[ ]key[s]

#Registry - Tag Key
#Represents a key for a Minecraft tag.
#since 3.8.0
type:
	patterns:
		tag[ ]key[s]

#Registry - Typed Key
#Represents the key for a value in a Minecraft registry.
#since 3.8.0
type:
	patterns:
		typed[ ]key[s]

#Respawn Reason
#Represents the reason the respawn event was called. Requires MC 1.19.4+
#NOTE: These are auto-generated and may differ between server versions.
#since 2.8.4
#Examples:
#on respawn:
#	if respawn reason = death respawn:
#		give player 10 diamonds
type:
	patterns:
		respawn[ ]reason[s]

expression:
	return type: respawnreason
	patterns:
		death_respawn
		end_portal_respawn
		plugin_respawn

#Scoreboard
#Represents the vanilla scoreboard of the server/players.
#This can be the main server scoreboard, or a custom scoreboard.
#Do note custom scoreboards are not persistent (do not save to the server).
#Multiple players can share a custom scoreboard.
#See [**Scoreboard**](https://minecraft.wiki/w/Scoreboard) on McWiki for more info.
#since 3.9.0
type:
	patterns:
		scoreboard[s]

#Scoreboard - Criteria
#Represents a criteria for a scoreboard objective.
#See [**Criteria**](https://minecraft.wiki/w/ScoreboardCriteria) on McWiki for more info.
#since 2.6.0
type:
	patterns:
		criteria[s]

#Scoreboard - Objective
#Represents an objective in a scoreboard.
#When deleting, the objective will be unregistered.
#See [**Objectives**](https://minecraft.wiki/w/ScoreboardObjectives) on McWiki for more info.
#since 2.6.0
type:
	patterns:
		objective[s]

#Scoreboard - Objective Display Slot
#Locations for displaying objectives to the player
#since 2.6.0
type:
	patterns:
		display[ ]slot[s]

expression:
	return type: displayslot
	patterns:
		below_name
		player_list
		sidebar
		sidebar_team_aqua
		sidebar_team_black
		sidebar_team_blue
		sidebar_team_dark_aqua
		sidebar_team_dark_blue
		sidebar_team_dark_gray
		sidebar_team_dark_green
		sidebar_team_dark_purple
		sidebar_team_dark_red
		sidebar_team_gold
		sidebar_team_gray
		sidebar_team_green
		sidebar_team_light_purple
		sidebar_team_red
		sidebar_team_white
		sidebar_team_yellow

#Scoreboard - Objective Render Type
#Controls the way in which an Objective is rendered client side.
#since 2.6.0
type:
	patterns:
		render[ ]type[s]

expression:
	return type: rendertype
	patterns:
		hearts
		integer

#Signed Chat Message
#Represents a signed chat message.
#since 3.5.0
#Examples:
#remove all players from signed chat message  will remove the message from the client
type:
	patterns:
		signed[ ]message[s]

#Spellcaster Spell
#Represents the different spells of a spellcaster.
#NOTE: These are auto-generated and may differ between server versions.
#since 1.17.0
type:
	patterns:
		spell[s]

expression:
	return type: spell
	patterns:
		blindness
		disappear
		fangs
		none
		summon_vex
		wololo

#Statistic
#Represents the different statistics for a player.
#Some stats require extra data, these are distinguished by their data type within the square brackets.
#Underscores in stat names are not required, you can use spaces.
#NOTE: 'play_one_minute' stat's name is misleading, it's actually amount of ticks played.
#NOTE: These are auto-generated and may differ between server versions.
#since 1.17.0
type:
	patterns:
		statistic[s]

#Structure
#Represents a structure that can be saved or pasted into a world.
#In Minecraft these are actually called [**Structure Templates**](https://minecraft.wiki/w/Structure_file).
#These can also be placed using the `/place template` command.
#Use the 'Structure-Object' expression to get a new/existing structure object.
#When using `all structures`, this will only show structures that have been currently loaded into the game.
#since 1.12.0
type:
	patterns:
		structure[s]

#Structure - Mirror
#Represents the different states of mirroring for a structure. Requires MC 1.17.1+
#since 1.12.0
#Examples:
#set structure mirror of structure {_s} to front back
type:
	patterns:
		mirror[s]

expression:
	return type: mirror
	patterns:
		front_back
		left_right
		none

#Structure - Rotation
#Represents the different states of rotation for a structure. Requires MC 1.17.1+
#since 1.12.0
#Examples:
#set structure rotation of structure {_s} to clockwise 90
type:
	patterns:
		structure[ ]rotation[s]

#Team
#Represents a scoreboard team. Teams can be deleted (unregistered).
#Players, entities and strings can be added to and removed from teams.
#Teams off the main scoreboard cannot be serialized/saved to variables.
#See [**Teams**](https://minecraft.wiki/w/ScoreboardTeams) on McWiki for more info.
#since 1.16.0, 2.11.0 (add/remove/delete)
#Examples:
#add all players to team of player
#add all players to team named "a-team"
#remove all entities from team named "the-mobs"
#delete team named "z-team"
type:
	patterns:
		team[s]

#Team - Option
#Represents an option for a team.
#since 1.16.0
type:
	patterns:
		team[ ]option[s]

expression:
	return type: teamoption
	patterns:
		collision_rule
		death_message_visibility
		name_tag_visibility

#Team - Option Status
#Represents an option status for a team option
#since 1.16.0
type:
	patterns:
		team[ ]option[ ]status

expression:
	return type: teamoptionstatus
	patterns:
		always
		for_other_teams
		for_own_team
		never

#TextComponent - Audience
#Represents things in Minecraft (players, entities, worlds, console, etc) which can receive media (messages, bossbars, action bars, etc).
#since 3.8.0
type:
	patterns:
		audience[s]

#TextComponent - Text Component
#Text components used for hover/click events. Due to the complexity of these, 
#they can NOT be long term stored in variables. 
#Requires a PaperMC server.
#since 1.5.0
#Examples:
#set {_t} to text component from "CLICK FOR OUR DISCORD"
#add hover event showing "Clicky Clicky!" to {_t}
#add click event to open url "https://OurDiscord.com" to {_t}
#send component {_t} to player
type:
	patterns:
		text[ ]component[s]

#Timespan Period
#Represents the time periods of a Timespan.
#since 3.9.0
type:
	patterns:
		time[ ]span[ ]period[s]

expression:
	return type: timespanperiod
	patterns:
		day
		hour
		millisecond
		minute
		month
		second
		tick
		week
		year

#World Creator
#Used to create new worlds.
#since 1.8.0
#Examples:
#set {_creator} to new world creator named "my-world"
type:
	patterns:
		world[ ]creator[s]

#World Type
#The type of a world
#since 1.8.0
#Examples:
#set world type of {_creator} to flat
type:
	patterns:
		world[ ]type[s]

expression:
	return type: worldtype
	patterns:
		amplified
		flat
		large_biomes
		normal

#tagresolver
#Represents an object to replace text in a mini message.
#since 3.5.0
#Examples:
# Create a component
#set {_t} to translate component of player's tool
#add hover event showing player's tool to {_t}
# Use this component in the resolver to replace "<item>" in the mini message
#set {_r} to resolver("item", {_t})
# setup the mini message with the replacement placeholder
#set {_m} to mini message from "<rainbow> Hey guys check out my <item> aint she a beaut?" with {_r}
#send component {_m}
type:
	patterns:
		tag[ ]resolver[s]

#Abort Creature Spawn
#Abort a creature spawn event, preventing it from retrying more attempts after canceling.
#Aborting should only be done if you're blanket blocking this entity type from spawning.
#since 2.16.0
#Examples:
#on pre creature spawn of an animal:
#	cancel event
#	abort creature spawn
effect:
	patterns:
		[un]abort creature spawn

#Advancement - Load
#Load an advancement represented by the specified string into the server.
#The advancement format is governed by Minecraft and has no specified layout.
#It is currently a JSON object, as described by [**McWiki**](https://minecraft.wiki/w/Advancement).
#Loaded advancements will be stored and persisted across server restarts and reloads.
#NOTE: Bukkit has marked this as 'Unsafe', so please use at your own risk.
#Watch console for errors when loading an advancement.
#since 1.17.0
#Examples:
#¯\_(ツ)_/¯
effect:
	patterns:
		load advancement %string% with (key|id) %string%

#Advancement - Progress Criteria
#Award or revoke criteria of an advancement progress.
#since 1.17.0
#Examples:
#TODO
effect:
	patterns:
		(award|revoke) criteria %string% of %advancementpros%

#Apply Lock to Block
#Apply an item as a lock for a block. Requires Minecraft 1.21.2+
#since 3.6.2
#Examples:
#apply lock to target block using player's tool
#apply lock to {_blocks::*} using stick named "Mr Locky"
#remove lock from target block
effect:
	patterns:
		apply lock to %blocks% using %itemstack%
		(remove|clear) lock (of|from) %blocks%

#BlockState - Update
#Attempts to update the block represented by this state.
#Unless force is applied, this will not modify the state of a block if it is no longer
#the same type as it was when this state was taken.
#If done without physics updates, it will not trigger a physics update on surrounding blocks which
#could cause them to update or disappear.
#since 2.13.0
#Examples:
#set {_state} to blockstate of event-block
#set event-block to air
#wait 1 minute
#force update {_state} without physics updates
effect:
	patterns:
		[force] update %blockstates% [without (neighbour|physics) updates]

#Bound - Resize
#Resize a current bound.
#Full will mark the bound to use the lowest/highest points of the world.
#The second pattern will mark as a full bound without changing the locations.
#NOTE: World of a bound cannot be changed.
#**SPECIAL NOTE**:
#- When using locations = The bound resizing will use the locations you pass thru
#- When using blocks = The bound resizing will extend the x/y/z axes by 1 to fully include those blocks.
#since 2.5.3
#Examples:
#resize bound bound with id "test" between {_l1} and {_l1}
#resize bound bound with id "test" between block at{_l1} and block at {_l1}
#resize full bound bound with id "test"
effect:
	patterns:
		resize [full] bound %bound% (within|between) %block/location% and %block/location%
		resize full bound %bound%

#Break Blocks with Effects
#Breaks blocks as if a player had broken them. Will drop items, play particles and sounds. Requires PaperMC.
#Optionally you can trigger it to drop experience as well.
#Optionally you can include an item which is used to determine which drops the block will drop.
#since 3.6.1
#Examples:
#break blocks in radius 2 around target block with effects
#break {_blocks::*} with effects and with xp
#break {_blocks::*} with effects and with xp using player's tool
effect:
	patterns:
		break %blocks% [naturally] with effects [[and] with (experience|exp|xp)] [using %itemtype%]

#Chunk - Load/Unload
#Load or unload a chunk.
#**Options**:
#- `%number%,[ ]%number%` = Represents the X/Z coords of a chunk. Not to be confused with a location. Chunk coords are essentially a location divided by 16, example: Chunk 1/1 = Location 16/16
#- `async` = Will load the chunk off the main thread (Requires PaperMC). Your code will halt whilst waiting for the chunk to load.
#- `with ticket` = Will add a ticket to the chunk, preventing it from unloading until you explicitly unload it or the server stops.
#- `without saving` = Will prevent the chunk from saving when unloading.
#since 1.17.0, 2.11.0 (async)
#Examples:
#load chunk at 1,1 in world "world"
#load chunk at location(1,1,1, world "world")
#load chunk at 150,150 in world "world"
#load chunk at 150,150 in world "world" with ticket
#async load chunk at {_loc}
#async load chunk at 100,100 in world "world"
#async load chunk at 1,1 in world of player with ticket
#unload chunk at 1,1 in world "world"
effect:
	patterns:
		[async] load chunk at %number%,[ ]%number% (in|of) [world] %world% [with ticket]
		unload chunk at %number%,[ ]%number% (in|of) [world] %world%
		[async] load chunk at %location% [with ticket]
		unload chunk at %location% [without saving]
		unload %chunks% [without saving]

#ChunkGenerator - Populate Tree
#Grow a tree in a ChunkGenerator `block pop` section.
#The vector represents chunk position not world position.
#since 3.5.3
#Examples:
#populate cherry tree at vector(0, 64, 15)
effect:
	patterns:
		populate %bukkittreetype% at %vectors%

#ChunkGenerator - Structure Place
#Place a structure in a block populator.
#Due to the chunk not being finalized yet,
#the standard structure place effect will not work during generation.
#Since the chunk isn't finalized yet, we use a vector instead of a location,
#the vector will represent a chunk position not a world position.
#since 3.5.0
#Examples:
#place chunkdata structure {-s} at vector({_x}, {_y}, {_z})
#place chunkdata structure {-s} at vector(0,64,0)
effect:
	patterns:
		place chunk[ ]data structure %structure% at %vector%

#ChunkGenerator - WorldCreator Generator
#Set the chunk generator of a world creator.
#since 3.5.0
#Examples:
#on load:
#	if world "mars" is not loaded:
#		set {_w} to world creator named "mars"
#		set chunk generator of {_w} to chunk generator with id "mars"
#		load world from creator {_w}
effect:
	patterns:
		set chunk generator of %worldcreator% to chunk generator with id %string%

#DamageSource - Damage Entity
#Damage entities using a damage source. 
#This has the same functionality as Minecraft's `/damage` command.
#Requires MC 1.20.4+
#since 3.3.0
#Examples:
#set {_source} to damage source from arrow directly by (random element of all entities)
#set {_source} to damage source of dragon breath
#set {_source} to damage source of magic
#set {_source} to damage source of mob_attack_no_aggro caused by target entity of player
#damage player by 100 with {_source}
effect:
	patterns:
		damage %entities% by %number% with %damagesource%

#Dispatch Command
#Similar to Skript's command effect, with the option to use any command sender
#(vs. being restricted to only player/console), and the option to temporarily attach a permission.
#The attached permission will only last for 1 tick, and automatically remove. This is not persistent.
#since 3.10.0
#Examples:
#dispatch player command "give %player% stick" with permission "minecraft.command.give"
#dispatch (random element of all mobs) command "/tell %player% hi"
effect:
	patterns:
		dispatch %commandsender% command %string% [with permission %string%]

#Drop Held Item
#Forces the player to drop their currently held item.
#By default it will drop one of their held item, or you can optionally drop the whole stack.
#since 1.17.0
#Examples:
#make player drop all of held item
#force all players to drop all of their held items
effect:
	patterns:
		(make|force) %players% [to] drop [all of] [their] held item[s]

#Entity Damage Entity
#Make an entity damage another entity by a given amount.
#since 2.8.0
#Examples:
#make last spawned entity damage player by 10
#make target entity damage player by 1
effect:
	patterns:
		make %entity% damage %livingentities% by %number%

#Entity Effect
#Play different EntityEffects on entities.
#
#Note: Some effects will only play on certain entities, ex: `wolf_shake` will only play on a wolf.
#since 3.0.0
#Examples:
#play entity effect break_equipment_main_hand on player
#play entity effect death on all mobs
effect:
	patterns:
		play entity effect %entityeffect% on %entities%

#EntityBlockStorage - Add/Release entities
#Add/release entities to/from blocks which can store entities.
#When releasing bees at night/during rain, they will immediately go back in their hive, use the optional timespan to keep them outside.
#You can optionally put the released entities into a variable (see examples).
#As of 1.15 this only includes beehives/bee nests! Requires Spigot/Paper 1.15.2+
#since 1.0.0
#Examples:
#add last spawned bee to storage of target block of player
#release all entities from storage of target block of player
#release all entities from storage of event-block for 2 minutes
#release all entities from storage of target block of player for 1 minute into {_bees::*}
effect:
	patterns:
		release [all] entities from [storage of] %blocks% [for %timespan%] [into %objects%]
		add %entities% to storage of %block%

#FastBoard - Clear
#Clear a fastboard of a player.
#NOTE: You do NOT need to clear a fastboard before changing lines.
#since 1.16.0
#Examples:
#clear fastboard of all players
#clear fastboard of player
effect:
	patterns:
		clear [score|fast]board[s] of %players%
		clear %players%'[s] [score|fast]board[s]

#FastBoard - Toggle
#Toggle a fastboard on or off.
#since 1.16.0
#Examples:
#toggle fastboards of all players off
#toggle player's fastboard
effect:
	patterns:
		toggle [score|fast]board[s] of %players% [[to ]((on|true)|(off|false))]
		toggle %players%'[s] [score|fast]board[s] [[to ]((on|true)|(off|false))]

#Fish Hook - Pull In
#Pulls in the entity hooked to this fish hook.
#since 2.8.0
#Examples:
#pull in hooked entity of {_fishHook}
effect:
	patterns:
		pull in hooked entit(y|ies) of %entities%

#Give or Drop Item
#Attempts to give an item to a player and if they dont have room it will drop instead.
#since 2.14.0
#Examples:
#give or drop a diamond to player
#give or drop {_items::*} to all players
effect:
	patterns:
		give or drop %itemtypes% to %players%

#Hurt Animation
#Makes this living entity flash red as if they were damaged. Requires MC 1.20.1+
#
#Note: Yaw = The direction the damage is coming from in relation to the entity,
#where 0 is in front of the player, 90 is to the right, 180 is behind, and 270 is to the left
#since 2.15.0
#Examples:
#play hurt animation on player
#play hurt animation on all players
#play hurt animation on all players with yaw 270
#play hurt animation on all mobs
effect:
	patterns:
		play hurt animation on %entities% [with yaw %number%]

#ItemComponent - Apply Effects
#Used to apply potion/consume effects in a potion contents's `custom_effects` section, death protection's' `death_effects` section and consumable's `on_consume_effects` section.
#**Patterns**:
#- `%potioneffects%` = Used to apply a potion effect in a potion contents section.
#- `%potioneffects% with probability %-number%` = Used to apply a potion/consume effect in a death protection/consumable section.
#- `remove effects %potioneffecttypes/typedkeys%` = Used to apply a `remove effects` consume effect in a death protection/consumable section.
#- `clear all effects` = Used to apply a `clear all effects` consume effect in a death protection/consumable section.
#- `teleport randomly within [[a] diameter [of]] %number% [blocks|meters]` = Used to apply a `teleport randomly` consume effect in a death protection/consumable section.
#- `play sound %string/typedkey%` - Used to apply a `play sound` consume effect in a death protection/consumable section.
#since 3.8.1
#Examples:
#See examples of the respective sections that use this effect.
effect:
	patterns:
		apply -> %potioneffects%
		apply -> %potioneffects% with probability %number%
		apply -> remove effects %potioneffecttypes/typedkeys%
		apply -> clear all effects
		apply -> teleport randomly within [[a] diameter [of]] %number% [blocks|meters]
		apply -> play sound %string/typedkey%

#ItemComponent - Clear Components
#Clear components of an item. Requires Minecraft 1.21+
#**NOTE**: This will **NOT** clear vanilla components, it will only clear custom added components.
#since 3.5.8
#Examples:
#clear food component of player's tool
#clear tool component of player's tool
#clear attribute modifier components of player's tool
effect:
	patterns:
		clear (food|tool|attribute modifier) component[s] of %itemtypes%

#List/Unlist Players
#List/unlist a player for a player. (show/hide them in PlayerList for each other). Requires PaperMC 1.20.1+
#since 2.17.0
#Examples:
#unlist all players for player
#list (all players in world of player) for player
effect:
	patterns:
		[un]list %players% for %players%

#Load/Unload/Delete World
#Load a world from a world creator.
#Worlds created/loaded with a world creator, are saved in the 'plugins/SkBee/worlds.yml' file
#and automatically loaded on server start if auto-load is enabled in the config.
#If you wish to import a world, just use a world creator with a name that matches that world folder.
#You can load a world from a name (assuming this world is in your world directory and not loaded).
#You can unload a world with an option to save/not save (defaults to saving).
#You can also delete a world, but only a custom world.
#since 1.8.0
#Examples:
#set {_w} to a new world creator named "my-world"
#load world from world creator {_w}
#load world "my-world"
#unload world world("my-world")
effect:
	patterns:
		load world from [[world] creator] %worldcreator%
		load world %string%
		unload [world] %world% [and (save|(do not|don't) save)]
		delete world file for [world] %string%

#LootTable - Fill Inventory
#Fill an inventory with a predefined LootTable.
#This inventory must belong to a block or entity (custom inventories will not work).
#Optionals:
#Some loot tables will require some of these values whereas others may not.
#`seed` = Represents the random seed used to generate loot (if not provided will generate randomly).
#`looting modifier` = Set the looting enchant level equivalent to use when generating loot.
#Values less than or equal to 0 will force the LootTable to only return a single Item per pool.
#`luck` = How much luck to have when generating loot.
#`killer/looter` = The Player that killed/looted. This Player will be used to get the looting level if looting modifier is not set.
#`looted entity` = The Entity that was killed/looted.
#since 3.4.0
#Examples:
#set {_loottable} to loottable from key "minecraft:chests/ancient_city"
#fill inventory of target block from {_loottable}
#fill inventory of player from (loottable from key "minecraft:gameplay/fishing")
effect:
	patterns:
		fill %inventories% from %loottable% [with seed %number%] [with looting modifier %number%] [with luck %number%] [with (killer|looter) %player%] [with looted entity %entity%]

#Merchant - Open
#Open a merchant/villager to a player.
#since 1.17.0
#Examples:
#set {_m} to new merchant named "Le Merchant"
#open merchant {_m} to player
effect:
	patterns:
		open merchant %merchant/entity% to %player%

#NBT - Save File
#Manually save the NBT from a file. When getting the NBT compound from a file, changing values in the compound will
#not be automatically applied to the file, and saving will have to be done manually.
#since 1.14.0
#Examples:
#set {_n} to nbt compound from file "plugins/maScript/some-data.nbt"
#set tag "ma-tag" of {_n} to 32
#save nbt file of {_n}
effect:
	patterns:
		save nbt file[s] (from|for|of) %nbtcompounds%

#NBT - Set Block with NBT
#Set a block at a location to a block with NBT. BlockData is also supported when using MC 1.13+ and Skript 2.5+
#since 1.0.0
#Examples:
#set {_n} to nbt compound from "{CustomName:""{\""text\"":\""&aFurnieFurnace\""}""}"
#set nbt-block at player to west facing furnace with nbt {_n}
#set nbt-block at player to furnace[facing=west] with nbt {_n}
#set {_n} to nbt compound from "{CustomName:""{\""text\"":\""&cHoppieHopper\""}""}"
#set nbt-block at event-location to hopper with nbt {_n}
#set {_nbt} to nbt compound from "{custom:{BlockOwner:"%uuid of player%"}}"
#set nbt-block at player to coal ore with nbt {_n}
effect:
	patterns:
		set (nbt[(-| )]block|tile[(-| )]entity) %directions% %locations% to %itemtype/blockdata% with [nbt] %nbtcompound%

#NBT - Spawn Entity with NBT
#Spawn an entity at a location with NBT.
#The ability to spawn falling was added in 2.10.0 as a temp effect until Skript properly handles falling blocks
#with block data.
#since 1.0.0
#Examples:
#set {_n} to nbt compound from "{NoAI:1b}"
#spawn sheep at player with nbt {_n}
#spawn 1 of zombie at player with nbt nbt compound from "{NoGravity:1b}"
#spawn an armor stand at player with nbt from "{Small:1b,NoBasePlate:1b,Marker:1b}"
#spawn falling snow[layers=3] at target block with nbt from "{HurtEntities:1b}"
effect:
	patterns:
		spawn %entitytypes% [%directions% %locations%] with [nbt] %nbtcompound%
		spawn %number% of %entitytypes% [%directions% %locations%] with [nbt] %nbtcompound%
		spawn falling %blockdata% [%directions% %locations%] with [nbt] %nbtcompound%

#NBT - Tag Delete
#Delete an NBT tag without having to specify a tag type.
#since 3.5.0
#Examples:
#delete tag "minecraft:enchantments" of nbt of player's tool
#delete tag "custom;level" of nbt of player
effect:
	patterns:
		delete tag[s] %strings% of %nbtcompound%

#Open Container Animation
#Play the open/close animation on a lidded block (ie: chest, barrel or shulker box).
#Note: When using the open method, the block will basically be locked 'open', a player opening/closing the block will not close the lid.
#Requires Minecraft 1.16+
#since 1.10.0
#Examples:
#play open animation on target block
#play close animation on all blocks in radius 3 around player
effect:
	patterns:
		play (open|close) animation on %blocks%

#Open Real Inventory
#Open real inventories to players.
#This will open a real inventory object instead of a custom inventory object to players.
#Most of these (except enchanting and workbench) require a PaperMC server.
#`at %location%` is used to open an inventory at an actual block (Optional, will default to player's location).
#Some inventories require a location of a block for extra functionality,such as an enchanting table uses nearby bookshelves to determine enchantment level.
#since 3.6.0
#Examples:
#open real anvil inventory to player
#open real anvil named "Mr Anvil" to player
#open real anvil at location(1,1,1) named "Senor Anvil" to player
effect:
	patterns:
		open real anvil [inventory] [at %location%] [named %string%] to %players%
		open real cartography [table] [inventory] [at %location%] [named %string%] to %players%
		open real enchanting [table] [inventory] [at %location%] [named %string%] to %players%
		open real grindstone [inventory] [at %location%] [named %string%] to %players%
		open real loom [inventory] [at %location%] [named %string%] to %players%
		open real smithing [table] [inventory] [at %location%] [named %string%] to %players%
		open real stonecutter [inventory] [at %location%] [named %string%] to %players%
		open real workbench [inventory] [at %location%] [named %string%] to %players%

#Open Sign
#Open a sign's GUI to a player, to allow them to edit it.
#If it wasn't obvious, the sign must actually be placed in the world, it's NOT a virtual sign.
#Requires Paper (not sure which version, but at least 1.12.x).
#Spigot added support for this in MC 1.18.
#Front/Back support added in MC 1.20.
#
#**NOTE**: This appears to no longer work in 1.20+ with a distance of 7.5+ (client side issue).
#since 1.5.2, 2.14.0 (sides)
#Examples:
#open sign gui of target block to player
#open target block's sign gui to player
#open sign back of target block to player
effect:
	patterns:
		open sign [gui] [(front|back)] [(for|of)] [%direction%] %location% to %players%
		open [%direction%] %location%'[s] sign [gui] [(front|back)] to %players%

#Parse Effect
#This will parse a string as an effect, and execute it. Works the same as Skript's 'effect commands'.
#since 1.15.0
#Examples:
#on join:
#	parse effect "give player a diamond sword"
effect:
	patterns:
		parse effect[s] %strings% [from %commandsender%]

#Particle Spawn
#Spawn a particle. This system is more inline with how Bukkit deals with particles, hence the choices in the pattern.
#Some particles may be affected differently by these values, so let's break them down:
#`first number` = count, how many particles to spawn at once. (use '0' if you notice the particle kinda flies away.)
#`particle` = the particle to spawn.
#`using` = the data used for this particle (some particles like 'block', 'item' and 'dust' require more data).
#`location` = where you are going to spawn the particle.
#`delta` = a vector with the maximum random offset. The position of each particle will be randomized positively and negatively by the offset parameters on each axis.
#Some particles use the delta to set color/direction if count is set to 0.
#`extra` = the extra data for this particle, depends on the particle used (normally speed).
#`force` = whether to send the particle to players within an extended range and encourage 
#their client to render it regardless of settings (this only works when not using `for player[s]`) (default = false)
#`for %players%` = will only send this particle to a player, not the whole server.
#since 1.9.0
#Examples:
#make 3 of item particle using diamond at location of player
#make 1 of block particle using dirt at location of target block
#make 10 of poof at player with offset vector(2, 2, 2) with extra 0.5
#draw 20 of dust using dustOption(blue, 10) at location above target block
#draw 1 of dust_color_transition using dustTransition(blue, green, 3) at location of player
#draw 1 of vibration using vibration({loc1}, {loc2}, 1 second) at {loc1} with force
#make 0 of shriek using 1 above target block of player
#make 1 of sculk_charge using 0.1 at {_loc} with force
effect:
	patterns:
		(lerp|draw|make) %number% [of] %particle% [particle] [using %object%] %directions% %locations% [with (delta|offset) %vector%] [with extra %number%] [(with force)] [(for|to) %players%]

#Random Tick Block
#Causes the block to be ticked randomly.
#This will tick the block the same way Minecraft randomly ticks according to the randomTickSpeed gamerule.
#Requires Paper 1.19+
#since 3.0.0
#Examples:
#random tick blocks in radius 3 around target block
effect:
	patterns:
		random[ly] tick %blocks%

#Ranged Attack
#Make a RangedEntity perform a ranged attack. Requires PaperMC.
#
#`with charge` = How "charged" the attack is (how far back the bow was pulled for Bow attacks).
#This should be a value between 0 and 1, represented as targetDistance/maxDistance.
#
#RangedEntities: Drowned, Illusioner, Llama, Piglin, Pillager, Skeleton, Snowman, Stray, TraderLlama, Witch, Wither, WitherSkeleton.
#since 2.17.0
#Examples:
#make last spawned entity range attack player with charge 0.5
effect:
	patterns:
		make %livingentity% range attack %livingentities% [with charge %number%]

#Recipe - Cooking
#Register new cooking recipes. On 1.13+ you can register recipes for furnaces.
#On 1.14+ you can also register recipes for smokers, blast furnaces and campfires.
#The ID will be the name given to this recipe. IDs may only contain letters, numbers, periods, hyphens, a single colon and underscores,
#NOT SPACES!!! By default, if no namespace is provided, recipes will start with the namespace "skbee:",
#this can be changed in the config to whatever you want. IDs are used for recipe discovery/unlocking recipes for players.
#You may also include an optional group for recipes. These will group the recipes together in the recipe book.
#since 1.0.0
#Examples:
#on skript load:
#	register new furnace recipe for diamond using dirt with id "furnace_diamond"
#	register new blasting recipe for emerald using dirt with id "my_recipes:blasting_emerald"
#	register new smoking recipe for cooked cod named "Hot Cod" using puffer fish with id "smoking_cod"
#1.13+ for furnaces. 1.14+ for smokers, blast furnaces and campfires.
effect:
	patterns:
		register [new] (furnace|(blast furnace|blasting)|smok(er|ing)|campfire) recipe for %itemtype% (using|with ingredient) %itemtype/recipechoice% with id %string% [[and ]with exp[erience] %number%] [[and ]with cook[ ]time %timespan%] [in group %string%]

#Recipe - Discovery
#Lock/Unlock recipes for players. This uses the IDs we created earlier when registering recipes, you can also lock/unlock minecraft recipes. Requires MC 1.13+
#since 1.0.0
#Examples:
#unlock recipe "smoking_cod" for all players
#unlock recipe "minecraft:baked_potato_from_smoking" for all players
#unlock minecraft recipe "baked_potato_from_smoking" for all players
#unlock recipe "some_plugin:some_recipe" for all players
#on pickup of diamonds:
#	discover recipe "fancy_diamonds" for player
effect:
	patterns:
		(discover|unlock) [(custom|mc|minecraft)] recipe[s] [with id[s]] %strings% for %players%
		(undiscover|lock) [(custom|mc|minecraft)] recipe[s] [with id[s]] %strings% for %players%

#Recipe - Ingredients
#Set/add to the ingredients of a shaped/shapeless recipe.
#This is specifically used in the ingredients section of shaped/shapeless recipe section.
#`set ingredient` is used for shaped recipes.
#`add ingredient` is used for shapeless recipes.
#since 3.0.0
#Examples:
#see shaped/shapeless recipe sections.
effect:
	patterns:
		set ingredient (of|for) %string% to %itemstack/recipechoice/minecrafttag%
		add %itemstack/recipechoice/minecrafttag% to ingredients

#Recipe - Knowledge Book
#Add/Remove custom or minecraft recipes to/from a knowledge book item.
#Optional string for plugin name, to add recipes from other plugins. Requires MC 1.13+
#since 1.0.0
#Examples:
#add custom recipe "my_recipe" to player's tool
#add recipe "my_recipes:fancy_recipe" to player's tool
#add minecraft recipe "cooked_cod_from_campfire_cooking" to {_book}
#add recipe "minecraft:cooked_cod_from_campfire_cooking" to {_book}
#add recipe "some_recipe" from plugin "SomePlugin" to player's tool
#add recipe "someplugin:some_recipe" to player's tool
effect:
	patterns:
		add [(custom|(mc|minecraft))] recipe[s] [with id[s]] %strings% [from plugin %string%] to %itemtype%
		remove [(custom|(mc|minecraft))] recipe[s] [with id[s]] %strings% [from plugin %string%] from %itemtype%

#Recipe - Remove
#Remove a recipe from your server. Recipes can be removed at any time 
#but it is best to do so during a server load event. If a recipe is removed whilst a player is online 
#it will still show up in their recipe book, but they will not be able to craft it. If need be, you can get 
#a list of all recipes by simply typing "/minecraft:recipe give YourName " in game.
#You can remove Minecraft recipes, custom recipes and recipes from other plugins. Requires MC 1.13+
#since 1.0.0
#Examples:
#remove mc recipe "acacia_boat"
#remove minecraft recipe "cooked_chicken_from_campfire_cooking"
#remove recipe "minecraft:diamond_sword"
#remove all minecraft recipes
#remove all recipes
#remove custom recipe "my_recipe"
#remove recipe "another_recipe"
#remove recipe "some_plugin:some_recipe"
effect:
	patterns:
		remove [(custom|mc|minecraft)] recipe[s] %strings%
		remove all [((mc|minecraft))] recipe[s]

#Recipe - Shaped/Shapeless
#Register a new shaped/shapeless recipe for a specific item using custom ingredients.
#Recipes support items and material choices for ingredients. Material choices allow you to use Minecraft tags or lists of items.
#The ID will be the name given to this recipe. IDs may only contain letters, numbers, periods, hyphens, a single colon and underscores,
#NOT SPACES!!! By default, if no namespace is provided, recipes will start with the namespace "minecraft:",
#this can be changed in the config to whatever you want. IDs are used for recipe discovery/unlocking recipes for players.
#You may also include an optional group for recipes. These will group the recipes together in the recipe book.
#NOTE: Recipes with 4 or less ingredients will be craftable in the player's crafting grid.
#Requires MC 1.13+
#since 1.0.0
#Examples:
#on load:
#	register new shaped recipe for elytra using air, iron chestplate, air, air, iron chestplate and air with id "my_recipes:elytra"
#	set {_s} to emerald named "&3Strong Emerald"
#	register new shaped recipe for {_s} using emerald, emerald, air, emerald, emerald and air with id "strong_emerald"
#	register new shaped recipe for diamond chestplate named "&3Strong Emerald Chestplate" using {_s}, air, {_s}, {_s}, {_s}, {_s}, {_s}, {_s} and {_s} with id "strong_emerald_chestplate"
#	set {_a} to material choice of every plank
#	register new shaped recipe for jigsaw block using {_a}, {_a}, {_a}, {_a}, {_a}, {_a}, {_a}, {_a} and {_a} with id "jigsaw"
#1.13+
effect:
	patterns:
		register [new] (shaped|shapeless) recipe for %itemtype% (using|with ingredients) %itemtypes/recipechoices% with id %string% [in group %string%]

#Recipe - Smithing
#Register a new smithing recipe.
#The ID will be the name given to this recipe. IDs may only contain letters, numbers, periods, hyphens, a single colon and underscores,
#NOT SPACES!!! By default, if no namespace is provided, recipes will start with the namespace "minecraft:",
#this can be changed in the config to whatever you want. IDs are used for recipe discovery/unlocking recipes for players.
#Note: While 'custom' items will work in these recipes, it appears the smithing table will not recognize them. Requires MC 1.16+
#
#NOTE:Temporarily removed in 1.20+ as Minecraft has changed how these recipes work!
#since 1.4.2
#Examples:
#on load:
#	register new smithing recipe for diamond chestplate using an iron chestplate and a diamond with id "smith_diamond_chestplate"
effect:
	patterns:
		register [new] smithing recipe for %itemtype% using %itemtype/recipechoice% and %itemtype/recipechoice% with id %string%

#Recipe - StoneCutting
#Register a new stone cutting recipe.
#The ID will be the name given to this recipe. IDs may only contain letters, numbers, periods, hyphens, a single colon and underscores,
#NOT SPACES!!! By default, if no namespace is provided, recipes will start with the namespace "minecraft:",
#this can be changed in the config to whatever you want. IDs are used for recipe discovery/unlocking recipes for players.
#You may also include an optional group for recipes. These will group the recipes together in the recipe book.
#Requires MC 1.13+
#since 1.0.0
#Examples:
#on skript load:
#	register new stone cutting recipe for diamond using diamond ore with id "cutting_diamond"
#1.14+
effect:
	patterns:
		register [new] stone[ ]cutt(ing|er) recipe for %itemtype% (using|with ingredient) %itemtype/recipechoice% with id %string% [in group %string%]

#Refresh Chunk
#Resends chunks to the clients. This is useful if you change a biome and need to refresh the client.
#The two numbers represent a chunk's X/Y coords, NOT a location. A chunk's X/Y coords are basically
#a location divided by 16. Ex: Chunk 1/1 would be at location X=16, Z=16.
#since 3.4.0
#Examples:
#set biome of block at player to plains
#refresh chunk at player
#refresh chunk at 1,1 in world "world"
effect:
	patterns:
		refresh [chunk[s]] %chunks%
		refresh chunk at %number%,[ ]%number% (in|of) [world] %world%

#Resource Pack Remove
#Remove all resource packs from a player or remove resource packs from uuids. Requires Minecraft 1.20.4+
#since 3.4.0
#Examples:
#remove all resource packs from player
#remove resource pack with uuid {pack::1} from player
#remove resource packs with uuids {pack::*} from player
effect:
	patterns:
		remove all resource packs from %players%
		remove resource pack[s] with (uuid|id)[s] %strings% from %players%

#Resource Pack Send
#Send a resource pack to a player with a UUID, optional hash, optional prompt message, and the option to force it.
#The uuid is used to later remove the pack from the player if need be. Requires Minecraft 1.20.4+
#since 3.4.0
#Examples:
#set {pack::1} to random uuid
#send resource pack from url "some.url" with uuid {pack::1} to all players
#send resource pack from url "some.url" with uuid {pack::1} to all players with force
#send resource pack from url "some.url" with uuid {pack::1} with prompt "This Adds Cool Stuff!!!" to player with force
effect:
	patterns:
		send [the] resource pack [from [[the] URL]] %string% with (uuid|id) %string% [with hash %string%] [with prompt %string%] to %players% [with force]

#Send Block Damage
#Send fake block damage to a player.
#
#Number = The amount of damage (a number between 0 and 1) to be applied to the block.
#
#Entity = the entity who is damaging the block. An entity can only damage 1 block at a time.
#
#By Entity/Number = The entity/entityID which damaged the block.
#since 2.6.0
#Examples:
#make player see damage of target block as 0.5
#make player see damage of target block as 0.5 by random element of all entities
#make player see damage of target block as 0.5 from random integer between 1 and 10000
effect:
	patterns:
		make %players% see damage of %block% as %number% [(by|from) %entity/number%]

#Send Equipment Change
#Send an equipment change for an entity. This will not actually change the entity's equipment in any way.
#since 3.4.0
#Examples:
#make player see hand slot of target entity as diamond sword
#make all players see off hand slot of player as shield
effect:
	patterns:
		make %players% see %equipmentslots% of %livingentities% as %itemtype%

#Server Tick - Sprint
#Attempts to initiate a sprint, which executes all server ticks at a faster rate then normal.
#See [**Tick Command**](https://minecraft.wiki/w/Commands/tick) on McWiki for more details.
#Requires Minecraft 1.20.4+
#since 3.1.0
#Examples:
#request game to sprint 10 ticks
#stop sprinting game
effect:
	patterns:
		request (game|server) to sprint %timespan%
		stop sprinting (game|server)

#Server Tick - Step Server
#Steps the game a certain amount of ticks if the server is currently frozen.
#Steps occur when the server is in a frozen state which can be started by either using
#the in game `/tick freeze` command or the `server frozen state` expression.
#See [**Tick Command**](https://minecraft.wiki/w/Commands/tick) on McWiki for more details.
#Requires Minecraft 1.20.4+
#since 3.1.0
#Examples:
#step game if frozen 10 ticks
#stop stepping game
effect:
	patterns:
		step (game|server) [if frozen] [by] %timespan%
		stop stepping (game|server)

#Show Demo Screen
#Shows the demo screen to the player, this screen is normally only seen in the demo version of the game.
#Servers can modify the text on this screen using a resource pack.
#since 1.17.0
#Examples:
#show demo screen to all players
#show demo screen to player
effect:
	patterns:
		show demo screen to %players%

#Show/Hide Entities
#Show/hide entities to/from players. Requires Minecraft 1.18+
#NOTE: This is not persistent across server restarts and/or chunk unloading!
#since 2.10.0
#Examples:
#make all entities disappear from player
#make all mobs appear to all players
#make target entity of player disappear from all players
effect:
	patterns:
		make %entities% (appear|disappear) (for|to|from) %players%

#Spawn Falling BlockData
#Spawn a falling block data.
#This is a temp effect until Skript properly handles block data with spawning of falling blocks.
#since 2.10.0
#Examples:
#le spawn falling snow[layers=3] above target block of player
effect:
	patterns:
		(skbee|le) spawn falling %blockdata% [%directions% %locations%]

#Spawner - Reset Timer
#Resets the spawner timer for a spawner. Requires a PaperMC server.
#since 2.16.0
#Examples:
#on spawner spawn:
#	reset spawner timer
effect:
	patterns:
		reset spawner timer [of %blocks%]

#Structure - Fill
#Fill a structure with blocks. Requires MC 1.17.1+
#since 1.12.0
#Examples:
#set {_s} to structure with id "my_structure"
#fill structure {_s} between {loc1} and {loc2}
#fill structure {_s} between location at player and location(10,10,10, world "world")
effect:
	patterns:
		fill [structure] %structure% (between|within) %location% and %location%

#Structure - Place
#Place an already created structure into the world.
#Palette = The palette index of the structure to use, starting at 0, or -1 to pick a random palette.
#A palette represents a variation of a structure.
#Most structures, like the ones generated with structure blocks, only have a single variant.
#Requires MC 1.17.1+
#since 1.12.0
#Examples:
#set {_s} to structure with id "minecraft:village/taiga/houses/taiga_cartographer_house_1"
#place structure {_s} above target block of player
effect:
	patterns:
		place [structure] %structure% [using palette %number%] %directions% %locations%

#Structure - Save/Delete
#Save a structure to file (will overwrite if file already exists), or delete a structure file. Requires MC 1.17.1+
#since 1.12.0
#Examples:
#save structure {_s}
#save structures {_s::*}
#delete structure {_s}
effect:
	patterns:
		(save|delete) structure[s] %structures%

#SwitchCase - Case Inline
#Inline version of case section where you can return/run an effect all in one line.
#Multiple objects are supported in cases.
#- **Switch Expression** = Return an object based on the case matching the switched value.
#- **Switch Section** = Run 1 effect based on the case matching the switched value.
#Default will run if all other cases fail to match. Default must go last or all cases after it will be ignored.
#since 3.8.0
#Examples:
# As Effect
#on damage of a sheep by a player:
#	switch type of attacker's tool:
#		case wooden sword -> give attacker yellow wool
#		case stone sword -> give attacker light gray wool
#		case iron sword -> give attacker gray wool
#		case golden sword -> give attacker orange wool
#		case diamond sword -> give attacker light blue wool
#		case netherite sword -> give attacker black wool
#		default -> give attacker white wool
# As Return
#function getRoman(i: number) :: string:
#	return switch return {_i}:
#		case 1 -> "I"
#		case 2 -> "II"
#		case 3 -> "III"
#		case 4 -> "IV"
#		case 5 -> "V"
#		default -> "potato"
#function getName(e: entity) :: string:
#	return switch return {_e}:
#		case sheep -> "Mr Sheepy"
#		case cow -> "Mr Cow"
#		case pig -> "Señor Pig"
#		default -> strict proper case "%type of {_e}%"
#on break:
#	set {_b} to event-block
#	set {_i} to switch return {_b}:
#		case stone -> 1 of stone named "Hard Stone"
#		case grass block -> 1 of grass block named "Green Grass"
#		case dirt -> 1 of dirt named "Dry Dirt"
#		default -> 1 of {_b} named "Some Other Block"
#	give player {_i}
#on damage of a mob by a player:
#	set {_item} to switch return type of victim:
#		case sheep, cow, pig, chicken -> 1 of potato
#		case zombie, drowned, husk -> 1 of rotten flesh
#		case skeleton, stray, wither skeleton, bogged -> 1 of bone
#		default -> 1 of stick
#	give {_item} to attacker
effect:
	patterns:
		case %objects% -> <.+>
		default -> <.+>

#Task - Cancel Task
#Stop a task by ID.
#If running Folia, this effect will do nothing.
#since 3.3.0
#Examples:
#run 0 ticks later repeating every second:
#	set {-id} to current task id
#	add 1 to {_a}
#	if {_a} > 10:
#		exit loop
#on break:
#	stop task with id {-id}
effect:
	patterns:
		(stop|cancel) task[s] with id[s] %numbers%

#TextComponent - Replace Text
#Replace a string with another string or text component in a text component. Supports regex patterns.
#NOTE: If you notice sometimes your symbols aren't replace, this could be a regex pattern issue and you may need to escape characters.
#ex: `:(` -> `:\(` and `[` -> `\[`
#since 2.18.0
#Examples:
#component replace "puppy" with "***" in {_comp}
#component replace "\d+" with "0" in {_comp}
#component replace ":\(" with "sad" in {_comp}
effect:
	patterns:
		component replace %strings% with %string/textcomponent% in %textcomponents%

#TextComponent - Send
#Send text components to audiences. You can also broadcast components as well.
#As of 1.16.0 you can also send action bar components to players and you can also send normal strings.
#`to %audiences%` = An audience is anything that can receieve a component (players, entities, console, worlds, server, etc).
#The optional sender (supported in Minecraft 1.16.4+) allows you to send components from a specific player.
#This is useful to make sure players can block messages using MC 1.16.4's new player chat ignore system.
#**NOTE**: `from %player%` is now deprecated (apparently hasn't worked in a long time)
#since 1.5.0
#Examples:
#set {_comp::1} to text component of "hi player "
#set {_comp::2} to text component of "hover over me for a special message!"
#set hover event of {_comp::2} to hover event showing "OoO look ma I'm hovering!"
#send component {_comp::*} to player
#send components {_comp::*} and " ooo pretty!" to player
#send actionbar component {_comp::1} to player
# Send a message to your fellow teammates
#command /teambroadcast <msg:string>:
#	trigger:
#		set {_team} to team of player
#		set {_mini} to mini message from "[TeamMessage from %player%] %{_msg}%"
#		send component {_mini} to {_team}
effect:
	patterns:
		send [(text|action[[ ]bar])] component[s] %objects% [to %audiences%] [from %player%]
		broadcast [text] component[s] %objects% [from %player%]

#TextComponent - Send Title
#Send titles containing components. Supports strings as well.
#If you are using variables and the title won't send, make sure to add `component`.
#`to %audiences%` = An audience is anything that can receieve a component (players, entities, console, worlds, server, etc).
#since 2.4.0
#Examples:
#send title mini message from "<rainbow>OOO RAINBOW TITLE"
#send title component {_comp} for 10 seconds with fadein 5 ticks and fadeout 10 ticks
effect:
	patterns:
		send title [component] %textcomponent/string% [with subtitle [component] %textcomponent/string%] [to %audiences%] [for %timespan%] [with fade[(-| )]in %timespan%] [(and|with) fade[(-| )]out %timespan%]

#TextComponent - Sign Change
#Sends a sign change to the player. You CAN send a block change first.
#
#Color = the color of the text on the sign.
#
#Glowing = make the text glow.
#since 2.6.0
#Examples:
#set {_m::1} to mini message from "<rainbow>OOOOOOOO"
#set {_m::2} to text component from "Le-Text"
#make player see sign lines of target block as {_m::*} with color blue
effect:
	patterns:
		make %players% see sign lines (at|of) %blocks% as %textcomponents% [with color %color%] [and glowing]

#Transfer - Retrieve Cookie
#DEPRECATED - Use retrieve cookie section.
#since 3.5.0
effect:
	patterns:
		retrieve cookie with key %namespacedkey/string% from %player% and store in %object%

#Transfer - Store Cookie
#Store a cookie on a player for transfer. Requires Minecraft 1.20.5+
#NOTE: Only a string less than 5120 characters is accepted.
#NOTE: Cookies are stored on players across server transfers.
#since 3.5.0
#Examples:
#store cookie "look mah imma cookie" with key "my_id:super_mom_cookie" on player
effect:
	patterns:
		store cookie %string% with key %namespacedkey/string% on %players%

#Update Server Recipes/Resources
#Update recipes will update recipe data and the recipe book for all connected clients.
#Useful for updating clients to new recipes.
#
#Update resources will update all advancement, tag, and recipe data for all connected clients.
#Useful for updating clients to new advancements/recipes/tags.
#
#Requires PaperMC 1.20.1+
#since 2.17.0
#Examples:
#update server recipes
#update server resources
effect:
	patterns:
		update server recipes
		update server resources

#Villager - Effects
#A few effects to make villagers do things.
#since 1.17.0
#Examples:
#zombify last spawned villager
#wake up all villagers
#make target entity shake his head
#make target entity sleep at location(100, 64, 100, world "world")
effect:
	patterns:
		zombify %livingentities%
		wake[ ]up %livingentities%
		make %livingentities% shake [(his|their)] head[s]
		make %livingentities% sleep at %location%

#Advancement - Done
#Check if the advancement progress is done.
#since 1.17.0
#Examples:
#if advancement progress of {_advancement} of player is done:
condition:
	patterns:
		%advancementpro% is done
		%advancementpro% (isn't|is not) done

#Block Can Random Tick
#Gets if this block is ticked randomly in the world. The blocks current state may change this value.
#Requires Paper 1.19+
#since 3.0.0
#Examples:
#on right click:
#	if clicked block can random tick:
#		random tick clicked block
condition:
	patterns:
		%blocks/blockdatas/itemtypes% can random[ly] tick
		%blocks/blockdatas/itemtypes% (can't|cannot) random[ly] tick

#Bound - Contains Location
#Check if a location is within the bounds of a bounding box.
#since 1.0.0
#Examples:
#on break:
#	if location of event-block is within bound with id "spawn.bound":
#		cancel event
#on damage of a player:
#	if victim is within bound {spawn}:
#		cancel event
condition:
	patterns:
		%locations% (is|are) [with]in [bound[s]] %bounds%
		%locations% (isn't|is not|aren't|are not) [with]in [bound[s]] %bounds%

#Bound - Intersects
#Check if a bound intersects with another bound or a potential bound at 2 locations.
#since 2.3.0
#Examples:
#if {_bound} intersects with {_loc1} and {_loc2}:
#if {_bound} intersects with {_bound2}:
#if {_bound} doesn't intersect with {_loc1} and {_loc2}:
#if {_bound} doesn't intersect with {_bound2}:
condition:
	patterns:
		%bound% (intersects with|overlaps) %location% and %location%
		%bound% (intersects with|overlaps) %bound%
		%bound% doesn't (intersect with|overlap) %location% and %location%
		%bound% doesn't (intersect with|overlap) %bound%

#Bound - Is Temporary
#Check if a bound is temporary.
#since 2.10.0
#Examples:
#if bound with id "temporary-bound" is a temporary bound:
condition:
	patterns:
		%bounds% (is|are) [a] temporary bound[s]
		%bounds% (isn't|is not|aren't|are not) [a] temporary bound[s]

#Chunk - Contains BlockData
#Check if a chunk contains a specific block data.
#This can be useful to check before looping blocks in a chunk.
#since 2.5.2
#Examples:
#if chunk at player contains block data sand[]:
condition:
	patterns:
		%chunks% (has|have) block[ ]data %blockdata%
		%chunks% (doesn't|does not|do not|don't) have block[ ]data %blockdata%

#DamageSource - Property Conditions
#Represents some conditions of a damage source.
#since 3.3.0
#Examples:
#if damage source is indirect:
#if damage source is scaled with difficulty:
condition:
	patterns:
		%damagesources% (is|are) (indirect|scaled with difficulty)
		%damagesources% (isn't|is not|aren't|are not) (indirect|scaled with difficulty)

#EntityBlockStorage - Is Full
#Check if an entity storage block is fully of entities.
#As of 1.15 this only includes beehives/bee nests! Requires Spigot/Paper 1.15.2+
#since 1.0.0
#Examples:
#if entity storage of block at player is full:
#if entity storage of target block is not full:
condition:
	patterns:
		entity storage of %block% is full
		entity storage of %block% is(n't| not) full

#FastBoard - Is On
#Check if a player's fastboard is currently toggled on/off.
#since 1.16.0
#Examples:
#if fastboard of player is on:
#	send "Your scoreboard is on!"
condition:
	patterns:
		[score|fast]board of %player% is (on|true)
		[score|fast]board of %player% is(n't| not) on
		[score|fast]board of %player% is (off|false)

#Folia - Object Owned by Current Region
#Returns whether the current thread is ticking a region and that the region being ticked owns the entity/block/location/chunk at the specified world/position as included in the specified object.
#The chunk pattern accepts Chunk X/Z, not world position.
#This is useful to check before manipulating entities/blocks/ect which may not be in the same region as the caller.
#since 3.10.0
#Examples:
#on break:
#	if block at location(1,1,1) is owned by current region:
#		set block at location(1,1,1) to stone
condition:
	patterns:
		%entities/blocks/locations% (is|are)[n't] owned by current region
		chunk at %integer%,[ ]%integer% (in|of) %world% is[n't] owned by current region

#Is Critical Hit
#Check if a hit was a critical hit in a damage event. Requires a PaperMC server.
#since 2.8.3
#Examples:
#on damage:
#	if attacker is a player:
#		if hit is critical:
#			cancel event
condition:
	patterns:
		hit (is|(isn't|is not)) [a] critical

#Is Locked
#Check if a lockable container is in a locked state.
#since 2.16.0
#Examples:
#on right click on shulker box or beacon:
#	clicked block is locked
#	player has permission "see.locked"
#	send action bar "%container key of clicked block%" to player
condition:
	patterns:
		%blocks% (is|are) locked
		%blocks% (isn't|is not|aren't|are not) locked

#Is Player Listed
#Check if a player is listed (shown in PlayerList) for another player. Requires PaperMC 1.20.1+
#since 2.17.0
#Examples:
#if player is listed for {_p}:
condition:
	patterns:
		%players% (is|are) listed for %players%
		%players% (is|are)(n't| not) listed for %players%

#Is Transferred
#Check if a player transferred servers. Requires Minecraft 1.20.5+
#since 3.5.0
#Examples:
#on join:
#	if player is transferred:
#		kick player due to "No Transfers Bruh!"
condition:
	patterns:
		%players% (is|are) transferred
		%players% (isn't|is not|aren't|are not) transferred

#NBT - File Exists
#Check if an NBT file already exists.
#since 2.10.0
#Examples:
#if nbt file "plugins/MyPlugin/test.nbt" exists:
condition:
	patterns:
		nbt file %string% (exists|doesn't exist)

#NBT - Has Tag
#Check if an NBT Compound contains a tag.
#since 2.3.2
#Examples:
#if nbt compound of player has tag "custom;points":
#if nbt compound of player's tool doesn't have nbt tag "health;score":
condition:
	patterns:
		%nbtcompounds% (has|have) [nbt] tag %string%
		%nbtcompounds% (doesn't|does not|do not|don't) have [nbt] tag %string%

#Recipe - Has Discovered
#Check if a player has discovered a recipe. Can check recipes you created, another plugin has created, or vanilla Minecraft recipes.When checking recipes that are not your own, make sure to include the namespace, ex "minecraft:diamond_sword", "someplugin:some_recipe". This condition is only available on 1.16+
#since 1.4.9
#Examples:
#player has discovered recipe "minecraft:furnace"
#if player has discovered recipe "my_custom_sword":
#if player has discovered recipe "someplugin:fancy_shovel":
#if all players have not discovered recipe "minecraft:golden_shovel":
#if player has not discovered recipe "my_fancy_hoe":
condition:
	patterns:
		%players% (has|have) discovered recipe[s] %strings%
		%players% (has|have) not discovered recipe[s] %strings%

#Scoreboard - Objective/Critera Modifiable
#Check if an objective/criteria has modifiable scores.
#Some criteria such as 'health' cannot be modified.
#See [**Criteria**](https://minecraft.wiki/w/ScoreboardCriteria) on McWiki for more info.
#since 3.8.0
#Examples:
#if the scores of {_objective} are modifiable:
#if the scores of criteria with id "some_criteria" are modifiable:
condition:
	patterns:
		[the] scores of %criterias/objectives% are modifiable
		[the] scores of %criterias/objectives% (aren't|are not) modifiable

#Server Tick - Is Entity Frozen
#Checks if a given entity is frozen.
#Entities will only be frozen if 3 criteria are met:
#
# - Server is frozen (via `/tick freeze` command or frozen state expression).
#
# - Entity is not a player.
#
# - Entity has no player passengers.
#
#I understand the syntax is a bit silly but it's to prevent collission with Skript's `%entity% is frozen` condition.
#See [**Tick Command**](https://minecraft.wiki/w/Commands/tick) on McWiki for more details.
#Requires Minecraft 1.20.4+
#since 3.1.0
#Examples:
#if target entity is tick frozen:
#if loop-entity is tick frozen:
#if all entities are tick frozen:
condition:
	patterns:
		%entities% (is|are) tick frozen
		%entities% (isn't|is not|aren't|are not) tick frozen

#Server Tick - Is Server Frozen/Running Normally
#Checks if the server is currently frozen/running normally.
#When the server is running normally it indicates that the server is not currently frozen.
#See [**Tick Command**](https://minecraft.wiki/w/Commands/tick) on McWiki for more details.
#Requires Minecraft 1.20.4+
#since 3.1.0
#Examples:
#if server is frozen:
#	teleport all players to spawn of world "world"
#if server is running normally:
#	kill all sheep
condition:
	patterns:
		(server|game) (is|(isn't|is not)) [currently] (frozen|running normally)

#Server Tick - Is Sprinting/Stepping
#Checks if the server is currently sprinting/stepping.
#See [**Tick Command**](https://minecraft.wiki/w/Commands/tick) on McWiki for more details.
#Requires Minecraft 1.20.4+
#since 3.1.0
#Examples:
#if server is sprinting:
#	kill all players
condition:
	patterns:
		(server|game) (is|(isn't|is not)) [currently] (sprinting|stepping)

#Spawner - Is Activated
#Returns true if a player is currently within the required player range of the spawner.
#since 2.16.0
#Examples:
#at 7:00:
#	loop {spawners::*}:
#		loop-value is activated
#		broadcast loop-value
condition:
	patterns:
		%blocks% (is|are) activated
		%blocks% (isn't|is not|aren't|are not) activated

#Structure - Exists
#Check if a structure exists. This can be helpful to prevent overriding structures.
#since 2.3.0
#Examples:
#if structure "my_structures:house" exists:
#if structure "my_structures:town_hall" doesn't exist:
condition:
	patterns:
		structure %string% exists
		structure %string% (doesn't|does not) exist

#Team - Is Registered
#Check if a team is registered.
#Optionally check for a specific scoreboard (will default to main scoreboard).
#since 2.17.0
#Examples:
#if team "a-team" is registered:
#if team "b-team" of player's scoreboard is registered:
condition:
	patterns:
		team[s] [named|with id] %strings% [(of|for) %scoreboard%] (is|are) registered
		team[s] [named] %strings% [(of|for) %scoreboard%] (isn't|is not|are not|aren't) registered

#World Exists
#Check if a world exists in your world directory.
#since 1.8.0
#Examples:
#if world file "my-world" exists:
condition:
	patterns:
		world file %string% (exists|(does not|doesn't) exist)

#On Anvil Prepare Event
#Called when a player attempts to combine 2 items in an anvil.
#'event-slot' represents the result slot, can be used to get or set.
#since 1.11.0
#Examples:
#on anvil prepare:
#	if slot 0 of event-inventory is a diamond sword:
#		if slot 1 of event-inventory is an enchanted book:
#			if stored enchants of slot 1 of event-inventory contains sharpness 5:
#				set {_i} to slot 0 of event-inventory
#				add "&aOOOOOOO" and "&bAHHHHHH" to lore of {_i}
#				enchant {_i} with sharpness 6
#				set event-slot to {_i}
#				set repair cost of event-inventory to 30
event "anvil_prepare_event":
	patterns:
		[on] [skbee] anvil prepare
	event-values: inventory, item stack, player, slot

#On Async Chat
#An event fired when a Player sends a chat message to the server.
#This event is for use with text components, if you don't need components stick with Skript's chat event.
#**NOTE**: Due to being async, some Skript things won't work and will fire errors (ex: setting a block).
#Requires PaperMC.
#since 2.18.0
#Examples:
#on async chat:
#	set {_m::1} to mini message from "<gradient:33FFE6:33FF68>%player% <grey>» "
#	set {_m::2} to async chat message
#	set {_m} to merge components {_m::*}
#	set async chat format to {_m}
event "async_chat":
	patterns:
		[on] async chat
	event-values: player, world

#On Beacon - Player Change Effect
#Called when a player changes the current potion effects of a beacon.
#since 2.16.0
#Examples:
#on beacon potion effect change:
#	primary beacon effect of event-block is jump boost
#	set primary beacon effect of event-block to levitation
event "beacon_-_player_change_effect":
	patterns:
		[on] [player] change beacon [potion] effect[s]
		[on] beacon [potion] effect change
	event-values: block, player, world

#On Block Damage Abort
#Called when a player stops damaging a Block. Requires MC 1.18.x+
#since 2.8.3
#Examples:
#on block damage abort:
#	send "get back to work"
event "block_damage_abort":
	patterns:
		[on] block damage abort
	event-values: block, location, player, world

#On Block Explode
#Called when a block explodes interacting with blocks.
#The event isn't called if the gamerule MOB_GRIEFING is disabled as no block interaction will occur.
#The Block returned by this event is not necessarily the block that caused the explosion,
#just the block at the location where the explosion originated.
#
#`past event-itemtype` will return the type of the block which exploded.
#
#`past event-blockdata` will return the blockdata of the block which exploded.
#since 3.2.0
event "block_explode":
	patterns:
		[on] block explode
	event-values: block, block data, item type, location, world, past event-block data, past event-item type

#On Block Physical Interact Event
#Called when an entity physically interacts with a block, for example,
# entities trampling farmland and villagers opening doors.
#since 1.5.0
#Examples:
#on block trample:
#	if type of event-block is farmland:
#		cancel event
event "block_physical_interact_event":
	patterns:
		[on] block (interact|trample)
	event-values: block, command sender, entity, location, world

#On Block Receive Game Event
#Called when a block receives a Minecraft game event.
#As of now the only block that receives game events are sculk shrieker, sculk sensor, and calibrated sculk sensor.
#Requires MC 1.17+
#since 1.14.0
#Examples:
#on block receive game event:
#	set {_e} to event-entity
#	if {_e} is a player:
#		if event-block is set:
#			damage {_e} by 0.5
event "block_receive_game_event":
	patterns:
		[on] block receive game[ ]event [%gameevent%]
	event-values: block, entity, game event, location, player, world

#On Bound - Enter
#Called when a player enters a bound. Optional ID of bound. 'event-string' = bound ID.
#NOTE: Due to breaking changes in Bukkit API, enter/exit events will not be called when a player mounts/dismounts an entity if running SkBee 3.5.0+ on MC 1.20.4 and below.
#since 1.0.0, 1.12.2 (Bound IDs)
#Examples:
#on bound enter:
#	if event-bound = {bounds::spawn}:
#		send "You entered spawn!"
#on enter bound with id "spawn":
#	cancel event
event "bound_-_enter":
	patterns:
		[on] (bound enter|enter bound) [with id %string%]
	event-values: bound, player, text

#On Bound - Exit
#Called when a player exits a bound. Optional ID of bound. 'event-string' = bound ID.
#NOTE: Due to breaking changes in Bukkit API, enter/exit events will not be called when a player mounts/dismounts an entity if running SkBee 3.5.0+ on MC 1.20.4 and below.
#since 1.0.0, 1.12.2 (Bound IDs)
#Examples:
#on bound exit:
#	send "You left a bound"
#	if event-bound = {bound}:
#		send "You left Spawn!"
#on exit bound with id "spawn":
#	cancel event
event "bound_-_exit":
	patterns:
		[on] (bound exit|exit bound) [with id %string%]
	event-values: bound, player, text

#On Damage By Block
#Called when an entity is damaged by a block.
#Anything that works in vanilla Skript's damage event (victim/damage cause/damage/final damage)
#will all work in this event too.
#
#`victim` = Same as vanilla Skript, `victim` is used to get the damaged entity.
#
#`event-block` = The block that damaged the entity
#since 3.0.2
#Examples:
#on damage of player by sweet berry bush:
#	cancel event
#on damage by block:
#	broadcast "%victim% was damaged by %type of event-block%"
event "damage_by_block":
	patterns:
		[on] damag(e|ing) [of %entitydata%] (by|from) (block|%itemtypes/blockdatas%)
	event-values: block, damage cause

#On Entities Loading
#Called when entities are loaded/unloaded.
#Event-Values:
#`event-entities` = The entities that were loaded.
#`event-chunk` = The chunk these entities loaded in (the chunk may or may not be loaded).
#since 3.5.0
#Examples:
#on entities loaded:
#	if event-entities is set:
#		delete event-entities
#		broadcast "REMOVED ENTITIES!"
event "entities_loading":
	patterns:
		[on] entities [un]load[ed]
	event-values: chunk, entities, world

#On Entity Add to World
#Fired any time an entity is being added to the world for any reason.
#Not to be confused with entity spawn event. This will fire anytime a chunk is reloaded too. Requires a PaperMC server.
#since 2.7.2
#Examples:
#on entity added to world:
#	delete event-entity
event "entity_add_to_world":
	patterns:
		[on] entity add[ed] to world
	event-values: command sender, entity, location, world

#On Entity Air Change
#Called when the amount of air an entity has remaining changes.
#
#`event-number` = The amount of air the entity will have left (measured in ticks).
#
#`event-timespan` = The amount of air the entity will have left (as a time span).
#
#`past event-number` = The amount of air the entity had left before the event (measured in ticks).
#
#`past event-timespan` = The amount of air the entity had left before the event (as a time span).
#since 2.8.4
#Examples:
#on entity air change:
#	if event-entity is a player:
#		cancel event
event "entity_air_change":
	patterns:
		[on] [entity] air change
	event-values: command sender, entity, location, number, time span, world, past event-number, past event-time span

#On Entity Change Block
#Called when any Entity changes a block and a more specific event is not available.
#Skript does partially have this event, but this version of it opens up ALL possibilities with this event.
#
#event-entity = the entity which changed the block
#
#event-block = the block that changed
#
#event-blockdata = the blockdata the block has changed into
#since 2.5.3
#Examples:
#on entity change block:
#	if event-entity is a villager:
#		if event-block is a composter:
#			heal event-entity
event "entity_change_block":
	patterns:
		[on] entity change block
	event-values: block, block data, command sender, entity, location, world, future event-block data, past event-block

#On Entity Inside Block
#Called when an entity enters the hitbox of a block.
#Only called for blocks that react when an entity is inside.
#If cancelled, any action that would have resulted from that entity being in the block will not happen (such as extinguishing an entity in a cauldron).
#Currently called for: Big dripleaf, Bubble column, Buttons, Cactus, Campfire, Cauldron, Crops, Ender Portal, Fires, Frogspawn, Honey, Hopper, Detector rails,
#Nether portals, Pitcher crop, Powdered snow, Pressure plates, Sweet berry bush, Tripwire, Waterlily, Web, Wither rose
#since 3.4.0
#Examples:
#on entity inside block:
#	if event-block is a cactus:
#		cancel event
#		broadcast "OUCHIE"
event "entity_inside_block":
	patterns:
		[on] entity inside block
	event-values: block, command sender, entity, location, world

#On Entity Knockback
#Fired when an Entity is knocked back by the hit of another Entity. If this event is cancelled, the entity is not knocked back. Requires Paper 1.12.2+
#since 1.8.0
#Examples:
#on entity knockback:
#	if event-entity is a cow:
#		cancel event
event "entity_knockback":
	patterns:
		[on] entity knockback
	event-values: command sender, entity, location, world

#On Entity Pathfind Event
#Called when an Entity decides to start moving towards a location. This event does not fire for the entities actual movement. Only when it is choosing to start moving to a location. Requires Paper.
#since 1.5.0
#Examples:
#on entity starts pathfinding:
#	if event-entity is a sheep:
#		cancel event
event "entity_pathfind_event":
	patterns:
		[on] entity start[s] pathfinding
	event-values: command sender, entity, location, world

#On Entity Potion Effect
#Called when a potion effect is modified on an entity.
#ADDED = When the potion effect is added because the entity didn't have it's type.
#CHANGED = When the entity already had the potion effect type, but the effect is changed.
#CLEARED = When the effect is removed due to all effects being removed.
#REMOVED = When the potion effect type is completely removed.
#event-potioneffect = new effect.
#past event-potioneffect = old effect.
#event-potioneffecttype = type of potion effect.
#since 1.17.0
#Examples:
#on potion effect added:
#	if event-potioneffecttype = night vision:
#		cancel event
#		send "NO NIGHT VISION FOR YOU!!!"
#on potion effect added:
#	if event-potioneffectcause = totem_effect:
#		teleport player to {spawn}
#on potion effect changed:
#	remove event-potioneffecttype from player
#	
#on potion effect cleared:
#	if event-entity is a player:
#		broadcast "ALL EFFECTS CLEARED FOR: %event-entity%"
#on potion effect removed:
#	if event-potioneffecttype = night vision:
#		kill event-entity
event "entity_potion_effect":
	patterns:
		[on] [entity] potion effect added
		[on] [entity] potion effect changed
		[on] [entity] potion effect cleared
		[on] [entity] potion effect removed
	event-values: command sender, entity, entity potion cause, location, potion effect, potion effect type, world, past event-potion effect

#On Entity Remove from World
#Fired any time an entity is being removed from a world for any reason.
#Requires a PaperMC server or Spigot 1.20.4+ server.
#`event-entityremovecause` = The reason the entity was removed (requires MC 1.20.4+).
#since 2.7.2
#Examples:
#on entity removed from world:
#	broadcast "a lonely %event-entity% left the world."
event "entity_remove_from_world":
	patterns:
		[on] entity remove[d] [from world]
	event-values: command sender, entity, entity remove cause, location, world

#On Entity Shoot Bow
#Called when a LivingEntity shoots a bow/crossbow firing an arrow.
#`event-entity` = Entity which shot the bow.
#`event-projectile` = The projectile which was shot.
#`event-item[type]` = The item which will be consumed from the entity's inventory (if any).
#since 2.16.0
#Examples:
#on entity shoot bow:
#	if name of shot bow != "Mr Bow":
#		cancel event
#on entity shoot bow:
#	if gamemode of player = survival:
#		give player 1 of event-item
event "entity_shoot_bow":
	patterns:
		[on] entity shoot bow
	event-values: command sender, entity, item stack, item type, location, projectile, slot, world

#On Entity Teleport
#Thrown when a non-player entity is teleported from one location to another.
#This may be as a result of natural causes (Enderman, Shulker), pathfinding (Wolf), or commands (/teleport).
#
#`past event-location` = Location teleported from.
#
#`event-location` = Location teleported to.
#since 2.18.0
#Examples:
#on entity teleport:
#	if event-entity is an enderman:
#		cancel event
event "entity_teleport":
	patterns:
		[on] entity teleport
	event-values: command sender, entity, location, world, past event-location

#On Entity Unleash
#Called immediately prior to an entity being unleashed.
#Cancelling this event when either the leashed entity dies, the entity changes dimension, or
#the client has disconnected the leash will have no effect.
#
#`event-string` = The reason for unleashing.
#Options are "distance" (When the entity's leashholder is more than 10 blocks away),
#"holder_gone" (When the entity's leashholder has died or logged out, and so is unleashed),
#"player_unleash" (When the entity's leashholder attempts to unleash it), "unknown"
#since 3.2.0
#Examples:
#on entity unleash:
#	if event-entity is a cow:
#		if event-string = "distance":
#			cancel event
event "entity_unleash":
	patterns:
		[on] entity unleash
	event-values: command sender, entity, location, player, text, unleash reason, world

#On Entity Zap
#Fired when lightning strikes an entity. Requires Paper 1.10.2+
#since 1.8.0
#Examples:
#on entity zap:
#	if event-entity is a pig:
#		spawn 3 zombie pigmen at event-location
event "entity_zap":
	patterns:
		[on] entity (zap|struck by lightning)
	event-values: command sender, entities, entity, location, transform reason, world

#On Experience Orb Merge
#Fired anytime the server is about to merge 2 experience orbs into one. Requires Paper 1.12.2+
#since 1.8.0
#Examples:
#on xp merge:
#	cancel event
event "experience_orb_merge":
	patterns:
		[on] (experience|[e]xp) orb merge
	event-values: command sender, entity, location, world

#On Generic Game Event
#Called when a Minecraft game event is fired. These events are provided directly by Minecraft.
#NOTE: Cancelling this event will not cancel the action, only cancel broadcasting event to blocks.
#Requires MC 1.17+
#since 1.14.0
#Examples:
#on game event splash:
#	set {_e} to event-entity
#	if {_e} is a player:
#		push {_e} up with speed 0.5
event "generic_game_event":
	patterns:
		[on] [generic] game[ ]event [%gameevent%]
	event-values: entity, game event, location, player, world

#On Moisture Change
#Called when the moisture level of a farmland block changes.
#since 3.0.0
#Examples:
#on moisture change:
#	cancel event
#	set event-block to farmland[moisture=7]
event "moisture_change":
	patterns:
		[on] moisture change
	event-values: block, location, world, future event-block

#On Player Advancement
#Called when a player has completed all criteria in an advancement.
#since 1.17.0
event "player_advancement":
	patterns:
		[on] [player] advancement done
	event-values: advancement, player, text, world

#On Player Attempt Item Pickup
#Called when a player attempts to pick an item up from the ground. Requires PaperMC.
#`event-number` = Represents the amount that will remain on the ground, if any.
#`past event-number` = Represents the item amount of the dropped item before pickup.
#`event-dropped item` = Represents the dropped item entity that is attempting to pickup.
#since 3.5.0
#Examples:
#on player attempt item pickup:
#	if event-number > 0:
#		wait 1 tick
#		add (item of event-dropped item) to enderchest of player
#		kill event-dropped item
event "player_attempt_item_pickup":
	patterns:
		[on] player attempt item pickup
	event-values: dropped item, number, player, world, past event-number

#On Player Chunk Load
#Is called when a Player receives a Chunk.
#Can for example be used for spawning a fake entity when the player receives a chunk. 
#Should only be used for packet/clientside related stuff. Not intended for modifying server side state.
#
#Requires a PaperMC server.
#since 2.6.1
#Examples:
#on player chunk send:
#	loop all blocks in event-chunk:
#		if loop-block is diamond ore:
#			make player see loop-block as stone
event "player_chunk_load":
	patterns:
		[on] player chunk (send|load)
	event-values: chunk, player, world

#On Player Chunk Unload
#Is called when a Player receives a chunk unload packet.
#Should only be used for packet/clientside related stuff. Not intended for modifying server side.
#
#Requires a PaperMC server.
#since 2.6.1
#Examples:
#on player chunk unload:
#	send "looks like you lost your chunk cowboy!" to player
event "player_chunk_unload":
	patterns:
		[on] player chunk unload
	event-values: chunk, player, world

#On Player Click Unknown Entity
#Represents an event that is called when a player right-clicks an unknown entity.
#Useful for dealing with virtual entities (entities that aren't actually spawned on the server).
#This event may be called multiple times per interaction (this is a server issue).
#
#`event-vector` = Returns the position relative to the entity that was clicked if available. (Requires Paper 1.20.1+)
#
#`event-number` = Returns the entity id of the unknown entity that was interacted with. (Not sure if this usefull or not)
#
#Requires PaperMC.
#since 2.17.0
#Examples:
#oh right click unknown entity:
#	teleport player to spawn of world "world"
event "player_click_unknown_entity":
	patterns:
		[on] [player] click unknown entity [with (main|off) hand]
		[on] [player] right[( |-)]click unknown entity [with (main|off) hand]
		[on] [player] left[( |-)]click unknown entity [with (main|off) hand]
	event-values: number, player, vector, world

#On Player Elytra Boost
#Fired when a player boosts elytra flight with a firework. Requires Paper 1.13.2+
#since 1.8.0
#Examples:
#on elytra boost:
#	push player forward at speed 50
event "player_elytra_boost":
	patterns:
		[on] [player] elytra boost
	event-values: entity, item stack, item type, player, world

#On Player Interact
#Called when a player interacts (clicks) a block or entity.
#This is similar to Skript's click event, but more verbose giving you more freedom.
#Note: This event may be called once for each hand.
#`event-vector` = An offset from the location of the clicked block/entity.
#`event-equipmentslot` = The slot (hand_slot, off_hand_slot) used to click (may be null).
#`event-blockaction` = The action that happened, such as (left_click_air, physical, right_click_block).
#since 3.4.0
#Examples:
#on player interact:
#	if all:
#		event-equipmentslot = off_hand_slot
#		event-blockaction = right_click_block
#		type of event-item = torch
#		name of event-item = "Mr Torchie"
#		player is sneaking
#	then:
#		cancel event
#		set {_l} to (exact location of clicked block) ~ event-vector
#		make 5 of dust using dustOption(red, 1) at {_l}
#on player interact on entity:
#	if all:
#		event-equipmentslot = off_hand_slot
#		type of event-item = leash
#		name of event-item = "Mr Leashie"
#	then:
#		cancel event
#		kill clicked entity
event "player_interact":
	patterns:
		[on] player interact
		[on] player interact (at|on) entity
	event-values: block, block action, blockface, direction, entity, equipment slot, item stack, location, player, vector, world

#On Player Leash
#Called immediately prior to a creature being leashed by a player.
#
#`event-entity` = Entity which got leashed.
#
#`future event-entity` = The entity the leashed entity is leashed to (could be a player or leash hitch on a fence).
#
#`event-player` = Player whom leashed the entity.
#since 3.2.0
#Examples:
#on player leash entity:
#	kill event-entity
event "player_leash":
	patterns:
		[on] player leash entity
	event-values: entity, player, future event-entity

#On Player Pickup Experience Orb
#Fired when a player is attempting to pick up an experience orb. Requires Paper 1.12.2+
#
#`event-experience` represents the experience picked up (This is Skript's version of XP).
#
#`event-number` represents the experience picked up as a number.
#
#`event-entity` represents the experience orb entity.
#since 1.8.0
#Examples:
#on player pickup xp:
#	add 10 to level of player
event "player_pickup_experience_orb":
	patterns:
		[on] player pickup (experience|xp) [orb]
	event-values: entity, experience point, number, player, world

#On Player Purchase
#Called when a player trades with a standalone merchant/villager GUI. Requires PaperMC.
#since 1.17.1
#Examples:
#on player purchase:
#	ignite event-entity for 1 minute
event "player_purchase":
	patterns:
		[on] player purchase
	event-values: entity, living entity, merchant recipe, player, world

#On Player Spawn Change
#This event is fired when the spawn point of the player is changed.
#since 3.4.0
#Examples:
#on player spawn change:
#	if event-playerspawnchangereason = bed or respawn_anchor:
#		cancel event
#		send "Nope... sorry!"
event "player_spawn_change":
	patterns:
		[on] player spawn change
	event-values: location, player, player spawn change reason, world, future event-location

#On Player Stop Using Item
#Called when the server detects a player stopping using an item.
#Examples of this are letting go of the interact button when holding a bow, an edible item, or a spyglass.
#event-number is the number of ticks the item was held for. Requires Paper 1.18+.
#since 1.17.0
#Examples:
#on player stop using item:
#	if event-item is a spyglass:
#		kill player
event "player_stop_using_item":
	patterns:
		[on] [player] stop using item
	event-values: item type, number, player, time span, world

#On Player Track Entity
#Called when a Player tracks an Entity (This means the entity is sent to the client).
#If cancelled entity is not shown to the player and interaction in both directions is not possible.
#(This is copied from Paper javadocs and does not seem true. When testing on a zombie, the zombie still attacked me)
#Adding or removing entities from the world at the point in time this event is called is completely unsupported and should be avoided.
#Requires PaperMC 1.19+.
#since 3.5.1
#Examples:
#on player track entity:
#	if event-entity is a zombie:
#		cancel event
event "player_track_entity":
	patterns:
		[on] player track entity
	event-values: entity, player, world

#On Pre Creature Spawn
#Called before an entity is spawned into the world. Requires a PaperMC server.
#
#Note: The spawning entity does not exist when this event is called only the entitytype exists.
#This event is called very frequently, and can cause server lag, use it sparingly.
#
#`event-spawnreason` = the reason the entity is spawned.
#
#`event-location` = the location the spawned entity will appear.
#
#`event-entitytype` = the type of entity being spawned.
#since 2.16.0
#Examples:
#on pre spawn of a pig:
#	broadcast "a %event-entitytype% is spawning in"
event "pre_creature_spawn":
	patterns:
		[on] pre [creature] spawn[ing] [of %entitydatas%]
	event-values: block, entity, entity type, location, spawn reason

#On Pre Phantom Spawn
#Called before a phantom is spawned for an entity. Requires a PaperMC server.
#
#Note: The phantom entity does not exist when this event is called only the entitytype exists.
#
#View the pre creature spawn event for more event values.
#
#`event-entity` = the entity the spawned phantom is spawning for.
#since 2.16.0
#Examples:
#on pre phantom spawn:
#	broadcast "Watch out %event-entity% a phantom is coming!"
event "pre_phantom_spawn":
	patterns:
		[on] pre phantom spawn[ing]
	event-values: entity, entity type, location, spawn reason

#On Pre Spawner Spawn
#Called before an entity is spawned via a spawner. Requires a PaperMC server.
#
#Note: The spawned entity does not exist when this event is called only the entitytype exists.
#
#View the pre creature spawn event for more event values.
#
#`event-block` = the block location of the spawner spawning the entity.
#since 2.16.0
#Examples:
#on pre spawner spawn of a zombie:
#	broadcast "%event-entitytype% is spawning in"
event "pre_spawner_spawn":
	patterns:
		[on] pre spawner spawn[ing] [of %entitydatas%]
	event-values: block, entity type, location, spawn reason

#On Recipe - Crafter Craft Event
#Called when a Crafter is about to craft an item. Requires Minecraft 1.21.1+
#`event-string` = The key for the recipe used in this event.
#`recipe result` = An expression that reprsents the result slot (can be changed).
#since 3.6.1
#Examples:
#on crafter craft:
#	if event-string = "minecraft:diamond_sword":
#		set name of recipe result to "Señor Sword"
#	else:
#		set recipe result to a stick named "&cNice Try"
#on preparing craft:
#	set {_e} to event-string
#	if {_e} = "minecraft:diamond_shovel":
#		set name of recipe result to "&cMr Shovel"
event "recipe_-_crafter_craft_event":
	patterns:
		[on] crafter craft
	event-values: block, location, text, world

#On Recipe - Discover Event
#Called when a player unlocks a recipe. 
#`event-string` = the recipe namespace (this will also include either "minecraft:" or "mykeyhere:")
#Requires MC 1.13+
#since 1.0.0
#Examples:
#on recipe discover:
#	if event-string = "minecraft:diamond_block"
#		cancel event
#1.13+
event "recipe_-_discover_event":
	patterns:
		[on] recipe discover[y]
	event-values: player, text, world

#On Recipe Book Click Event
#Called when the player clicks on a recipe in their recipe book. Requires Paper 1.15+
#since 1.5.0
#Examples:
#on recipe book click:
#	if event-string = "minecraft:diamond_sword":
#		cancel event
event "recipe_book_click_event":
	patterns:
		[on] [player] recipe book click
	event-values: player, text, world

#On Shear Entity
#Called when a player shears an entity. Requires Minecraft 1.9.4+
#since 1.8.0
#Examples:
#on player shear entity:
event "shear_entity":
	patterns:
		[on] [player] shear entity
	event-values: entity, player, world

#On Skeleton Horse Trap Event
#Called when a player gets close to a skeleton horse and triggers the lightning trap. Requires Paper 1.13+
#since 1.5.0
#Examples:
#on skeleton horse trap:
#	loop all players in radius 10 around event-entity:
#		if loop-player is an op:
#			cancel event
event "skeleton_horse_trap_event":
	patterns:
		[on] skeleton horse trap
	event-values: command sender, entity, location, world

#On Spawner Spawn
#Called whenever an entity is spawned via a spawner.
#since 2.16.0
#Examples:
#on spawner spawn of zombie:
#	reset spawner timer of event-block
event "spawner_spawn":
	patterns:
		[on] spawner spawn[ing] [of %entitydatas%]
	event-values: block, command sender, entity, location, world

#On Spell Cast
#Called when a Spellcaster casts a spell.
#since 2.14.0
#Examples:
#on spell cast:
#	if event-entity is an evoker:
#		if event-spell is fangs:
#			cancel event
event "spell_cast":
	patterns:
		[on] [entity] spell cast
	event-values: command sender, entity, location, spell, world

#On Tab Complete
#Called when a player attempts to tab complete the arguments of a command. 
#
#NOTE: Tab complete event is only called for the ARGUMENTS of a command, NOT the command itself.
#
#event-string = the command.
#since 1.7.0
#Examples:
#on tab complete of "/mycommand":
#	set tab completions for position 1 to "one", "two" and "three"
#	set tab completions for position 2 to 1, 2 and 3
#	set tab completions for position 3 to all players
#	set tab completions for position 4 to (indexes of {blocks::*})
#on tab complete:
#	if event-string contains "/ver":
#		clear tab completions
event "tab_complete":
	patterns:
		[on] [skbee] tab complete [(of|for) %strings%]
	event-values: player, text

#On Tick End Event
#Called when the server has finished ticking the main loop.
#There may be time left after this event is called, and before the next tick starts.
#`event-numbers` = Represents different numbers in this event, in this order:
#- Current tick number (starts from 0 when the server starts and counts up).
#- Tick duration (in milliseconds) (How long the tick took to tick).
#- Time remaining (in milliseconds) (How long til the next tick executes).
#- Time remaining (in nanoseconds) (How long til the next tick executes).
#since 3.10.0
event "tick_end_event":
	patterns:
		[on] server tick end
	event-values: numbers

#On Tick Start Event
#Called each time the server starts its main tick loop.
#`event-number` = The current tick number.
#since 3.10.0
event "tick_start_event":
	patterns:
		[on] server tick start
	event-values: integer

#On Trade Select
#This event is called whenever a player clicks a new trade on the trades sidebar.
#This event allows the user to get the index of the trade, letting them get the MerchantRecipe via the Merchant.
#`event-number` = Used to get the index of the trade the player clicked on.
#`event-merchantrecipe` = The merchant recipe of the trade that the player clicked on.
#since 1.17.0
event "trade_select":
	patterns:
		[on] trade select
	event-values: merchant, merchant inventory, merchant recipe, number, player

#On Unknown Command
#This event is fired when a player executes a command that is not defined.
#`event-string` = The command that was sent.
#`event-sender/player` = Who sent the command.
#since 3.10.0
event "unknown_command":
	patterns:
		[on] unknown command
	event-values: command sender, text

#Absorption Amount
#Represents the absorption amount of an entity.
#since 1.17.0
#Examples:
#set {_absorption} to absorption amount of player
#set absorption amount of player to 5
#add 2 to absorption amount of player
#remove 2 from absorption amount of player
#reset absorption amount of player
expression:
	patterns:
		[the] absorption amount of %entities%
		%entities%'[s] absorption amount
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Advancement - All Available
#Get a list of all available advancements currently registered on the server.
#since 1.17.0
#Examples:
#set {_a::*} to all available advancements
#loop all available advancements:
expression:
	patterns:
		[all] available advancements
	return type: advancement
#Advancement - Criteria
#Get a list of the criteria for an advancement.
#since 1.17.0
#Examples:
#set {_c::*} to criteria of {_advancement}
expression:
	patterns:
		criteria of %advancements%
		%advancement%'[s] criteria
	return type: text
#Advancement - Progress
#Returns the advancement progress of a player.
expression:
	patterns:
		advancement progress of %advancement% (for|of) %players%
	return type: advancementprogress
#Advancement - Progress Criteria
#Get the awarded/remaining criteria of an advancement progress.
#since 1.17.0
#Examples:
#set {_c::*} to awarded criteria of advancement progress of {_advancement} of player
expression:
	patterns:
		(awarded|remaining) criteria of %advancementpro%
	return type: text
#Armor Change Event - Item
#Get the old/new item in an armor change event. Defaults to new. When using set, it will set the slot that was changed, old/new will make no difference in this case. Requires Paper 1.12.2+
#since 1.3.1
#Examples:
#on player armor change:
#	if new armor item is any helmet:
#		set armor item to a diamond helmet
expression:
	patterns:
		[(new|old)] armor item
	set:
#		(internal code)
	return type: itemtype
#ArmorTrim - Create
#Create a new armor trim to be applied to an item. Requires MC 1.19.4+
#since 2.13.0
#Examples:
#set {_trim} to armor trim using gold_material with eye_pattern
#add armor trim using gold_material with eye_pattern to armor trim of player's helmet
expression:
	patterns:
		[new] armor trim (of|from|using) %trimmaterial% (and|with) %trimpattern%
	return type: armortrim
#ArmorTrim - Item
#Represents the armor trim of an item. You can get, set, add or delete/reset.
#Requires Minecraft 1.19.4+
#since 2.13.0
#Examples:
#add armor trim from gold_material and eye_pattern to armor trim of player's leggings
#set armor trim of player's helmet to armor trim from gold_material and eye_pattern
#delete armor trim of player's leggings
#reset armor trim of player's boots
expression:
	patterns:
		[the] armor trim of %itemtypes%
		%itemtypes%'[s] armor trim
	add:
#		(internal code)
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: armortrim
#ArmorTrim - Material/Pattern
#Represents the material and pattern of an armor trim.
#These cannot be changed, you'd have to create a new armor trim.
#since 2.13.0
#Examples:
#set {_pattern} to trim pattern of armor trim of player's tool
expression:
	patterns:
		[the] [armor ]trim (material|pattern) of %armortrims%
		%armortrims%'[s] [armor ]trim (material|pattern)
	return type: object
#Async Chat Viewers
#Represents the viewers that this chat message will be displayed to.
#NOTE: Can only be used in an `async chat event`. Requires PaperMC
#since 3.5.3
#Examples:
#on async chat:
#	clear chat viewers
#	add player to chat viewers
#on async chat:
#	set chat viewers to players in world of player
#on async chat:
#	remove (all players where [input doesn't have permission "staff.chat"]) from chat viewers
expression:
	patterns:
		[async] chat viewers
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: sender
#Attribute Modifier Properties
#Represents the different components of an attribute modifier.
#NOTE: These cannot be changed.
#`id` = The unique NamespacedKey of a modifier (Requires Minecraft 1.21+).
#`name` = The name used to identify this modifier (For Minecraft 1.20.6 and below).
#`uuid` = The uuid used to identify this modifier (For Minecraft 1.20.6 and below).
#`amount` = Amount of change from the modifier.
#`slot` = Equipment Slot Group the item must be in for the modifier to take effect (Minecraft 1.20.6+ uses Equipment Slot Group, other versions use Equipment Slot).
#`operation` = The operation of a modifier. See [**McWiki**](https://minecraft.wiki/w/AttributeOperations) for more details.
#since 3.5.9
#Examples:
#set {_id} to modifier id of {_modifier}
#set {_slot} to modifier slot of {_modifier}
#if modifier amount of {_mod} > 1:
expression:
	patterns:
		[the] [attribute] modifier (id|name|uuid|amount|slot|operation) of %attributemodifiers%
		%attributemodifiers%'[s] [attribute] modifier (id|name|uuid|amount|slot|operation)
	return type: object
#Attribute Modifiers of Item/LivingEntity
#Get/change the attribute modifiers of an item/living entity.
#`default` = This option will return the vanilla modifiers of an item (only used for GET).
#`transient` = Non-persisent attribute modifier, will not save to the entity's NBT (only used for ADD) (Requires PaperMC).
#`modifier` will return a single modifier (will default to the 1st element of modifiers of that attribute type if more than 1 exists).
#`modifiers` will return a list of modifiers of that attribute type.
#**CHANGERS:**
#- `add` = Will add a modifier of an attribute type to an item/living entity.
#- `remove` = Remove a specific modifier of an attribute type from an item/living entity.
#- `delete` = Will delete all modifiers of an attribute type from an item/living entity.
#since 3.5.9
#Examples:
#set {_mods::*} to attack damage modifier of player's tool
#set {_mod} to first element of attack damage modifier of player's tool
#set {_mod} to gravity attribute modifier of player
#delete gravity attribute modifier of player
#add scale modifier of player's tool to scale modifier of player
expression:
	patterns:
		[default] [transient] %attributetype% [attribute] modifier[s] of %itemtypes/livingentities%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	return type: attributemodifier
#Available Objects
#Get a list of all available objects of a specific type.
#SPECIAL TYPES:
#`materials` = All materials as ItemTypes (will be a list of blocks and items).
#`itemtypes` = All item materials as ItemTypes.
#`blocktypes` = All block materials as ItemTypes.
#since 1.15.0
#Examples:
#give player random element of all available itemtypes
#set {_blocks::*} to all available blocktypes
#set target block to random element of all available blockdatas
expression:
	patterns:
		[all] available materials
		[all] available item[ ]types
		[all] available block[ ]types
		[all] available block[ ]datas
		[all] available entity[ ]types
		[all] available game[ ]rules
		[all] available loot tables
		[all] available particles
		[all] available potion effect types
		[all] available entity effects
		[all] available attributes
		[all] available biomes
		[all] available damage types
		[all] available enchantments
		[all] available game events
		[all] available minecraft entity[ ]types
		[all] available statistics
		[all] available trim materials
		[all] available trim patterns
		[all] available sounds
	return type: object
#Average Tick Time - MSPT
#Represents the average amount of time (in milliseconds) it takes for the server to finish a tick, also know as MSPT
#Requires PaperMC.
#since 3.5.4
#Examples:
#set {_avg} to average tick time
#if average tick time > 40:
expression:
	patterns:
		average tick time
	return type: num
#Beacon - Effect Range
#Gets the effect range of a beacon.
#A negative range value means the beacon is using its default range based on tier.
#since 2.16.0
#Examples:
#send effect range of event-block
#add 100 to beacon effect range of event-block
#loop 11 times:
#	remove 10 from beacon effect range of event-block
#reset effect range of event-block
expression:
	patterns:
		[the] [beacon] effect range of %blocks%
		%blocks%'[s] [beacon] effect range
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Beacon - Entities in Effect Range
#Returns a list of entities in the effect range of a beacon.
#since 2.16.0
#Examples:
#command /effected_entities:
#	trigger:
#		set {_block} to target block of player
#		send all entities in beacon effect range of {_block}
expression:
	patterns:
		[all [[of] the]|the] %*entitydatas% in [beacon] effect range of %blocks%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: livingentity
#Beacon - Primary/Secondary Effect
#The primary/secondary potion effect of a beacon.
#
#Note:
#
#When getting the primary/secondary potion effect it will return as a Potion Effect and not a Potion Effect Type.
#
#If you update the beacon inventory by opening it and placing an item you will lose any custom effects not normally applicable.
#since 2.16.0
#Examples:
#on right click on a beacon with a diamond:
#	broadcast "Primary: %primary beacon effect of clicked block%"
#	broadcast "Secondary: %secondary beacon effect of clicked block%"
#	set primary beacon effect of clicked block to strength
#	clear secondary beacon potion effect
expression:
	patterns:
		[the] (primary|secondary) beacon [potion] effect of %blocks%
		%blocks%'[s] (primary|secondary) beacon [potion] effect
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: potioneffect
#Beacon - Tier
#Returns the current tier of a beacon block.
#since 2.16.0
#Examples:
#on right click on a beacon:
#	send "The current tier of this block is %beacon tier of event-block%"
expression:
	patterns:
		[the] beacon tier of %blocks%
		%blocks%'[s] beacon tier
	return type: integer
#Biome Key of Location
#Get/set the biome of a block/location using a NamespacedKey. Requires Paper 1.19+.
#**NOTES**:
#- This will support custom biomes.
#- When setting this will not immediately visually update the biome to players, you will need to use the `refresh %chunk%` effect.
#since 3.6.0
#Examples:
#set biome key of block at player to mc key "minecraft:plains"
#set biome key of blocks in chunk at player to mc key "wythers:ancient_taiga"
#refresh chunk at player  forces biomes to be re-sent to the player.
#set {_key} to biome key of block at player
#set {_keys::*} to biome keys of blocks in chunk at player
expression:
	patterns:
		[the] biome key[s] of %locations%
		%locations%'[s] biome key[s]
	set:
#		(internal code)
	return type: namespacedkey
#Block - Exact Location
#Returns the EXACT location of a block.
#Skript's `location of block` adds 0.5 to each x,y,z coord of the location, the "center" of the block.
#This expression will return the true location of a block.
#since 2.5.1
#Examples:
#set {_loc} to exact location of event-block
#set {_loc} to exact location of target block
#if y coord of exact location of event-block = 5:
expression:
	patterns:
		[the] (exact|true) location of %blocks%
		%blocks%'[s] (exact|true) location
	return type: location
#Block - Relative
#Get a block relative to another block using a BlockFace.
#since 2.6.0
#Examples:
#set {_rel} to block relative to target block using {_blockFace}
#set block relative to target block using north to stone
expression:
	patterns:
		block[s] relative to %block% (from|using) %blockfaces%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Block Dropped Items
#Represents the dropped items in a block drop item event.
#`block dropped items` = The dropped item entities.
#`block dropped itemtypes` = The dropped item.
#since 2.6.0
#Examples:
#on block drop item:
#	teleport block dropped items to player
expression:
	patterns:
		block dropped (items|item entities)
		block dropped itemtypes
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Block in Chunk
#Represents a block in a chunk. X/Z coords will be a value from 0 to 15.
#since 1.13.0
#Examples:
#set block at 1,1,1 in chunk at player to stone
#set {_b} to block at 8,64,8 in chunk at player
expression:
	patterns:
		block at %number%,[ ]%number%,[ ]%number% (in|of) %chunk%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#BlockData - All Variations
#Returns a list of all possible blockdatas for a particular block type.
#Requires Paper 1.21.4+
#since 3.8.0
#Examples:
#set {_states::*} to blockdata states of oak log
# output:
# minecraft:oak_log[axis=x]
# minecraft:oak_log[axis=y]
# minecraft:oak_log[axis=z]
#loop all blockdata variations of wall torch:
# output:
# minecraft:wall_torch[facing=north]
# minecraft:wall_torch[facing=south]
# minecraft:wall_torch[facing=west]
# minecraft:wall_torch[facing=east]
expression:
	patterns:
		[all] [possible] block[ ]data (states|variations) of %itemtypes/blockdatas%
	return type: blockdata
#BlockData - Item BlockData
#Get/set the BlockData that is attached to an item.
#since 3.4.0
#Examples:
#set {_item} to a campfire
#set item blockdata of {_item} to campfire[lit=false]
expression:
	patterns:
		[the] item [block[ ]](data|state) of %itemtypes%
		%itemtypes%'[s] item [block[ ]](data|state)
	set:
#		(internal code)
	return type: blockdata
#BlockData - Item BlockData Tag
#Get/set the value of a tag in the BlockData of an item.
#since 3.4.0
expression:
	patterns:
		[the] item [block[ ]](data|state) tag %string% of %itemtypes%
		%itemtypes%'[s] item [block[ ]](data|state) tag %string%
	set:
#		(internal code)
	return type: object
#BlockData - Item BlockData Tags
#Get all the tags from the BlockData of an item.
#since 3.4.0
#Examples:
#set {_tags::} to item blockdata tags of player's tool
expression:
	patterns:
		[the] item [block[ ]](data|state) tags of %itemtypes%
		%itemtypes%'[s] item [block[ ]](data|state) tags
	return type: text
#BlockData - Tag
#Get/set a block data tag of BlockData or a Block.
#since 1.0.0, 2.16.1 (Variable Support)
#Examples:
#set {_water} to block data tag "waterlogged" of event-block
#set block data tag "waterlogged" of {_blockData} to true
#set block data tag "waterlogged" of event-block to true
#set blockdata tag "waterlogged" of event-block without updates to true
expression:
	patterns:
		block[ ](data|state) tag %string% of %blocks/blockdatas% [without updates]
	set:
#		(internal code)
	return type: object
#BlockData - Tags
#Get a list of all block data tags of a Block or BlockData.
#since 1.0.0, 2.16.1 (BlockData Support)
#Examples:
#set {_data::*} to block data tags of target block of player
#loop block data tags of target block of player:
expression:
	patterns:
		block[ ](data|state) tags of %blocks/blockdatas%
	return type: text
#BlockData - Updates
#Set the BlockData of a block without updates (will prevent physics updates of neighbouring blocks).
#since 2.6.0
#Examples:
#set blockdata of target block without updates to oak_fence[]
#set blockdata of target block without updates to campfire[lit=false]
expression:
	patterns:
		block[ ](data|state) of %blocks% without update[s]
	set:
#		(internal code)
	return type: blockdata
#BlockState - Block
#Gets the block represented by this block state. Will return nothing if blockstate is not placed in the world.
#since 2.13.0
#Examples:
#set {_block} to block of {_blockstate}
expression:
	patterns:
		[the] block[s] of %blockstates%
		%blockstates%'[s] block[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#BlockState - BlockData
#Represents the blockdata of a block state.
#since 2.13.0
#Examples:
#set {_data} to blockstate blockdata of {_blockstate}
#set blockstate blockdata of {_blockstate} to stone[]
expression:
	patterns:
		[the] block[ ]state block[ ]data[s] of %blockstates%
		%blockstates%'[s] block[ ]state block[ ]data[s]
	set:
#		(internal code)
	return type: blockdata
#BlockState - Get
#Get a captured state of a block, which will not change automatically.
#Unlike Block, which only one object can exist per coordinate, BlockState can exist multiple times for any given Block.
#This can later be used to update, which will force the block back to this state.
#since 2.13.0
#Examples:
#set {_state} to blockstate of event-block
#set event-block to air
#wait 1 minute
#force update {_state} without physics updates
expression:
	patterns:
		[the] (captured|block)[ ]state[s] of %blocks%
		%blocks%'[s] (captured|block)[ ]state[s]
	return type: blockstate
#BlockState - ItemType
#Represents the itemtype of a block state.
#since 2.13.0
#Examples:
#set {_type} to blockstate itemtype of {_blockstate}
#set blockstate itemtype of {_blockstate} to stone
expression:
	patterns:
		block[ ]state [item[ ]]type of %blockstates%
	set:
#		(internal code)
	return type: itemtype
#BlockState - Offset
#Represents the offset of a blockstate in a structure.
#This is a vector, distance from the starting block of a structure.
#since 2.13.0
#Examples:
#set {_offset} to blockstate offset of {_blockstate}
expression:
	patterns:
		block[ ]state offset[s] of %blockstates%
	return type: vector
#Book Pages
#Allows you to set pages in a book to text components. You can also retrieve the pages. Based on testing, a book's author/title needs to be set AFTER setting the pages, why? I have no idea!
#since 1.8.0
#Examples:
#set {_i} to a written book
#set {_a} to text component of "RULES"
#set hover event of {_a} to hover event showing "make sure to read our rules"
#set click event of {_a} to click event to run command "/rules"
#set page 1 of book {_i} to {_a}
#set book author of {_i} to "Bob"
#set book title of {_i} to "MyBook"
#give player 1 of {_i}
expression:
	patterns:
		page %number% of [book] %itemtype%
	set:
#		(internal code)
	return type: textcomponent
#BossBar - All
#Get a list of all BossBars.
#since 2.14.1
#Examples:
#set {_bars::*} to all bossbars
expression:
	patterns:
		all boss[ ]bars
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: bossbar
#BossBar - Create
#Create your own custom BossBar.
#**NOTE**: Progress is a number between 0-100.
#**NOTE**: This just creates a new custom bossbar. It will by default not be visible to anyone
#until you actually add players to it. See examples!!!
#**NOTE**: The ID is optional. If excluded, the BossBar will not save to the server.
#since 2.14.1
#Examples:
#set {_bar} to boss bar with id "le-bar" with title "My BossBar"
#set {_bar} to boss bar with id "le-bar" with title "Le Title" with color pink with progress 50
#add all players to {_bar}
expression:
	patterns:
		[new] boss[ ]bar [(named|with id) %string%] with title %string% [with (color|colour) %color%] [with style %bossbarstyle%] [with progress %number%]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: bossbar
#BossBar - Entity/Player
#Get a BossBar from an entity (such as a wither) or all BossBars of players.
#NOTE: BossBars from entities cannot be saved in global variables, as the entity may not be loaded on the
#server when that variable is trying to load. Custom BossBars and BossBars from players can be saved in variables.
#since 2.14.1
#Examples:
#set {_bar} to boss bar of target entity
#set {_bars::*} to boss bars of player
expression:
	patterns:
		boss[ ]bar of %entity%
		boss[ ]bars of %players%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: bossbar
#BossBar - From ID
#Get an already created BossBar from ID (this will NOT create a new one).
#since 2.14.1
#Examples:
#delete boss bar with id "le-bar"
#set {_bar} to boss bar with id "le-bar"
#add all players to {_bar}
expression:
	patterns:
		boss[ ]bar (named|with id|from id) %string%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: bossbar
#BossBar - Properties
#Represents the properties of a BossBar that can be changed.
#Progress of a bar is a number from 0-100.
#since 2.14.1
#Examples:
#set {_players::*} to bar players of {_bar}
#set bar color of {_bar} to blue
#set bar style of {_bar} to segmented 20
#set bar title of {_bar} to "Le-Title"
#reset bar title of {_bar}
#set bar progress of {_bar} to 100
#set bar flag darken sky of {_bar} to true
expression:
	patterns:
		[boss[ ]]bar players of %bossbar%
		[boss[ ]]bar (color|colour) of %bossbar%
		[boss[ ]]bar style of %bossbar%
		[boss[ ]]bar title of %bossbar%
		[boss[ ]]bar progress of %bossbar%
		[boss[ ]]bar flag %bossbarflag% of %bossbar%
		[boss[ ]]bar visibility of %bossbar%
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Bound - All Bounds
#Get a list of non-temporary, temporary, or all bounds/ids. Optionally inside of a specific set of worlds.
#since 2.15.0
#Examples:
#set {_temporaryBounds::*} to temporary bounds in world of player
#set {_nonTemporaryBounds::*} to nontemporary bounds in world("world_nether")
#loop all bounds:
#loop all bounds in {worlds::*}:
#loop all bounds in world of player:
#loop all bounds in world "world"
#	broadcast loop-bound
expression:
	patterns:
		[all] [temporary|non[-| ]temporary] bound[s] [id[s]] [in %worlds%]
	delete:
#		(internal code)
	return type: object
#Bound - Blocks
#Get all of the blocks within a bound.
#since 1.0.0
#Examples:
#set {_blocks::*} to all blocks within bound {bound}
#set {_blocks::*} to bound blocks within bound with id "le-bound"
#set all bound blocks within {bound} to stone
#loop all bound blocks within {bound}:
#	if loop-block is stone:
#		set loop-block to grass
expression:
	patterns:
		[(all [[of] the]|the)] bound blocks within %bound%
		[(all [[of] the]|the)] blocks within bound %bound%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Bound - Bounds at Location
#Get a list of non-temporary, temporary, or all bounds bounds/ids at a location.
#since 1.0.0, 2.15.0 (temporary/non-temporary)
#Examples:
#set {_temporaryBounds::*} to temporary bounds at player
#set {_nonTemporaryBounds::*} to nontemporary bounds at {_loc}
#loop all bounds at {locations::*}:
#	broadcast loop-bound
expression:
	patterns:
		[all [[of] the]|the] [-temporary|non[-| ]temporary] bound[s] [id[s]] at %locations%
	delete:
#		(internal code)
	return type: object
#Bound - Coords
#DEPRECATED - Use bound locations/world expressions instead
#The coords and world of a bounding box. You can get the world/coords for a specific bound, you can also set the coords of a bounding box. You can NOT set the world of a bounding box. 
#Greater will always equal the higher south-east corner. 
#Lesser will always equal the lower north-west corner.
#since 1.0.0
#Examples:
#set lesser y coord of {bound} to 10
#set {_x} to greater x coord of bound with id "my.bound"
expression:
	patterns:
		lesser (x|y|z) coord[inate] of [bound] %bound%
		greater (x|y|z) coord[inate] of [bound] %bound%
		world of bound %bound%
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Bound - Entities
#Get all of the entities within a bound.
#NOTE: If the chunk in a bound is unloaded, entities will also be unloaded.
#since 1.15.0
#Examples:
#set {_b} to bound with id "my-bound"
#loop bound entities in {_b}:
#	if loop-entity is a cow or pig:
#		kill loop-entity
expression:
	patterns:
		[(all [[of] the]|the)] bound %*entitydatas% (of|in|within) %bounds%
		[(all [[of] the]|the)] %*entitydatas% (of|in|within) bound[s] %bounds%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: entity
#Bound - From ID
#Get a bound object from a bound ID
#since 1.0.0
#Examples:
#set {_b} to bound from id "%player%.home"
expression:
	patterns:
		bound[s] (of|from|with) id[s] %strings%
	delete:
#		(internal code)
	return type: bound
#Bound - Full State
#Get/set whether this bound is a full bound (reaches from lowest to highest points of a world).
#since 3.8.0
#Examples:
#set bound full state of bound with id "home" to true
expression:
	patterns:
		[the] bound full state of %bounds%
		%bounds%'[s] bound full state
	set:
#		(internal code)
	return type: boolean
#Bound - ID
#Get/set the id of a bound. When setting the ID of a bound, if another bound has that ID, this will fail with an error in console.
#You cannot set the IDs of multiple bounds at once.
#since 1.15.0
#Examples:
#set {_id} to id of first element of bounds at player
#loop all bounds at player:
#	set id of loop-bound to "%player%-%id of loop-bound%"
#set {_id} to id of event-bound
#send "You entered bound '%id of loop-bound%'"
expression:
	patterns:
		[the] [bound] id of %bounds%
		%bounds%'[s] [bound] id
	return type: text
#Bound - Last Created Bound
#Returns the last created bound.
#since 2.15.0
#Examples:
#create a bound with id "" between {_pos1} and {_pos2}
#broadcast last created bound
#resize last created bound between {_pos1^2} and {_pos2^2}
expression:
	patterns:
		[the] last[ly] created bound
	delete:
#		(internal code)
	return type: bound
#Bound - Locations
#Get/modify the locations of a bound.
#Greater will always equal the higher south-east corner. 
#Lesser will always equal the lower north-west corner.
#You can set the two corners of the bound to new values.
#You can also add/subtract vectors to/from the corners.
#since 3.5.9
#Examples:
#set {_center} to bound center of bound with id "spawn-bound"
#set block at bound greater corner of {_bound} to pink wool
#set bound lesser corner of {_bound} to location of player
#set bound greater corner of bound with id "ma_bound" to {_loc}
#add vector(5,5,5) to bound greater corner of {_bound}
#subtract vector(0,10,0) from bound greater corner of {_bound}
expression:
	patterns:
		[the] bound (center|(greater|lesser) corner) of %bounds%
		%bounds%'[s] bound (center|(greater|lesser) corner)
	return type: location
#Bound - Owners/Members
#Represents the owners and members of a bound. Will be saved as UUIDs in the bound config.
#since 1.15.0
#Examples:
#add player to bound members of bound with id "spawn"
#remove player from bound owners of bound with id "spawn"
#loop bound owners of bound with id "beach":
#	if loop-offline player is online:
#		teleport loop-offline player to spawn of world "world"
expression:
	patterns:
		bound (owner[s]|member[s]) of %bound%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: offlineplayer
#Bound - Values
#Get/set/delete custom values for bounds.
#Some objects will be serialized as their type, others will serialize as just a string.
#Numbers/Locations/Booleans/(Offline)Players/Items will be serialized as their type.
#Entities will be serialized as a string version of their UUID.
#All other objects will be serialized as a string.
#All bound values will return a list of the values, all bound keys will return a list of keys for these values.
#Deleting all bound values/keys will clear the list.
#since 2.2.0
#Examples:
#set bound value "king" of bound with id "the_garden" to player
#set {_v} to bound value "king" of {_bound}
#delete bound value "spawn" of {_bound}
#set {_values::*} to all bound values of bound with id "ma_bound"
#set {_keys::*} to all bound keys of bound with id "look_mah_imma_bound"
#delete all bound values from bound with id "now_im_a_sad_valueless_bound"
expression:
	patterns:
		bound value %string% (of|from) %bound%
		all [[of] the] bound (values|keys) (of|from) %bound%
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Bound - World
#Get the world of a bound.
#since 3.8.0
#Examples:
#set {world} to bound world of bound with id "el-boundo"
expression:
	patterns:
		[the] bound world of %bounds%
		%bounds%'[s] bound world
	return type: world
#Charging Attack
#Represents a RangedEntity that is "charging" up an attack, by raising its hands.
#
#Setting requires a PaperMC server.
#
#RangedEntities: Drowned, Illusioner, Llama, Piglin, Pillager, Skeleton, Snowman, Stray, TraderLlama, Witch, Wither, WitherSkeleton.
#since 2.17.0
#Examples:
#set charging attack of last spawned entity to true
#set {_charge} to charging attack of target entity of player
#if charging attack of target entity of player = true:
expression:
	patterns:
		[the] charging attack of %livingentities%
		%livingentities%'[s] charging attack
	set:
#		(internal code)
	return type: boolean
#Chat Completions
#Represents the chat completions of a player.
#
#`set` = Set the list of chat completion suggestions shown to the player while typing a message.
#If completions were set previously, this method will remove them all and replace them with the provided completions.
#
#`add` = Add custom chat completion suggestions shown to the player while typing a message.
#
#`remove` = Remove custom chat completion suggestions shown to the player while typing a message. Online player names cannot be removed with this method.
#This will affect only custom completions added by add/set.
#
#`reset` = Will remove all custom chat completions.
#
#NOTE: Supports all objects, will be stringified based on however Skript does it.
#since 2.17.0
#Examples:
#add "i like cheese" to chat completions of player
#add all worlds to chat completions of player
#set chat completions of player to "potatoes" and "popcorn"
#reset chat completions of player
expression:
	patterns:
		[the] [custom] chat completions of %players%
		%players%'[s] [custom] chat completions
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Chunk Coordinates
#Represents the coordinates of a chunk.
#since 1.13.0
#Examples:
#set {_x} to chunk x of chunk at player
expression:
	patterns:
		chunk (x|z) of %chunk%
	return type: num
#Chunk Load Level
#Get the load level of a chunk. See type for description of levels. Requires Minecraft 1.19.4+
#since 2.17.0
#Examples:
#if load level of chunk at {_loc} = entity_ticking_level:
#	drop a diamond at {_loc}
expression:
	patterns:
		[the] [chunk] load level of %chunks%
		%chunks%'[s] [chunk] load level
	return type: chunkloadlevel
#Chunk at Coords
#Get a chunk using chunk coords.
#NOTE: Chunk coords are different than location coords.
#Chunk coords are basically location coords divided by 16.
#Optionally get the chunk without generating it (possibly doesn't load as well).
#since 2.14.0
#Examples:
#set {_chunk} to chunk at coords 1,1
#set {_chunk} to chunk at coords 1,1 in world "world"
#set {_chunk} to chunk at 50,50 in world "world_nether" without generating
expression:
	patterns:
		chunk at [coord[inate]s] %number%,[ ]%number% [(in|of) %world%] [without (generating|loading)]
	return type: chunk
#ChunkGenerator - Biome Parameter Point
#Represents the biome noise parameters which may be passed to a world generator.
#This is used in the `biome gen` section of a chunk generator.
#since 3.9.0
#Examples:
#register chunk generator with id "test":
#	biome gen:
#		if biome continentalness of biome parameter point <= -0.19:
#			set chunkdata biome to ocean
#		else:
#			set {_temp} to biome temp of biome parameter point
#			if {_temp} > 0.55:
#				set chunkdata biome to badlands
#			else if {_temp} > 0.2:
#				set chunkdata biome to desert
#			else if {_temp} > -0.15:
#				set chunkdata biome to jungle
#			else if {_temp} < -0.45:
#				set chunkdata biome to plains
#			else:
#				set chunkdata biome to snowy taiga
expression:
	patterns:
		[the] [the] biome parameter point
	return type: biomeparameterpoint
#ChunkGenerator - Biome Parameter Point Values
#Represents the different values of a Biome Parameter Point.
#This is used in the `biome gen` section of a chunk generator.
#`fixed` = Will return the grouped ranged value of a param point, example for continentalness:
#- `-1.2~-1.05` = 0 (Mushroom fields)
#- `-1.05~-0.455` = 1 (Deep ocean)
#- `-0.455~-0.19` = 2 (Ocean)
#- `-0.19~-0.11` = 3 (Coast)
#- `-0.11~0.03` = 4 (Near-inland)
#- `0.03~0.3` = 5 (Mid-inland)
#- `0.3~1.0` = 6 (Far-inland)
#See [**World Generation/Biomes**](https://minecraft.wiki/w/World_generationBiomes) on McWiki for more details.
#since 3.9.0
#Examples:
#register chunk generator with id "test":
#	biome gen:
#		if biome continentalness of biome parameter point <= -0.19:
#			set chunkdata biome to ocean
#		else:
#			set {_temp} to biome temp of biome parameter point
#			if {_temp} > 0.55:
#				set chunkdata biome to badlands
#			else if {_temp} > 0.2:
#				set chunkdata biome to desert
#			else if {_temp} > -0.15:
#				set chunkdata biome to jungle
#			else if {_temp} < -0.45:
#				set chunkdata biome to plains
#			else:
#				set chunkdata biome to snowy taiga
expression:
	patterns:
		[the] [min|max|fixed] biome [parameter] ((continentalness|continents)|depth|erosion|(humidity|vegetation)|(peaks and valleys|pv)|temp[erature]|(weirdness|ridges)) of %biomeparameterpoint%
		%biomeparameterpoint%'[s] [min|max|fixed] biome [parameter] ((continentalness|continents)|depth|erosion|(humidity|vegetation)|(peaks and valleys|pv)|temp[erature]|(weirdness|ridges))
	return type: num
#ChunkGenerator - ChunkData Biome
#Represents the biome in ChunkData.
#The first pattern is used to set the biome in the `biome gen` section.
#The second pattern is used to retrieve biomes in the `chunk gen` and `block pop` sections.
#NOTE: The vector represents the position of the biome in the chunk, not the world.
#since 3.5.0
#Examples:
#biome gen:
#	set chunkdata biome to plains
#chunk gen:
#	set {_biome} to chunkdata biome at vector(0,0,0)
#	if {_biome} is plains:
#		set chunkdata block at vector(0,0,0) to grass[]
expression:
	patterns:
		chunk[ ]data biome
		chunk[ ]data biome at %vector%
	set:
#		(internal code)
	return type: biome
#ChunkGenerator - ChunkData Block
#Represents blocks in a ChunkData.
#The first pattern is used to set a block in a `chunk gen` or `block pop` section.
#The second pattern is used to fill blocks between 2 points in a `chunk gen` section.
#NOTE: The vector represents the position in a chunk, not a world.
#NOTE: You CAN reach into neighbouring chunks going below 0/above 15 in the vector. I don't know how far you can safely reach though.
#since 3.5.0
#Examples:
#chunk gen:
#	set chunkdata blocks within vector({_x}, 0, {_z}) and vector({_x}, {_y}, {_z}) to red_concrete[]
#	set chunkdata block at vector({_x}, {_y}, {_z}) to red_concrete_powder[]
expression:
	patterns:
		chunk[ ]data block[data] at %vector%
		chunk[ ]data block[data]s (between|within) %vector% (and|to) %vector%
	set:
#		(internal code)
	return type: blockdata
#ChunkGenerator - ChunkData Height
#Represents the highest point in a chunk used in a `height gen` section.
#This is used to tell Minecraft where the highest block is when it needs to generate structures.
#since 3.5.0
#Examples:
#height gen:
#	set {_x} to x coord of event-location
#	set {_z} to z coord of event-location
#	set {_n} to getNoise({_x}, {_z})  This is just an example of a function you could do to get noise)
#	set chunkdata height to {_n} + 1
expression:
	patterns:
		chunk[ ]data height
	set:
#		(internal code)
	return type: num
#ChunkGenerator - ChunkData X/Z
#Represents the ChunkData's X/Z coordinates.
#This will typically be used to calculate world position from chunk position for your noise system.
#since 3.5.0
#Examples:
#chunk gen:
#	loop 16 times:
#		loop 16 times:
#			set {_x} to (loop-number-1) - 1
#			set {_z} to (loop-number-2) - 1
#			set {_noise} to getNoise({_x} + (16 * chunkdata chunk x), {_z} + (16 * chunkdata chunk z))
expression:
	patterns:
		chunk[ ]data chunk (x|z)
	return type: num
#ChunkGenerator - Highest Block Y
#Get the highest block y at a position in a chunk in a `block pop` section.
#since 3.5.3
#Examples:
#set {_y} to chunkdata highest y at vector(1,0,1)
expression:
	patterns:
		chunk[ ]data highest [block] y at %vector%
	return type: num
#Chunks Within Locations
#Get a list of all chunks within 2 locations.
#since 3.6.1
#Examples:
#loop all chunks within {_l1} and {_l2}:
#refresh all chunks within {_l1} and {_l2}
expression:
	patterns:
		all chunks within %location% and %location%
	return type: chunk
#Client Brand
#Returns player's client brand name. If the client didn't send this information, the brand name will be null.
#For the Notchian client this name defaults to "vanilla". Some modified clients report other names such as "forge".
#Requires a PaperMC server.
#since 2.16.0
#Examples:
#broadcast client brand of player
expression:
	patterns:
		[the] client brand of %players%
		%players%'[s] client brand
	return type: text
#DamageSource - Create
#Create a new damage source which includes a damage type and some optional values.
#Optional Values:
#`caused by %entity%` = The entity that caused the damage.
#`directly by %entity%` = The entity that directly inflicted the damage.
#`at %location%` = The source of the damage.
#since 3.3.0
#Examples:
#set {_source} to damage source from arrow directly by (random element of all entities)
#set {_source} to damage source of dragon breath
#set {_source} to damage source of magic
#set {_source} to damage source of mob_attack_no_aggro caused by target entity of player
#damage player by 100 with {_source}
expression:
	patterns:
		[[a] new] damage source (of|from) %damagetype% [caused by %entity%] [directly (by|from) %entity%] [at %location%]
	return type: damagesource
#DamageSource - Event Value
#Get the damage source of a damage/death event.
#since 3.3.0
#Examples:
#on damage of player:
#	if damage type of damage source = arrow:
#		broadcast "OUCHIE"
#	if causing entity of damage source is a chicken:
#		broadcast "YOU JERK"
expression:
	patterns:
		[the] damage source
	return type: damagesource
#DamageSource - Properties
#Represents different elements you can get from a damage source.
#since 3.3.0
#Examples:
#on damage of player:
#	if damage type of damage source = arrow:
#		broadcast "OUCHIE"
#	if causing entity of damage source is a chicken:
#		broadcast "YOU JERK"
expression:
	patterns:
		[the] (causing entity|direct entity|damage type|damage location|food exhaustion|source location) of %damagesources%
		%damagesources%'[s] (causing entity|direct entity|damage type|damage location|food exhaustion|source location)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: object
#DisplayEntity - Billboard
#Represents the billboard of a Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display billboard of {_display} to horizontal
expression:
	patterns:
		[the] display billboard of %entities%
		%entities%'[s] display billboard
	set:
#		(internal code)
	return type: billboard
#DisplayEntity - Block Display Blockdata
#Represents the block data of a Block Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display block data of {_display} to oak_stairs[facing=south]
expression:
	patterns:
		[the] display block[ ]data of %entities%
		%entities%'[s] display block[ ]data
	set:
#		(internal code)
	return type: blockdata
#DisplayEntity - Display Brightness
#Represents the brightness attributes of a Display Entity.
#NOTE: Delete/reset will reset the Display Entity's brightness to match it's surroundings.
#NOTE: If this is not set in the first place, it will return nothing!
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display brightness of {_display} to displayBrightness(10,10)
expression:
	patterns:
		[the] display brightness of %entities%
		%entities%'[s] display brightness
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: displaybrightness
#DisplayEntity - Display Item
#Represents the display ItemType of an Item/Block Display Entity
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display item of {_display} to diamond sword
#set display item of {_display} to air
#delete display item of {_display}
expression:
	patterns:
		[the] display item[[ ]type] of %entities%
		%entities%'[s] display item[[ ]type]
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: itemtype
#DisplayEntity - Display Text
#Represents the display text of a Text Display Entity.
#NOTE: Supports multiple lines.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display text of {_display} to "Line 1", "Line 2" and "Line 3"
expression:
	patterns:
		[the] display text of %entities%
		%entities%'[s] display text
	set:
#		(internal code)
	return type: text
#DisplayEntity - Display Width/Height
#Represents the width/height of a display entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display width of {_display} to 3
expression:
	patterns:
		[the] display (width|height) of %entities%
		%entities%'[s] display (width|height)
	set:
#		(internal code)
	return type: num
#DisplayEntity - Glow Color Override
#Represents the glow color override of a Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display glow color override of {_display} to bukkitColor(255,1,1,100)
expression:
	patterns:
		[the] [display] glow color override of %entities%
		%entities%'[s] [display] glow color override
	set:
#		(internal code)
	return type: bukkitcolor
#DisplayEntity - Interpolation Start/Duration
#Represents the interpolation start and duration times for a Display Entity.
#NOTE: Due to how these work, you will need to use integers as ticks instead of time spans.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display interpolation start of {_display} to -1
#set display interpolation delay of {_display} to 200
expression:
	patterns:
		[the] [display] interpolation ((start|delay)|duration) of %entities%
		%entities%'[s] [display] interpolation ((start|delay)|duration)
	set:
#		(internal code)
	return type: num
#DisplayEntity - Item Display Transform
#Represents the item display transform of an Item Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set item display transform of {_display} to ground transform
#set item display transform of {_display} to fixed transform
expression:
	patterns:
		[the] [display] item display transform of %entities%
		%entities%'[s] [display] item display transform
	set:
#		(internal code)
	return type: itemdisplaytransform
#DisplayEntity - Rotation
#Represents the transformation left/right rotation of a Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display left rotation of {_display} to quaternion(0,1,1,0)
#set display right rotation of {_display} to quaternion(1,0,0,5)
#set display right rotation of {_display} to axisAngle(5,1,0,0)
expression:
	patterns:
		[the] display (left|right) rotation of %entities%
		%entities%'[s] display (left|right) rotation
	set:
#		(internal code)
	return type: quaternion
#DisplayEntity - Scale
#Represents the transformation scale of a Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display scale of {_display} to vector(5,5,5)
expression:
	patterns:
		[the] display scale of %entities%
		%entities%'[s] display scale
	set:
#		(internal code)
	return type: vector
#DisplayEntity - See Through
#Represents the see through state of a Text Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display see thru state of {_display} to true
expression:
	patterns:
		[the] [display] see (thru|through) state of %entities%
		%entities%'[s] [display] see (thru|through) state
	set:
#		(internal code)
	return type: boolean
#DisplayEntity - Shadow Radius/Strength
#Represents the shadow radius/strength of a Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display shadow strength of {_display} to 3
#set display shadow radius of {_display} to 10
expression:
	patterns:
		[the] [display] shadow (radius|strength) of %entities%
		%entities%'[s] [display] shadow (radius|strength)
	set:
#		(internal code)
	return type: num
#DisplayEntity - Teleport Duration
#Represents the time it takes for a diplay entity to teleport from one location to another.
#This works similaly to interpolation, but this uses teleportation instead of quaternions and math.
#NOTE: Due to how this works, you will need to use integers as ticks instead of time spans.
#This number is clamped between 0 and 59.
#
#0 means that updates are applied immediately.
#
#1 means that the display entity will move from current position to the updated one over one tick.
#
#Higher values spread the movement over multiple ticks.
#Requires MC 1.20.2+
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.18.3
#Examples:
#set display teleport duration of {_display} to 30
#reset display teleport duration of {_display}
#add 10 to display teleport duration of {_display}
#remove 5 from display teleport duration of {_display}
expression:
	patterns:
		[the] [display] teleport[ation] duration of %entities%
		%entities%'[s] [display] teleport[ation] duration
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#DisplayEntity - Text Alignment
#Represents the text alignment of a Text Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display text alignment of {_display} to left aligned
expression:
	patterns:
		[the] [display] text alignment of %entities%
		%entities%'[s] [display] text alignment
	set:
#		(internal code)
	return type: textalignment
#DisplayEntity - Text Background Color
#Represents the text background color of a Text Display Entity.
#NOTE: Due to Skript Color missing the alpha channel, you must use Bukkit Colors here.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display text background color of {_display} to bukkitColor(55,100,0,150)
expression:
	patterns:
		[the] [display] text background color of %entities%
		%entities%'[s] [display] text background color
	set:
#		(internal code)
	return type: bukkitcolor
#DisplayEntity - Text Component
#Represents the text component of a Text Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display component of {_display} to mini message from "<rainbow>OOO A RAINBOW"
expression:
	patterns:
		[the] display [text] component of %entities%
		%entities%'[s] display [text] component
	set:
#		(internal code)
	return type: textcomponent
#DisplayEntity - Text Default Background
#Represents if a Text Display Entity should use a default background.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display default text background of {_display} to true
expression:
	patterns:
		[the] [display] default [text] background of %entities%
		%entities%'[s] [display] default [text] background
	set:
#		(internal code)
	return type: boolean
#DisplayEntity - Text Line Width
#Represents the line width of a Text Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display line width of {_display} to 100
expression:
	patterns:
		[the] [display] line width of %entities%
		%entities%'[s] [display] line width
	set:
#		(internal code)
	return type: num
#DisplayEntity - Text Opacity
#Represents the text opacity of a Text Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display text opacity of {_display} to 50
expression:
	patterns:
		[the] [display] text opacity of %entities%
		%entities%'[s] [display] text opacity
	set:
#		(internal code)
	return type: num
#DisplayEntity - Text Shadowed
#Represents the shadowed state of a Text Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display text shadowed of {_display} to true
expression:
	patterns:
		[the] [display] text shadowed of %entities%
		%entities%'[s] [display] text shadowed
	set:
#		(internal code)
	return type: boolean
#DisplayEntity - Transformation
#Represents the transformation of a Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display transformation of {_display} to {_transformation}
expression:
	patterns:
		[the] display transformation of %entities%
		%entities%'[s] display transformation
	set:
#		(internal code)
	return type: transformation
#DisplayEntity - Translation
#Represents the transformation translation of a Display Entity.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display translation of {_display} to vector(0,2,0)
expression:
	patterns:
		[the] display translation of %entities%
		%entities%'[s] display translation
	set:
#		(internal code)
	return type: vector
#DisplayEntity - View Range
#Represents the view range of a Display Entity. This is a client setting and has nothing to do with the server.
#As per McWiki:
#Maximum view range of the entity. When the distance is more than [view_range] x [entityDistanceScaling (client setting)] x 64,
#the entity is not rendered. Defaults to 1.0.
#See [**Display Entity Data**](https://minecraft.wiki/w/DisplayEntity_data) on McWiki for more details.
#since 2.8.0
#Examples:
#set display view range of {_display} to 500
expression:
	patterns:
		[the] display view range of %entities%
		%entities%'[s] display view range
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Enchantment
#Get the type of enchantment from an Enchantment Type.
#since 1.16.0
#Examples:
#loop enchantments of player's tool:
#	set {_level} to enchantment level of loop-value
#	set {_enchant} to enchantment of loop-value
expression:
	patterns:
		[the] enchantment of %enchantmenttypes%
		%enchantmenttypes%'[s] enchantment
	return type: enchantment
#Enchantment Level
#Get the enchantment level from an Enchantment Type.
#since 1.16.0
#Examples:
#loop enchantments of player's tool:
#	set {_level} to enchantment level of loop-value
#	set {_enchant} to enchantment of loop-value
expression:
	patterns:
		[the] enchantment level of %enchantmenttypes%
		%enchantmenttypes%'[s] enchantment level
	return type: num
#Entities Sorted by Distance
#Sort entities by distance from a central location.
#since 3.0.0
#Examples:
#loop all entities sorted by distance from player:
#set {_sort::*} to all mobs sorted by distance from {_loc}
#set {_p::*} to all players sorted by distance from {spawn}
#loop all mobs sorted by distance from player:
expression:
	patterns:
		%entities% sorted by distance from %location%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: entity
#Entity Memory
#Get/set memories of entities.
#since 3.4.0
#Examples:
#set {_home} to home memory of {_villager}
#set home memory of last spawned villager to location of player
expression:
	patterns:
		[the] %*memory% memory of %livingentities%
		%livingentities%'[s] %*memory% memory
	return type: object
#Entity NoClip
#Set or get the noClip status of an entity (This will not work on players)
#since 1.0.2
#Examples:
#spawn a zombie at player
#set no clip state of last spawned zombie to true
#set {_var} to no clip state of last spawned sheep
#loop all entities in radius 5 around player:
#	set no clip state of loop-entity to true
#	push loop-entity up with speed 5
expression:
	patterns:
		[the] no[( |-)](clip|physics) (state|mode) of %entities%
		%entities%'[s] no[( |-)](clip|physics) (state|mode)
	set:
#		(internal code)
	return type: boolean
#Entity Origin Location
#Represents the location where an entity originates from. Requires PaperMC.
#since 3.3.0
#Examples:
#set {_loc} to origin of last spawned entity
#set {_loc} origin location of {_entity}
#if distance between {_entity} and origin of {_entity} > 10:
expression:
	patterns:
		[the] origin[ location] of %entities%
		%entities%'[s] origin[ location]
	return type: location
#Entity Pose
#Get/set the pose of an entity.
#Note: While poses affect some things like hitboxes, they do not change the entity's state
#(e.g. having sneaking pose does not guarantee `is sneaking` being true). Set requires PaperMC.
#since 3.5.4
#Examples:
#set {_pose} to pose of player
#set pose of target entity to sleeping pose
expression:
	patterns:
		[the] pose of %entities%
		%entities%'[s] pose
	set:
#		(internal code)
	return type: pose
#Entity Shoot Bow - Consumable
#Get the Item to be consumed in an entity shoot bow event (if any).
#since 2.16.0
#Examples:
#on entity shoot bow:
#	if consumed item is not an arrow:
#		cancel event
expression:
	patterns:
		consumed item
	return type: itemtype
#Entity Shoot Bow - Force
#Gets the force the arrow was launched with in an entity shoot bow event.
#This is a number between 0 and 1.
#since 2.16.0
#Examples:
#on entity shoot bow:
#	if shot force < 0.5:
#		cancel event
expression:
	patterns:
		shoot force
		shot force
		launch force
		bow force
	return type: num
#Entity Shoot Bow - Projectile
#Get/set the projectile which will be launched in an entity shoot bow event.
#
#NOTE: Setting doesn't appear to do anything, server bug I guess?!?!
#since 2.16.0
#Examples:
#on entity shoot bow:
#	make player ride projectile entity
expression:
	patterns:
		projectile entity
	set:
#		(internal code)
	return type: entity
#Entity Shoot Bow - Shot Bow
#Gets the bow Item used to fire the arrow in an entity shoot bow event.
#since 2.16.0
#Examples:
#on entity shoot bow:
#	if name of shot bow != "Mr Bow":
#		cancel event
expression:
	patterns:
		shot bow
	return type: itemtype
#Entity Shoot Bow - Should Consume
#Get/set whether or not the consumable item should be consumed in an entity shoot bow event.
#since 2.16.0
#Examples:
#on entity shoot bow:
#	if shot bow is a bow:
#		set should consume item to false
expression:
	patterns:
		should consume item
	set:
#		(internal code)
	return type: boolean
#Entity Ticking State
#Represents whether or not an entity will tick.
#Currently this only works for ArmorStands and requies a PaperMC server.
#since 2.13.0
#Examples:
#spawn an armor stand at player:
#	set ticking state of entity to false
expression:
	patterns:
		[the] tick[ing] state of %entities%
		%entities%'[s] tick[ing] state
	set:
#		(internal code)
	return type: boolean
#Entity Visibility
#Get/set visibility for entities. Armor stands on all versions, ItemFrames on 1.15+ and LivingEntities on 1.16.3+
#since 1.7.0
#Examples:
#set visibility of target entity to false
#set {_v} to visibility of target entity
#if visibility of target entity is true:
expression:
	patterns:
		[the] visibility of %entities%
		%entities%'[s] visibility
	set:
#		(internal code)
	return type: boolean
#EntityBlockStorage - Entity Count
#Get the amount of entities currently stored in a storage block.
#As of 1.15 this only includes beehives/bee nests! Requires Spigot/Paper 1.15.2+
#since 1.0.0
#Examples:
#if amount of stored entities in block at player > 10:
#set {_a} to size of entities stored in event-block
expression:
	patterns:
		(size|amount) of [all] (stored entities|entities stored) in %blocks%
	return type: long
#EntityBlockStorage - Max Entities
#Get/Set the max amount of entities which can be stored in a block.
#As of 1.15 this only includes beehives/bee nests! Requires Spigot/Paper 1.15.2+
#since 1.0.0
#Examples:
#set {_m} to max entities of target block of player
#set max entities of target block of player to 20
#set max entity storage of event-block to 5
expression:
	patterns:
		[the] max entit(ies|y storage) of %blocks%
		%blocks%'[s] max entit(ies|y storage)
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: long
#FastBoard - Line
#Get/set/delete lines of a player's fastboard.
#Lines are valid from 1 to 15. 1 being the line at the top and 15 being the bottom (This can be changed in the config).
#Line length is unlimited.
#Supports number format on Minecraft 1.20.4+ by providing 2 strings (see examples).
#When running Paper, text components are supported.
#since 1.16.0
#Examples:
#set line 1 of player's fastboard to "Look mah I'm on Minecraft"
#set line 15 of all players' fastboards to "I CAN SEE YOU"
#set {_line} to line 10 of player's fastboard
# NumberFormat on Minecraft 1.20.4+
#set line 1 of fastboard of player to "Player:" and "&b%name of player%"
# Component Support
#set line 1 of player's fastboard to mini message from "<rainbow>OOOO RAINBOW"
#set line 2 of player's fastboard to mini message from "<font:uniform>OOOO Tiny Little Text"
#set line 3 of player's fastboard to translate component of player's tool
expression:
	patterns:
		line %number% of %players%'[s] [score|fast]board[s]
		line %number% of [score|fast]board[s] of %players%
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: object
#FastBoard - Title
#Get/set the title of a fastboard.
#When running Paper, text components are supported.
#since 1.16.0
#Examples:
#set title of player's fastboard to "Le Title"
#set {_title} to title of fastboard of player
# Component Support
#set title of player's fastboard to mini message from "<rainbow>Le Title"
#set title of player's fastboard to mini message from "<font:uniform>Le Title"
expression:
	patterns:
		title of %players%'[s] [score|fast]board[s]
		title of [score|fast]board of %players%
	set:
#		(internal code)
	return type: object
#Fish Event Entity
#Represents the caught entity or hook in a fish event.
#since 1.15.2
#Examples:
#on fish:
#	if fish state = caught fish:
#		set item of fishing caught entity to diamond
expression:
	patterns:
		fish[ing] [event] caught entity
		fish[ing] [event] hook
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: entity
#Fish Event State
#Represents the state of a fishing event.
#since 1.15.2
#Examples:
#on fish:
#	if fish event state = caught fish:
#		cancel event
expression:
	patterns:
		fish[ing] [event] state
	return type: fishingstate
#Fish Hook - Current
#Get the current fish hook attached to a player's fishing rod.
#since 2.8.4
#Examples:
#delete current fish hook of player
expression:
	patterns:
		[the] (current|attached) fish[ing] hook[s] of %players%
		%players%'[s] (current|attached) fish[ing] hook[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: entity
#Fish Hook - Hooked Entity
#Represents the entity hooked to the fish hook.
#since 2.8.0
#Examples:
#on fish:
#	if fish state = caught entity:
#		delete hooked entity of fish event hook
expression:
	patterns:
		[the] hooked entity of %entities%
		%entities%'[s] hooked entity
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: entity
#Fish Hook - Hooked State
#Represents the hooked state of a fish hook.
#since 2.8.0
#Examples:
#if hook state of fish hook = bobbing:
expression:
	patterns:
		[the] [fish] hook[ed] state of %entities%
		%entities%'[s] [fish] hook[ed] state
	return type: fishhookstate
#Fish Hook - Wait time
#Represents the min/max wait time for a fish hook to catch a fish.
#
#NOTE: this is before applying lure.
#
#NOTE: min wait time must be less than max wait time. Both must be greater than 0.
#
#Defaults: min = 100 ticks (5 seconds), max = 600 ticks (30 seconds).
#since 2.8.0
#Examples:
#on fish:
#	if fish state = fishing:
#		set min wait time of fish hook to 1 second
#		set max wait time of fish hook to 2 seconds
expression:
	patterns:
		[the] (min|max) wait time of %entities%
		%entities%'[s] (min|max) wait time
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Fishing - Experience
#Get and modify the amount of experience dropped in a fishing event.
#since 2.14.0
#Examples:
#on fishing:
#	add 10xp to fishing experience
#	send fishing experience to player
expression:
	patterns:
		fish[ing] [event] experience
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: experience
#Game Event - Radius
#Get/set the radius a game event will broadcast. Requires MC 1.17+
#since 1.14.0
#Examples:
#on game event:
#	set game event radius to 20
expression:
	patterns:
		game[ ]event radius
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Game Tick of World
#Represents the game ticks of a world,
#essentially how many ticks this world has ticked from since creation.
#since 2.8.1
#Examples:
#set {_gt} to game ticks of world of player
expression:
	patterns:
		[the] game[ ]tick[s] of %worlds%
		%worlds%'[s] game[ ]tick[s]
	return type: long
#Give or Return Items
#Attempts to add items to an inventory and will return a list of items that did not fit in the inventory.
#since 3.0.0
#Examples:
#set {_i::*} to give or return diamond to player
#if {_i::*} is set:
#	drop {_i::*} at player
#set {_i::*} to add or return (a diamond and an emerald) to inventory of target block
#if {_i::*} is set:
#	drop {_i::*} above target block without velocity
expression:
	patterns:
		(give|add) or return %itemtypes% to %inventories%
	return type: itemtype
#Infinite Potion Effect
#Represents an infinite potion effect. This is similar to Skript's potion effect expression except it is infinite time.
#This can be used in Skript's `apply %potion effects% to %living entities%` effect!
#
#NOTE: This will cause console errors when sending as a string (This is an issue in Skript itself).
#This is only a temp solution until Skript adds a proper solution. Requires Minecraft 1.19.4+
#since 2.8.5
#Examples:
#set {_potion} to infinite potion effect of night vision of tier 1 without particles
#apply {_potion} to player
expression:
	patterns:
		[new] [ambient] infinite potion effect[s] of %potioneffecttypes% [[[of] tier] %number%] [without particles]
	return type: potioneffect
#Interaction - Interaction Width/Height
#Represents the interaction width/height of an Interaction Entity.
#See [**Interaction Entity Data**](https://minecraft.wiki/w/InteractionEntity_data) on McWiki for more details.
#since 2.8.1
#Examples:
#set interaction height of last spawned entity to 10
#add 5 to interaction width of {_int}
#remove 2.5 from interaction width of {_int}
#reset interaction height of {_int}
expression:
	patterns:
		[the] interaction (width|height) of %entities%
		%entities%'[s] interaction (width|height)
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Interaction - Is Responsive
#Represents the state of being responsive of an Interaction Entity.
#See [**Interaction Entity Data**](https://minecraft.wiki/w/InteractionEntity_data) on McWiki for more details.
#since 2.8.1
#Examples:
#set is responsive of {_int} to true
expression:
	patterns:
		[the] is responsive of %entities%
		%entities%'[s] is responsive
	set:
#		(internal code)
	return type: boolean
#Interaction - Last Attack/Interaction Player
#Represents the last player to attack/interact with an Interaction Entity.
#See [**Interaction Entity Data**](https://minecraft.wiki/w/InteractionEntity_data) on McWiki for more details.
#since 2.8.1
#Examples:
#set {_player} to last attack player of {_int}
expression:
	patterns:
		[the] last (attack|interaction) [offline[ ]]player[s] of %entities%
		%entities%'[s] last (attack|interaction) [offline[ ]]player[s]
	add:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: offlineplayer
#Interaction - Last Attack/Interaction Timestamp
#Represents the timestamp of the last attack/interaction of an Interaction Entity.
#As per Minecraft "The timestamp of the game tick when the event happened".
#Appears to be how many ticks since the world was created.
#See [**Interaction Entity Data**](https://minecraft.wiki/w/InteractionEntity_data) on McWiki for more details.
#since 2.8.1
#Examples:
#set {_time} to last attack timestamp of target entity
expression:
	patterns:
		[the] last (attack|interaction) timestamp[s] of %entities%
		%entities%'[s] last (attack|interaction) timestamp[s]
	return type: num
#ItemComponent - Bundle Contents
#Represents the contents of a bundle item.
#since 3.6.0
#Examples:
#add 100 diamonds to bundle contents of player's tool
#remove all diamonds from bundle contents of player's tool
#delete bundle contents of player's tool
expression:
	patterns:
		bundle contents of %itemtypes%
		%itemtypes%'[s] bundle contents
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: itemtype
#ItemComponent - Charged Projectiles
#The items loaded as projectiles into a crossbow. If not present, the crossbow is not charged.
#See [**Charged Projectiles Component**](https://minecraft.wiki/w/Data_component_formatcharged_projectiles) on McWiki for more details.
#Requires Paper 1.21.3+
#**Changers**:
#- `set` = Set the items to be loaded by the crossbow.
#- `reset` = Reset back to default state.
#- `delete` = Will delete any value (vanilla or not).
#since 3.8.0
#Examples:
#set charged projectiles of player's tool to an arrow and a stick
#delete charged projectiles component of player's tool
#reset charged projectiles component of player's tool
expression:
	patterns:
		charged projectiles [component] of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] charged projectiles [component]
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: object
#ItemComponent - Dyed Color
#Represents the dyed color component of an item.
#This will work on leather armor, or items that have a dye component on their item model.
#The `hidden` option will hide this value in the item's tooltip.
#See [**ItemModel**](https://minecraft.wiki/w/Data_component_formatdyed_color) on McWiki for more details.
#Requires Paper 1.21.3+
#**Changers**:
#`set` = Will set the dyed color of the item.
#`delete` = Will delete the dyed color of this item.
#`reset` = Will reset the dyed color back to the original value.
#since 3.9.0
#Examples:
#set dyed color of player's tool to red
#set dyed color of player's tool to rgb(255,100,3)
#set hidden dyed color of player's tool to yellow
#delete dyed color of player's tool
#reset dyed color of {_item}
expression:
	patterns:
		[the] [hidden] dyed color [component] of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] [hidden] dyed color [component]
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: color
#ItemComponent - Enchantable
#If present, and applicable enchantments are available, items with the component can be enchanted in an enchanting table.
#Positive integer representing the item's enchantability. A higher value allows enchantments with a higher cost to be picked.
#Requires Paper 1.21.3+
#See [**Enchantable Component**](https://minecraft.wiki/w/Data_component_formatenchantable) on McWiki for more details.
#**Changers**:
#- `set` = Allows you to override the glint.
#- `reset` = Reset back to default state.
#- `delete` = Will delete any value (vanilla or not).
#since 3.8.0
#Examples:
#set enchantable component of player's tool to 10
#delete enchantable component of player's tool
#reset enchantable component of {_item}
expression:
	patterns:
		[the] enchantable component of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] enchantable component
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#ItemComponent - Enchantment Glint Override
#Represents the enchantment glint override of an item. 
#Requires Minecraft 1.20.5+
#Overrides the enchantment glint effect on an item.
#When `true`, the item will display a glint, even without enchantments.
#When `false`, the item will not display a glint, even with enchantments.
#**Note**: If no override is applied, will return null.
#See [**EnchantmentGlintOverride**](https://minecraft.wiki/w/Data_component_formatenchantment_glint_override) on McWiki for more details.
#Requires Paper 1.21.3+
#**Changers**:
#- `set` = Allows you to override the glint.
#- `reset` = Reset back to default state.
#- `delete` = Will delete any value (vanilla or not).
#since 3.6.0
#Examples:
#set glint override of player's tool to true
#set glint override of player's tool to false
expression:
	patterns:
		[the] [enchantment] glint [override] of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] [enchantment] glint [override]
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: boolean
#ItemComponent - Glider
#If applied, allows players to glide (as with elytra) when equipped.
#If the item does not have a glider, it will return null, not false.
#See [**Glider Component**](https://minecraft.wiki/w/Data_component_formatglider) on McWiki for more details.
#Requires Paper 1.21.3+
#**Changers**:
#- `set` = If set to true, a glider will be applied, otherwise removed.
#- `reset` = Reset back to default state.
#- `delete` = Will delete any value (vanilla or not).
#since 3.8.0
#Examples:
#if glider component of player's tool is true:
#if glider component of {_item} is not set:
#set glider component of player's tool to true
#delete glider component of {_item}
#reset glider component of {_item}
expression:
	patterns:
		[the] glider component of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] glider component
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: boolean
#ItemComponent - Intangible Projectile
#If applied, a projectile item can't be picked up by a player when fired, except in creative mode.
#If the item does not have this component, it will return null, not false.
#See [**Intangible Projectile Component**](https://minecraft.wiki/w/Data_component_formatintangible_projectile) on McWiki for more details.
#Requires Paper 1.21.3+
#**Changers**:
#- `set` = If set to true, the component will be applied, otherwise removed.
#- `reset` = Reset back to default state.
#- `delete` = Will delete any value (vanilla or not).
#since 3.8.0
#Examples:
#set intangible projectile component of player's tool to true
#delete intangible projectile component of player's tool
#reset intangible projectile component of player's tool
expression:
	patterns:
		[the] intangible projectile component of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] intangible projectile component
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: boolean
#ItemComponent - Item Model
#Represents the item model component of an item.
#See [**ItemModel**](https://minecraft.wiki/w/Data_component_formatitem_model) on McWiki for more details.
#Requires Paper 1.21.3+
#**Changers**:
#`set` = Will set the item model of the item.
#`delete` = Will delete the item model of this item.
#`reset` = Will reset the item model back to the vanilla value.
#since 3.8.0
#Examples:
#set {_model} to item model of player's tool
#set item model of player's tool to "minecraft:diamond_sword"
#set item model of {_item} to "my_pack:some_cool_model"
#reset item model of player's tool
#delete item model of {_item}
expression:
	patterns:
		[the] item model of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] item model
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#ItemComponent - Max Stack Size
#Represents the max stack size of an item.
#See [**MaxStackSize**](https://minecraft.wiki/w/Data_component_formatmax_stack_size) on McWiki for more details.
#Requires Paper 1.21.3+
#**Changers**:
#- `set` = Set the max stack size, must be an integer between 1 and 99.
#- `delete` = Will remove the component from the item.
#- `reset` = Resets back to default stack size.
#since 3.6.0
#Examples:
#set max stack size component of player's tool to 1
#reset max stack size component of player's tool
expression:
	patterns:
		[the] max stack size component of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] max stack size component
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#ItemComponent - Repairable
#Represents the items/tags that will be used to repair an item in an anvil.
#See [**Repairable Component**](https://minecraft.wiki/w/Data_component_formatrepairable) on McWiki for more details.
#Requires Paper 1.21.3+
#**Patterns**:
#`repairable items` = A list of items that are used.
#`repairable tag` = A single Minecraft item tag that is used.
#**Changers**:
#- `set` = Set the items/tag to allow for repairing.
#- `reset` = Reset back to default state.
#- `delete` = Will delete any value (vanilla or not).
#since 3.8.0
#Examples:
#set {_items::*} to repairable items of player's tool
#set {_tag} to repairable tag of player's tool
#set repairable items of player's tool to diamond, iron ingot and emerald
#set repairable tag of player's tool to minecraft item tag "diamond_tool_materials"
#delete repairable tag of player's tool
#reset repairable tag of player's tool
expression:
	patterns:
		repairable [component] items of %itemstacks/itemtypes/slots%
		repairable [component] tag of %itemstacks/slots%
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: object
#ItemComponent - Tooltip Style
#The key of the custom sprites for the tooltip background and frame which references textures.
#See [**Tooltip Style Component**](https://minecraft.wiki/w/Data_component_formattooltip_style) on McWiki for more details.
#Requires Paper 1.21.3+
#**Changers**:
#- `set` = Set the key of the texture to use.
#- `reset` = Reset back to default state.
#- `delete` = Will delete any value (vanilla or not).
#since 3.8.0
#Examples:
#set tooltip style of {_item} to "my_pack:some_style"
#delete tooltip style of player's tool
#reset tooltip style of player's tool
expression:
	patterns:
		[the] tool[ ]tip style [component] of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] tool[ ]tip style [component]
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: text
#ItemComponent - Use Remainder
#If present, replaces the item with a remainder item if its stack count has decreased after use.
#Requires Paper 1.21.3+
#See [**Use Remainder Component**](https://minecraft.wiki/w/Data_component_formatuse_remainder) on McWiki for more details.
#**Changers**:
#- `set` = Set the item to be replaced with.
#- `reset` = Reset back to default state.
#- `delete` = Will delete any value (vanilla or not).
#since 3.8.0
#Examples:
#set use remainder of player's tool to 1 of glass bottle
#delete use remainder of {_item}
#reset use remainder of {_item}
expression:
	patterns:
		[the] use remainder [component] of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] use remainder [component]
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: item
#ItemComponent - repair cost component
#The number of experience levels to add to the base level cost when repairing, combining, or renaming this item with an anvil.
#Must be a non-negative integer, defaults to 0.
#since 3.6.0
#Examples:
#set repair cost component of player's tool to 3
#add 2 to repair cost component of player's tool
#subtract 1 from repair cost component of player's tool
#reset repair cost component of player's tool
#delete repair cost component of {_item}
#if repair cost component of player's tool > 0:
expression:
	patterns:
		[the] repair cost component of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] repair cost component
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#ItemType From NamespacedKey/BlockData
#Get an ItemType from a Minecraft namespaced key or BlockData.
#since 2.10.0
#Examples:
#set {_i} to itemtype from namespaced key from "minecraft:stone"
#set {_i} to itemtype from block data of target block
expression:
	patterns:
		item[ ]type[s] (from|of) %namespacedkeys/blockdatas%
	return type: itemtype
#Key of Block
#Get or set the lock of a container or beacon.
#Removed in Minecraft 1.21.2.
#See 'Apply Lock to Block' effect to apply an item as a lock to a block.
#since 2.16.0
#Examples:
#on right click on shulker box or beacon:
#	clicked block is locked
#	player has permission "see.locked"
#	send action bar "%container key of clicked block%" to player
expression:
	patterns:
		[the] (container|lockable) key of %blocks%
		%blocks%'[s] (container|lockable) key
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Knockback Attacker/Victim
#The attacker/victim in an entity knockback event. Paper 1.12.2+
#since 1.8.0
#Examples:
#on entity knockback:
#	if knockback attacker is a player:
#		if knockback victim is a sheep:
#			cancel event
expression:
	patterns:
		[the] knockback (attacker|victim)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: entity
#Loaded Custom Worlds
#Represents all loaded custom worlds created using SkBee.
#This will not include worlds created by other plugins, such as MultiVerse.
#since 3.5.3
#Examples:
#loop all loaded custom worlds:
expression:
	patterns:
		[all] loaded (custom|skbee) worlds
	return type: world
#LootTable - Items
#Get the items from a predefined LootTable.
#Optionals:
#Some loot tables will require some of these values whereas others may not.
#`seed` = Represents the random seed used to generate loot (if not provided will generate randomly).
#`looting modifier` = Set the looting enchant level equivalent to use when generating loot.
#Values less than or equal to 0 will force the LootTable to only return a single Item per pool.
#`luck` = How much luck to have when generating loot.
#`killer/looter` = The Player that killed/looted. This Player will be used to get the looting level if looting modifier is not set.
#`looted entity` = The Entity that was killed/looted.
#since 3.4.0
#Examples:
#set {_loottable} to loottable from key "minecraft:chests/ancient_city"
#set {_items::*} to looted items from {_loottable}
#give player looted items from (loottable from key "minecraft:gameplay/fishing")
expression:
	patterns:
		(looted|lootable) items from %loottable% [with seed %number%] [with looting modifier %number%] [with luck %number%] [with (killer|looter) %player%] [with looted entity %entity%]
	return type: item
#LootTable - LootTable of Lootable
#Get/set/delete the LootTable of a lootable object such as a block or entity.
#`with seed` = Provide an optional seed for loot generation otherwise will randomly generate.
#since 3.4.0
#Examples:
#set {_lootTable} to loottable of target block
#set loottable of target block to loottable from key "minecraft:chests/ancient_city"
expression:
	patterns:
		loot[ ]table of %blocks/entities% [with seed %number%]
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: loottable
#Merchant - Create
#Creates a new Merchant object with a title.
#since 1.17.0
#Examples:
#set {_merch} to new merchant named "Le-Merchant"
expression:
	patterns:
		[new ]merchant named %string%
	return type: merchant
#Merchant - Recipes
#Represents the recipes of a merchant. All recipes returns a list of all the recipes this merchant offers.
#You can also set/delete them or add to them. You can also get/set/delete a specific recipe.
#note: when setting/deleting a specific merchant recipe the merchant MUST have a recipe in that slot
#since 1.17.0
#Examples:
#add {_recipe} to merchant recipes of {_merchant}
#set merchant recipe 1 of {_merchant} to {_recipe}
expression:
	patterns:
		[all] merchant recipes of %merchants/entities%
		merchant recipe %number% of %merchants/entities%
	add:
#		(internal code)
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: merchantrecipe
#Merchant Recipe - Create
#Create a merchant recipe.
#
#NOTE: You will need to use the merchant recipe ingredients expression to add ingredients.
#
#max uses = A trade has a maximum number of uses. A Villager may periodically replenish it's trades
#by resetting the uses of it's merchant recipes to 0, allowing them to be used again.
#
#experience reward = A trade may or may not reward experience for being completed.
#
#Demand & Special Price were added in MC 1.18.x:
#
#demand = This value is periodically updated by the villager that owns this merchant recipe based on
#how often the recipe has been used since it has been last restocked in relation to its maximum uses.
#The amount by which the demand influences the amount of the first ingredient is scaled by the recipe's
#price multiplier, and can never be below zero.
#
#special price =  This value is dynamically updated whenever a player starts and stops trading with a
#villager that owns this merchant recipe. It is based on the player's individual reputation with the villager,
#and the player's currently active status effects (ex: hero of the village).
#The influence of the player's reputation on the special price is scaled by the recipe's price multiplier.
#since 1.17.0
#Examples:
#set {_m} to merchant recipe with result diamond sword with max uses 10
expression:
	patterns:
		[new] merchant recipe with result %itemtype% with max uses %number% [with uses %number%] [(|with experience reward)] [with villager experience %number%] [with price multiplier %number%] [with demand %number%] [with special price %number%]
	return type: merchantrecipe
#Merchant Recipe - Ingredients
#Represents the ingredients/result of a merchant recipe.
#Ingredients can be set, but the result can not be changed.
#If you wish to change the result, you will have to create a new merchant recipe.
#since 1.17.0
#Examples:
#set {_ing::*} to ingredients of merchant recipe {_recipe}
#set ingredients of merchant recipe {_recipe} to diamond and stone
#set {_result} to result item of merchant recipe {_recipe}
expression:
	patterns:
		(ingredients|result [item]) of merchant recipe %merchantrecipe%
	set:
#		(internal code)
	return type: itemtype
#Min/Max World Height
#Get the min/max height of a world.
#since 2.14.0
#Examples:
#set {_height} to max height of world of player
expression:
	patterns:
		[the] (min|max) height of %worlds%
		%worlds%'[s] (min|max) height
	return type: num
#Minecraft - EntityType
#Get the Minecraft EntityType from an entity.
#since 3.5.0
#Examples:
#set {_type} to minecraft entity type of target entity
expression:
	patterns:
		[the] minecraft entity type of %entities%
		%entities%'[s] minecraft entity type
	return type: minecraftentitytype
#Mob Awareness
#Represents whether this mob is aware of its surroundings.
#Turning this off is essentially like turning off the mobs AI.
#Unaware mobs will still move if pushed, attacked, etc. but will not move or perform any actions on their own.
#Unaware mobs will still be affected by gravity.
#Unaware mobs may also have other unspecified behaviours disabled, such as drowning.
#since 2.8.3
#Examples:
#if mob awareness of target entity = true:
#set mob awareness of target entity to false
expression:
	patterns:
		[the] mob awareness of %entities%
		%entities%'[s] mob awareness
	set:
#		(internal code)
	return type: boolean
#NBT - Compound of Object
#Get the NBT compound of a block/entity/item/file/chunk.
#SPECIAL CASES:
#- `full nbt of %item%` = Returns a copy of the FULL NBT of an item (this includes id, count and 'tag/components' compound).
#Modifying this will have no effect on the original item. This is useful for serializing items.
#- `nbt of %item%` = Returns the original. Modifying this will modify the original item.
#\- (MC 1.20.4-) This will return the 'tag' portion of an items full NBT.
#\- (MC 1.20.5+) This will return the 'components' portion of an item's full NBT.
#- `custom nbt of %item%` = Returns the 'minecraft:custom_data' component of an item's NBT. Modifying this will modify the original item. (This is an MC 1.20.5+ feature).
#Please see [**Data Component Format**](https://minecraft.wiki/w/Data_component_format) on McWiki for more information on item NBT components.
#Minecraft versions below 1.20.5, this will just return the NBT of the item.
#- `[full] vanilla nbt of %item%` = Will return the same as above except it will include vanilla components which don't normally show in NBT.
#- `nbt copy of %objects%` = Returns a copy of the original NBT compound. This way you can modify it without
#actually modifying the original NBT compound, for example when grabbing the compound from an entity, modifying it and applying to other entities.
#- `custom nbt of %object%` = Returns the custom portion of the NBT of the object (Minecraft doesn't natively allow custom NBT, so this is stored in varies spots based on the object).
#NBT from a file will need to be saved manually using
#the 'NBT - Save File' effect. If the file does not yet exist, a new file will be created.
#CHANGERS:
#- `add` = Adding a compound to another compound will merge them (This is controlled by Minecraft, results may vary).
#- `delete` = Will delete NBT files, or clear the NBT compound (This can break entities/players, be careful!).
#- `reset` = Will clear the NBT compound (This can break entities/players, be careful!)
#since 1.6.0
#Examples:
#set {_n} to nbt of player's tool
#set {_n} to full nbt of player's tool
#set {_nbt} to nbt of target entity
#set {_n} to nbt of chunk at player
#set {_n} to nbt copy of player
#set {_n} to nbt from "{components:{""minecraft:enchantments"":{levels:{""minecraft:sharpness"":3}}},count:1,id:""minecraft:diamond_sword""}"
#set {_nbt} to nbt of file "world/playerdata/some-uuid.dat"
#add nbt from "{NoAI:1}" to nbt of last spawned entity
#add nbt from "{NoGravity:1}" to nbt of {_entity}
#add nbt from "{custom:{points:1}}" to nbt of player
#add nbt from "{""minecraft:enchantments"":{levels:{""minecraft:sharpness"":10}}}" to component nbt of player's tool
#delete nbt from file "plugins/some/file.nbt"
#reset {_n}
#reset nbt of player's tool
expression:
	patterns:
		[full] [vanilla] [custom] nbt [compound] [copy] (of|from) %objects%
		nbt [compound] [copy] (of|from) file[s] %strings%
	add:
#		(internal code)
	delete:
#		(internal code)
	reset:
#		(internal code)
	return type: nbtcompound
#NBT - Empty Compound
#Returns an empty/new NBT compound.
#since 2.8.0
#Examples:
#set {_n} to blank nbt compound
#set tag "points" of {_n} to 10
expression:
	patterns:
		[a[n]] (blank|empty|new) nbt compound
	add:
#		(internal code)
	delete:
#		(internal code)
	reset:
#		(internal code)
	return type: nbtcompound
#NBT - Item from NBT
#This expression allows you to grab an item from NBT compounds.
#This can be useful when wanting to grab items from file nbt, or nbt of an entity or an inventory holding block (like a chest or furnace).
#It can also be useful for creating your own serializing system.
#NOTE: Items previously serialized in MC versions 1.20.4 and below, will properly upgrade for MC 1.20.5.
#since 1.4.10
#Examples:
#set {_nbt::*} to compound list tag "Inventory" of file nbt of "world/playerdata/some-players-uuid.dat"
#loop {_nbt::*}
#	set {_i} to item from nbt loop-value
expression:
	patterns:
		item[s] (from|of) nbt[s] %nbtcompounds%
		nbt item[s] (from|of) %nbtcompounds%
	return type: itemtype
#NBT - Item with NBT
#Get an item with nbt.
#NOTE: The NBT in the examples represents NBT for Minecraft 1.20.5+
#NOTE: The optional `custom` syntax will place nbt in the `"minecraft:custom_data"` component (1.20.5+ only).
#since 1.0.0
#Examples:
#give player diamond sword with nbt from "{""minecraft:food"":{nutrition:10,saturation:2.0f}}"
#set {_n} to nbt from "{custom_data:{points:10}}"
#set {_i} to netherite axe with nbt {_n}
#give player diamond pickaxe with nbt from "{""minecraft:damage"":500}"
#give player 30 apples with nbt from "{""minecraft:max_stack_size"":10}"
#These two have the same outcome, just showing the use of `custom` and how it places in the custom_data component.
#give player diamond sword with nbt from "{""minecraft:custom_data"":{points:10}}"
#give player diamond sword with custom nbt from "{points:10}"
expression:
	patterns:
		%itemtype% with [custom] [[item( |-)]nbt] %nbtcompound%
	return type: itemtype
#NBT - Pretty NBT String
#Get a 'pretty' NBT string. This is colored the same as when using the vanilla Minecraft '/data' command. 
#Splitting it will output kind of like a JSON output. Requires 1.13.2+
#since 1.6.0
#Examples:
#set {_pretty} to pretty nbt from nbt compound of player's tool
#send pretty nbt from nbt compound of player's tool
#set {_nbt} to nbt of player's tool
#send pretty nbt from {_nbt} to player
#send pretty nbt from {_nbt} with split " " to console
expression:
	patterns:
		pretty nbt (of|from) %nbtcompounds% [(with|using) split %string%]
		%nbtcompounds%'[s] pretty nbt [(with|using) split %string%]
	return type: text
#NBT - Tag
#Get/set/delete the value of the specified tag of an NBT compound. Also supports getting nested tags using a semi colon as a delimiter.
#If the return value is a list, you can use it as a list, as it will automatically split it for ya.
#**NOTES**:
#- `uuid tag` will set an int array tag (This is how MC stores uuids). On return it'll convert back to a uuid.
#- Entities/blocks can not natively hold custom NBT tags. SkBee allows you to put custom nbt
#data in the "custom" compound tag of a block/entity's NBT compound. Due to Minecraft not supporting this, I had to use some hacky methods to make this happen.
#That said, this system is a tad convoluted, see the SkBee WIKI for more details.
#- 1.20.5+: All custom data on items must be stored in the "minecraft:custom_data" compound (see examples and [**McWiki**](https://minecraft.wiki/w/Data_component_formatcustom_data)).
#- For more info regarding 1.20.5+ components please see [**Data Component Format**](https://minecraft.wiki/w/Data_component_format) on McWiki.
#- GET FROM LIST BY POSITION: You can get the element of a list by adding `[%number%]` to the end of a tag
#(This only works for getters, not set/add/remove/delete) see examples.
#**CHANGERS**:
#- ADD: You can add numbers to number type tags, you can also add numbers/strings/compounds to lists type tags.
#- REMOVE: You can remove numbers from number type tags, you can also remove numbers/strings from lists type tags.(You can NOT remove compounds from lists type tags)
#since 1.0.0
#Examples:
# Getting the value of a simple tag
#set {_damage} to int tag "minecraft:damage" of nbt of player's tool
#set {_sheared} to byte tag "Sheared" of nbt of target entity
#set {_pass::*} to compound list tag "Passengers" of nbt of last spawned entity
#set {_pos::*} to double list tag "Pos" of nbt of {_sheep}
#set {_burntime} to short tag "BurnTime" of nbt of target block
#set {_items::*} to compound list tag "Items" of nbt of target block
# Getting the value of a nested tag
#set {_maybuild} to byte tag "abilities;mayBuild" of nbt of player
#set {_x} to int tag "Leash;X" of nbt of target entity
#set {_pos::*} to int array tag "LastDeathLocation;pos" of nbt of player
# Setting the value of a simple tag
#set int tag "Damage" of nbt of player's tool to 100
#set byte tag "Sheared" of nbt of last spawned entity to 1
#set double list tag "Pos" of nbt of {_sheep} to 1,100,1
#set short tag "BurnTime" of nbt of target block to 150
# Setting the value of a nested tag
#set byte tag "abilities;mayBuild" of nbt of player to 1
#set int array tag "LastDeathLocation;pos" of nbt of player to 1,64,1
# Setting the value of a custom tag of an entity/block
#set int tag "custom;points" of nbt of player to 55
#set short tag "custom;bloop" of nbt of last spawned entity to 10
#set uuid tag of "custom;owner" of nbt of target block to uuid of player
# Adding to the value of a tag
#add 10 to int tag "Score" of nbt of player
#add 50 to int tag "custom;points" of nbt of player
# Removeing from a value of a tag
#remove 10 from int tag "Score" of nbt of player
#remove 25 from int tag "custom;points" of nbt of player
# Getting elements from lists
#set {_c} to compound tag "Inventory[0]" of nbt of player
#set {_x} to double tag "Pos[0]" of nbt of player
#set {_y} to double tag "Pos[1]" of nbt of player
#set {_z} to double tag "Pos[2]" of nbt of player
#set {_s} to string tag "some_strings[5]" of {_nbt}
#set {_i} to int tag "intlist[1]" of {_nbt}
#set {_b} to byte tag "someBytes[10]" of {_nbt}
# Minecraft 1.20.5+ item component stuff
#set int tag "minecraft:max_damage" of nbt of player's tool to 500
#set int tag "minecraft:max_stack_size" of nbt of player's tool to 25
#set byte tag "minecraft:enchantment_glint_override" of nbt of player's tool to 1
#set compound tag "minecraft:fire_resistant" of nbt of player's tool to nbt from "{}"
#set string tag "minecraft:rarity" of nbt of player's tool to "epic"
# All custom data must be within the "minecraft:custom_data" compound
# See NBT Compound expression for futher details on the `custom nbt` expression
#set byte tag "Points" of custom nbt of player's tool to 10
#set int tag "MyBloop" of custom nbt of player's tool to 152
# These examples will do the same as above
#set byte tag "minecraft:custom_data;Points" of nbt of player's tool to 10
#set int tag "minecraft:custom_data;MyBloop" of nbt of player's tool to 152
expression:
	patterns:
		%nbttype% %string% of %nbtcompound%
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: object
#NBT - Tag Type
#Represents the NBT tag type of a tag in an NBT compound. This is mainly useful for debugging purposes.
#since 1.13.1
#Examples:
#set {_type} to tag type of tag "Pos" of nbt compound of player
expression:
	patterns:
		[nbt[ ]]tag[ ]type of tag %string% of %nbtcompound%
	return type: nbttype
#NBT - Tags
#Get all tags of an NBT compound.
#since 1.14.2
#Examples:
#set {_t::*} to nbt tags of {_n}
#set {_t::*} to nbt tags of nbt compound of player
expression:
	patterns:
		[the] nbt tags of %nbtcompound%
		%nbtcompound%'[s] nbt tags
	return type: text
#NBT - UUID for NBT
#Allows you to get an entity's UUID which can be represented in an NBT compound. Prior to 1.16 UUIDs were represented 
#as most/least significant bits. As of 1.16, they are now represented as int arrays. If the player/entity is excluded, this 
#will return a random UUID.
#since 1.5.2
#Examples:
#set {_u::*} to uuid int array of player
#set {_u} to uuid int array as string from player
#set {_m} to uuid most from target entity
#set {_l} to uuid least bits of event-entity
expression:
	patterns:
		uuid (int array[( as string)]|most[ bits]|least[ bits]) [(from|of) %offlineplayer/entity%]
	return type: object
#NamespacedKey - Get
#Get the namespaced key of an object or from a string.
#
#Note when getting key from string:
#NamespacedKeys are a string based key which consists of two components - a namespace and a key (ex: "namespace:key").
#Namespaces may only contain lowercase alphanumeric characters, periods, underscores, and hyphens.
#Minecraft uses the "minecraft:" namespace for built in objects.
#If a namespace is not provided, the Minecraft namespace will be used by default -> "minecraft:your_key"
#Keys may only contain lowercase alphanumeric characters, periods, underscores, hyphens, and forward slashes.
#Keep an eye on your console when using namespaced keys as errors will spit out when they're invalid.
#For more info please check out [**McWiki**](https://minecraft.wiki/w/Resource_location).
#since 2.6.0
#Examples:
#set {_key} to mc key of target block
#set {_key} to namespaced key of player's tool
#set {_key} to minecraft key of biome at player
#set {_n} to namespaced key from "minecraft:log"
#set {_custom} to namespaced key from "my_server:custom_log"
#set {_n} to namespaced key from "le_test"
expression:
	patterns:
		(minecraft|mc|namespaced|resource)[ ](key|id[entifier]|location)[s] [(from|of)] %objects%
	return type: namespacedkey
#NamespacedKey - Object From
#Get an object from a namespaced key.
#This may come in handy in an instance you have a string version that doesn't match Skript and can't be parsed.
#Also supports some custom objects such as custom Enchantments in Minecraft 1.21+
#Currently supported types: attribute, biome, damage type, enchantment, entity type, game event, item type,
#particle, potion effect type, statistic, world.
#since 2.17.0
#Examples:
#set {_n} to mc key from "minecraft:zombie"
#set {_e} to entity type from key {_n}
#set {_e} to entity type from key "armadillo"
#set {_e} to entity type from key "minecraft:breeze"
#spawn 1 of {_e} above target block
#set {_i} to itemtype from key "minecraft:stone_sword"
#give player 1 of {_i}
#set {_e} to enchantment from key "minecraft:breach"
#set {_e} to enchantment from key "custom:my_custom_enchant"
#set enchantment level of {_e} of player's tool to 3
#set {_e::*} to enchantments from keys "minecraft:sharpness" and "bloop:shiver"
expression:
	patterns:
		%*classinfo% from key[s] %namespacedkeys/strings%
	return type: object
#Nearest Entity
#Returns the nearest entity around a location/entity. Requires PaperMC.
#
#NOTE: When using `around entity`, this will exclude that entity in the search.
#
#NOTE: When radius is excluded, the distance will default to Skript's `maximum target block distance`.
#since 2.7.2
#Examples:
#kill nearest player in radius 10 around player
#damage nearest mob in radius 5 around player
#set {_near} to nearest entity in radius 50 around {_loc}
#set {_near} to nearest entity in radius 100 around location(100,100,100,world "world")
#teleport player to nearest player in radius 10 around player
#damage 10 nearest entity in radius 10 around player by 2
#set {_p} to nearest player around player excluding (all player's where [input doesn't have permission "some.perm"])
expression:
	patterns:
		[%number%] nearest %entitydata% [in radius %number%] (at|of|around) %location/entity% [excluding %entities%]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: entity
#Parse Effect - With Return
#This will parse a string as an effect, execute it and return whether or not it executed.
#Works the same as Skript's 'effect commands'.
#since 2.15.0
#Examples:
#command /parse <string>:
#	trigger:
#		if parse effect arg-1 = false:
#			send "ERROR: %arg-1%"
expression:
	patterns:
		parse effect[s] %strings% [from %commandsender%]
	return type: boolean
#Pathfinding - Path Points
#Get all the points along an entity's pathfinding path. Requires Paper 1.13+
#since 1.5.0
#Examples:
#set {_path::*} to path points of last spawned sheep
expression:
	patterns:
		path [points] of %livingentities%
	return type: location
#Pathfinding - Path Target
#Set the path of an entity to target a specific location, with an optional speed
#Get the location of the paths end. Delete will stop the entity from pathfinding. Requires Paper 1.13+
#since 1.5.0
#Examples:
#set path target of event-entity to player
#set path target with speed 1.5 of last spawned entity to location above player
#set path targets of all entities to location of player
#delete path target of event-entity
expression:
	patterns:
		[the] [final] path target[s] [with speed %number%] of %livingentities%
		%livingentities%'[s] [final] path target[s] [with speed %number%]
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: location
#Player Health Scale
#Represents the scaled health of the player sent to the client.
#NOTE: This is not persistent, does not last restarts/relogs.
#NOTE: displayedHealth = (health * 2) / (max health * 2) * scale.
#NOTE: If the player is not currently health scaled, this will not be set.
#since 2.7.2
#Examples:
#set health scale of all players to 10
#add 10 to health scale of player
#reset health scale of player
#set health scale of ("BrettPlaysMC" parsed as offline player) to 0.01
expression:
	patterns:
		[the] health scale of %players%
		%players%'[s] health scale
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Player Idle Time
#Get/reset the idle time of a player.
#The idle duration is reset when the player sends specific action packets.
#Requires Paper 1.20.2+
#since 3.0.0
#Examples:
#if idle time of player > 1 minute:
#	kick player due to "hanging out too long"
expression:
	patterns:
		[the] idle (time|duration) of %players%
		%players%'[s] idle (time|duration)
	reset:
#		(internal code)
	return type: timespan
#Player Time
#Represents the current time on the player's client.
#When relative is used the player's time will be kept synchronized to its world time with the specified offset.
#When using non-relative time the player's time will stay fixed at the specified time parameter.
#It's up to the caller to continue updating the player's time.
#To restore player time to normal use reset.
#Both Time and TimeSpan can be used for this. It is best to use Time for non-relative and TimeSpan for relative.
#Relative will return as a TimeSpan (the offset from world time), non-relative will return as a Time.
#since 3.3.0
#Examples:
#set player time of player to 12:00am
#set player time of all players to 6pm
#set relative player time of player to 12000 ticks
#set relative player time of player to 10 minutes
#set relative player time of all players to 6000 ticks
#add 10 minutes to player time of player
#add 1 minute to relative player time of player
#remove 10 minutes from player time of all players
#remove 1 minute from relative player time of player
#reset player time of player
#reset player time of all players
expression:
	patterns:
		[the] [relative] (player|client) time of %players%
		%players%'[s] [relative] (player|client) time
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Potion Effect Duration
#Get the duration of a potion effect. If running 1.19.4+ and the potion is infinite,
#it will return as the max available time.
#since 2.8.5
#Examples:
#set {_duration::*} to potion duration of active potion effects of player
expression:
	patterns:
		[the] potion [effect] duration[s] of %potioneffects%
		%potioneffects%'[s] potion [effect] duration[s]
	return type: timespan
#Potion Effect Tier
#Get the tier of a potion effect.
#
#Note: This is the Minecraft potion effect amplifier + 1, Skript adds 1 for some odd reason.
#since 2.8.5
#Examples:
#set {_tiers::*} to potion tiers of active potion effects of player
expression:
	patterns:
		[the] potion [effect] (tier|amplifier)[s] of %potioneffects%
		%potioneffects%'[s] potion [effect] (tier|amplifier)[s]
	return type: num
#PotionType of Item
#Get/set/delete the potion type of an item.
#This is not the same as the potion effect type, this is the base potion Minecraft uses for the potion items in the creative menu.
#since 3.8.1
#Examples:
#set potion type of player's tool to strong_leaping
#if potion type of player's tool = strong leaping:
#delete potion type of player's tool
expression:
	patterns:
		[the] potion type of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] potion type
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: potiontype
#Property - Property of Object
#Represents different properties of an object.
#See [**Property Wiki**](https://github.com/ShaneBeee/SkBee/wiki/Properties) for available properties and examples.
#since 3.10.0
expression:
	patterns:
		%*property% property of %objects%
		%objects%'[s] %*property% property
	return type: object
#PufferFish - Puff State
#Represents the puff state of a puffer fish. An integer between 0 and 2
#since 2.8.0
#Examples:
#set puff state of target entity to 1
#add 1 to puff state of target entity
#reset puff state of target entity
expression:
	patterns:
		[the] puff state of %entities%
		%entities%'[s] puff state
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Quaternion - From Vector
#Create a quaternion from a vector.
#The XYZ of the vector will represents the degrees the display entity will rotate on the XYZ axis.
#since 3.2.0
#Examples:
#set {_q} to quaternion from vector(0,45,0)
#set display right rotation of {_e} to {_q}
expression:
	patterns:
		quat[ernion] from [vector] %vector%
	return type: quaternion
#Quaternion - Rotated
#Rotate a quaternion along the XYZ axis using a vector.
#since 3.2.0
#Examples:
#function rotateDisplay(e: entity, v: vector):
#	set {_q} to display right rotation of {_e}
#	set {_q} to {_q} rotated by {_v}
#	set display right rotation of {_e} to {_q}
#rotateDisplay({_entity}, vector(45,0,0))
expression:
	patterns:
		%quaternions% rotated (by|around) %vector%
	return type: quaternion
#Quaternion - Values
#Represents the x/y/z/w values of a quaternion.
#since 2.8.2
#Examples:
#add 1 to quat-x of {_q}
#remove 1 from quat-x of {_q}
#reset quat-x of {_q}
#set {_x} to quat-x of display right rotation of {_display}
expression:
	patterns:
		[the] quat[ernion]-(x|y|z|w) of %quaternions%
		%quaternions%'[s] quat[ernion]-(x|y|z|w)
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#RayTrace - From Entity
#RayTrace from an entity.
#
#Default max distance = 'maximum target block distance' in Skript's config.
#
#RaySize = entity bounding boxes will be uniformly expanded (or shrunk)
#by this value before doing collision checks (default = 0.0).
#
#IngorePassableBlocks = Will ignore passable but collidable blocks (ex. tall grass, signs, fluids, ..). [Added in SkBee 3.0.0]
#
#Ignoring Entities/EntityTypes = Will ignore the entities/entitytypes from the final ray. [Added in SkBee 3.5.0]
#since 2.6.0
#Examples:
#set {_ray} to ray trace from player with max distance 25
#set {_ray} to ray trace from player with max distance 25 while ignoring passable blocks
#set {_rays::*} to raytrace from all players with ray size 0.1
expression:
	patterns:
		ray[ ]trace from %livingentities% [with max distance %number%] [with ray size %number%] [while ignoring passable blocks] [while ignoring %entities/entitydatas%]
	return type: raytraceresult
#RayTrace - From Location
#RayTrace from a location along a vector.
#
#Default max distance = 'maximum target block distance' in Skript's config.
#
#RaySize = entity bounding boxes will be uniformly expanded (or shrunk)
#by this value before doing collision checks (default = 0.0).
#
#IngorePassableBlocks = Will ignore passable but collidable blocks (ex. tall grass, signs, fluids, ..). [Added in SkBee 3.0.0]
#
#Ignoring Entities/EntityTypes = Will ignore the entities/entitytypes from the final ray. [Added in SkBee 3.5.0]
#since 2.6.0
#Examples:
#set {_ray} to ray trace from location of target block along vector(0.25,0.3,0) with max distance 50
expression:
	patterns:
		ray[ ]trace from %location% along %vectors% [with max distance %number%] [with ray size %number%]  [while ignoring passable blocks] [while ignoring %entities/entitydatas%]
	return type: raytraceresult
#RayTrace - Hit Block
#Gets the hit block resulting from a RayTrace.
#since 2.6.0
#Examples:
#set {_hit} to ray trace hit block of {_ray}
expression:
	patterns:
		[the] [ray[ ]trace] hit block of %raytraceresults%
		%raytraceresults%'[s] [ray[ ]trace] hit block
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#RayTrace - Hit BlockFace
#Gets the hit BlockFace resulting from a RayTrace.
#since 2.6.0
#Examples:
#set {_face} to ray trace hit blockface of {_ray}
expression:
	patterns:
		[the] [ray[ ]trace] hit blockface of %raytraceresults%
		%raytraceresults%'[s] [ray[ ]trace] hit blockface
	return type: blockface
#RayTrace - Hit Entity
#Gets the hit entity resulting from a RayTrace.
#since 2.6.0
#Examples:
#set {_hit} to raytrace hit entity of {_ray}
expression:
	patterns:
		[the] [ray[ ]trace] hit entity of %raytraceresults%
		%raytraceresults%'[s] [ray[ ]trace] hit entity
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: entity
#RayTrace - Hit Location
#Get the hit location resulting from a RayTrace.
#since 2.6.0
#Examples:
#set {_hit} to hit location of {_ray}
expression:
	patterns:
		[the] [ray[ ]trace] hit location of %raytraceresults%
		%raytraceresults%'[s] [ray[ ]trace] hit location
	return type: location
#RayTrace - Hit Position
#Get the hit position resulting from a RayTrace (returns a vector).
#since 2.6.0
#Examples:
#set {_vec} to hit position of {_ray}
expression:
	patterns:
		[the] [ray[ ]trace] hit (position|vector) of %raytraceresults%
		%raytraceresults%'[s] [ray[ ]trace] hit (position|vector)
	return type: vector
#Recipe - All Recipes
#Get a list of all recipes. May be from a specific item, may be just Minecraft recipes or custom recipes.
#Due to some items having more than 1 recipe this may return multiple recipes. Requires 1.13+
#since 1.4.0
#Examples:
#set {_recipes::*} to all recipes of iron ingot
expression:
	patterns:
		[(all [[of] the]|the)] [((mc|minecraft)|custom)] recipe[s] [(for|of) %itemtypes%]
	return type: text
#Recipe - CookTime
#Get the cooktime of a cooking recipes.
#since 2.18.0
#Examples:
#set {_time} to cooktime of recipe with id "minecraft:cooked_chicken"
expression:
	patterns:
		cook[ ]time of recipe[s] [with id[s]] %strings%
	return type: timespan
#Recipe - Crafting Result from Items
#Get the resulting item/id which would be crafted with a list of items.
#This requires either 4 or 9 items, to follow the 2x2 and 3x3 crafting grids respectively.
#Use `air` to represent blank slots in the crafting grid.
#I have no clue what the world is for since recipes are not per world, but Bukkit offers it so here we are.
#since 3.8.0
#Examples:
#set {_barrel} to crafting result of oak planks, oak slab, oak planks, oak planks, air, oak planks, oak planks, oak slab, oak planks
#set {_carrotOnStick} to crafting result of fishing rod, air, air, carrot
#set {_diamondSwordId} to crafting result id of air, diamond, air, air, diamond, air, air, stick, air
expression:
	patterns:
		crafting result [item|id] (of|from) [items] %itemtypes% [in %world%]
	return type: object
#Recipe - Experience
#Get the experience gained from a cooking recipe.
#since 2.18.0
#Examples:
#set {_time} to experience of recipe with id "minecraft:cooked_chicken"
expression:
	patterns:
		(experience|[e]xp) of recipe[s] [with id[s]] %strings%
	return type: num
#Recipe - Ingredients of Recipe
#Get the ingredients from a recipe. Requires 1.13+
#since 1.4.0
#Examples:
#set {_ing::*} to ingredients of recipe "minecraft:diamond_sword"
#loop recipes for iron ingot:
#	set {_ing::*} to ingredients of recipe %loop-value%
expression:
	patterns:
		[(all [[of] the]|the)] ingredients (for|of) recipe %string%
	return type: itemtype
#Recipe - Recipe Type
#Get the type of a recipe.
#
#ID = Minecraft or custom NamespacedKey, see examples.
#since 2.6.0
#Examples:
#set {_type} to recipe type of recipe with id "minecraft:oak_door"
#set {_type} to recipe type of recipe "skbee:some_recipe"
#set {_type} to recipe type of recipe with id "my_recipes:some_custom_recipe"
#if recipe type of recipe with id "my_recipes:some_custom_recipe" = shaped recipe:
expression:
	patterns:
		recipe type of recipe[s] [with id[s]] %strings%
	return type: recipetype
#Recipe - Result
#Get the result item of a recipe.
#
#ID = Minecraft or custom NamespacedKey, see examples.
#since 2.6.0
#Examples:
#set {_result} to result of recipe "minecraft:oak_door"
#set {_result} to result of recipe "skbee:some_recipe"
#set {_result} to result of recipe "my_recipes:some_custom_recipe"
expression:
	patterns:
		result[s] of recipe[s] [with id[s]] %strings%
	return type: itemtype
#Recipe - Result Slot
#Represents the result slot of a crafting event.
#This can be changed.
#since 3.6.1
#Examples:
#on crafter craft:
#	if event-string = "minecraft:diamond_sword":
#		set name of recipe result to "Señor Sword"
#	else:
#		set recipe result to a stick named "&cNice Try"
#on preparing craft:
#	set {_e} to event-string
#	if {_e} = "minecraft:diamond_shovel":
#		set name of recipe result to "&cMr Shovel"
expression:
	patterns:
		recipe result [slot]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: slot
#Recipe Choice - Material Choice
#A material choice is a list of items or a minecraft tag, that can be used as an option in some recipes.
#Will return as a RecipeChoice.
#When using the 'every' item type, this will grab all relatable items in a list, ie: 'every sword'.
#This allows you to have one specific slot of a recipe to accept multiple items, without having to create multiple recipes.
#Do note that material choices do not accept custom items (ie: items with names, lore, enchants, etc). Requires Minecraft 1.13+
#since 1.10.0
#Examples:
#set {_a} to material choice of diamond sword, diamond shovel and diamond hoe
#set {_choice} to material choice of every sword
#set {_choice} to material choice of every sword and every axe
#set {_choice} to material choice of minecraft tag "minecraft:planks"
expression:
	patterns:
		material choice of %itemtypes/minecrafttags%
	return type: recipechoice
#Regeneration Rate
#Represents the regeneration rate (1 health per x ticks) of the Player.
#
#Saturated = When they have saturation and their food level >= 20. Default is 10 ticks.
#
#Unsaturated = When they have no saturation and their food level >= 18. Default is 80 ticks.
#since 3.0.2
#Examples:
#set {_regen} to saturated regen rate of player
#set unsaturated regen rate of player to 10 ticks
#add 1 second to unsaturated regen rate of player
expression:
	patterns:
		[the] [un]saturated regen[eration] rate of %players%
		%players%'[s] [un]saturated regen[eration] rate
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Registry - Registry Values
#Get all values from a registry.
#since 3.8.0
#Examples:
#set {_biomes::*} to registry values of biome registry
#loop registry values of item registry:
expression:
	patterns:
		registry values of %registrykey%
	return type: object
#Registry - TagKey from Registry
#Get a TagKey from a registry.
#since 3.8.0
#Examples:
#set {_tagkey} to tag key "minecraft:wool" from block registry
#set {_tagkey} to tag key "my_pack:cool_enchantments" from enchantment registry
#set {_tagkey} to item registry tag key "minecraft:swords"
expression:
	patterns:
		tag key %string% from %registrykey%
		%registrykey% tag key %string%
	return type: tagkey
#Registry - TagKeys from Registry
#Get all the tag keys that belong to a registry.
#since 3.8.0
#Examples:
#loop tag keys of block registry:
#set {_keys::*} to tag keys of biome registry
expression:
	patterns:
		tag keys (of|from) %registrykey%
	return type: tagkey
#Respawn Reason
#Represents the reason the respawn event was called. Requires MC 1.19.4+
#since 2.8.4
#Examples:
#on respawn:
#	if respawn reason = death respawn:
#		give player 10 diamonds
expression:
	patterns:
		respawn reason
	return type: respawnreason
#Scoreboard - Criteria Create
#Get one of the default Minecraft scoreboard criterias.
#You can also get a criteria bassed off a statistic.
#(see [**Scoreboard Criteria**](https://minecraft.wiki/w/ScoreboardCriteria) on McWiki) or create your own.
#since 2.6.0
#Examples:
#set {_c} to criteria with id "health"
#set {_c} to criteria from sprint_one_cm
#set {_c} to criteria from mine_block using diamond ore
#set {_c} to criteria from interact_with_anvil using diamond
#set {_c} to criteria from craft_item using diamond sword
#set {_c} to criteria from mob_kills using a player
expression:
	patterns:
		criteria with id %string%
		criteria from [statistic] %statistic% [(using|with) %itemtype/blockdata/entitydata%]
	return type: criteria
#Scoreboard - Objective Create
#Create an objective.
#- `id` = The id used to keep track of your objective.
#- `criteria` = Uses a criteria object. If using an older server version, this will just be a string.
#- `named` = The display name of this objective.
#- `for scoreboard` = Optionally use a specific scoreboard (will default to the main scoreboard).
#- `render type` = How this objective will render, hearts or integer.
#- `display slot` = Where this objective will render.
#since 2.6.0
#Examples:
#set {_obj} to objective with id "le-health" with criteria {_c} named "&bLe &cHealth" with render type hearts in display slot player_list
#set {_obj} to objective with id "my_objective" with criteria "dummy" named "OUR GOALS!" for scoreboard of player
expression:
	patterns:
		objective with id %string% with [criteria] %criteria/string% named %string% [(for|of|from) %scoreboard%] [with render[ ]type %rendertype%] [(with|in) [display[ ]slot] %displayslot%]
	delete:
#		(internal code)
	return type: objective
#Scoreboard - Objective DisplaySlot
#Get/Set the display slot of an objective.
#since 2.6.0
#Examples:
#set display slot of {_objective} to player_list
expression:
	patterns:
		[objective] display[ ]slot of %objective%
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: displayslot
#Scoreboard - Objective Get
#Get an already registered objective.
#Optionally can input a scoreboard (will default to main scoreboard).
#since 2.6.0
#Examples:
#set {_obj} to objective with id "le-objective"
#set {_obj} to objective with id "my_objective" from player's scoreboard
expression:
	patterns:
		objective (with id|from [id]) %string% [(from|of) %scoreboard%]
	delete:
#		(internal code)
	return type: objective
#Scoreboard - Objective Name
#Represents the name/display name of an objective.
#- `name` = The name/id given to the objective (Cannot be changed).
#- `display name` = The name the players will see [as a string] (Can be changed).
#- `component display name` = The name the players will see [as a text component] (Can be changed).
#since 2.6.0
#Examples:
#set objective display name of {_objective} to "le-objective"
expression:
	patterns:
		objective (name|id) of %objective%
		objective [component] display name of %objective%
	return type: object
#Scoreboard - Objective Number Format
#Represents the way an objective score can be formatted.
#There are three format types: Blank (nothing there), Fixed (a string of your choosing) and Styled (colored numbers).
#NOTES:
#`set` = You can set the format to any string you'd like (fixed) or a json component (styled number).
#`delete` = Will leave it blank (nothing will be there, just nothing).
#`reset` = Will reset back to its original format.
#See [**Json Formatting**](https://minecraft.wiki/w/Raw_JSON_text_format) on McWiki for more details.
#Requires Paper 1.20.4+
#since 3.4.0
#Examples:
# Format to a string/text component
#set number format of {-obj} to "Look Im Fancy!!"
#set number format of {-obj} for player to "Im a lil less fancy!"
#set number format of {-obj} for player to mini message from "<rainbow>Im a lil more fancy!"
# Format the number with color/style
#set number format of {-obj} for player to "{color:red,bold:true}"
#set number format of {-obj} to "{color:""0DEAE3"",bold:true}"
# Format to blank (will apply the 'blank' format)
#delete number format of {-obj}
#delete number format of {-obj} for player
# Reset formatting (will remove all formatting)
#reset number format of {-obj}
#reset number format of {-obj} for player
expression:
	patterns:
		number format of %objective% [for %entities/strings%]
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Scoreboard - Objective Score
#Get/Set the score of an entity/string for an objective.
#If the score has never been set, it'll return nothing.
#since 2.6.0
#Examples:
#set score of player for {_objective} to 10
#set score of "le_test" for {_objective} to 25
#set {_score} to score of target entity for {_objective}
#set {_score} to score of "le_test" for {_objective}
expression:
	patterns:
		score of %entities/strings% for %objective%
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Scoreboard - Objective Score Custom Name
#Get/change the custom name of the score of an objective for an entry.
#Supports both components and strings.
#Requires Paper 1.20.4+
#- `[component]` = Will return as a text component (for set this doesn't matter).
#- `delete` = Will set the name to an empty component.
#- `reset` = Will reset back to the original name.
#since 3.9.0
#Examples:
#set component custom score name of player for {_someObjective} to mini message from "Some Name"
#set custom score name of player for {_someObjective} to "Some Name"
#delete custom score name of "bob" for {_someObjective}
#reset custom score name of all entities for {_someObjective}
expression:
	patterns:
		[component] custom score name of %entities/strings% for %objective%
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Scoreboard - Objective from Criteria
#Get objectives from specific criterias of scoreboards.
expression:
	patterns:
		objectives (from|by) criteria[s] %criterias% [(of|from) %scoreboards%]
	delete:
#		(internal code)
	return type: objective
#Scoreboard - Objective from DisplaySlot
#Get/clear objectives from specific display slots of scoreboards.
#since 3.9.0
#Examples:
#set {_obj} to objectives from slot sidebar of scoreboard of player
#set {_obj} to objectives from slot player list
#set {_obj} to objectives from slot below name from main scoreboard
#clear objectives from slot player list of main scoreboard
expression:
	patterns:
		objective[s] (from|by) [display[ ]]slot[s] %displayslots% [(of|from) %scoreboards%]
	delete:
#		(internal code)
	return type: objective
#Scoreboard - Scoreboard Get
#Get the vanilla scoreboard, or create a new scoreboard (custom scoreboard are not persistent).
#since 3.9.0
#Examples:
#set {_scoreboard} to scoreboard of player
#set scoreboard of player to a new scoreboard
#set scoreboard of player to the vanilla scoreboard
#reset scoreboard of player
expression:
	patterns:
		[a] (new|custom) scoreboard
		[the] (vanilla|main|server|default) scoreboard
	return type: scoreboard
#Scoreboard - Scoreboard of Player
#Get/set the scoreboard of players.
#By default all players share the same main scoreboard unless given a new scoreboard.
#Do note that custom scoreboards are not persistent.
#Reset will reset the player's scoreboard back to the main server scoreboard.
#since 3.9.0
#Examples:
#set {_scoreboard} to scoreboard of player
#set scoreboard of player to a new scoreboard
#set scoreboard of player to the vanilla scoreboard
#reset scoreboard of player
expression:
	patterns:
		[the] scoreboard of %players%
		%players%'[s] scoreboard
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: scoreboard
#Server Platform
#Returns the platform the server is running on, ex: CraftBukkit, Spigot, Paper.
#
#NOTE: This is returned from Skript itself, results may vary when not running a standard Bukkit based server.
#since 3.0.1
#Examples:
#set {_platform} to server platform
#parse if server platform = "Paper":
#	set {_m} to mini message from "<gradient:0EFF87:0EE2FF>OH HI THERE"
#else:
#	set {_m} to "&bOH HI THERE"
#send {_m} to player
expression:
	patterns:
		server platform
	return type: text
#Server Tick - Frozen State
#Get/set the frozen tick state of the server.
#See [**Tick Command**](https://minecraft.wiki/w/Commands/tick) on McWiki for more details.
#Requires Minecraft 1.20.4+
#since 3.1.0
#Examples:
#set server frozen state to true
#if server frozen state = false:
expression:
	patterns:
		server (frozen|freeze) state
	set:
#		(internal code)
	return type: boolean
#Server Tick - Tick Rate
#Represents the tick rate of the server. Can be a value from `1.0` to `10000.0`.
#Supports fractional numbers, see examples.
#Default = 20.
#See [**Tick Command**](https://minecraft.wiki/w/Commands/tick) on McWiki for more details.
#Requires Minecraft 1.20.4+
#since 3.1.0
#Examples:
#set {_rate} to server tick rate
#set server tick rate to 100
#add 1.5 to server tick rate
#remove 3.75 from server tick rate
#reset server tick rate
expression:
	patterns:
		server tick rate
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Signed Chat Message
#Get the signed chat message from the async chat event. This can be used to delete message from clients.
#Requires PaperMC 1.19+
#Examples:
#Simplified Example
#on async chat:
#	set {_msg} to signed chat message
#	...a little while later
#	remove all players from {_msg}
#Extended Example With Chat Formatting
#on async chat:
#	setup chat format
#	set {_m::1} to text component from "&7[&cx&7]"
#	set {_m::2} to text component from " &b%player% &7» "
#	set {_m::3} to async chat message
#	setup option to delete message when clicking the "[x]"
#	set {_msg} to signed chat message
#	create callback for {_m::1}:
#		if player has permission "admin.chat.deletemessage":
#			remove all players from {_msg}
#	set chat format to our format
#	set {_format} to merge components {_m::*}
#	set async chat format to {_format}
expression:
	patterns:
		signed [chat] message
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: signedmessage
#Skript Type of Object
#Returns the Skript type (also known as 'ClassInfo') of an object.
#Useful for debugging. Will return as a string.
#since 2.5.2
#Examples:
#set {_info} to class info of player's tool
expression:
	patterns:
		[the] (class[ ]info|skript[ ]type) of %objects%
		%objects%'[s] (class[ ]info|skript[ ]type)
	return type: text
#Spawn Egg from Entity
#Gets a spawn egg from an entity/entityType. Requires Paper, or Spigot 1.20.1+.
#since 2.14.0
#Examples:
#set {_egg} to spawn egg of last spawned entity
#set {_egg} to spawn egg of (spawner type of target block)
expression:
	patterns:
		[the] spawn egg of %entities/entitydatas%
		%entities/entitydatas%'[s] spawn egg
	return type: itemtype
#Spawner - Max Nearby Entities
#Set the new maximum amount of similar entities that are allowed to be within spawning range of a spawner.
#If more than the maximum number of entities are within range, the spawner will not spawn and try again.
#Default value is 16.
#since 2.16.0
#Examples:
#add 10 to maximum nearby entities of {_spawner}
#remove 10 from maximum nearby entities of {_spawner}
#reset maximum nearby entities of {_spawner}
#set maximum nearby entities of {_spawner} to 10
expression:
	patterns:
		[the] max nearby [spawner] entities of %blocks%
		%blocks%'[s] max nearby [spawner] entities
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Spawner - Required Player Range
#Get the maximum distance(squared) a player can be in order for a spawner to be active.
#If this value is less than 0, the spawner is always active (given that there are players online).
#Otherwise if the value is 0 the spawner is never active.
#Default value is 16.
#since 2.16.0
#Examples:
#on place of mob spawner:
#	set required player range of event-block to 0
expression:
	patterns:
		[the] required (player|activation) range of %blocks%
		%blocks%'[s] required (player|activation) range
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Spawner - Spawn Count
#Get how many mobs attempt to spawn. Default is 4.
#since 2.16.0
#Examples:
#on place of mob spawner:
#	set spawner spawn count of event-block to 10
#	add 10 to spawn count of event-block
#	reset spawn count of event-block
expression:
	patterns:
		[the] [spawner] spawn count of %blocks%
		%blocks%'[s] [spawner] spawn count
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Spawner - Spawn Delay
#The delay between a spawner spawning a new entity.
#Maximum default is 800 ticks (40 seconds).
#Minimum default is 200 ticks (10 seconds).
#since 2.16.0
#Examples:
#on place of mob spawner:
#	set spawner spawn delay of event-block to 3 seconds
#	add 100 to max spawn delay of event-block
#	remove 1 second from min spawn delay of event-block
#	reset spawn delay of event-block
expression:
	patterns:
		[the] [(-min|max)[imum]] [spawner] spawn delay of %blocks%
		%blocks%'[s] [(-min|max)[imum]] [spawner] spawn delay
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Spawner - Spawn Range
#Get the radius around which a spawner will attempt to spawn mobs in.
#This area is square, includes the block the spawner is in, and is centered on the spawner's x,z coordinates - not the spawner itself.
#It is 2 blocks high, centered on the spawner's y-coordinate (its bottom); thus allowing mobs to spawn as high as its top surface and as low as 1 block below its bottom surface.
#Default value is 4.
#since 2.16.0
#Examples:
#on place of mob spawner:
#	set spawn range of event-block to random integer between 0 and 10
expression:
	patterns:
		[the] [spawner] spawn range of %blocks%
		%blocks%'[s] [spawner] spawn range
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Spellcaster Spell
#Get/set/reset the spell of a spell casting entity (Illusioner, Evoker).
#since 1.17.0
#Examples:
#set spell of target entity to fangs
#reset spell of target entity
expression:
	patterns:
		[the] [spellcaster] spell of %entities%
		%entities%'[s] [spellcaster] spell
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: spell
#Statistic - Get/Set
#Represents the statistic of a Player. You can get, set, add, remove or reset stats.
#since 1.17.0
#Examples:
#set {_s} to kill entity stat using sheep for player
#set kill entity stat using zombie for player to 10
#add 10 to mine block stat using diamond ore for player
#remove 10 from chest opened stat for player
#reset mob kills stat for player
expression:
	patterns:
		%statistic% stat[istic] [using %entitydata/itemtype%] (of|for) %offlineplayers%
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Stored Enchantments
#Get/set the stored enchantments of an enchanted book.
#since 1.0.0
#Examples:
#set {_a::*} to stored enchants of player's tool
#set stored enchants of player's tool to sharpness 3 and unbreaking 2
#add sharpness 1 to stored enchants of player's tool
#delete stored enchants of player's tool
#remove sharpness from stored enchants of player's tool
expression:
	patterns:
		[the] stored enchant[ment]s of %itemstacks/itemtypes%
		%itemstacks/itemtypes%'[s] stored enchant[ment]s
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: enchanting type
#Structure - BlockStates
#Get a list of the blockstates in a structure. This represents the palette of blocks a structure holds.
#Requires MC 1.17.1+
#since 1.12.3
#Examples:
#set {_list::*} to blockstates of structure {_structure}
expression:
	patterns:
		blockstates of [structure] %structure%
	return type: blockstate
#Structure - Last Placed Location
#Represents the location of the last place a structure was placed using the place structure effect.
#
#NOTE: This will only be saved to file if you use the save effect after placing a structure,
#otherwise it will not persist thru stop/restart.
#since 2.10.0
#Examples:
#set {_s} to structure named "test"
#place structure {_s} above traget block
#save structure {_s}
#set {_last} to last placed location of {_s}
expression:
	patterns:
		[the] last placed location of %structures%
		%structures%'[s] last placed location
	return type: location
#Structure - Object
#Create a new, empty structure or load a structure from file. 
#If the file you have specified is not available, it will be created upon saving.
#Structures without a namespace (ex: "tree") will default to the "minecraft" namespace and load from/save to "(main world folder)/generated/minecraft/structures/".
#Structures with a namespace (ex:"myname:house") will load from/save to "(main world folder)/generated/myname/structures/".
#To create folders, simply add a slash in your name, ex: "buildings/house".
#Changes made to structures will not automatically be saved to file, you will need to use the save structure effect.
#Requires MC 1.17.1+
#since 1.12.0
#Examples:
#set {_s} to structure with id "my-server:houses/house1"
#set {_s} to structure with id "my-house"
#set {_s} to structure with id "minecraft:village/taiga/houses/taiga_cartographer_house_1"
#set {_s::*} to structures with id "house1" and "house2"
expression:
	patterns:
		structure[s] (named|with id|with key) %strings%
	delete:
#		(internal code)
	return type: structure
#Structure - Properties
#Represents different properties of a structure, including mirroring, rotation, inclusion of entities and integrity.
#These properties are only used for placing the structure in a world, they are NOT saved to the structure file.
#Mirror determines which way the structure mirrors, either 'none', 'front back' or 'left right'.
#Rotation determines which way the structure is rotated, either 'none', 'clockwise 90', 'clockwise 180' or 'counterclockwise 90'.
#Integrity determines how damaged the building should look by randomly skipping blocks to place. This value can range from 0 to 1.
#With 0 removing all blocks and 1 spawning the structure in pristine condition.
#Include entities determines if saved entities should be spawned into the structure (true by default).
#Size returns a vector offset from the starting point of the structure. This cannot be changed.
#
#NOTE: `reset` will reset the value back to default. (added in v-2.7.2)
#Requires MC 1.17.1+
#since 1.12.0
#Examples:
#set structure rotation of {_s} to clockwise 90
#set {_r} to structure rotation of {_s}
#set {_v} to structure size of {_s}
#set structure include entities of {_s} to false
#set structure integrity of {_s} to 0.75
#reset structure rotation of {_s}
#reset structure integrity of {_s}
expression:
	patterns:
		structure mirror of %structures%
		structure rotation of %structures%
		structure integrity of %structures%
		structure include entities of %structures%
		structure size of %structures%
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Suspicious Block - Item
#Represents the item hiding in a Suspicious Block. Requires Minecraft 1.19.4+
#since 2.8.1, 2.14.0 (suspicious gravel)
#Examples:
#set suspicious item of target block to a diamond
#delete suspicious item of block at location(199,10,-199, "very_goodNames")
expression:
	patterns:
		[the] suspicious item of %blocks%
		%blocks%'[s] suspicious item
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: itemtype
#SwitchCase - Switch Return
#Switch an object and have it return a value.
#since 3.8.0
#Examples:
#function getRoman(i: number) :: string:
#	return switch return {_i}:
#		case 1 -> "I"
#		case 2 -> "II"
#		case 3 -> "III"
#		case 4 -> "IV"
#		case 5 -> "V"
#		default -> "potato"
#function getName(e: entity) :: string:
#	return switch return {_e}:
#		case sheep -> "Mr Sheepy"
#		case cow -> "Mr Cow"
#		case pig -> "Señor Pig"
#		default -> strict proper case "%type of {_e}%"
#on break:
#	set {_i} to switch return event-block:
#		case stone -> "Stoney Stone"
#		case dirt -> "Dirty Dirt"
#		case grass block -> "Grassy Grass"
#		default:
#			if gamemode of player = creative:
#				return "&c%type of switched object%"
#			else:
#				return "&a%type of switched object%"
#	send "Broken: %{_i}%" to player
expression:
	patterns:
		(switch return|return switch) %object%
	return type: object
#SwitchCase - Switched Value
#Represents the object that was 'switched' in a switch section/expression.
#**DEPRECATED** - This is no longer needed (was originally a bandaid for an issue with event-values).
#since 3.8.0
expression:
	patterns:
		[the] switched (object|value)
	return type: object
#Tab Completion Argument
#Get the argument or a list of all arguments in a tab complete event.
#since 1.7.0
#Examples:
#on tab complete of "/breakfast":
#	set tab completions for position 1 to "toast", "eggs" and "waffles"
#	if tab arg-1 = "toast":
#		set tab completions for position 2 to "butter", "peanut_butter" and "jam"
#	else if tab arg-1 = "eggs":
#		set tab completions for position 2 to "sunny_side_up", "scrambled" and "over_easy"
#set {_l::*} to tab args
expression:
	patterns:
		tab [complete] arg[ument](s|[(-| )]%number%)
	return type: text
#Tab Completions
#Set the tab completions used in a tab complete event.
#You can specify which position in the command arguments also.
#You can also remove texts from tab completions.
#since 1.7.0
#Examples:
#on tab complete of "/mycommand":
#	set tab completions for position 1 to "one", "two" and "three"
#	set tab completions for position 2 to 1, 2 and 3
#	set tab completions for position 3 to all players
#	set tab completions for position 4 to (indexes of {blocks::*})
#on tab complete:
#	if event-string contains "/ver":
#		remove "PermissionsEx" from tab completions
expression:
	patterns:
		[skbee] tab completion[s] [(of|for) (last position|position %number%)]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Task - ID
#Get the current task ID. This will only be tasks created with the task section.
#If running Folia, tasks do not have IDs and this will always return `-1`.
#since 3.3.0
#Examples:
#set {_id} to current task id
#run 0 ticks later repeating every second:
#	set {-id} to current task id
#	add 1 to {_a}
#	if {_a} > 10:
#		exit loop
#on unload:
#	stop all tasks
#on break:
#	stop task with id {-id}
expression:
	patterns:
		current task id
	return type: num
#Team - Color
#Get/set the color of a team.
#since 1.16.0
#Examples:
#set team color of {_team} to blue
#set team color of team of player to red
expression:
	patterns:
		[the] team color of %teams%
		%teams%'[s] team color
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: color
#Team - Entries
#Get the entries of a team. Entries can be entities/players or strings.
#**NOTE**: When returning as entities, if the entity isn't currently loaded in a world it won't return.
#OfflinePlayers will also not return. Use strings intead.
#**NOTE**: When returning as strings this will return the list how Minecraft stores it, player names and entity UUIDs.
#**NOTE**: adding/removing to/from team entries is now deprecated. Please directly add/remove to/from the team itself.
#See Team type docs for more info!
#since 1.16.0, 2.10.0 (strings)
#Examples:
#set {_team} to team named "my-team"
#clear team entries of {_team}
#kill team entries of team named "mob-team"
#set {_entities::*} to team entries of team named "mobs"
#set {_strings::*} to team entries as strings of team named "mobs"
expression:
	patterns:
		(string|entity) team entries of %teams%
		%teams%'[s] (string|entity) team entries
		[all] team entries [as strings] of %team%
		[all] team entries of %team% [as strings]
		%team%'[s] team entries [as strings]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	return type: object
#Team - Get
#Get an instance of a team, either from an entity or by name of team, or get a list of all teams.
#If getting a team by id, and it does not exist, a new team with that id will be registered.
#You have the option to get a team from a specific scoreboard (defaults to the main scoreboard).
#Teams off the main scoreboard cannot be serialized/saved to variables (This is due to custom scoreboards not being persistent).
#since 1.16.0
#Examples:
#set {_team} to team of player
#set {_team} to team with id "le-team"
#set {_teams::*} to all teams
expression:
	patterns:
		team (named|with id) %string% [(of|from) %scoreboard%]
		team of %entity% [(of|from) %scoreboard%]
		all teams [(of|from) %scoreboard%]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	return type: team
#Team - Name
#Represents the name and display name of a team.
#
#NOTE: Display name can be set, name cannot be set.
#since 2.10.0
#Examples:
#set team display name of {_team} to "The Warriors"
#set team display name of team of player to "The Rednecks"
#set team display name of team named "blue-team" to "Blue Team"
#set {_name} to team name of team of player
expression:
	patterns:
		[the] team [display] name of %teams%
		%teams%'[s] team [display] name
	return type: text
#Team - Options
#Represents an option for a team.
#since 1.16.0
#Examples:
#set team option name tag visibility of team named "a-team" to never
#set team option collision rule of team of player to always
expression:
	patterns:
		team option %teamoption% of %teams%
		%teams%'[s] team option %teamoption%
	set:
#		(internal code)
	return type: teamoptionstatus
#Team - Prefix/Suffix
#Get/set/delete the prefix/suffix of a team.
#since 1.16.0
#Examples:
#set team prefix of {_team} to "[OWNER]"
#set team suffix of {_team} to "[GOLD]"
#set {_pre} to team prefix of {_team}
#set team prefix of team of player to "[BestTeam]"
expression:
	patterns:
		[the] team (prefix|suffix) of %team%
		%team%'[s] team (prefix|suffix)
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Team - State
#Represents the friendly fire and can see friendly invisibles states of a team.
#since 1.16.0
#Examples:
#set allow friendly fire team state of team named "a-team" to true
#set can see friendly invisbles team state of team of player to false
expression:
	patterns:
		[the] (allow friendly fire|can see friendly invisibles) team state of %teams%
		%teams%'[s] (allow friendly fire|can see friendly invisibles) team state
	set:
#		(internal code)
	return type: boolean
#TextComponent - Async Chat Format/Message
#Get/set the chat message from an async chat event as a text component.
#Set the chat format of an async chat event (no getter for this).
#Requires PaperMC!
#since 2.18.0
#Examples:
#on async chat:
#	set {_m::1} to mini message from "<gradient:33FFE6:33FF68>%player% &7» "
#	set {_m::2} to async chat message
#	set {_m} to merge components {_m::*}
#	set async chat format to {_m}
expression:
	patterns:
		async chat (format|message)
	set:
#		(internal code)
	return type: textcomponent
#TextComponent - Block Name
#Get/set/delete the custom name of a block. This will work on container blocks and skulls.
#Skulls require Paper 1.21.4(Build 214)+
#Even though the custom name of any skull can be set, only a player head will retain its name when broken (Skeleton/creeper/etc skulls will not).
#since 3.10.1
#Examples:
#set {_name} to component block name of target block
#set component block name of target block to mini message from "<rainbow>Mr Potato Head!"
#delete component block name of target block
expression:
	patterns:
		[the] component [custom] block name of %block%
		%block%'[s] component [custom] block name
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: textcomponent
#TextComponent - Chest Inventory
#Create a chest inventory with a component name.
#since 2.4.0
#Examples:
#set {_t} to mini message from "<rainbow>THIS IS A CHEST"
#set {_i} to chest inventory with component name {_t} with 2 rows
#set slot 1 of {_i} to diamond sword
#open {_i} to player
expression:
	patterns:
		[a [new]] chest inventory with component name %textcomponent% [with %number% row[s]]
		[a [new]] chest inventory with %number% row[s] with component name %textcomponent%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: inventory
#TextComponent - Children
#Get the children of a text component. This essentially splits the component up into its parts.
#since 2.14.0
#Examples:
#set {_children::*} to component children of {_textcomp}
expression:
	patterns:
		[text] component children of %textcomponents%
	add:
#		(internal code)
	return type: textcomponent
#TextComponent - Click Event
#Create a new click event. Supports run command, suggest command, open link and copy to clipboard.
#since 1.5.0
#Examples:
#set {_t} to text component from "Check out my cool website"
#add hover event showing "Clicky clicky to go to spawn!" to {_t}
#add click event to open url "https://my.cool.website" to {_t}
#send component {_t} to player
expression:
	patterns:
		[a] [new] click event to run command %string%
		[a] [new] click event to suggest command %string%
		[a] [new] click event to open (link|url) %string%
		[a] [new] click event to copy %string% to clipboard
		[a] [new] click event to change to page %number%
	return type: object
#TextComponent - Click Event Of
#Set the click event of a text component.
#since 1.5.0
#Examples:
#set {_t} to text component from "Check out this cool thing at SPAWN!"
#set hover event of {_t} to a new hover event showing "Clicky clicky to go to spawn!"
#set click event of {_t} to a new click event to run command "/spawn"
#send component {_t} to player
expression:
	patterns:
		[the] click event of %textcomponents%
		%textcomponents%'[s] click event
	set:
#		(internal code)
	return type: object
#TextComponent - Entity Name
#Get/set the component name of an entity.
#- `name` = The vanilla name of an Entity, or the player's profile name (cannot be changed).
#- `custom name` = The custom name of an entity, will only show when the player's crosshair is pointed at them.
#- `display name` = Same as custom name, but will always show.
#since 2.4.0
#Examples:
#set component entity name of target entity to translate component from "entity.minecraft.llama"
expression:
	patterns:
		[the] component entity [custom|display] name of %entities%
		%entities%'[s] component entity [custom|display] name
	return type: textcomponent
#TextComponent - Format
#Change formatting options of text components. Most of these are pretty straight forward. 
#Insertion means the text that will copy to chat when a player shift-clicks the component (Might not be available on all versions). 
#Color supports color names as well as RGB color codes via Skript's RGB function (see examples).
#Fallback is the fallback text used in a translation component when the client cannot find said translation.
#since 1.5.1
#Examples:
#set {_t} to text component from "my fancy text component"
#set bold format of {_t} to true
#set color format of {_t} to aqua
#set color format of {_t} to rgb(100, 0, 160)
#set insertion format of {_t} to "ooooo"
#set fallback format of {_t} to "Le Fallback"
expression:
	patterns:
		[the] (color|bold|italic|(obfuscate[d]|magic)|strikethrough|underline[d]|font|insert[ion]|fallback) format of %textcomponents%
		%textcomponents%'[s] (color|bold|italic|(obfuscate[d]|magic)|strikethrough|underline[d]|font|insert[ion]|fallback) format
	set:
#		(internal code)
	return type: object
#TextComponent - Hover Event
#Create a new hover event. Can show texts, text components, an item or an entity to a player.
#'showing %itemtype%' requires Minecraft 1.18.2+
#since 1.5.0
#Examples:
#set {_t} to text component from "Check out my cool tool!"
#add hover event showing player's tool to {_t}
#send component {_t} to player
expression:
	patterns:
		[a] [new] hover event showing %strings/textcomponents/itemstacks/entities%
	return type: object
#TextComponent - Hover Event Of
#Set the hover event of a text component.
#since 1.5.0
#Examples:
#set {_t} to text component from "Check out my cool tool!"
#set hover event of {_t} to a new hover event showing player's tool
#send component {_t} to player
expression:
	patterns:
		[the] hover event of %textcomponents%
		%textcomponents%'[s] hover event
	set:
#		(internal code)
	return type: object
#TextComponent - Inventory Name
#Get/set the name of an inventory using components.
#NOTE: This will only rename OPEN inventories, not inventories saved in variables.
#NOTE: Internally the component is stringified, so things like fonts wont work.
#Requires Minecraft 1.21+
#For versions below 1.21, just use Skript's inventory title expression.
#since 2.4.0
#Examples:
#set component inventory title of player's current inventory to {_t}
expression:
	patterns:
		[the] component inventory (name|title) of %inventories%
		%inventories%'[s] component inventory (name|title)
	set:
#		(internal code)
	return type: textcomponent
#TextComponent - Item Lore
#Get/set the lore of an item using text components.
#since 2.4.0
#Examples:
#set component lore of player's tool to mini message from "<rainbow>OOO RAINBOW LORE"
expression:
	patterns:
		[the] component [item] lore of %itemstack/itemtype/slot%
		%itemstack/itemtype/slot%'[s] component [item] lore
	add:
#		(internal code)
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: textcomponent
#TextComponent - Item Lore Lines
#Get/set/delete specific lines of lore of an item using text components.
#since 3.9.0
#Examples:
#set {_lore} to line 3 of component lore of {_item}
#set line 1 of component lore of player's tool to mini message from "Look Mah, I'm in Minecraft!"
#delete line 6 of component lore of player's tool
expression:
	patterns:
		line %integer% of [the] component [item] lore of %itemstack/itemtype/slot%
		%itemstack/itemtype/slot%'[s] line %integer% of component [item] lore
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: textcomponent
#TextComponent - Item Name
#Get/set the component name of an Item.
#`(custom|display) name` = Get/set the `custom_name` component of an item just like you would with Skript's name expression.
#`item name` = Get/set the `item_name` component of an item (Requires Minecraft 1.20.5+).
#Unlike setting the custom/display name of an item, this name cannot be changed through an anvil,
#and does not show in some labels, such as banner markers and item frames.
#See [**McWiki**](https://minecraft.wiki/w/Data_component_formatitem_name) for more details.
#since 2.4.0
#Examples:
#set component custom name of player's tool to translate component of "item.minecraft.diamond_sword"
#delete component custom name of player's tool
#set component item name of player's tool to mini message from "Stickaxe"
#delete component item name of player's tool
expression:
	patterns:
		[the] component (item|(custom|display)) name of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] component (item|(custom|display)) name
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: textcomponent
#TextComponent - Join/Quit/Kick/Death Message
#Get/set the join, quit, kick, death, unknown command messages.
#since 3.4.0
#Examples:
#on join:
#	set component join message to mini message from "<hover:show_entity:player:%uuid of player%><gradient:FAA401:5FFA01>%player%<reset><green> joined the game"
#on quit:
#	set component quit message to mini message from "<hover:show_entity:player:%uuid of player%><gradient:FAA401:5FFA01>%player%<reset><red> left the game"
#on death of player:
#	if attacker is a player:
#		set {_t} to translate component of attacker's tool
#		set {_m} to mini message from "<FA1F01>%victim% <FAD401>was slain by <72FA01>%attacker% <FAD401>using <grey>[<03FCEA><lang:%{_t}%><grey>]"
#		set component death message to {_m}
expression:
	patterns:
		component join message
		component (quit|kick) message
		component death message
		component unknown command message
	set:
#		(internal code)
	return type: textcomponent
#TextComponent - Json String
#Get the serialized json string of a text component. Useful in NBT.
#since 3.5.0
#Examples:
#set {_m} to mini message from "<rainbow>HI MOM, I MADE IT ON THE DOCS"
#set {_j} to serialized json string of {_m}
expression:
	patterns:
		[the] serialized json string of %textcomponents%
		%textcomponents%'[s] serialized json string
	return type: text
#TextComponent - Merge Components
#Merge multiple components into one. If adding strings/texts, they will be converted into components.
#since 2.4.0, 2.8.5 (delimiter), 2.15.0 (strings)
#Examples:
#set {_t} to merge components {_t::*}
#set {_t} to merge components {_t::*} joined with newline
expression:
	patterns:
		merge components %textcomponents/strings% [[join[ed]] (with|using) %textcomponent/string%]
	add:
#		(internal code)
	return type: textcomponent
#TextComponent - MiniMessage
#Get a mini message from a string.
#These messages are still components, which you can still apply hover/click events to.
#You can also add optional tag resolvers. Essential you create a resolver to replace `<someString>` 
#in mini message with something else (See examples for more details).
#For more info check out the [**Mini Message Format**](https://docs.adventure.kyori.net/minimessage/format.html) page.
#since 2.4.0
#Examples:
#set {_m} to mini message from "<rainbow>this is a rainbow message"
#set {_m} to mini message from "<gradient:F30A0A:0A2AF3>PRETTY MESSAGE FROM RED TO BLUE"
#set {_m} to mini message from "<red>This is a <green>test!"
#send component mini message from "<red>This is a <green>test!" to all players
# Create a component
#set {_t} to translate component of player's tool
#add hover event showing player's tool to {_t}
# Use this component in the resolver to replace "<item>" in the mini message
#set {_r} to resolver("item", {_t})
# Setup the mini message with the replacement placeholder
#set {_m} to mini message from "<rainbow> Hey guys check out my <item> aint she a beaut?" with {_r}
#send component {_m}
expression:
	patterns:
		mini[ ]message from %string% [with [resolver[s]] %tagresolvers%]
	add:
#		(internal code)
	return type: textcomponent
#TextComponent - New Text Component
#Create a new text component. Can add hover/click events to it.
#**Types:**
#Text: Just a plain old text component from a string.
#Rawtext: Same as text, but color codes will be visible.
#Keybind: Will use Minecraft's keybind system.
#Translate: Will use Minecraft's lang file keys.
#  - You can find these in your Minecraft jar `assets/minecraft/lang/<lang file>.json`.
#  - Also supports getting translations for objects such as ItemTypes, Entities and PotionEffectTypes.
#  - When sent to the client, the client will translate based on the lang they've picked.
#  - Some lang file entries take in other arguments, that's what the optional `using args %objects%` is for.
#  - Optionally you can add a fallback, this is the text sent to the client if the client cannot find the translation key.
#Json: Will deserialize a json string back into a component.
#  - Minecraft stores components in NBT as json components (ex: name of a held item).
#since 1.5.0
#Examples:
#set {_comp::1} to text component from "hi player "
#set {_comp::2} to text component of "hover over me for a special message!"
#add hover event showing "OoO look ma I'm hovering!" to {_comp::2}
#send component {_comp::*} to player
#set {_t} to translate component from player's tool
#set {_t} to translate component from "item.minecraft.milk_bucket"
#set {_death} to translate component from "death.fell.accident.ladder" using args player's name
#set {_assist} to translate component from "death.fell.assist" using args victim's name and attacker's name
#set {_custom} to translate component from "my.custom.key" with fallback "Some Message"
#set {_key} to keybind component of "key.jump"
#set {_name} to json component from (string tag "custom_name" of nbt of target block)
expression:
	patterns:
		[a] [new] (text|rawtext) component[s] (from|of) %strings%
		[a] [new] key[ ]bind component[s] (from|of) %strings%
		[a] [new] translate component[s] (from|of) %objects% [(with|using) arg[ument]s %objects%] [with fallback %string%]
		[a] [new] json component (from|of) %strings%
		[a] [new] empty [text] component
	add:
#		(internal code)
	return type: textcomponent
#TextComponent - Player List Name/Header/Footer
#Represents the player list name/header/footer of a player.
#since 3.5.8
#Examples:
#set component player list name of player to mini message from "<rainbow>%player%"
#reset component player list name of player
#set {_comp} to component player list name of player
#set component player list header of all players to mini message from "<rainbow>MY SERVER!!!"
expression:
	patterns:
		[the] component (player|tab)[ ]list (name|header|footer) of %players%
		%players%'[s] component (player|tab)[ ]list (name|header|footer)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: textcomponent
#TextComponent - Sign Line
#Get/set lines of a sign with text components. Optionally set the front/back of a sign. (Defaults to front)
#
#NOTE: Setting the back of a sign requires Minecraft 1.20+
#since 2.4.0, 2.11.0 (front|back)
#Examples:
#set sign line 1 of target block to mini message from "<rainbow>LINE ONE"
#set sign line 2 of target block to translate component from "item.minecraft.diamond_sword"
#set {_line1} to sign line 1 of target block
#set {_line1} to front sign line 1 of target block
#set back sign line 1 of {_sign} to mini message from "<rainbow>LINE ONE"
expression:
	patterns:
		[the] [(front|back)] sign line %number% of %blocks%
		%blocks%'[s] [(front|back)] sign line %number%
	set:
#		(internal code)
	return type: textcomponent
#TextComponent - Team Prefix/Suffix
#Get/set prefix/suffix of teams using components.
#since 2.4.0
#Examples:
#set component team prefix of team of player to mini message from "<color:grey>[<color:aqua>OWNER<color:grey>] "
expression:
	patterns:
		[the] component team (prefix|suffix) of %teams%
		%teams%'[s] component team (prefix|suffix)
	set:
#		(internal code)
	return type: textcomponent
#TextComponent - Tooltip Lines
#Computes the tooltip lines of an item and returns as a list of text components.
#**Disclaimer**: Tooltip contents are not guaranteed to be consistent across different Minecraft versions.
#`advanced` = Whether the context is for advanced tooltips.
#`creative` = Whether the context is for the creative inventory.
#`for player` = Creates player specific tooltips.
#since 3.8.0
#Examples:
#set {_lines::*} to advanced tooltip lines of player's tool
#set {_lines::*} to creative tooltip lines of player's tool
#set {_lines::*} to advanced and creative tooltip lines of player's tool
#set {_lines::*} to advanced tooltip lines of 1 of diamond sword for player
expression:
	patterns:
		[advanced] [[and] creative] [computed] tool[ ]tip lines of %itemstack/itemtype/slot% [for %player%]
	add:
#		(internal code)
	return type: textcomponent
#Transfer - Transfer Cookie
#Represents the cookie data in a retrieve cookie section.
#since 3.5.3
#Examples:
#command /server <string>:
#	trigger:
#		store cookie "%uuid of player%-transfer" with key "transfer" on player
#		transfer player to arg-1
#on connect:
#	 only do a cookie check if player was transferred
#	if player is transferred:
#		retrieve cookie with key "transfer" from player:
#			if transfer cookie = "%uuid of player%-transfer":
#				 stop code if cookie is correct
#				stop
#		 kick player if cookie is missing or incorrect
#		kick player due to "&cIllegal Transfer"
expression:
	patterns:
		transfer cookie
	return type: text
#Translation Key
#Gets the translation key from an object. Requires PaperMC.
#since 2.10.0
#Examples:
#set {_t} to translation key of player's tool
expression:
	patterns:
		[the] translation key[s] of %objects%
		%objects%'[s] translation key[s]
	return type: text
#World AutoSave
#Turn on/off world auto saving. This will prevent changes in the world to be saved to file.
#
#This doesn't appear to work when the server stops, so you may need to manually unload your world.
#since 2.10.0
#Examples:
#set world autosave of world of player to false
expression:
	patterns:
		[the] world auto[ ]save of %worlds%
		%worlds%'[s] world auto[ ]save
	set:
#		(internal code)
	return type: boolean
#World Creator
#Create a new world creator. This will be used to create a new world.
#Name will be the name of your new world.
#Key will be how your world is represented to Minecraft. Be default this will use the Minecraft namespace. (Keys require PaperMC.)
#You can not use the name of one of the default worlds, or a world created by another plugin, such as MultiVerse.
#Copy will create a fresh new world with the same seed and settings. Clone will create a carbon copy of your world, if the world
#is large, this process may take a while. The file copying process will happen on another thread, so this won't freeze your server.
#You can optionally add `without saving` to prevent saving of the world that will be cloned. Saving freezes the server for a bit
#so this can help speed up the process... if you don't need that world saved at this moment in time.
#After creating a world creator you will need to load the world.
#since 1.8.0
#Examples:
#set {_w} to a new world creator named "my-world"
#set environment of {_w} to nether
#load world from creator {_w}
#set {_clone} to a new world creator named "world_clone" to clone world "world" without saving
#load world from creator {_clone}
expression:
	patterns:
		[a] [new] world creator (with name|named) %string% [with key %namespacedkey%]
		[a] [new] world creator (with name|named) %string% [with key %namespacedkey%] to (copy|clone) %world% [without saving]
	return type: worldcreator
#World Creator Options
#Set different options for world creators. See SkBee wiki for more details.
#NOTE: 'load on start' will bypass 'auto-load-custom-worlds' in SkBee config.
#`fixed spawn location` = This is used to override Minecraft attempting to find a spawn location (Which takes a LONG time), this option can greatly speed up world creation.
#since 1.8.0
#Examples:
#set {_w} to a new world creator named "my-world"
#set environment option of {_w} to nether
#set world type option of {_w} to flat
#set should generate structures option of {_w} to true
#set load on start option of {_w} to false
#set fixed spawn location option of {_w} to location(1,100,1)
#load world from creator {_w}
expression:
	patterns:
		[the] (environment|world type|world seed|gen[erator] settings|generator|should gen[erate] structures|[is] hardcore|keep spawn loaded|load on start|fixed spawn location) [option] of %worldcreator%
		%worldcreator%'[s] (environment|world type|world seed|gen[erator] settings|generator|should gen[erate] structures|[is] hardcore|keep spawn loaded|load on start|fixed spawn location) [option]
	set:
#		(internal code)
	return type: object