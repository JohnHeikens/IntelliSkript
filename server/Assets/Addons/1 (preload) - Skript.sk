#AUTOMATICALLY GENERATED SKRIPT FILE
#COPYRIGHT JOHN HEIKENS
#https://github.com/JohnHeikens/IntelliSkript

#Advancement Progress
#Represents the advancement progress of a player.
#You will see `%advancementpro%` in the docs, this is due to a silly issue with Skript
#where I couldn't use `progress` in expressions.
#since 1.17.0
type:
	patterns:
		advancement[ ]progress[es]

#Any Named Thing
#Something that has a name (e.g. an item).
#since 2.10
#Examples:
#{thing}'s name
type:
	patterns:
		[any[ ]]named[ ](thing|object)[s]

#Any Numbered/Sized Thing
#Something that has an amount or size.
#since 2.10
#Examples:
#the size of {thing}
#the amount of {thing}
type:
	patterns:
		[any[ ]]numbered[ ](thing|object)[s]

#Any Valued Thing
#Something that has a value.
#since 2.10
#Examples:
#the text of {node}
type:
	patterns:
		[any[ ]]valued[ ](thing|object)[s]

#Anything with Contents
#Something that contains other things.
#since 2.10
#Examples:
#{a} contains {b}
type:
	patterns:
		[any[ ]]containing[ ](thing|object)[s]
		any[ ]container

#Attribute Type
#Represents the type of an attribute. Note that this type does not contain any numerical values.See attribute types for more info.
#NOTE: Minecraft namespaces are supported, ex: 'minecraft:generic.attack_damage'.
#since 2.5
type:
	patterns:
		attribute[ ]type[s]

expression:
	return type: attributetype
	patterns:
		armor
		armor toughness
		armour
		armour toughness
		attack damage
		attack knockback
		attack speed
		block break speed
		block interaction range
		burning time
		entity interaction range
		explosion knockback resistance
		fall damage multiplier
		flying speed
		follow range
		generic armor
		generic armor toughness
		generic armour
		generic armour toughness
		generic attack damage
		generic attack knockback
		generic attack speed
		generic burning time
		generic explosion knockback resistance
		generic fall damage multiplier
		generic flying speed
		generic follow range
		generic gravity
		generic jump strength
		generic knockback resistance
		generic luck
		generic max absorption
		generic max health
		generic movement efficiency
		generic movement speed
		generic oxygen bonus
		generic safe fall distance
		generic scale
		generic step height
		generic tempt range
		generic water movement efficiency
		gravity
		horse jump strength
		jump strength
		knockback resistance
		luck
		max absorption
		max health
		mining efficiency
		movement efficiency
		movement speed
		oxygen bonus
		player block break speed
		player block interaction range
		player entity interaction range
		player mining efficiency
		player sneaking speed
		player submerged mining speed
		player sweeping damage ratio
		safe fall distance
		scale
		sneaking speed
		spawn reinforcements
		step height
		submerged mining speed
		sweeping damage ratio
		tempt range
		water movement efficiency
		zombie spawn reinforcements

#Banner Pattern
#Represents a banner pattern.
#since 2.10
type:
	patterns:
		banner[ ]pattern[s]

#Banner Pattern Type
#Represents the various banner patterns that can be applied to a banner.
#since 2.10
type:
	patterns:
		banner[ ]pattern[ ]type[s]

expression:
	return type: bannerpatterntype
	patterns:
		base
		base banner pattern
		border
		border banner pattern
		bordure banner pattern
		bordure indented banner pattern
		bottom left square banner pattern
		bottom right square banner pattern
		bottom stripe banner pattern
		bottom triangle banner pattern
		bricks
		bricks banner pattern
		center stripe banner pattern
		circle
		circle banner pattern
		creeper
		creeper banner pattern
		creeper charged banner pattern
		cross
		cross banner pattern
		curly border
		curly border banner pattern
		diagonal left
		diagonal right
		diagonal up left
		diagonal up left banner pattern
		diagonal up right
		diagonal up right banner pattern
		down left stripe banner pattern
		down right stripe banner pattern
		field masoned banner pattern
		flow
		flow banner pattern
		flower
		flower banner pattern
		globe
		globe banner pattern
		gradient
		gradient banner pattern
		gradient up
		gradient up banner pattern
		guster
		guster banner pattern
		half horizontal
		half horizontal bottom
		half vertical
		half vertical right
		horizontal bottom half banner pattern
		horizontal half banner pattern
		left diagonal banner pattern
		left stripe banner pattern
		middle stripe banner pattern
		mojang
		mojang banner pattern
		piglin
		piglin banner pattern
		rhombus
		rhombus banner pattern
		right diagonal banner pattern
		right stripe banner pattern
		right vertical half banner pattern
		skull
		skull banner pattern
		small stripes
		small stripes banner pattern
		snout banner pattern
		square bottom left
		square bottom right
		square top left
		square top right
		straight cross
		straight cross banner pattern
		stripe bottom
		stripe center
		stripe downleft
		stripe downright
		stripe left
		stripe middle
		stripe right
		stripe top
		tbottom triangles banner pattern
		thing banner pattern
		top left square banner pattern
		top right square banner pattern
		top stripe banner pattern
		top triangle banner pattern
		top triangles banner pattern
		triangle bottom
		triangle top
		triangles bottom
		triangles top
		vertical half banner pattern

#Biome
#All possible biomes Minecraft uses to generate a world.
#NOTE: Minecraft namespaces are supported, ex: 'minecraft:basalt_deltas'.
#since 1.4.4
#Examples:
#biome at the player is desert
type:
	patterns:
		biome[s]

expression:
	return type: biome
	patterns:
		badlands
		badlands forest
		bamboo jungle
		basalt deltas
		beach
		birch forest
		black forest
		cherry grove
		cold beach
		cold ocean
		cold taiga
		crimson forest
		dark forest
		deep cold ocean
		deep dark
		deep frozen ocean
		deep lukewarm ocean
		deep ocean
		desert
		dripstone caves
		end barrens
		end highlands
		end midlands
		eroded badlands
		eroded mesa
		flower forest
		forest
		frozen ocean
		frozen peaks
		frozen river
		giant spruce taiga
		giant tree taiga
		gravelly mountains
		grove
		hell
		ice plains spikes
		ice plains with spikes
		ice spikes
		jagged peaks
		jungle
		jungle edge
		lukewarm ocean
		lush caves
		mangrove swamp
		marsh
		meadow
		mesa
		mesa forest
		mountains
		mushroom fields
		mushroom island
		nether
		nether wastes
		ocean
		old growth birch forest
		old growth pine taiga
		old growth spruce taiga
		pale garden
		plains
		river
		roofed forest
		savanna
		savanna plateau
		sea
		shattered savanna
		sky
		small end islands
		snowy beach
		snowy plains
		snowy slopes
		snowy taiga
		snowy tundra
		soul sand valley
		sparse jungle
		spiked ice plains
		stone shore
		stony peaks
		stony shore
		sunflower plains
		swamp
		swampland
		taiga
		tall birch forest
		the end
		the void
		void
		warm ocean
		warped forest
		windswept forest
		windswept gravelly hills
		windswept hills
		windswept savanna
		wooded badlands
		wooded mesa
		wooded mountains

#Block Data
#Block data is the detailed information about a block, referred to in Minecraft as BlockStates, allowing for the manipulation of different aspects of the block, including shape, waterlogging, direction the block is facing, and so much more. Information regarding each block's optional data can be found on Minecraft's Wiki. Find the block you're looking for and scroll down to 'Block States'. Different states must be separated by a semicolon (see examples). The 'minecraft:' namespace is optional, as well as are underscores.
#since 2.5
#Examples:
#set block at player to campfire[lit=false]
#set target block of player to oak stairs[facing=north;waterlogged=true]
#set block at player to grass_block[snowy=true]
#set loop-block to minecraft:chest[facing=north]
#set block above player to oak_log[axis=y]
#set target block of player to minecraft:oak_leaves[distance=2;persistent=false]
type:
	patterns:
		block[ ]data[s]

#Boolean
#A boolean is a value that is either true or false. Other accepted names are 'on' and 'yes' for true, and 'off' and 'no' for false.
#since 1.0
#Examples:
#set {config.%player%.use mod} to false
type:
	patterns:
		boolean[s]

#Cat Type
#Represents the race/type of a cat entity.
#NOTE: Minecraft namespaces are supported, ex: 'minecraft:british_shorthair'.
#since 2.4
type:
	patterns:
		cat[ ](type|race)[s]

expression:
	return type: cattype
	patterns:
		all black
		black
		british shorthair
		calico
		jellie
		persian
		ragdoll
		red
		siamese
		tabby
		white

#Chunk
#A chunk is a cuboid of 16×16×128 (x×z×y) blocks. Chunks are spread on a fixed rectangular grid in their world.
#since 2.0
type:
	patterns:
		chunk[s]

#Click Type
#Click type, mostly for inventory events. Tells exactly which keys/buttons player pressed, assuming that default keybindings are used in client side.
#since 2.2-dev16b, 2.2-dev35 (renamed to click type)
type:
	patterns:
		click[ ]type[s]

#Color
#Wool, dye and chat colors.
#Examples:
#color of the sheep is red or black
#set the color of the block to green
#message "You're holding a <%color of tool%>%color of tool%<reset> wool block"
type:
	patterns:
		colo[u]r[s]

#Command Sender
#A player or the console.
#since 1.0
#Examples:
#command /push [<player>]:
#	trigger:
#		if arg-1 is not set:
#			if command sender is console:
#				send "You can't push yourself as a console :\" to sender
#				stop
#			push sender upwards with force 2
#			send "Yay!"
#		else:
#			push arg-1 upwards with force 2
#			send "Yay!" to sender and arg-1
type:
	patterns:
		[(command[s]][ ][)](sender|executor)[s]

#Config
#A configuration (or code) loaded by Skript, such as the config.sk or aliases.
#Configs can be reloaded or navigated to find options.
#since 2.10
#Examples:
#the skript config
type:
	patterns:
		config[s]

#Damage Cause
#The cause/type of a damage event, e.g. lava, fall, fire, drowning, explosion, poison, etc.
#Please note that support for this type is very rudimentary, e.g. lava, fire and burning, as well as projectile and attack are considered different types.
#since 2.0
type:
	patterns:
		damage[ ]cause[s]

#Date
#A date is a certain point in the real world's time which can be obtained with now expression, unix date expression and date function.
#See time and timespan for the other time types of Skript.
#since 1.4
#Examples:
#set {_yesterday} to now
#subtract a day from {_yesterday}
# now {_yesterday} represents the date 24 hours before now
type:
	patterns:
		date[s]

#Difficulty
#The difficulty of a world.
#since 2.3
type:
	patterns:
		difficult(y|ies)

expression:
	return type: difficulty
	patterns:
		normal
		medium
		hard
		easy
		peaceful

#Direction
#A direction, e.g. north, east, behind, 5 south east, 1.3 meters to the right, etc.
#Locations and some blocks also have a direction, but without a length.
#Please note that directions have changed extensively in the betas and might not work perfectly. They can also not be used as command arguments.
#since 2.0
#Examples:
#set the block below the victim to a chest
#loop blocks from the block infront of the player to the block 10 below the player:
#	set the block behind the loop-block to water
type:
	patterns:
		direction[s]

#Display Billboard
#Represents the billboard setting of a display.
#since 2.10
type:
	patterns:
		billboard[s]

expression:
	return type: billboard
	patterns:
		vertical pivot
		horizontal
		middle
		horizontal pivot
		center pivot
		center
		fixed
		vertical

#Display Entity
#A text, block or item display entity.
#since 2.10
type:
	patterns:
		display[s]

#Display Text Alignment
#Represents the text alignment setting of a text display.
#since 2.10
type:
	patterns:
		text[ ]alignment[s]

expression:
	return type: textalignment
	patterns:
		middle aligned
		centered
		right aligned
		center aligned
		left aligned

#Enchantment
#An enchantment, e.g. 'sharpness' or 'fortune'. Unlike enchantment type this type has no level, but you usually don't need to use this type anyway.
#NOTE: Minecraft namespaces are supported, ex: 'minecraft:basalt_deltas'.
#As of Minecraft 1.21 this will also support custom enchantments using namespaces, ex: 'myenchants:explosive'.
#since 1.4.6
type:
	patterns:
		enchantment[s]

#Enchantment Offer
#The enchantmentoffer in an enchant prepare event.
#since 2.5
#Examples:
#on enchant prepare:
#	set enchant offer 1 to sharpness 1
#	set the cost of enchant offer 1 to 10 levels
type:
	patterns:
		enchant[ment][ ]offer[s]

#Enchantment Type
#An enchantment with an optional level, e.g. 'sharpness 2' or 'fortune'.
#since 1.4.6
#Examples:
#enchant the player's tool with sharpness 5
#helmet is enchanted with waterbreathing
type:
	patterns:
		enchant(ing|ment)[ ]type[s]

#Entity Potion Cause
#Represents the cause of the action of a potion effect on an entity, e.g. arrow, command
#since 2.10
type:
	patterns:
		[entity[ ]]potion[ ]effect[ ]cause

expression:
	return type: potioneffectcause
	patterns:
		patrol captain
		axolotl
		death
		removal by resurrection
		beacon effect
		potion drunk
		illusion
		unknown
		drinking potion
		expired
		pillager captain
		attack
		villager trade
		spawned spider
		wither rose infliction
		conversion
		enter area effect cloud
		conduit effect
		command
		food
		drinking milk
		plugin
		converted
		spider spawn
		splash potion
		warden
		expiration
		potion splash
		dolphin boost
		arrow infliction
		turtle helmet effect

#Entity Snapshot
#Represents a snapshot of an entity's data.
#This includes all of the data associated with an entity (its name, health, attributes, etc.), at the time this expression is used. Essentially, these are a way to create templates for entities.
#Individual attributes of a snapshot cannot be modified or retrieved.
#since 2.10
type:
	patterns:
		entity[ ]snapshot[s]

#Entity Type
#The type of an entity, e.g. player, wolf, powered creeper, etc.
#since 1.3
#Examples:
#victim is a cow
#spawn a creeper
type:
	patterns:
		entity[ ]type[s]

expression:
	return type: entitytype
	patterns:
		detailed usage will be added eventually

#Entity Type with Amount
#An entity type with an amount, e.g. '2 zombies'. I might remove this type in the future and make a more general 'type' type, i.e. a type that has a number and a type.
#since 1.3
#Examples:
#spawn 5 creepers behind the player
type:
	patterns:
		entitytype

#Equipment Slot
#Represents an equipment slot of an entity.
#since 2.11
type:
	patterns:
		equipment[ ]slot[s]

expression:
	return type: equipmentslot
	patterns:
		off hand
		chestplate slot
		head slot
		hand slot
		main hand slot
		boots slot
		feet slot
		body slot
		body armour slot
		leggings slot
		helmet slot
		off hand slot
		chestplate
		legs slot
		helmet
		boots
		tool slot
		main hand
		body armor slot
		leggings
		chest slot

#Executable
#Something that can be executed (run) and may accept arguments, e.g. a function.
#This may also return a result.
#since 2.10
#Examples:
#run {_function} with arguments 1 and true
type:
	patterns:
		executable[s]

#Experience
#Experience points. Please note that Bukkit only allows to give XP, but not remove XP from players. You can however change a player's level and level progress freely.
#since 2.0
#Examples:
#give 10 xp to the player
type:
	patterns:
		experience[ ][point[s]]

#Experience Cooldown Change Reason
#Represents a change reason of an experience cooldown change event.
#since 2.10
type:
	patterns:
		(experience|[e]xp)[ ]cooldown[ ]change[ ](reason|cause)[s]

expression:
	return type: experience cooldown change reason
	patterns:
		plugin
		pickup orb
		orb pickup

#Firework Effect
#A configuration of effects that defines the firework when exploded
#which can be used in the launch firework effect.
#See the firework effect expression for detailed patterns.
#since 2.4
#Examples:
#launch flickering trailing burst firework colored blue and green at player
#launch trailing flickering star colored purple, yellow, blue, green and red fading to pink at target entity
#launch ball large colored red, purple and white fading to light green and black at player's location with duration 1
type:
	patterns:
		firework[ ]effect[s]

expression:
	return type: fireworkeffect
	patterns:
		see firework types

#Firework Type
#The type of a fireworkeffect.
#since 2.4
type:
	patterns:
		firework[ ]type[s]

expression:
	return type: fireworktype
	patterns:
		small
		ball
		star shaped
		large
		star
		creeper face
		small ball
		large ball
		burst
		ball large
		creeper

#Fishing State
#Represents the different states of a fishing event.
#since 2.11
type:
	patterns:
		fishing[ ]state[s]

expression:
	return type: fishingstate
	patterns:
		lured
		bobber in ground
		fish escaped
		entity caught
		fishing
		fish lured
		fishing rod cast
		reel in
		caught fish
		caught entity
		fishing line cast
		fish escape
		fish bite
		bite
		rod cast
		in ground
		failed attempt
		fish caught

#Function
#A function loaded by Skript.
#This can be executed (with arguments) and may return a result.
#since 2.10
#Examples:
#run {_function} with arguments 1 and true
#set {_result} to the result of {_function}
type:
	patterns:
		function[s]

#Game Mode
#The game modes survival, creative, adventure and spectator.
#since 1.0
#Examples:
#player's gamemode is survival
#set the player argument's game mode to creative
type:
	patterns:
		game[ ]mode[s]

expression:
	return type: gamemode
	patterns:
		adventure
		survival
		spectator
		creative

#Gamerule
#A gamerule
#since 2.5
type:
	patterns:
		gamerule[s]

expression:
	return type: gamerule
	patterns:
		tntexplosiondropdecay
		globalsoundevents
		enderpearlsvanishondeath
		dofiretick
		maxcommandchainlength
		dovinesspread
		disableelytramovementcheck
		lavasourceconversion
		commandblockoutput
		forgivedeadplayers
		playersnetherportalcreativedelay
		domobspawning
		maxentitycramming
		universalanger
		playerssleepingpercentage
		snowaccumulationheight
		doimmediaterespawn
		blockexplosiondropdecay
		naturalregeneration
		domobloot
		falldamage
		doentitydrops
		randomtickspeed
		playersnetherportaldefaultdelay
		spawnradius
		freezedamage
		sendcommandfeedback
		dowardenspawning
		firedamage
		reduceddebuginfo
		watersourceconversion
		projectilescanbreakblocks
		announceadvancements
		drowningdamage
		spawnchunkradius
		disableraids
		doweathercycle
		mobexplosiondropdecay
		dodaylightcycle
		showdeathmessages
		dotiledrops
		doinsomnia
		keepinventory
		disableplayermovementcheck
		dolimitedcrafting
		mobgriefing
		dotraderspawning
		commandmodificationblocklimit
		logadmincommands
		minecartmaxspeed
		spectatorsgeneratechunks
		dopatrolspawning
		maxcommandforkcount

#Gamerule Value
#A wrapper for the value of a gamerule for a world.
#since 2.5
type:
	patterns:
		gamerule[ ]value[s]

#Gene
#Represents a Panda's main or hidden gene. See genetics for more info.
#since 2.4
type:
	patterns:
		[panda[ ]]gene[s]

expression:
	return type: gene
	patterns:
		normal
		lazy
		happy
		worried
		worrisome
		aggressive
		brown
		brownish
		savage
		playful
		wild
		weak

#Heal Reason
#The health regain reason in a heal event.
#since 2.5
type:
	patterns:
		(regen|heal)[ ](reason|cause)

expression:
	return type: regen reason
	patterns:
		an ender crystal
		magic
		a magic regeneration
		magic regeneration
		fed
		sated
		a magic regen
		regen potion
		a wither spawn
		peaceful
		unknown
		a regeneration potion
		consuming
		a wither effect
		peaceful regeneration
		wither summoning
		healing potion
		wither potion
		an end crystal
		satiated
		regeneration potion
		potion
		satisfied
		ingesting
		withered
		custom
		a wither spawning
		end crystal
		eating
		wither spawning
		a wither summoning
		wither effect
		a plugin
		a regen potion
		plugin
		withering
		a potion
		wither spawn
		a healing potion
		ender crystal
		magic regen
		wither
		peaceful regen

#Input Key
#Represents a movement input key that is pressed by a player.
#since 2.10
type:
	patterns:
		input[ ]key[s]

expression:
	return type: inputkey
	patterns:
		left movement key
		forward movement key
		right movement key
		backward key
		left key
		sprint key
		forward key
		right key
		jumping key
		sneaking key
		jump key
		sneak key
		sprinting key
		backward movement key

#Inventory
#An inventory of a player or block. Inventories have many effects and conditions regarding the items contained.
#An inventory has a fixed amount of slots which represent a specific place in the inventory, e.g. the helmet slot for players (Please note that slot support is still very limited but will be improved eventually).
#since 1.0
type:
	patterns:
		inventor(y|ies)

#Inventory Action
#What player just did in inventory event. Note that when in creative game mode, most actions do not work correctly.
#since 2.2-dev16
type:
	patterns:
		inventory[ ]action[s]

expression:
	return type: inventoryaction
	patterns:
		drop stack from slot
		swap items with hotbar
		swap cursor stack
		pickup single item
		pickup some
		drop all from cursor
		move to other inventory
		pickup from bundle inventory actions
		drop cursor stack
		place all into bundle inventory actions
		pickup all
		swap with hotbar
		pickup all into bundle inventory actions
		nothing
		drop all from slot
		swap cursor
		drop cursor
		pickup all items
		drop slot item
		place from bundle inventory actions
		place all
		drop cursor item
		drop slot stack
		drop single item from slot
		swap with cursor
		place some
		pickup one item
		drop single item from cursor
		collect items to cursor
		unknown
		clone stack
		drop stack from cursor
		drop one item from slot
		drop one item from cursor
		unsupported
		do nothing
		drop one from cursor
		pickup half
		drop items from slot
		swap stack with cursor
		place some into bundle inventory actions
		place all items
		collect to cursor
		pickup some items
		drop slot
		drop items from cursor
		hotbar move and readd
		shift move
		custom
		pickup single
		place one item
		hotbar swap items
		drop one from slot
		place some items
		place one
		pickup half stack
		instant move
		hotbar swap
		pickup some into bundle inventory actions

#Inventory Close Reasons
#The inventory close reason in an inventory close event.
#since 2.8.0
type:
	patterns:
		inventory[ ]close[ ]reason[s]

#Inventory Type
#Minecraft has several different inventory types with their own use cases.
#since 2.2-dev32
type:
	patterns:
		inventory[ ]type[s]

expression:
	return type: inventorytype
	patterns:
		barrel inventory
		a loom inventory
		a blast furnace inventory
		workbench inventory
		ender chest inventory
		loom inventory
		bookshelf inventory
		a workbench inventory
		hopper inventory
		decorated pot inventory
		a merchant inventory
		a hopper inventory
		an ender chest inventory
		new smithing table
		a jukebox
		beacon inventory
		shulker box inventory
		a barrel inventory
		a shulker box inventory
		lectern inventory
		chest inventory
		a villager inventory
		a smoker inventory
		a brewing stand inventory
		a smithing inventory
		chiseled bookshelf inventory
		grindstone inventory
		a crafter inventory
		a crafting table inventory
		a player inventory
		furnace inventory
		a creative inventory
		blast furnace inventory
		upgrade gear
		a composter inventory
		an enchanting table inventory
		jukebox
		a dropper inventory
		a cartography table inventory
		a upgrade gear
		smoker inventory
		composter inventory
		a chest inventory
		upgrade gear table
		a upgrade gear table
		dispenser inventory
		player inventory
		stonecutter inventory
		a stonecutter inventory
		a lectern inventory
		merchant inventory
		cartography table inventory
		a new smithing table
		a chiseled bookshelf inventory
		a furnace inventory
		anvil inventory
		a bookshelf inventory
		a dispenser inventory
		a grindstone inventory
		a decorated pot inventory
		smithing inventory
		dropper inventory
		brewing stand inventory
		villager inventory
		enchanting table inventory
		a beacon inventory
		crafter inventory
		creative inventory
		crafting table inventory
		an anvil inventory

#Item
#An item, e.g. a stack of torches, a furnace, or a wooden sword of sharpness 2. Unlike item type an item can only represent exactly one item (e.g. an upside-down cobblestone stair facing west), while an item type can represent a whole range of items (e.g. any cobble stone stairs regardless of direction).
#You don't usually need this type except when you want to make a command that only accepts an exact item.
#Please note that currently 'material' is exactly the same as 'item', i.e. can have an amount & enchantments.
#since 1.0
#Examples:
#set {_item} to type of the targeted block
#{_item} is a torch
type:
	patterns:
		item[s]
		item[ ]stack[s]

#Item Display Transforms
#Represents the transform setting of an item display.
#since 2.10
type:
	patterns:
		item[ ]display[ ]transform[s]

expression:
	return type: itemdisplaytransform
	patterns:
		first person left handed
		left handed in first person
		right handed in third person
		first person left hand
		no transform
		the ground
		third person right hand
		third person right handed
		right handed in first person
		menu
		head
		third person left hand
		first person right handed
		first person right hand
		fixed position
		left handed in third person
		gui
		ground
		fixed
		third person left handed

#Item Flag
#Represents flags that may be applied to hide certain attributes of an item.
#since 2.10
type:
	patterns:
		item[ ]flag[s]

expression:
	return type: itemflag
	patterns:
		hide unbreakable
		hide unbreakable status
		hide destroys
		hide additional tooltip
		destroys hidden
		hide enchants
		stored enchantments hidden
		hidden destroys
		hidden stored enchants
		dye hidden
		stored enchants hidden
		hidden enchants
		hidden unbreakable status
		hide armour trim
		hidden stored enchantments
		hide stored enchants
		hide stored enchantments
		hide attributes
		hidden additional tooltip
		hidden armor trim
		hidden placed on
		additional tooltip hidden
		enchants hidden
		enchantments hidden
		attributes hidden
		unbreakable status hidden
		hidden dye color
		hidden armour trim
		unbreakable hidden
		dye color hidden
		hide enchantments
		armour trim hidden
		hidden unbreakable
		hide dye color
		hidden attributes
		armor trim hidden
		hide destroyable blocks
		hide placed on
		hidden dye
		hide armor trim
		hide breakable blocks
		placed on hidden
		hide dye

#Item Type
#An item type is an alias, e.g. 'a pickaxe', 'all plants', etc., and can result in different items when added to an inventory, and unlike items they are well suited for checking whether an inventory contains a certain item or whether a certain item is of a certain type.
#An item type can also have one or more enchantments with or without a specific level defined, and can optionally start with 'all' or 'every' to make this item type represent all types that the alias represents, including data ranges.
#since 1.0
#Examples:
#give 4 torches to the player
#add all slabs to the inventory of the block
#player's tool is a diamond sword of sharpness
#remove a pickaxes of fortune 4 from {stored items::*}
#set {_item} to 10 of every upside-down stair
#block is dirt or farmland
type:
	patterns:
		item[ ]type[s]
		material[s]

#Location
#A location in a world. Locations are world-specific and even store a direction, e.g. if you save a location and later teleport to it you will face the exact same direction you did when you saved the location.
#since 1.0
#Examples:
#teleport player to location at 0, 69, 0
#set {home::%uuid of player%} to location of the player
type:
	patterns:
		location[s]

#Loot Context
#Represents additional information a loot table can use to modify its generated loot.
#Some loot tables will require some values (i.e. looter, location, looted entity) in a loot context when generating loot whereas others may not.
#For example, the loot table of a simple dungeon chest will only require a location, whereas the loot table of a cow will require a looting player, looted entity, and location.
#You can find more information about this in https://minecraft.wiki/w/Loot_context
#since 2.10
type:
	patterns:
		loot[ ]context[s]

#Loot Table
#Loot tables represent what items should be in naturally generated containers, what items should be dropped when killing a mob, or what items can be fished.
#You can find more information about this in https://minecraft.wiki/w/Loot_table
#since 2.10
type:
	patterns:
		loot[ ]table[s]

#Metadata Holder
#Something that can hold metadata (e.g. an entity or block)
#since 2.2-dev36
#Examples:
#set metadata value "super cool" of player to true
type:
	patterns:
		metadata[ ]holder[s]

#Minecraft Tag
#A tag that classifies a material, or entity.
#since 2.10
type:
	patterns:
		minecraft[ ]tag[s]

#Moon Phase
#Represents the phase of a moon.
#since 2.7
type:
	patterns:
		(lunar|moon)[ ]phase[s]

expression:
	return type: lunarphase
	patterns:
		last quarter
		waning crescent
		waxing gibbous
		full moon
		waning gibbous
		waxing crescent
		new moon
		first quarter

#Node
#A node (entry) from a script config file.
#This may have navigable children.
#since 2.10
#Examples:
#the current script
type:
	patterns:
		node[s]

#Potion Effect
#A potion effect, including the potion effect type, tier and duration.
#since 2.5.2
type:
	patterns:
		potion[ ]effect[s]

#Potion Effect Type
#A potion effect type, e.g. 'strength' or 'swiftness'.
#Examples:
#apply swiftness 5 to the player
#apply potion of speed 2 to the player for 60 seconds
#remove invisibility from the victim
type:
	patterns:
		potion[ ]effect[ ]type[s]

#Projectile
#A projectile, e.g. an arrow, snowball or thrown potion.
#since 1.0
#Examples:
#projectile is a snowball
#shoot an arrow at speed 5 from the player
type:
	patterns:
		projectile[s]

expression:
	return type: projectile
	patterns:
		arrow
		fireball
		snowball
		thrown potion
		etc.

#Quaternion
#Quaternions are four dimensional vectors, often used for representing rotations.
#since 2.10
type:
	patterns:
		quaternion[f][s]

#Queue
#A queued list of values. Entries are removed from a queue when they are queried.
#since 2.10
#Examples:
#set {queue} to a new queue
#add "hello" to {queue}
#broadcast the 1st element of {queue}
type:
	patterns:
		queue[s]

#Quit Reason
#Represents a quit reason from a player quit server event.
#since 2.8.0
type:
	patterns:
		(quit|disconnect)[ ](reason|cause)[s]

expression:
	return type: quitreason
	patterns:
		disconnected
		erroneous state
		kicked
		quit
		timed out
		erroneous

#Resource Pack State
#The state in a resource pack request response event.
#since 2.4
type:
	patterns:
		resource[ ]pack[ ]state[s]

expression:
	return type: resourcepackstate
	patterns:
		discarded
		refused
		rejected
		failed reload
		accepted
		failed
		failed to reload
		failed to download
		downloaded
		successfully loaded
		accept
		fail
		successfully load
		refuse
		declined
		successfully install
		success
		reject
		decline
		successfully installed
		download fail
		invalid url

#Script
#A script loaded by Skript.
#Disabled scripts will report as being empty since their content has not been loaded.
#since 2.10
#Examples:
#the current script
type:
	patterns:
		script[s]

#Server Icon
#A server icon that was loaded using the load server icon effect.
#since 2.3
type:
	patterns:
		server[ ]icon[s]

#Slot
#Represents a single slot of an inventory. Notable slots are the armour slots and furnace slots. 
#The most important property that distinguishes a slot from an item is its ability to be changed, e.g. it can be set, deleted, enchanted, etc. (Some item expressions can be changed as well, e.g. items stored in variables. For that matter: slots are never saved to variables, only the items they represent at the time when the variable is set).
#Please note that tool can be regarded a slot, but it can actually change it's position, i.e. doesn't represent always the same slot.
#Examples:
#set tool of player to dirt
#delete helmet of the victim
#set the color of the player's tool to green
#enchant the player's chestplate with projectile protection 5
type:
	patterns:
		[inventory[ ]]slot[s]

#Sound Category
#The category of a sound, they are used for sound options of Minecraft. See the play sound and stop sound effects.
#since 2.4
type:
	patterns:
		sound[ ]categor(y|ies)

expression:
	return type: soundcategory
	patterns:
		hostile creatures category
		speech category
		records category
		friendly creature category
		noteblock category
		hostile creature category
		note block category
		voice category
		ambient category
		noteblocks category
		note blocks category
		weather category
		block category
		friendly mob category
		jukebox category
		hostile mob category
		master category
		master volume category
		hostile category
		record category
		blocks category
		environment category
		jukeboxes category
		player category
		players category
		hostile mobs category
		friendly mobs category
		music category
		friendly creatures category
		neutral category

#Spawn Reason
#The spawn reason in a spawn event.
#since 2.3
type:
	patterns:
		spawn[ing][ ]reason[s]

expression:
	return type: spawnreason
	patterns:
		dispense egg
		egg
		village defense
		ocelot baby
		silverfish trap
		village invading
		trap
		dispensing egg
		shoulder
		drowned
		metamorphosis
		bucket spawn reasons
		lightning
		silverfish reveal
		spell
		built iron golem
		natural
		trial mob spawner
		village invasion
		frozen
		mount
		build wither
		built wither
		iron golem defense
		ender pearl
		creature spawner
		reinforcements
		build snowman
		build iron golem
		breeding
		raid
		ominous item spawner
		infection
		customized
		potion effect
		spawn egg
		jockey
		beehive
		default
		golem defense
		patrol
		slime split
		infected
		sheared
		mob spawner
		nether portal
		trial spawner
		shear
		perching
		custom
		built snowman
		chunk generation
		breed
		command
		duplication
		explosion
		spawner
		cured
		enchantment
		trial creature spawner
		customised
		piglin zombification

#Teleport Cause
#The teleport cause in a teleport event.
#since 2.2-dev35
type:
	patterns:
		teleport[ ](cause|reason|type)[s]

expression:
	return type: teleportcause
	patterns:
		bed exit
		nether portal
		ender gateway
		exiting bed
		chorus fruit
		ender portal
		command
		unknown
		plugin
		dismounted
		ender pearl
		spectator
		spectate
		end gateway
		chorus
		exit bed
		gateway
		dismount
		end portal

#Teleport Flag
#Teleport Flags are settings to retain during a teleport.
#since 2.10
type:
	patterns:
		teleport[ ]flag[s]

expression:
	return type: teleportflag
	patterns:
		passengers
		xyz velocity
		z velocity
		yaw velocity
		inventory
		pitch velocity
		vehicle
		opened inventory
		open inventory
		x velocity
		passenger
		pitch and yaw velocity
		yaw and pitch velocity
		directional velocity
		y velocity

#Text
#Text is simply text, i.e. a sequence of characters, which can optionally contain expressions which will be replaced with a meaningful representation (e.g. %player% will be replaced with the player's name).
#Because scripts are also text, you have to put text into double quotes to tell Skript which part of the line is an effect/expression and which part is the text.
#Please read the article on Texts and Variable Names to learn more.
#since 1.0
#Examples:
#broadcast "Hello World!"
#message "Hello %player%"
#message "The id of ""%type of tool%"" is %id of tool%."
type:
	patterns:
		(text|string)[s]

#Time
#A time is a point in a minecraft day's time (i.e. ranges from 0:00 to 23:59), which can vary per world.
#See date and timespan for the other time types of Skript.
#since 1.0
#Examples:
#at 20:00:
#	time is 8 pm
#	broadcast "It's %time%"
type:
	patterns:
		time[s]

#Timeperiod
#A period of time between two times. Mostly useful since you can use this to test for whether it's day, night, dusk or dawn in a specific world.
#This type might be removed in the future as you can use 'time of world is between x and y' as a replacement.
#since 1.0
#Examples:
#time in world is night
type:
	patterns:
		time[ ]period[s]
		duration[s]

#Timespan
#A timespan is a difference of two different dates or times, e.g '10 minutes'. Timespans are always displayed as real life time, but can be defined as minecraft time, e.g. '5 minecraft days and 12 hours'.
#NOTE: Months always have the value of 30 days, and years of 365 days.
#See date and time for the other time types of Skript.
#since 1.0, 2.6.1 (weeks, months, years)
#Examples:
#every 5 minecraft days:
#	wait a minecraft second and 5 ticks
#every 10 mc days and 12 hours:
#	halt for 12.7 irl minutes, 12 hours and 120.5 seconds
type:
	patterns:
		time[ ]span[s]

#Transform Reason
#Represents a transform reason of an entity transform event.
#since 2.8.0
type:
	patterns:
		[entity][ ]transform[ ](reason|cause)[s]

expression:
	return type: transformreason
	patterns:
		infection
		magma slime split
		villager infection
		tadpole metamorphosis
		drowning
		creeper super charge
		unknown
		split
		tadpole converting
		metamorphosis
		skeleton converting to stray
		lightning
		slime split
		entity drowning
		slime splitting
		zombie drowning
		zombie curing
		skeleton freeze
		entity freezing
		zombie converting to drowned
		curing
		entity freeze
		skeleton freezing
		mooshroom shear
		zombie cure
		tadpole converting to frog
		mooshroom shearing
		magma slime splitting
		piglin zombification

#Tree Type
#A tree type represents a tree species or a huge mushroom species. These can be generated in a world with the generate tree effect.
#Examples:
#grow any regular tree at the block
#grow a huge red mushroom above the block
type:
	patterns:
		tree[ ]type[s]
		tree[s]

#Type
#Represents a type, e.g. number, object, item type, location, block, world, entity type, etc.
#This is mostly used for expressions like 'event-<type>', '<type>-argument', 'loop-<type>', etc., e.g. event-world, number-argument and loop-player.
#since 2.0
#Examples:
#{variable} is a number  check whether the variable contains a number, e.g. -1 or 5.5
#{variable} is a type  check whether the variable contains a type, e.g. number or player
#{variable} is an object  will always succeed if the variable is set as everything is an object, even types.
#disable PvP in the event-world
#kill the loop-entity
type:
	patterns:
		type[s]

#UUID
#UUIDs are unique identifiers that ensure things can be reliably distinguished from each other. They are generated in a way that makes it practically impossible for duplicates to occur.
#Read more about UUIDs and how they are used in Minecraft in the wiki entry about UUIDs.
#since 2.11
type:
	patterns:
		uuid[s]

#Unleash Reason
#Represents an unleash reason of an unleash event.
#since 2.10
type:
	patterns:
		unleash[ ](reason|cause)[s]

#Vector
#Vector is a collection of numbers. In Minecraft, 3D vectors are used to express velocities of entities.
#since 2.2-dev23
type:
	patterns:
		vector[s]

#Vehicle
#Represents a vehicle.
#since 2.10.2
type:
	patterns:
		vehicle[s]

#Villager Profession
#Represents the different professions of villagers.
#since 2.10
type:
	patterns:
		villager[ ]profession[s]

expression:
	return type: villagerprofession
	patterns:
		armorer
		armorer profession
		armourer
		armourer profession
		butcher
		butcher profession
		cartographer
		cartographer profession
		cleric
		cleric profession
		farmer
		farmer profession
		fisherman
		fisherman profession
		fletcher
		fletcher profession
		leatherworker
		leatherworker profession
		librarian
		librarian profession
		mason
		mason profession
		nitwit
		nitwit profession
		no profession
		none
		none profession
		shepherd
		shepherd profession
		toolsmith
		toolsmith profession
		unemployed
		weaponsmith
		weaponsmith profession

#Villager Type
#Represents the different types of villagers. These are usually the biomes a villager can be from.
#since 2.10
type:
	patterns:
		villager[ ]type[s]

expression:
	return type: villagertype
	patterns:
		desert
		jungle
		plains
		savanna
		snow
		swamp
		taiga

#Visual Effect
#A visible effect, e.g. particles.
#since 2.1
#Examples:
#show wolf hearts on the clicked wolf
#play mob spawner flames at the targeted block to the player
type:
	patterns:
		(visual|particle)[ ]effect[s]

expression:
	return type: visual effect
	patterns:
		smoke
		potion break
		ender signal
		mobspawner flames
		arrow particles
		jumping rabbit
		hurt
		wolf smoke
		wolf hearts
		wolf shaking
		sheep eating
		iron golem offering rose
		witch magic
		zombie turning to a villager
		firework explosion
		love hearts
		squid rotation reset
		entity poof
		guardian target
		block with shield
		shield break
		armor stand hit
		hurt by thorns
		iron golem sheathing rose
		resurrection by totem
		hurt by drowning
		hurt by explosion
		poof
		large explosion
		explosion emitter
		firework
		bubble
		splash
		water wake
		underwater
		critical hit
		enchanted hit
		smoke
		large smoke
		effect
		instant effect
		entity effect
		witch
		dripping water
		dripping lava
		angry villager
		happy villager
		mycelium
		note
		portal
		enchant
		flame
		lava pop
		cloud
		dust
		snowball
		slime
		heart
		item
		block
		rain
		elder guardian
		dragon breath
		end rod
		damage indicator
		sweep attack
		falling dust
		totem of undying
		spit
		squid ink
		bubble pop
		current down
		bubble column up
		nautilus
		dolphin
		sneeze
		campfire cosy smoke
		campfire signal smoke
		composter
		flash
		falling lava
		landing lava
		falling water
		dripping honey
		falling honey
		landing honey
		falling nectar
		soul fire flame
		ash
		crimson spore
		warped spore
		soul
		dripping obsidian tear
		falling obsidian tear
		landing obsidian tear
		reverse portal
		white ash
		dust color transition
		vibration
		falling spore blossom
		spore blossom air
		small flame
		snowflake
		dripping dripstone lava
		falling dripstone lava
		dripping dripstone water
		falling dripstone water
		glow squid ink
		glow
		wax on
		wax off
		electric spark
		scrape
		sonic boom
		sculk soul
		sculk charge
		sculk charge pop
		shriek
		cherry leaves
		egg crack
		dust plume
		white smoke
		gust
		small gust
		large gust emitter
		small gust emitter
		trial spawner detection
		ominous trial spawner detection
		vault connection
		infested
		cobweb
		dust pillar
		ominous spawning
		raid omen
		block marker

#Weather Type
#The weather types sunny, rainy, and thundering.
#since 1.0
#Examples:
#is raining
#is sunny in the player's world
#message "It is %weather in the argument's world% in %world of the argument%"
type:
	patterns:
		weather[ ]type[s]
		weather[ ]condition[s]
		weather[s]

#Wolf Variant
#Represents the variant of a wolf entity.
#NOTE: Minecraft namespaces are supported, ex: 'minecraft:ashen'.
#since @VERSION
type:
	patterns:
		wolf[ ]variant[s]

expression:
	return type: wolfvariant
	patterns:
		ashen
		black
		chestnut
		pale
		rusty
		snowy
		spotted
		striped
		woods

#World
#One of the server's worlds. Worlds can be put into scripts by surrounding their name with double quotes, e.g. "world_nether", but this might not work reliably as text uses the same syntax.
#since 1.0, 2.2 (alternate syntax)
#Examples:
#broadcast "Hello!" to the world "world_nether"
type:
	patterns:
		world[s]

#World Border
#Represents the border of a world or player.
#since 2.11
type:
	patterns:
		world[ ]border[s]

#World Environment
#Represents the environment of a world.
#since 2.7
type:
	patterns:
		[world[ ]]environment[s]

expression:
	return type: environment
	patterns:
		normal
		nether
		the end
		the overworld
		custom
		the nether
		end
		overworld

#Block
#A block in a world. It has a location and a type, and can also have a direction (mostly a facing), an inventory, or other special properties.
#since 1.0
type:
	patterns:
		block[s]
	inherits: location, metadata holder

#Entity
#An entity is something in a world that's not a block, e.g. a player, a skeleton, or a zombie, but also projectiles like arrows, fireballs or thrown potions, or special entities like dropped items, falling blocks or paintings.
#since 1.0
#Examples:
#entity is a zombie or creeper
#player is an op
#projectile is an arrow
#shoot a fireball from the player
type:
	patterns:
		entit(y|ies)
	inherits: location, metadata holder

expression:
	return type: entity
	patterns:
		player
		op
		wolf
		tamed ocelot
		powered creeper
		zombie
		unsaddled pig
		fireball
		arrow
		dropped item
		item frame
		etc.

#Living Entity
#A living entity, i.e. a mob or player, not inanimate entities like projectiles or dropped items.
#since 1.0
#Examples:
#spawn 5 powered creepers
#shoot a zombie from the creeper
type:
	patterns:
		living[ ]entit(y|ies)
	inherits: entity

expression:
	return type: livingentity
	patterns:
		see entity
		but ignore inanimate objects

#Offline Player
#A player that is possibly offline. See player for more information. Please note that while all effects and conditions that require a player can be used with an offline player as well, they will not work if the player is not actually online.
#since 2.0 beta 8
#Examples:
#set {_p} to "Notch" parsed as an offlineplayer  returns Notch even if they're offline
type:
	patterns:
		offline[ ]player[s]
	inherits: command sender

#Player
#A player. Depending on whether a player is online or offline several actions can be performed with them, though you won't get any errors when using effects that only work if the player is online (e.g. changing their inventory) on an offline player.
#You have two possibilities to use players as command arguments: <player> and <offline player>. The first requires that the player is online and also accepts only part of the name, while the latter doesn't require that the player is online, but the player's name has to be entered exactly.
#since 1.0
#Examples:
#set {_p} to "Notch" parsed as a player  returns <none> unless Notch is actually online or starts with Notch like Notchan
#set {_p} to "N" parsed as a player  returns Notch if Notch is online because their name starts with 'N' (case insensitive) however, it would return nothing if no player whose name starts with 'N' is online.
type:
	patterns:
		player[s]
	inherits: offline player, livingentity

#Action Bar
#Sends an action bar message to the given player(s).
#since 2.3
#Examples:
#send action bar "Hello player!" to player
effect:
	patterns:
		send [the] action[ ]bar [with text] %string% [to %players%]

#Allay Duplicate
#Set whether an allay can or cannot duplicate itself.
#This is not the same as breeding allays.
#since 2.11
#Examples:
#allow all allays to duplicate
#prevent all allays from duplicating
effect:
	patterns:
		allow %livingentities% to (duplicate|clone)
		prevent %livingentities% from (duplicating|cloning)

#Allow / Prevent Leash Drop
#Allows or prevents the leash from being dropped in an unleash event.
#since 2.10
#Examples:
#on unleash:
#	if player is not set:
#		prevent the leash from dropping
#	else if player is op:
#		allow the leash to drop
effect:
	patterns:
		(force|allow) [the] (lead|leash) [item] to drop
		(block|disallow|prevent) [the] (lead|leash) [item] from dropping

#Allow Aging
#Sets whether or not living entities will be able to age.
#since 2.10
#Examples:
#on spawn of animal:
#	allow aging of entity
effect:
	patterns:
		lock age of %livingentities%
		prevent aging of %livingentities%
		prevent %livingentities% from aging
		unlock age of %livingentities%
		allow aging of %livingentities%
		allow %livingentities% to age

#Apply Bone Meal
#Applies bone meal to a crop, sapling, or composter
#since 2.8.0
#Examples:
#apply 3 bone meal to event-block
#MC 1.16.2+
effect:
	patterns:
		apply [%number%] bone[ ]meal[s] [to %blocks%]

#Apply Fishing Lure
#Sets whether the lure enchantment should be applied, which reduces the wait time.
#since 2.10
#Examples:
#on fishing line cast:
#	apply lure enchantment bonus
effect:
	patterns:
		apply [the] lure enchantment bonus
		remove [the] lure enchantment bonus

#Ban
#Bans or unbans a player or an IP address.
#If a reason is given, it will be shown to the player when they try to join the server while banned.
#A length of ban may also be given to apply a temporary ban. If it is absent for any reason, a permanent ban will be used instead.
#We recommend that you test your scripts so that no accidental permanent bans are applied.
#Note that banning people does not kick them from the server.
#You can optionally use 'and kick' or consider using the kick effect after applying a ban.
#since 1.4, 2.1.1 (ban reason), 2.5 (timespan), 2.9.0 (kick)
#Examples:
#unban player
#ban "127.0.0.1"
#IP-ban the player because "he is an idiot"
#ban player due to "inappropriate language" for 2 days
#ban and kick player due to "inappropriate language" for 2 days
effect:
	patterns:
		ban [and kick] %strings/offlineplayers% [(by reason of|because [of]|on account of|due to) %string%] [for %timespan%]
		unban %strings/offlineplayers%
		ban [and kick] %players% by IP [(by reason of|because [of]|on account of|due to) %string%] [for %timespan%]
		unban %players% by IP
		IP(-| )ban [and kick] %players% [(by reason of|because [of]|on account of|due to) %string%] [for %timespan%]
		(IP(-| )unban|un[-]IP[-]ban) %players%

#Break Block
#Breaks the block and spawns items as if a player had mined it
#
#You can add a tool, which will spawn items based on how that tool would break the block 
#(ie: When using a hand to break stone, it drops nothing, whereas with a pickaxe it drops cobblestone)
#since 2.4
#Examples:
#on right click:
#	break clicked block naturally
#loop blocks in radius 10 around player:
#	break loop-block using player's tool
#loop blocks in radius 10 around player:
#	break loop-block naturally using diamond pickaxe
effect:
	patterns:
		break %blocks% [naturally] [using %itemtype%]

#Broadcast
#Broadcasts a message to the server.
#since 1.0, 2.6 (broadcasting objects), 2.6.1 (using advanced formatting)
#Examples:
#broadcast "Welcome %player% to the server!"
#broadcast "Woah! It's a message!"
effect:
	patterns:
		broadcast %objects% [(to|in) %worlds%]

#Cancel Active Item
#Interrupts the action entities may be trying to complete.
#For example, interrupting eating, or drawing back a bow.
#since 2.8.0
#Examples:
#on damage of player:
#	if the victim's active tool is a bow:
#		interrupt the usage of the player's active item
#Paper 1.16+
effect:
	patterns:
		(cancel|interrupt) [the] us[ag]e of %livingentities%'[s] [active|current] item

#Cancel Command Cooldown
#Only usable in commands. Makes it so the current command usage isn't counted towards the cooldown.
#since 2.2-dev34
#Examples:
#command /nick <text>:
#	executable by: players
#	cooldown: 10 seconds
#	trigger:
#		if length of arg-1 is more than 16:
#			 Makes it so that invalid arguments don't make you wait for the cooldown again
#			cancel the cooldown
#			send "Your nickname may be at most 16 characters."
#			stop
#		set the player's display name to arg-1
effect:
	patterns:
		(cancel|ignore) [the] [current] [command] cooldown
		un(cancel|ignore) [the] [current] [command] cooldown

#Cancel Drops
#Cancels drops of items or experiences in a death or block break event. Please note that this doesn't keep items or experiences of a dead player. If you want to do that, use the Keep Inventory / Experience effect.
#since 2.4
#Examples:
#on death of a zombie:
#	if name of the entity is "&cSpecial":
#		cancel drops of items
#on break of a coal ore:
#	cancel the experience drops
#1.12.2 or newer (cancelling item drops of blocks)
effect:
	patterns:
		(cancel|clear|delete) [the] drops [of (items|[e]xp[erience][s])]
		(cancel|clear|delete) [the] (item|[e]xp[erience]) drops

#Cancel Event
#Cancels the event (e.g. prevent blocks from being placed, or damage being taken).
#since 1.0
#Examples:
#on damage:
#	victim is a player
#	victim has the permission "skript.god"
#	cancel the event
effect:
	patterns:
		cancel [the] event
		uncancel [the] event

#Change: Set/Add/Remove/Delete/Reset
#A very general effect that can change many expressions. Many expressions can only be set and/or deleted, while some can have things added to or removed from them.
#since 1.0 (set, add, remove, delete), 2.0 (remove all)
#Examples:
# set:
#Set the player's display name to "<red>%name of player%"
#set the block above the victim to lava
# add:
#add 2 to the player's health  preferably use 'heal' for this
#add argument to {blacklist::*}
#give a diamond pickaxe of efficiency 5 to the player
#increase the data value of the clicked block by 1
# remove:
#remove 2 pickaxes from the victim
#subtract 2.5 from {points::%uuid of player%}
# remove all:
#remove every iron tool from the player
#remove all minecarts from {entitylist::*}
# delete:
#delete the block below the player
#clear drops
#delete {variable}
# reset:
#reset walk speed of player
#reset chunk at the targeted block
effect:
	patterns:
		(add|give) %objects% to %objects%
		increase %objects% by %objects%
		give %objects% %objects%
		set %objects% to %objects%
		remove (all|every) %objects% from %objects%
		(remove|subtract) %objects% from %objects%
		(reduce|decrease) %objects% by %objects%
		(delete|clear) %objects%
		reset %objects%

#Charge Entity
#Charges or uncharges a creeper or wither skull. A creeper is charged when it has been struck by lightning.
#since 2.5, 2.10 (wither skulls)
#Examples:
#on spawn of creeper:
#	charge the event-entity
effect:
	patterns:
		make %entities% [(un|not |non[-| ])](charged|powered)
		[un](charge|power) %entities%

#Clear Entity Storage
#Clear the stored entities of an entity block storage (i.e. beehive).
#since 2.11
#Examples:
#clear the stored entities of {_beehive}
#Paper
effect:
	patterns:
		(clear|empty) the (stored entities|entity storage) of %blocks%

#Color Items
#Colors items in a given color. You can also use RGB codes if you feel limited with the 16 default colors. RGB codes are three numbers from 0 to 255 in the order (red, green, blue), where (0,0,0) is black and (255,255,255) is white. Armor is colorable for all Minecraft versions. With Minecraft 1.11 or newer you can also color potions and maps. Note that the colors might not look exactly how you'd expect.
#since 2.0, 2.2-dev26 (maps and potions)
#Examples:
#dye player's helmet blue
#color the player's tool red
effect:
	patterns:
		(dye|colo[u]r|paint) %itemtypes% %color%
		(dye|colo[u]r|paint) %itemtypes% (%number%, %number%, %number%)

#Command
#Executes a command. This can be useful to use other plugins in triggers.
#If the command is a bungeecord side command, you can use the [bungeecord] option to execute command on the proxy.
#since 1.0, 2.8.0 (bungeecord command)
#Examples:
#make player execute command "/home"
#execute console command "/say Hello everyone!"
#execute player bungeecord command "/alert &6Testing Announcement!"
effect:
	patterns:
		[execute] [the] [bungee[cord]] command[s] %strings% [by %commandsenders%]
		[execute] [the] %commandsenders% [bungee[cord]] command[s] %strings%
		(let|make) %commandsenders% execute [[the] [bungee[cord]] command[s]] %strings%

#Conditional / Unconditional
#Sets whether the provided command blocks are conditional or not.
#since 2.10
#Examples:
#make command block {_block} conditional
#make command block {_block} unconditional if {_block} is conditional
effect:
	patterns:
		make command block[s] %blocks% [(un|not )]conditional

#Connect
#Connect a player to a server running on your proxy, or any server supporting transfers. Read below for more information.
#If the server is running Minecraft 1.20.5 or above, you may specify an IP and Port to transfer a player over to that server.
#When transferring players using an IP, the transfer will not complete if the `accepts-transfers` option isn't enabled in `server.properties` for the server specified.
#If the port is not provided, it will default to `25565`.
#since 2.3, 2.10 (transfer)
#Examples:
#connect all players to proxy server "hub"
#transfer player to server "my.server.com"
#transfer player to server "localhost" on port 25566
effect:
	patterns:
		connect %players% to [proxy|bungeecord] [server] %string%
		send %players% to [proxy|bungeecord] server %string%
		transfer %players% to server %string% [on port %number%]

#Consume Boosting Firework
#Prevent the firework used in an 'elytra boost' event to be consumed.
#since 2.10
#Examples:
#on elytra boost:
#	if the used firework will be consumed:
#		prevent the used firework from being consume
#Paper
effect:
	patterns:
		(prevent|disallow) [the] (boosting|used) firework from being consumed
		allow [the] (boosting|used) firework to be consumed

#Continue
#Moves the loop to the next iteration. You may also continue an outer loop from an inner one. The loops are labelled from 1 until the current loop, starting with the outermost one.
#since 2.2-dev37, 2.7 (while loops), 2.8.0 (outer loops)
#Examples:
# Broadcast online moderators
#loop all players:
#	if loop-value does not have permission "moderator":
#		continue  filter out non moderators
#	broadcast "%loop-player% is a moderator!"  Only moderators get broadcast
# 
# Game starting counter
#set {_counter} to 11
#while {_counter} > 0:
#	remove 1 from {_counter}
#	wait a second
#	if {_counter} != 1, 2, 3, 5 or 10:
#		continue  only print when counter is 1, 2, 3, 5 or 10
#	broadcast "Game starting in %{_counter}% second(s)"
effect:
	patterns:
		continue [this loop|[the] [current] loop]
		continue [the] <-?\d+(_\d+)*>(st|nd|rd|th) loop

#Copy Into Variable
#Copies objects into a variable. When copying a list over to another list, the source list and its sublists are also copied over.
#Note: Copying a value into a variable/list will overwrite the existing data.
#since 2.8.0
#Examples:
#set {_foo::bar} to 1
#set {_foo::sublist::foobar} to "hey"
#copy {_foo::*} to {_copy::*}
#broadcast indices of {_copy::*}  bar, sublist
#broadcast {_copy::bar}  1
#broadcast {_copy::sublist::foobar}  "hey!"
effect:
	patterns:
		copy %objects% [in]to %objects%

#Damage/Heal/Repair
#Damage, heal, or repair an entity or item.
#Servers running Spigot 1.20.4+ can optionally choose to specify a fake damage cause.
#since 1.0, 2.10 (damage cause)
#Examples:
#damage player by 5 hearts
#damage player by 3 hearts with fake cause fall
#heal the player
#repair tool of player
#Spigot 1.20.4+ (for damage cause)
effect:
	patterns:
		damage %livingentities/itemtypes/slots% by %number% [heart[s]] [with [fake] [damage] cause %damagecause%]
		heal %livingentities% [by %number% [heart[s]]]
		repair %itemtypes/slots% [by %number%]

#Dance
#Make an allay or piglin start or stop dancing.
#Providing a location only applies to allays. They will check to see if the the block at the location is a jukebox and playing music. If it isn't, they will stop dancing. If no location is provided, the allay will dance indefinitely.
#Providing a timespan only applies for piglins. It determines the length of time they will dance for. If no timespan is provided, they will dance indefinitely.
#since 2.11
#Examples:
#if last spawned allay is not dancing:
#	make last spawned allay start dancing
#if block at location(0, 0, 0) is a jukebox:
#	make all allays dance at location(0, 0, 0)
#make last spawned piglin start dancing
#make all piglins dance for 5 hours
#Paper 1.20.1+ (piglins)
effect:
	patterns:
		make %livingentities% (start dancing|dance) [%direction% %location%] [for %timespan%]
		make %livingentities% (stop dancing|not dance)

#Delay
#Delays the script's execution by a given timespan. Please note that delays are not persistent, e.g. trying to create a tempban script with ban player → wait 7 days → unban player will not work if you restart your server anytime within these 7 days. You also have to be careful even when using small delays!
#since 1.4
#Examples:
#wait 2 minutes
#halt for 5 minecraft hours
#wait a tick
effect:
	patterns:
		(wait|halt) [for] %timespan%

#Detonate Entities
#Immediately detonates an entity. Accepted entities are fireworks, TNT minecarts, primed TNT, wind charges and creepers.
#since 2.10
#Examples:
#detonate last launched firework
effect:
	patterns:
		detonate %entities%

#Do If
#Execute an effect if a condition is true.
#since 2.3
#Examples:
#on join:
#	give a diamond to the player if the player has permission "rank.vip"
effect:
	patterns:
		<.+> if <.+>

#Drop
#Drops one or more items.
#since 1.0
#Examples:
#on death of creeper:
#	drop 1 TNT
effect:
	patterns:
		drop %itemtypes/experiences% [%directions% %locations%] [(without velocity)]

#Enable/Disable/Unload/Reload Script
#Enables, disables, unloads, or reloads a script.
#
#Disabling a script unloads it and prepends - to its name so it will not be loaded the next time the server restarts.
#If the script reflection experiment is enabled: unloading a script terminates it and removes it from memory, but does not alter the file.
#since 2.4, 2.10 (unloading)
#Examples:
#reload script "test"
#enable script file "testing"
#unload script file "script.sk"
#set {_script} to the script "MyScript.sk"
#reload {_script}
effect:
	patterns:
		((enable|load)|reload|disable|unload) script [file|named] %string%
		((enable|load)|reload|disable|unload) skript file %string%
		((enable|load)|reload|disable|unload) %scripts%

#Enchant/Disenchant
#Enchant or disenchant an existing item.
#since 2.0
#Examples:
#enchant the player's tool with sharpness 5
#disenchant the player's tool
effect:
	patterns:
		enchant %itemtypes% with %enchantmenttypes%
		disenchant %itemtypes%

#Enderman Teleport
#Make an enderman teleport randomly or towards an entity.
#Teleporting towards an entity teleports in the direction to the entity and not to them.
#since 2.11
#Examples:
#make last spawned enderman teleport randomly
#loop 10 times:
#	make all endermen teleport towards player
#Minecraft 1.20.1+
effect:
	patterns:
		make %livingentities% (randomly teleport|teleport randomly)
		force %livingentities% to (randomly teleport|teleport randomly)
		make %livingentities% teleport [randomly] towards %entity%
		force %livingentities% to teleport [randomly] towards %entity%

#Enforce Whitelist
#Enforces or un-enforce a server's whitelist.
#All non-whitelisted players will be kicked upon enforcing the whitelist.
#since 2.9.0
#Examples:
#enforce the whitelist
#unenforce the whitelist
#MC 1.17+
effect:
	patterns:
		[un]enforce [the] [server] white[ ]list

#Entity Despawn
#Make a living entity despawn when the chunk they're located at is unloaded.
#Setting a custom name on a living entity automatically makes it not despawnable.
#More information on what and when entities despawn can be found at reference.
#since 2.11
#Examples:
#make all entities not despawnable on chunk unload
#spawn zombie at location(0, 0, 0):
#	force event-entity to not despawn when far away
effect:
	patterns:
		make %livingentities% despawn[able] (on chunk unload|when far away)
		force %livingentities% to despawn (on chunk unload|when far away)
		prevent %livingentities% from despawning [on chunk unload|when far away]

#Entity Visibility
#Change visibility of the given entities for the given players.
#If no players are given, will hide the entities from all online players.
#When reveal is used in combination of the hidden players expression and the viewers are not specified, this will default it to the given player in the hidden players expression.
#Note: all previously hidden entities (including players) will be visible when a player leaves and rejoins.
#since 2.3, 2.10 (entities)
#Examples:
#on spawn:
#	if event-entity is a chicken:
#		hide event-entity
#reveal hidden players of players
#Minecraft 1.19+ (entities)
effect:
	patterns:
		hide %entities% [(from|for) %players%]
		reveal %entities% [(to|for|from) %players%]

#Equip
#Equips or unequips an entity with the given itemtypes (usually armor).
#This effect will replace any armor that the entity is already wearing.
#since 1.0, 2.7 (multiple entities, unequip), 2.10 (wolves)
#Examples:
#equip player with diamond helmet
#equip player with all diamond armor
#unequip diamond chestplate from player
#unequip all armor from player
#unequip player's armor
effect:
	patterns:
		equip [%livingentities%] with %itemtypes%
		make %livingentities% wear %itemtypes%
		unequip %itemtypes% [from %livingentities%]
		unequip %livingentities%'[s] (armo[u]r|equipment)

#Exit
#Exits a given amount of loops and conditionals, or the entire trigger.
#since unknown (before 2.1)
#Examples:
#if player has any ore:
#	stop
#message "%player% has no ores!"
#loop blocks above the player:
#	loop-block is not air:
#		exit 2 sections
#	set loop-block to water
effect:
	patterns:
		(exit|stop) [trigger]
		(exit|stop) [1|a|the|this] (section|loop|conditional)
		(exit|stop) <-?\d+(_\d+)*> (section|loop|conditional)s
		(exit|stop) all (section|loop|conditional)s

#Expand/Shrink World Border
#Expand or shrink the size of a world border.
#Using `by` adds/subtracts from the current size of the world border.
#Using `to` sets to the specified size.
#since 2.11
#Examples:
#expand world border of player by 100 in 5 seconds
#shrink world border of world "world" to 100 in 10 seconds
effect:
	patterns:
		(expand|grow) [[the] (diameter|radius) of] %worldborders% (by|to) %number% [over [a period of] %timespan%]
		(expand|grow) %worldborders%['s (diameter|radius)] (by|to) %number% [over [a period of] %timespan%]
		(contract|shrink) [[the] (diameter|radius) of] %worldborders% (by|to) %number% [over [a period of] %timespan%]
		(contract|shrink) %worldborders%['s (diameter|radius)] (by|to) %number% [over [a period of] %timespan%]

#Explode Creeper
#Starts the explosion process of a creeper or instantly explodes it.
#since 2.5
#Examples:
#start explosion of the last spawned creeper
#stop ignition of the last spawned creeper
#Paper 1.13 or newer/Spigot 1.14 or newer. Ignition can be stopped on Paper 1.13 or newer.
effect:
	patterns:
		instantly explode [creeper[s]] %livingentities%
		explode [creeper[s]] %livingentities% instantly
		ignite creeper[s] %livingentities%
		start (ignition|explosion) [process] of [creeper[s]] %livingentities%
		stop (ignition|explosion) [process] of [creeper[s]] %livingentities%

#Explosion
#Creates an explosion of a given force. The Minecraft Wiki has an article on explosions which lists the explosion forces of TNT, creepers, etc.
#Hint: use a force of 0 to create a fake explosion that does no damage whatsoever, or use the explosion effect introduced in Skript 2.0.
#Starting with Bukkit 1.4.5 and Skript 2.0 you can use safe explosions which will damage entities but won't destroy any blocks.
#since 1.0
#Examples:
#create an explosion of force 10 at the player
#create an explosion of force 0 at the victim
effect:
	patterns:
		[(create|make)] [an] explosion (of|with) (force|strength|power) %number% [%directions% %locations%] [(with fire)]
		[(create|make)] [a] safe explosion (of|with) (force|strength|power) %number% [%directions% %locations%]
		[(create|make)] [a] fake explosion [%directions% %locations%]
		[(create|make)] [an] explosion[ ]effect [%directions% %locations%]

#Feed
#Feeds the specified players.
#since 2.2-dev34
#Examples:
#feed all players
#feed the player by 5 beefs
effect:
	patterns:
		feed [the] %players% [by %number% [beef[s]]]

#Force Attack
#Makes a living entity attack an entity with a melee attack.
#since 2.5.1
#Examples:
#spawn a wolf at player's location
#make last spawned wolf attack player
#Minecraft 1.15.2+
effect:
	patterns:
		make %livingentities% attack %entity%
		force %livingentities% to attack %entity%

#Force Eating
#Make a panda or horse type (horse, camel, donkey, llama, mule) start/stop eating.
#since 2.11
#Paper (horse type)
effect:
	patterns:
		make %livingentities% (start|stop) eating
		force %livingentities% to (start|stop) eating

#Force Enchantment Glint
#Forces the items to glint or not, or removes its existing enchantment glint enforcement.
#since 2.10
#Examples:
#force {_items::*} to glint
#force the player's tool to stop glinting
#Spigot 1.20.5+
effect:
	patterns:
		(force|make) %itemtypes% [to] [start] glint[ing]
		(force|make) %itemtypes% [to] (not|stop) glint[ing]
		(clear|delete|reset) [the] enchantment glint override of %itemtypes%
		(clear|delete|reset) %itemtypes%'s enchantment glint override

#Force Panda On Back
#Make a panda get on/off its back.
#since 2.11
#Examples:
#if last spawned panda is on its back:
#	make last spawned panda get off its back
#
effect:
	patterns:
		make %livingentities% get (on|off) (its|their) back[s]
		force %livingentities% to get (on|off) (its|their) back[s]

#Force Respawn
#Forces player(s) to respawn if they are dead. If this is called without delay from death event, one tick is waited before respawn attempt.
#since 2.2-dev21
#Examples:
#on death of player:
#	force event-player to respawn
effect:
	patterns:
		force %players% to respawn

#Generate Loot
#Generates the loot in the specified inventories from a loot table using a loot context. Not specifying a loot context will use a loot context with a location at the world's origin.
#Note that if the inventory is full, it will cause warnings in the console due to over-filling the inventory.
#since 2.10
#Examples:
#generate loot of loot table "minecraft:chests/simple_dungeon" using loot context at player in {_inventory}
#generate loot using "minecraft:chests/shipwreck_supply" in {_inventory}
effect:
	patterns:
		generate [the] loot (of|using) %loottable% [(with|using) %lootcontext%] in %inventories%

#Goat Horns
#Make a goat have or not have a left, right, or both horns.
#since 2.11
#Examples:
#remove the left horn of last spawned goat
#regrow {_goat}'s horns
#remove both horns of all goats
effect:
	patterns:
		remove [the] (left horn[s]|right horn[s]|both horns) of %livingentities%
		remove %livingentities%'[s] (left horn[s]|right horn[s]|horns)
		(regrow|replace) [the] (left horn[s]|right horn[s]|both horns) of %livingentities%
		(regrow|replace) %livingentities%'[s] (left horn[s]|right horn[s]|horns)

#Handedness
#Make mobs left or right-handed. This does not affect players.
#since 2.8.0
#Examples:
#spawn skeleton at spawn of world "world":
#	make entity left handed
#make all zombies in radius 10 of player right handed
#Paper 1.17.1+
effect:
	patterns:
		make %livingentities% (left|right)( |-)handed

#Hide Player from Server List
#Hides a player from the hover list and decreases the online players count (only if the player count wasn't changed before).
#since 2.3
#Examples:
#on server list ping:
#	hide {vanished::*} from the server list
effect:
	patterns:
		hide %players% (in|on|from) [the] server list
		hide %players%'[s] info[rmation] (in|on|from) [the] server list

#Ignite/Extinguish
#Lights entities on fire or extinguishes them.
#since 1.4
#Examples:
#ignite the player
#extinguish the player
effect:
	patterns:
		(ignite|set fire to) %entities% [for %timespan%]
		(set|light) %entities% on fire [for %timespan%]
		extinguish %entities%

#Insert Entity Storage
#Add an entity into the entity storage of a block (e.g. beehive).
#The entity must be of the right type for the block (e.g. bee for beehive).
#Due to unstable behavior on older versions, adding entities to an entity storage requires Minecraft version 1.21+.
#since 2.11
#Examples:
#add last spawned bee into the entity storage of {_beehive}
#Minecraft 1.21+
effect:
	patterns:
		(add|insert) %livingentities% [in[ ]]to [the] (stored entities|entity storage) of %block%

#Item Despawn
#Prevent a dropped item from naturally despawning through Minecraft's timer.
#since 2.11
#Examples:
#prevent all dropped items from naturally despawning
#allow all dropped items to naturally despawn
effect:
	patterns:
		(prevent|disallow) %itementities% from (naturally despawning|despawning naturally)
		allow natural despawning of %itementities%
		allow %itementities% to (naturally despawn|despawn naturally)

#Item Tooltips
#Show or hide the tooltip of an item.
#If changing the 'entire' tooltip of an item, nothing will show up when a player hovers over it.
#If changing the 'additional' tooltip, only specific parts (which change per item) will be hidden.
#since 2.9.0
#Examples:
#hide the entire tooltip of player's tool
#hide {_item}'s additional tool tip
#Spigot 1.20.5+
effect:
	patterns:
		(show|reveal|hide) %itemtypes%'[s] [entire|additional] tool[ ]tip
		(show|reveal|hide) [the] [entire|additional] tool[ ]tip of %itemtypes%

#Keep Inventory / Experience
#Keeps the inventory or/and experiences of the dead player in a death event.
#since 2.4
#Examples:
#on death of a player:
#	if the victim is an op:
#		keep the inventory and experiences
effect:
	patterns:
		keep [the] (inventory|items) [(and [e]xp[erience][s] [point[s]])]
		keep [the] [e]xp[erience][s] [point[s]] [(and (inventory|items))]

#Kick
#Kicks a player from the server.
#since 1.0
#Examples:
#on place of TNT, lava, or obsidian:
#	kick the player due to "You may not place %block%!"
#	cancel the event
effect:
	patterns:
		kick %players% [(by reason of|because [of]|on account of|due to) %string%]

#Kill
#Kills an entity.
#since 1.0, 2.10 (ignoring totem of undying)
#Examples:
#kill the player
#kill all creepers in the player's world
#kill all endermen, witches and bats
effect:
	patterns:
		kill %entities%

#Knockback
#Apply the same velocity as a knockback to living entities in a direction. Mechanics such as knockback resistance will be factored in.
#since 2.7
#Examples:
#knockback player north
#knock victim (vector from attacker to victim) with strength 10
#Paper 1.19.2+
effect:
	patterns:
		(apply knockback to|knock[back]) %livingentities% [%direction%] [with (strength|force) %number%]

#Launch firework
#Launch firework effects at the given location(s).
#since 2.4
#Examples:
#launch ball large colored red, purple and white fading to light green and black at player's location with duration 1
effect:
	patterns:
		(launch|deploy) [[a] firework [with effect[s]]] %fireworkeffects% at %locations% [([with] (duration|power)|timed) %number%]

#Leash entities
#Leash living entities to other entities. When trying to leash an Ender Dragon, Wither, Player, or a Bat, this effect will not work.
#See Spigot's Javadocs for more info.
#since 2.3
#Examples:
#on right click:
#	leash event-entity to player
#	send "&aYou leashed &2%event-entity%!" to player
effect:
	patterns:
		(leash|lead) %livingentities% to %entity%
		make %entity% (leash|lead) %livingentities%
		un(leash|lead) [holder of] %livingentities%

#Lightning
#Strike lightning at a given location. Can use 'lightning effect' to create a lightning that does not harm entities or start fires.
#since 1.4
#Examples:
#strike lightning at the player
#strike lightning effect at the victim
effect:
	patterns:
		(create|strike) lightning([ ]effect|) %directions% %locations%

#Load Server Icon
#Loads server icons from the given files. You can get the loaded icon using the
#last loaded server icon expression.
#Please note that the image must be 64x64 and the file path starts from the server folder.
#since 2.3
#Examples:
#on load:
#	clear {server-icons::*}
#	loop 5 times:
#		load server icon from file "icons/%loop-number%.png"
#		add the last loaded server icon to {server-icons::*}
#on server list ping:
#	set the icon to a random server icon out of {server-icons::*}
#Paper 1.12.2 or newer
effect:
	patterns:
		load [the] server icon (from|of) [the] [image] [file] %string%

#Load World
#Load your worlds or unload your worlds
#The load effect will create a new world if world doesn't already exist.
#When attempting to load a normal vanilla world you must define it's environment i.e "world_nether" must be loaded with nether environment
#since 2.8.0
#Examples:
#load world "world_nether" with environment nether
#load the world "myCustomWorld"
#unload "world_nether"
#unload "world_the_end" without saving
#unload all worlds
effect:
	patterns:
		load [[the] world[s]] %strings% [with environment %environment%]
		unload [[the] world[s]] %worlds% [without saving]

#Locally Suppress Warning
#Suppresses target warnings from the current script.
#since 2.3
#Examples:
#locally suppress missing conjunction warnings
#suppress the variable save warnings
effect:
	patterns:
		[local[ly]] suppress [the] (conflict|variable save|[missing] conjunction|starting [with] expression[s]|deprecated syntax|unreachable code) warning[s]

#Log
#Writes text into a .log file. Skript will write these files to /plugins/Skript/logs.
#NB: Using 'server.log' as the log file will write to the default server log. Omitting the log file altogether will log the message as '[Skript] [<script>.sk] <message>' in the server log.
#since 2.0, 2.9.0 (severities)
#Examples:
#on join:
#	log "%player% has just joined the server!"
#on world change:
#	log "Someone just went to %event-world%!" to file "worldlog/worlds.log"
#on command:
#	log "%player% just executed %full command%!" to file "server/commands.log" with a severity of warning
effect:
	patterns:
		log %strings% [(to|in) [file[s]] %strings%] [with [the|a] severity [of] (warning|severe)]

#Look At
#Forces the mob(s) or player(s) to look at an entity, vector or location. Vanilla max head pitches range from 10 to 50.
#since 2.7
#Examples:
#force the player to look towards event-entity's feet
#on entity explosion:
#	set {_player} to the nearest player
#	{_player} is set
#	distance between {_player} and the event-location is less than 15
#	make {_player} look towards vector from the {_player} to location of the event-entity
#force {_enderman} to face the block 3 meters above {_location} at head rotation speed 100.5 and max head pitch -40
#Paper 1.17+, Paper 1.19.1+ (Players & Look Anchors)
effect:
	patterns:
		(force|make) %livingentities% [to] (face [towards]|look [(at|towards)]) (%entity%['s (feet|eyes)]|(feet|eyes) of %entity%) [at [head] [rotation] speed %number%] [[and] max[imum] [head] pitch %number%]
		(force|make) %livingentities% [to] (face [towards]|look [(at|towards)]) %vector/location% [at [head] [rotation] speed %number%] [[and] max[imum] [head] pitch %number%]

#Make Adult/Baby
#Force a animal to become an adult or baby.
#since 2.10
#Examples:
#on spawn of mob:
#	entity is not an adult
#	make entity an adult
effect:
	patterns:
		make %livingentities% [a[n]] (adult|baby)
		force %livingentities% to be[come] a[n] (adult|baby)

#Make Allay Duplicate
#Make an allay duplicate itself.
#This effect will always make an allay duplicate regardless of whether the duplicate attribute is disabled.
#since 2.11
#Examples:
#make all allays duplicate
effect:
	patterns:
		make %livingentities% (duplicate|clone)

#Make Breedable
#Sets whether or not entities will be able to breed. Only works on animals.
#since 2.10
#Examples:
#on spawn of animal:
#	make entity unbreedable
effect:
	patterns:
		make %livingentities% breedable
		unsterilize %livingentities%
		make %livingentities% (not |non(-| )|un)breedable
		sterilize %livingentities%

#Make Disturbance
#Make a warden sense a disturbance at a location, causing the warden to investigate that area.
#The warden will not investigate if the warden is aggressive towards an entity.
#This effect does not add anger to the warden.
#since 2.11
#Examples:
#make last spawned warden sense a disturbance at location(0, 0, 0)
effect:
	patterns:
		make %livingentities% sense [a] disturbance %direction% %location%

#Make Egg Hatch
#Makes the egg hatch in a Player Egg Throw event.
#since 2.7
#Examples:
#on player egg throw:
#	 EGGS FOR DAYZ!
#	make the egg hatch
effect:
	patterns:
		make [the] egg [not] hatch

#Make Entity Scream
#Make a goat or enderman start or stop screaming.
#since 2.11
#Examples:
#	make last spawned goat start screaming
#	force last spawned goat to stop screaming
#
#	make {_enderman} scream
#	force {_enderman} to stop screaming
#
#Paper (endermen)
effect:
	patterns:
		make %livingentities% (start screaming|scream)
		force %livingentities% to (start screaming|scream)
		make %livingentities% stop screaming
		force %livingentities% to stop screaming

#Make Fire Resistant
#Makes items fire resistant.
#since 2.9.0
#Examples:
#make player's tool fire resistant:
#make {_items::*} not resistant to fire
#Spigot 1.20.5+
effect:
	patterns:
		make %itemtypes% [not] (fire resistant|resistant to fire)

#Make Fly
#Forces a player to start/stop flying.
#since 2.2-dev34
#Examples:
#make player fly
#force all players to stop flying
effect:
	patterns:
		force %players% to [(start|stop)] fly[ing]
		make %players% (start|stop) flying
		make %players% fly

#Make Goat Ram
#Make a goat ram an entity.
#Ramming does have a cooldown and currently no way to change it.
#since 2.11
#Examples:
#make all goats ram player
#Paper
effect:
	patterns:
		make %livingentities% ram %livingentity%
		force %livingentities% to ram %livingentity%

#Make Incendiary
#Sets if an entity's explosion will leave behind fire. This effect is also usable in an explosion prime event.
#since 2.5
#Examples:
#on explosion prime:
#	make the explosion fiery
effect:
	patterns:
		make %entities% [(not)] incendiary
		make %entities%'[s] explosion [(not)] (incendiary|fiery)
		make [the] [event(-| )]explosion [(not)] (incendiary|fiery)

#Make Invisible
#Makes a living entity visible/invisible. This is not a potion and therefore does not have features such as a time limit or particles.
#When setting an entity to invisible while using an invisibility potion on it, the potion will be overridden and when it runs out the entity keeps its invisibility.
#since 2.7
#Examples:
#make target entity invisible
effect:
	patterns:
		make %livingentities% (invisible|not visible)
		make %livingentities% (visible|not invisible)

#Make Invulnerable
#Makes an entity invulnerable/not invulnerable.
#since 2.5
#Examples:
#make target entity invulnerable
effect:
	patterns:
		make %entities% (invulnerable|invincible)
		make %entities% (not (invulnerable|invincible)|vulnerable|vincible)

#Make Panda Roll
#Make a panda start/stop rolling.
#since 2.11
effect:
	patterns:
		make %livingentities% ((start rolling|roll)|stop rolling)
		force %livingentities% to (start|stop) rolling

#Make Panda Sneeze
#Make a panda start/stop sneezing.
#since 2.11
effect:
	patterns:
		make %livingentities% ((start sneezing|sneeze)|stop sneezing)
		force %livingentities% to (start|stop) sneezing

#Make Say
#Forces a player to send a message to the chat. If the message starts with a slash it will force the player to use command.
#since 2.3
#Examples:
#make the player say "Hello."
#force all players to send the message "I love this server"
effect:
	patterns:
		make %players% (say|send [the] message[s]) %strings%
		force %players% to (say|send [the] message[s]) %strings%

#Make Sign Glow
#Makes a sign (either a block or item) have glowing text or normal text
#since 2.8.0
#Examples:
#make target block of player have glowing text
effect:
	patterns:
		make %blocks/itemtypes% have glowing text
		make %blocks/itemtypes% have (normal|non[-| ]glowing) text

#Message
#Sends a message to the given player. Only styles written
#in given string or in formatted expressions will be parsed.
#Adding an optional sender allows the messages to be sent as if a specific player sent them.
#This is useful with Minecraft 1.16.4's new chat ignore system, in which players can choose to ignore other players,
#but for this to work, the message needs to be sent from a player.
#since 1.0, 2.2-dev26 (advanced features), 2.5.2 (optional sender), 2.6 (sending objects)
#Examples:
#message "A wild %player% appeared!"
#message "This message is a distraction. Mwahaha!"
#send "Your kill streak is %{kill streak::%uuid of player%}%." to player
#if the targeted entity exists:
#	message "You're currently looking at a %type of the targeted entity%!"
#on chat:
#	cancel event
#	send "[%player%] >> %message%" to all players from player
#Minecraft 1.16.4+ for optional sender
effect:
	patterns:
		(message|send [message[s]]) %objects% [to %commandsenders%] [from %player%]

#Open Book
#Opens a written book to a player.
#since 2.5.1
#Examples:
#open book player's tool to player
#Minecraft 1.14.2+
effect:
	patterns:
		(open|show) book %itemtype% (to|for) %players%

#Open/Close Inventory
#Opens an inventory to a player. The player can then access and modify the inventory as if it was a chest that he just opened.
#Please note that currently 'show' and 'open' have the same effect, but 'show' will eventually show an unmodifiable view of the inventory in the future.
#since 2.0, 2.1.1 (closing), 2.2-Fixes-V10 (anvil), 2.4 (hopper, dropper, dispenser
#Examples:
#show the victim's inventory to the player
#open the player's inventory for the player
effect:
	patterns:
		(open|show) (((crafting [table]|workbench)|chest|anvil|hopper|dropper|dispenser) (view|window|inventory|)|%inventory/inventorytype%) (to|for) %players%
		close [the] inventory [view] (to|of|for) %players%
		close %players%'[s] inventory [view]

#Open/Close Lid
#Open or close the lid of the block(s).
#since 2.10
#Examples:
#open the lid of {_chest}
#close the lid of {_blocks::*}
effect:
	patterns:
		(open|close) [the] lid[s] (of|for) %blocks%
		(open|close) %blocks%'[s] lid[s]

#Pathfind
#Make an entity pathfind towards a location or another entity. Not all entities can pathfind. If the pathfinding target is another entity, the entities may or may not continuously follow the target.
#since 2.7
#Examples:
#make all creepers pathfind towards player
#make all cows stop pathfinding
#make event-entity pathfind towards player at speed 1
#Paper
effect:
	patterns:
		make %livingentities% (pathfind|move) to[wards] %livingentity/location% [at speed %number%]
		make %livingentities% stop (pathfinding|moving)

#Persistent
#Make entities, players, or leaves be persistent.
#Persistence of entities is whether they are retained through server restarts.
#Persistence of leaves is whether they should decay when not connected to a log block within 6 meters.
#Persistence of players is if the player's playerdata should be saved when they leave the server. Players' persistence is reset back to 'true' when they join the server.
#Passengers inherit the persistence of their vehicle, meaning a persistent zombie put on a non-persistent chicken will become non-persistent. This does not apply to players.
#By default, all entities are persistent.
#since 2.11
#Examples:
#prevent all entities from persisting
#force {_leaves} to persist
#command /kickcheater <cheater: player>:
#	permission: op
#	trigger:
#		prevent {_cheater} from persisting
#		kick {_cheater}
effect:
	patterns:
		make %entities/blocks% [not] persist[ent]
		force %entities/blocks% to [not] persist
		prevent %entities/blocks% from persisting

#Play Dead
#Make an axolotl start or stop playing dead.
#since 2.11
#Examples:
#make last spawned axolotl play dead
effect:
	patterns:
		make %livingentities% (start playing|play) dead
		force %livingentities% to (start playing|play) dead
		make %livingentities% (stop playing|not play) dead
		force %livingentities% to (stop playing|not play) dead

#Play Effect
#Plays a visual effect at a given location or on a given entity.
#Please note that some effects can only be played on entities, e.g. wolf hearts or the hurt effect, and that these are always visible to all players.
#since 2.1
#Examples:
#play wolf hearts on the clicked wolf
#show mob spawner flames at the targeted block to the player
effect:
	patterns:
		(play|show) %visualeffects% (on|%directions%) %entities/locations% [(to %players%|in (radius|range) of %number%)]
		(play|show) %number% %visualeffects% (on|%directions%) %locations% [(to %players%|in (radius|range) of %number%)]

#Play Sound
#Plays a sound at given location for everyone or just for given players, or plays a sound to specified players. Both Minecraft sound names and Spigot sound names are supported. Playing resource pack sounds are supported too. The sound category is 'master' by default. 
#When running 1.19+, playing a sound from an entity directly will result in the sound coming from said entity, even while moving.
#If the sound is custom, a location emitter will follow the entity. Do note that pitch and volume 
#are reflected based on the entity, and Minecraft may not use the values from this syntax.
#If using Paper 1.19.4+ or Adventure API 4.12.0+ you can utilize sound seeds. Minecraft sometimes have a set of sounds under one sound ID 
#that will randomly play, to counter this, you can directly state which seed to use.
#Please note that sound names can get changed in any Minecraft or Spigot version, or even removed from Minecraft itself.
#since 2.2-dev28, 2.4 (sound categories), 2.9 (sound seed & entity emitter)
#Examples:
#play sound "block.note_block.pling"
#play sound "entity.experience_orb.pickup" with volume 0.5 to the player
#play sound "custom.music.1" in jukebox category at {speakerBlock}
#play sound "BLOCK_AMETHYST_BLOCK_RESONATE" with seed 1 on target entity for the player 1.20.1+
#Minecraft 1.18.1+ (entity emitters), Paper 1.19.4+ or Adventure API 4.12.0+ (sound seed)
effect:
	patterns:
		play sound[s] %strings% [[with] seed %number%] [(in|from) %soundcategory%] [(at|with) volume %number%] [(and|at|with) pitch %number%] (at|on|from) %locations/entities% [(to|for) %players%]
		play sound[s] %strings% [[with] seed %number%] [(in|from) %soundcategory%] [(at|with) volume %number%] [(and|at|with) pitch %number%] [(to|for) %players%] [(at|on|from) %locations/entities%]

#Player Info Visibility
#Sets whether all player related information is hidden in the server list.
#The Vanilla Minecraft client will display ??? (dark gray) instead of player counts and will not show the
#hover hist when hiding player info.
#The version string can override the ???.
#Also the Online Players Count and
#Max Players expressions will return -1 when hiding player info.
#since 2.3
#Examples:
#hide player info
#hide player related information in the server list
#reveal all player related info
#Paper 1.12.2 or newer
effect:
	patterns:
		hide [all] player [related] info[rmation] [(in|on|from) [the] server list]
		(show|reveal) [all] player [related] info[rmation] [(in|to|on|from) [the] server list]

#Poison/Cure
#Poison or cure a creature.
#since 1.3.2
#Examples:
#poison the player
#poison the victim for 20 seconds
#cure the player from poison
effect:
	patterns:
		poison %livingentities% [for %timespan%]
		(cure|unpoison) %livingentities% [(from|of) poison]

#Potion Effects
#Apply or remove potion effects to/from entities.
#since 2.0, 2.2-dev27 (ambient and particle-less potion effects), 2.5 (replacing existing effect), 2.5.2 (potion effects), 2.7 (icon and infinite)
#Examples:
#apply ambient swiftness 2 to the player
#remove haste from the victim
#on join:
#	apply infinite potion of strength of tier {strength::%uuid of player%} to the player
#	apply potion of strength of tier {strength::%uuid of player%} to the player for 999 days  Before 1.19.4
#apply potion effects of player's tool to player
#apply haste potion of tier 3 without any particles whilst hiding the potion icon to the player  Hide potions
effect:
	patterns:
		apply %potioneffects% to %livingentities%
		apply infinite [ambient] [potion of] %potioneffecttypes% [potion] [[[of] tier] %number%] [without [any] particles] [(whilst hiding [the]|without (the|a)) [potion] icon] to %livingentities% [replacing [the] existing effect]
		apply [ambient] [potion of] %potioneffecttypes% [potion] [[[of] tier] %number%] [without [any] particles] [(whilst hiding [the]|without (the|a)) [potion] icon] to %livingentities% [for %timespan%] [replacing [the] existing effect]

#Pull In Hooked Entity
#Pull the hooked entity to the player.
#since 2.10
#Examples:
#on fishing state of caught entity:
#	pull in hooked entity
effect:
	patterns:
		(reel|pull) in hook[ed] entity

#Push
#Push entities around.
#since 1.4.6
#Examples:
#push the player upwards
#push the victim downwards at speed 0.5
effect:
	patterns:
		(push|thrust) %entities% %direction% [(at|with) (speed|velocity|force) %number%]

#PvP
#Set the PvP state for a given world.
#since 1.3.4
#Examples:
#enable PvP (current world only)
#disable PvP in all worlds
effect:
	patterns:
		enable PvP [in %worlds%]
		disable PVP [in %worlds%]

#Register Tag
#Registers a new tag containing either items or entity datas. Note that items will NOT keep any information other than their type, so adding `diamond sword named "test"` to a tag is the same as adding `diamond sword`
#Item tags should be used for contexts where the item is not placed down, while block tags should be used for contexts where the item is placed. For example, and item tag could be "skript:edible", while a block tag would be "skript:needs_water_above".
#All custom tags will be given the namespace "skript", followed by the name you give it. The name must only include the characters A to Z, 0 to 9, and '/', '.', '_', and '-'. Otherwise, the tag will not register.
#Please note that two tags can share a name if they are of different types. Registering a new tag of the same name and type will overwrite the existing tag. Tags will reset on server shutdown.
#since 2.10
#Examples:
#register a new custom entity tag named "fish" using cod, salmon, tropical fish, and pufferfish
#register an item tag named "skript:wasp_weapons/swords" containing diamond sword and netherite sword
#register block tag named "pokey" containing sweet berry bush and bamboo sapling
#on player move:
#	block at player is tagged as tag "skript:pokey"
#	damage the player by 1 heart
effect:
	patterns:
		register [a[n]] [custom] (item|block|entity [type]) tag named %string% (containing|using) %entitydatas/itemtypes%

#Release From Entity Storage
#Releases the stored entities in an entity block storage (i.e. beehive).
#When using beehives, providing a timespan will prevent the released bees from re-entering the beehive for that amount of time.
#Due to unstable behaviour on older versions, this effect requires Minecraft version 1.21+.
#since 2.11
#Examples:
#release the stored entities of {_beehive}
#release the entity storage of {_hive} for 5 seconds
#Minecraft 1.21
effect:
	patterns:
		(release|evict) [the] (stored entities|entity storage) of %blocks% [for %timespan%]

#Replace
#Replaces all occurrences of a given text or regex with another text. Please note that you can only change variables and a few expressions, e.g. a message or a line of a sign.
#since 2.0, 2.2-dev24 (multiple strings, items in inventory), 2.5 (replace first, case sensitivity), 2.10 (regex)
#Examples:
#replace "<item>" in {_msg} with "[%name of player's tool%]"
#replace every "&" with "§" in line 1 of targeted block
# Very simple chat censor
#on chat:
#	replace all "idiot" and "noob" with "****" in the message
#	regex replace "\b(idiot|noob)\b" with "****" in the message  Regex version using word boundaries for better results
#replace all stone and dirt in player's inventory and player's top inventory with diamond
effect:
	patterns:
		replace [(all|every)|[the] first] %strings% in %strings% with %string% [with case sensitivity]
		replace [(all|every)|[the] first] %strings% with %string% in %strings% [with case sensitivity]
		(replace [with|using] regex|regex replace) %strings% in %strings% with %string%
		(replace [with|using] regex|regex replace) %strings% with %string% in %strings%
		replace [all|every] %itemtypes% in %inventories% with %itemtype%
		replace [all|every] %itemtypes% with %itemtype% in %inventories%

#Return
#Makes a trigger or a section (e.g. a function) return a value
#since 2.2, 2.8.0 (returns aliases)
#Examples:
#function double(i: number) :: number:
#	return 2 * {_i}
#function divide(i: number) returns number:
#	return {_i} / 2
effect:
	patterns:
		return %objects%

#Ring Bell
#Causes a bell to ring.
#Optionally, the entity that rang the bell and the direction the bell should ring can be specified.
#A bell can only ring in two directions, and the direction is determined by which way the bell is facing.
#By default, the bell will ring in the direction it is facing.
#since 2.9.0
#Examples:
#make player ring target-block
#Spigot 1.19.4+
effect:
	patterns:
		ring %blocks% [from [the]] [%direction%]
		(make|let) %entity% ring %blocks% [from [the]] [%direction%]

#Rotate
#Rotates displays, quaternions, or vectors around an axis a set amount of degrees, or around all 3 axes at once.
#Vectors can only be rotated around the global X/Y/Z axes, or an arbitrary vector axis.
#Quaternions are more flexible, allowing rotation around the global or local X/Y/Z axes, arbitrary vectors, or all 3 local axes at once.
#Global axes are the ones in the Minecraft world. Local axes are relative to how the quaternion is already oriented.
#Rotating a display is a shortcut for rotating its left rotation. If the right rotation needs to be modified, it should be acquired, rotated, and re-set.
#Note that rotating a quaternion/display around a vector results in a rotation around the local vector, so results may not be what you expect. For example, rotating quaternions/displays around vector(1, 0, 0) is the same as rotating around the local X axis.
#The same applies to rotations by all three axes at once. In addition, rotating around all three axes of a quaternion/display at once will rotate in ZYX order, meaning the Z rotation will be applied first and the X rotation last.
#since 2.2-dev28, 2.10 (quaternions, displays)
#Examples:
#rotate {_quaternion} around x axis by 10 degrees
#rotate last spawned block display around y axis by 10 degrees
#rotate {_vector} around vector(1, 1, 1) by 45
#rotate {_quaternion} by x 45, y 90, z 135
effect:
	patterns:
		rotate %vectors/quaternions/displays% around [the] [global] (x|y|z)(-| )axis by %number%
		rotate %quaternions/displays% around [the|its|their] local (x|y|z)(-| )ax(i|e)s by %number%
		rotate %vectors/quaternions/displays% around [the] %vector% by %number%
		rotate %quaternions/displays% by x %number%, y %number%(, [and]| and) z %number%

#Run (Experimental)
#Executes a task (a function). Any returned result is discarded.
#since 2.10
#Examples:
#set {_function} to the function named "myFunction"
#run {_function}
#run {_function} with arguments {_things::*}
effect:
	patterns:
		run %executable% [with arg[ument]s %objects%]
		execute %executable% [with arg[ument]s %objects%]

#Save World
#Save all worlds or a given world manually.
#Note: saving many worlds at once may possibly cause the server to freeze.
#since 2.8.0
#Examples:
#save "world_nether"
#save all worlds
effect:
	patterns:
		save [[the] world[s]] %worlds%

#Send Block Change
#Makes a player see a block as something it really isn't. BlockData support is only for MC 1.13+
#since 2.2-dev37c, 2.5.1 (block data support)
#Examples:
#make player see block at player as dirt
#make player see target block as campfire[facing=south]
effect:
	patterns:
		make %players% see %blocks% as %itemtype/blockdata%

#Send Resource Pack
#Request that the player's client download and switch resource packs. The client will download 
#the resource pack in the background, and will automatically switch to it once the download is complete. 
#The URL must be a direct download link.
#The hash is used for caching, the player won't have to re-download the resource pack that way. 
#The hash must be SHA-1, you can get SHA-1 hash of your resource pack using 
#this online tool.
#The resource pack request action can be used to check 
#status of the sent resource pack request.
#since 2.4
#Examples:
#on join:
#	send the resource pack from "URL" with hash "hash" to the player
effect:
	patterns:
		send [the] resource pack [from [[the] URL]] %string% to %players%
		send [the] resource pack [from [[the] URL]] %string% with hash %string% to %players%

#Shear
#Shears or un-shears a shearable entity with drops by shearing and a 'sheared' sound. Using with 'force' will force this effect despite the entity's 'shear state'.
#
#Please note that..:
#
#- If your server is not running with Paper 1.19.4 or higher, this effect will only change its 'shear state', and the 'force' effect is unavailable
#
#- Force-shearing or un-shearing on a sheared mushroom cow is not possible
#since 2.0 (cows, sheep & snowmen), 2.8.0 (all shearable entities)
#Examples:
#on rightclick on a sheep holding a sword:
#	shear the clicked sheep
#	chance of 10%
#	force shear the clicked sheep
#Paper 1.19.4+ (all shearable entities)
effect:
	patterns:
		[force] shear %livingentities%
		un[-]shear %livingentities%

#Silence Entity
#Controls whether or not an entity is silent.
#since 2.5
#Examples:
#make target entity silent
effect:
	patterns:
		silence %entities%
		unsilence %entities%
		make %entities% silent
		make %entities% not silent

#Sort
#Sorts a list variable using either the natural ordering of the contents or the results of the given expression.
#Be warned, this will overwrite the indices of the list variable.
#
#When using the full sort %~objects% (by|based on) <expression> pattern,
#the input expression can be used to refer to the current item being sorted.
#(See input expression for more information.)
#since 2.9.0, 2.10 (sort order)
#Examples:
#set {_words::*} to "pineapple", "banana", "yoghurt", and "apple"
#sort {_words::*}  alphabetical sort
#sort {_words::*} by length of input  shortest to longest
#sort {_words::*} in descending order by length of input  longest to shortest
#sort {_words::*} based on {tastiness::%input%}  sort based on custom value
effect:
	patterns:
		sort %objects% [in (descending|ascending) order] [(by|based on) <.+>]

#Sprinting
#Make a player start or stop sprinting.
#If the player is not moving when this effect is used, they will be put in sprint mode for a tick and then stopped (this causes the FOV to change). Using it a second time, without the player manually sprinting in between, causes the player to stay in sprint mode, with some quirks.
# - Particles may not be produced under the player's feet.
# - The player will not exit the sprinting state if they stop moving.
# - Restrictions like low hunger will not prevent the player from sprinting
# - The player pressing shift will stop them sprinting, and pressing sprint will re-assert normal sprinting behavior
#Using this effect two or more consecutive times on a stationary player produces undefined behavior and should not be relied on.
#since 2.11
#Examples:
#make player start sprinting
#force player to start sprinting
effect:
	patterns:
		make %players% (start sprinting|sprint)
		force %players% to (start sprinting|sprint)
		make %players% (stop sprinting|not sprint)
		force %players% to (stop sprinting|not sprint)

#Stop Server
#Stops or restarts the server. If restart is used when the restart-script spigot.yml option isn't defined, the server will stop instead.
#since 2.5
#Examples:
#stop the server
#restart server
effect:
	patterns:
		(stop|shut[ ]down) [the] server
		restart [the] server

#Stop Sound
#Stops specific or all sounds from playing to a group of players. Both Minecraft sound names and Spigot sound names are supported. Resource pack sounds are supported too. The sound category is 'master' by default. A sound can't be stopped from a different category. 
#Please note that sound names can get changed in any Minecraft or Spigot version, or even removed from Minecraft itself.
#since 2.4, 2.7 (stop all sounds)
#Examples:
#stop sound "block.chest.open" for the player
#stop playing sounds "ambient.underwater.loop" and "ambient.underwater.loop.additions" to the player
#stop all sounds for all players
#stop sound in the record category
#MC 1.17.1 (stop all sounds)
effect:
	patterns:
		stop (all sound[s]|sound[s] %strings%) [(in [the]|from) %soundcategory%] [(from playing to|for) %players%]
		stop playing sound[s] %strings% [(in [the]|from) %soundcategory%] [(to|for) %players%]

#Swing Hand
#Makes an entity swing their hand. This does nothing if the entity does not have an animation for swinging their hand.
#since 2.5.1
#Examples:
#make player swing their main hand
#Minecraft 1.15.2+
effect:
	patterns:
		make %livingentities% swing [their] [main] hand
		make %livingentities% swing [their] off[ ]hand

#Tame / Untame
#Tame a tameable entity (horse, parrot, cat, etc.).
#since 2.10
#Examples:
#tame {_horse}
#untame {_horse}
effect:
	patterns:
		[un](tame|domesticate) %entities%

#Teleport
#Teleport an entity to a specific location. 
#This effect is delayed by default on Paper, meaning certain syntax such as the return effect for functions cannot be used after this effect.
#The keyword 'force' indicates this effect will not be delayed, 
#which may cause lag spikes or server crashes when using this effect to teleport entities to unloaded chunks.
#Teleport flags are settings to retain during a teleport. Such as direction, passengers, x coordinate, etc.
#since 1.0, 2.10 (flags)
#Examples:
#teleport the player to {home::%uuid of player%}
#teleport the attacker to the victim
#on dismount:
#	cancel event
#	teleport the player to {server::spawn} retaining vehicle and passengers
#Paper 1.19+ (teleport flags)
effect:
	patterns:
		[force] teleport %entities% (to|%direction%) %location% [[while] retaining %teleportflags%]

#Text Display Drop Shadow
#Applies or removes drop shadow from the displayed text on a text display.
#since 2.10
#Examples:
#apply drop shadow to last spawned text display
#if {_display} has drop shadow:
#	remove drop shadow from the text of {_display}
effect:
	patterns:
		(apply|add) (drop|text) shadow to [[the] text of] %displays%
		(apply|add) (drop|text) shadow to %displays%'[s] text
		(remove|clear) (drop|text) shadow from [[the] text of] %displays%
		(remove|clear) (drop|text) shadow from %displays%'[s] text

#Text Display See Through Blocks
#Forces a text display to either be or not be visible through blocks.
#since 2.10
#Examples:
#force last spawned text display to be visible through walls
#prevent all text displays from being visible through walls
effect:
	patterns:
		make %displays% visible through (blocks|walls)
		force %displays% to be visible through (blocks|walls)
		(prevent|block) %displays% from being (visible|seen) through (blocks|walls)

#Title - Reset
#Resets the title of the player to the default values.
#since 2.3
#Examples:
#reset the titles of all players
#reset the title
effect:
	patterns:
		reset [the] title[s] [of %players%]
		reset [the] %players%'[s] title[s]

#Title - Send
#Sends a title/subtitle to the given player(s) with optional fadein/stay/fadeout times for Minecraft versions 1.11 and above. 
#If you're sending only the subtitle, it will be shown only if there's a title displayed at the moment, otherwise it will be sent with the next title. To show only the subtitle, use: send title " " with subtitle "yourtexthere" to player.
#Note: if no input is given for the times, it will keep the ones from the last title sent, use the reset title effect to restore the default values.
#since 2.3
#Examples:
#send title "Competition Started" with subtitle "Have fun, Stay safe!" to player for 5 seconds
#send title "Hi %player%" to player
#send title "Loot Drop" with subtitle "starts in 3 minutes" to all players
#send title "Hello %player%!" with subtitle "Welcome to our server" to player for 5 seconds with fadein 1 second and fade out 1 second
#send subtitle "Party!" to all players
effect:
	patterns:
		send title %string% [with subtitle %string%] [to %players%] [for %timespan%] [with fade[(-| )]in %timespan%] [[and] [with] fade[(-| )]out %timespan%]
		send subtitle %string% [to %players%] [for %timespan%] [with fade[(-| )]in %timespan%] [[and] [with] fade[(-| )]out %timespan%]

#Toggle
#Toggle the state of a block.
#since 1.4
#Examples:
# use arrows to toggle switches, doors, etc.
#on projectile hit:
#	projectile is arrow
#	toggle the block at the arrow
effect:
	patterns:
		(close|turn off|de[-]activate) %blocks%
		(toggle|switch) [[the] state of] %blocks%
		(open|turn on|activate) %blocks%

#Toggle Custom Name Visibility
#Toggles the custom name visibility of an entity.
#since 2.10
#Examples:
#show the custom name of event-entity
#hide target's display name
effect:
	patterns:
		(show|hide) [the] (custom|display)[ ]name of %entities%
		(show|hide) %entities%'[s] (custom|display)[ ]name

#Toggle Flight
#Toggle the flight mode of a player.
#since 2.3
#Examples:
#allow flight to event-player
effect:
	patterns:
		(allow|enable) (fly|flight) (for|to) %players%
		(disallow|disable) (fly|flight) (for|to) %players%

#Toggle Picking Up Items
#Determines whether living entities are able to pick up items or not
#since 2.8.0
#Examples:
#forbid player from picking up items
#send "You can no longer pick up items!" to player
#on drop:
#	if player can't pick	up items:
#		allow player to pick up items
effect:
	patterns:
		allow %livingentities% to pick([ ]up items| items up)
		(forbid|disallow) %livingentities% (from|to) pick([ing | ]up items|[ing] items up)

#Transform List
#Transforms (or 'maps') a list's values using a given expression. This is akin to looping over the list and setting each value to a modified version of itself.
#Evaluates the given expression for each element in the list, replacing the original element with the expression's result.
#If the given expression returns a single value, the indices of the list will not change. If the expression returns multiple values, then then indices will be reset as a single index cannot contain multiple values.
#Only variable lists can be transformed with this effect. For other lists, see the transform expression.
#since 2.10
#Examples:
#set {_a::*} to 1, 2, and 3
#transform {_a::*} using input * 2
# {_a::*} is now 2, 4, and 6
# get a list of the sizes of all clans without manually looping
#set {_clan-sizes::*} to indices of {clans::*}
#transform {_clan-sizes::*} using {clans::%input%::size}
# set all existing values of a list to 0:
#transform {_list::*} to 0
effect:
	patterns:
		(transform|map) %objects% (using|with) <.+>

#Tree
#Creates a tree.
#This may require that there is enough space above the given location and that the block below is dirt/grass, but it is possible that the tree will just grow anyways, possibly replacing every block in its path.
#since 1.0
#Examples:
#grow a tall redwood tree above the clicked block
effect:
	patterns:
		(grow|create|generate) tree [of type %structuretype%] %directions% %locations%
		(grow|create|generate) %structuretype% %directions% %locations%

#Update Block
#Updates the blocks by setting them to a selected block
#Using 'without physics' will not send updates to the surrounding blocks of the blocks being set.
#Example: Updating a block next to a sand block in the air 'without physics' will not cause the sand block to fall.
#since 2.10
#Examples:
#update {_blocks::*} as gravel
#update {_blocks::*} to be sand without physics updates
#update {_blocks::*} as stone without neighbouring updates
effect:
	patterns:
		update %blocks% (as|to be) %blockdata% [without [neighbo[u]r[ing]|adjacent] [physic[s]] update[s]]

#Vehicle
#Makes an entity ride another entity, e.g. a minecart, a saddled pig, an arrow, etc.
#since 2.0
#Examples:
#make the player ride a saddled pig
#make the attacker ride the victim
effect:
	patterns:
		(make|let|force) %entities% [to] (ride|mount) [(in|on)] %entity/entitydata%
		(make|let|force) %entities% [to] (dismount|(dismount|leave) (from|of|) (any|the[ir]|his|her|) vehicle[s])
		(eject|dismount) (any|the|) passenger[s] (of|from) %entities%

#Wake And Sleep
#Make bats and foxes sleep or wake up.
#Make villagers sleep by providing a location of a bed.
#Make players sleep by providing a location of a bed. Using 'with force' will bypass "nearby monsters" ,the max distance, allowing players to sleep even if the bed is far away, and lets players sleep in the nether and end. Does not work if the location of the bed is not in the world the player is currently in.
#Using 'without spawn location update' will make players wake up without setting their spawn location to the bed.
#since 2.11
#Examples:
#make {_fox} go to sleep
#make {_bat} stop sleeping
#make {_villager} start sleeping at location(0, 0, 0)
#make player go to sleep at location(0, 0, 0) with force
#make player wake up without spawn location update
effect:
	patterns:
		make %livingentities% (start sleeping|[go to] sleep) [%direction% %location%]
		force %livingentities% to (start sleeping|[go to] sleep) [%direction% %location%]
		make %players% (start sleeping|[go to] sleep) %direction% %location% (with force)
		force %players% to (start sleeping|[go to] sleep) %direction% %location% (with force)
		make %livingentities% (stop sleeping|wake up)
		force %livingentities% to (stop sleeping|wake up)
		make %players% (stop sleeping|wake up) (without spawn [location] update)
		force %players% to (stop sleeping|wake up) (without spawn [location] update)

#Zombify Villager
#Turn a villager into a zombie villager. Cure a zombie villager immediately or after specified amount of time.
#This effect removes the old entity and creates a new entity.
#Zombifying a villager stored in a variable will update the variable to the new zombie villager.
#Curing a zombie villager does not update the variable.
#since 2.11
#Examples:
#zombify last spawned villager
#set {_villager} to last spawned villager
#zombify {_villager}
#if {_villager} is a zombie villager:
#	 This will pass because '{_villager}' gets changed to the new zombie villager
#set {_villager} to last spawned villager
#zombify last spawned villager
#if {_villager} is a zombie villager:
#	 This will fail because the variable was not provided when zombifying
#unzombify {_zombieVillager}
#unzombify {_zombieVillager} after 2 seconds
effect:
	patterns:
		zombify %livingentities%
		unzombify %livingentities% [(in|after) %timespan%]

#op/deop
#Grant/revoke a user operator state.
#since 1.0
#Examples:
#op the player
#deop all players
effect:
	patterns:
		[de[-]]op %offlineplayers%

#Allay Can Duplicate
#Checks to see if an allay is able to duplicate naturally.
#since 2.11
#Examples:
#if last spawned allay can duplicate:
#	disallow last spawned to duplicate
condition:
	patterns:
		%livingentities% can (duplicate|clone)
		%livingentities% (can't|cannot|can not) (duplicate|clone)

#Alphanumeric
#Checks if the given string is alphanumeric.
#since 2.4
#Examples:
#if the argument is not alphanumeric:
#	send "Invalid name!"
condition:
	patterns:
		%strings% (is|are) alphanumeric
		%strings% (isn't|is not|aren't|are not) alphanumeric

#Beehive Is Sedated
#Checks if a beehive is sedated from a nearby campfire.
#since 2.11
#Examples:
#if {_beehive} is sedated:
condition:
	patterns:
		%blocks% (is|are) sedated
		%blocks% (isn't|is not|aren't|are not) sedated

#Bell Is Resonating
#Checks to see if a bell is currently resonating.
#A bell will start resonating five game ticks after being rung, and will continue to resonate for 40 game ticks.
#since 2.9.0
#Examples:
#target block is resonating
#Spigot 1.19.4+
condition:
	patterns:
		%blocks% (is|are) resonating
		%blocks% (isn't|is not|aren't|are not) resonating

#Bell Is Ringing
#Checks to see if a bell is currently ringing. A bell typically rings for 50 game ticks.
#since 2.9.0
#Examples:
#target block is ringing
#Spigot 1.19.4+
condition:
	patterns:
		%blocks% (is|are) ringing
		%blocks% (isn't|is not|aren't|are not) ringing

#Camel Is Dashing
#Checks whether a camel is currently using its dash ability.
#since 2.11
#Examples:
#if last spawned camel is dashing:
#	kill last spawned camel
condition:
	patterns:
		%livingentities% (is|are) dashing
		%livingentities% (isn't|is not|aren't|are not) dashing

#Can Age
#Checks whether or not an entity will be able to age/grow up.
#since 2.10
#Examples:
#on breeding:
#	entity can't age
#	broadcast "An immortal has been born!" to player
condition:
	patterns:
		%livingentities% can (age|grow (up|old[er]))
		%livingentities% (can't|cannot|can not) (age|grow (up|old[er]))

#Can Breed
#Checks whether or not a living entity can be bred.
#since 2.10
#Examples:
#on right click on living entity:
#	event-entity can't breed
#	send "Turns out %event-entity% is not breedable. Must be a Skript user!" to player
condition:
	patterns:
		%livingentities% can (breed|be bred)
		%livingentities% (can't|cannot|can not) (breed|be bred)

#Can Despawn
#Check if an entity can despawn when the chunk they're located at is unloaded.
#More information on what and when entities despawn can be found at reference.
#since 2.11
#Examples:
#if last spawned entity can despawn on chunk unload:
#	make last spawned entity not despawn on chunk unload
condition:
	patterns:
		%livingentities% can despawn (on chunk unload|when far away)
		%livingentities% (can't|cannot|can not) despawn (on chunk unload|when far away)

#Can Fly
#Whether a player is allowed to fly.
#since 2.3
#Examples:
#player can fly
condition:
	patterns:
		%players% can fly
		%players% (can't|cannot|can not) fly

#Can Hold
#Tests whether a player or a chest can hold the given item.
#since 1.0
#Examples:
#block can hold 200 cobblestone
#player has enough space for 64 feathers
condition:
	patterns:
		%inventories% (can hold|ha(s|ve) [enough] space (for|to hold)) %itemtypes%
		%inventories% (can(no|')t hold|(ha(s|ve) not|ha(s|ve)n't|do[es]n't have) [enough] space (for|to hold)) %itemtypes%

#Can Pick Up Items
#Whether living entities are able to pick up items off the ground or not.
#since 2.8.0
#Examples:
#if player can pick items up:
#	send "You can pick up items!" to player
#on drop:
#	if player can't pick	up items:
#		send "Be careful, you won't be able to pick that up!" to player
condition:
	patterns:
		%livingentities% can pick([ ]up items| items up)
		%livingentities% (can't|cannot|can not) pick([ ]up items| items up)

#Can See
#Checks whether the given players can see the provided entities.
#since 2.3, 2.10 (entities)
#Examples:
#if sender can't see the player-argument:
#	message "who dat?"
#if the player can see the last spawned entity:
#	message "hello there!"
#Minecraft 1.19+ (entities)
condition:
	patterns:
		%entities% (is|are) [visible|invisible] for %players%
		%players% can see %entities%
		%entities% (is|are)(n't| not) [visible|invisible] for %players%
		%players% can('t| not) see %entities%

#Can See Chat Colors
#Checks whether a player can see chat colors.
#since 2.10
#Examples:
#if player can see chat colors:
#	send "Find the red word in <red>this<reset> message."
#else:
#	send "You cannot partake in finding the colored word."
#Paper
condition:
	patterns:
		%players% can see chat colo[u]r[s|ing]
		%players% (can't|cannot|can not) see chat colo[u]r[s|ing]

#Can See Messages
#Checks whether a player can see specific message types in chat.
#since 2.10
#Examples:
#if player can see all messages:
#	send "You can see all messages."
#if player can only see commands:
#	send "This game doesn't work with commands-only chat."
#if player can't see any messages:
#	send action bar "Server shutting down in 5 minutes!"
#Paper
condition:
	patterns:
		%player% can see all messages [in chat]
		%player% can only see (commands|system messages) [in chat]
		%player% can('t|[ ]not) see any (command[s]|message[s]) [in chat]
		%player% can('t|[ ]not) see all messages [in chat]
		%player% can('t|[ ]not) only see (commands|system messages) [in chat]

#Chance
#A condition that randomly succeeds or fails.
#Valid values are between 0% and 100%, or if the percent sign is omitted between 0 and 1.
#since 1.0
#Examples:
#chance of 50%:
#	drop a diamond
#chance of {chance}%  {chance} between 0 and 100
#chance of {chance}  {chance} between 0 and 1
condition:
	patterns:
		chance of %number%(\%|)

#Comparison
#A very general condition, it simply compares two values. Usually you can only compare for equality (e.g. block is/isn't of <type>), but some values can also be compared using greater than/less than. In that case you can also test for whether an object is between two others.
#Note: This is the only element where not all patterns are shown. It has actually another two sets of similar patters, but with (was|were) or will be instead of (is|are) respectively, which check different time states of the first expression.
#since 1.0
#Examples:
#the clicked block is a stone slab or a double stone slab
#time in the player's world is greater than 8:00
#the creature is not an enderman or an ender dragon
condition:
	patterns:
		(neither|) %objects% ((is|are)(|(n't| not| neither)) ((greater|more|higher|bigger|larger) than|above)|\>) %objects%
		(neither|) %objects% ((is|are)(|(n't| not| neither)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as)|\>=) %objects%
		(neither|) %objects% ((is|are)(|(n't| not| neither)) ((less|smaller|lower) than|below)|\<) %objects%
		(neither|) %objects% ((is|are)(|(n't| not| neither)) (less|smaller|lower|below) [than] or (equal to|the same as)|\<=) %objects%
		(neither|) %objects% ((is|are) (not|neither)|isn't|aren't|!=) [equal to] %objects%
		(neither|) %objects% (is|are|=) [(equal to|the same as)] %objects%
		(neither|) %objects% (is|are) between %objects% and %objects%
		(neither|) %objects% (is not|are not|isn't|aren't) between %objects% and %objects%
		(neither|) %objects% (was|were)(|(n't| not| neither)) ((greater|more|higher|bigger|larger) than|above) %objects%
		(neither|) %objects% (was|were)(|(n't| not| neither)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as) %objects%
		(neither|) %objects% (was|were)(|(n't| not| neither)) ((less|smaller|lower) than|below) %objects%
		(neither|) %objects% (was|were)(|(n't| not| neither)) (less|smaller|lower|below) [than] or (equal to|the same as) %objects%
		(neither|) %objects% ((was|were) (not|neither)|wasn't|weren't) [equal to] %objects%
		(neither|) %objects% (was|were) [(equal to|the same as)] %objects%
		(neither|) %objects% (was|were) between %objects% and %objects%
		(neither|) %objects% (was not|were not|wasn't|weren't) between %objects% and %objects%
		(neither|) %objects% (will be|(will (not|neither) be|won't be)) ((greater|more|higher|bigger|larger) than|above) %objects%
		(neither|) %objects% (will be|(will (not|neither) be|won't be)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as) %objects%
		(neither|) %objects% (will be|(will (not|neither) be|won't be)) ((less|smaller|lower) than|below) %objects%
		(neither|) %objects% (will be|(will (not|neither) be|won't be)) (less|smaller|lower|below) [than] or (equal to|the same as) %objects%
		(neither|) %objects% ((will (not|neither) be|won't be)|(isn't|aren't|is not|are not) (turning|changing) [in]to) [equal to] %objects%
		(neither|) %objects% (will be [(equal to|the same as)]|(is|are) (turning|changing) [in]to) %objects%
		(neither|) %objects% will be between %objects% and %objects%
		(neither|) %objects% (will not be|won't be) between %objects% and %objects%

#Contains
#Checks whether an inventory contains an item, a text contains another piece of text, a container contains something, or a list (e.g. {list variable::*} or 'drops') contains another object.
#since 1.0
#Examples:
#block contains 20 cobblestone
#player has 4 flint and 2 iron ingots
#{list::*} contains 5
condition:
	patterns:
		%inventories% (has|have) %itemtypes% [in [(the[ir]|his|her|its)] inventory]
		%inventories% (doesn't|does not|do not|don't) have %itemtypes% [in [(the[ir]|his|her|its)] inventory]
		%inventories/strings/objects% contain[(s)] %itemtypes/strings/objects%
		%inventories/strings/objects% (doesn't|does not|do not|don't) contain %itemtypes/strings/objects%

#Damage Cause
#Tests what kind of damage caused a damage event. Refer to the Damage Cause type for a list of all possible causes.
#since 2.0
#Examples:
# make players use their potions of fire resistance whenever they take any kind of fire damage
#on damage:
#	damage was caused by lava, fire or burning
#	victim is a player
#	victim has a potion of fire resistance
#	cancel event
#	apply fire resistance to the victim for 30 seconds
#	remove 1 potion of fire resistance from the victim
# prevent mobs from dropping items under certain circumstances
#on death:
#	entity is not a player
#	damage wasn't caused by a block explosion, an attack, a projectile, a potion, fire, burning, thorns or poison
#	clear drops
condition:
	patterns:
		[the] damage (was|is|has)(|n('|o)t) [been] (caused|done|made) by %damagecause%

#Do Respawn Anchors Work
#Checks whether or not respawn anchors work in a world.
#since 2.7
#Examples:
#respawn anchors work in world "world_nether"
#Minecraft 1.16+
condition:
	patterns:
		respawn anchors [do[(n't| not)]] work in %worlds%

#Egg Will Hatch
#Whether the egg will hatch in a Player Egg Throw event.
#since 2.7
#Examples:
#on player egg throw:
#	if an entity won't hatch:
#		send "Better luck next time!" to the player
condition:
	patterns:
		[the] egg (will|will not|won't) hatch

#Enderman Has Been Stared At
#Checks to see if an enderman has been stared at.
#This will return true as long as the entity that stared at the enderman is still alive.
#since 2.11
#Examples:
#if last spawned enderman has been stared at:
#Paper
condition:
	patterns:
		%livingentities% (has|have) been stared at
		%livingentities% (doesn't|does not|do not|don't) have been stared at

#Entity Is Sheared
#Checks whether entities are sheared. This condition only works on cows, sheep and snowmen for versions below 1.19.4.
#since 2.8.0
#Examples:
#if targeted entity of player is sheared:
#	send "This entity has nothing left to shear!" to player
#MC 1.13+ (cows, sheep & snowmen), Paper 1.19.4+ (all shearable entities)
condition:
	patterns:
		%livingentities% (is|are) (sheared|shorn)
		%livingentities% (isn't|is not|aren't|are not) (sheared|shorn)

#Entity Storage Is Full
#Checks to see if the an entity block storage (i.e beehive) is full.
#since 2.11
#Examples:
#if the entity storage of {_beehive} is full:
#	release the entity storage of {_beehive}
condition:
	patterns:
		[the] entity storage of %blocks% (is|are) full
		%blocks%'[s] entity storage (is|are) full
		[the] entity storage of %blocks% (isn't|is not|aren't|are not) full
		%blocks%'[s] entity storage (isn't|is not|aren't|are not) full

#Entity is Wet
#Checks whether an entity is wet or not (in water, rain or a bubble column).
#since 2.6.1
#Examples:
#if player is wet:
#Paper 1.16+
condition:
	patterns:
		%entities% (is|are) wet
		%entities% (isn't|is not|aren't|are not) wet

#Entity is in Liquid
#Checks whether an entity is in rain, lava, water or a bubble column.
#since 2.6.1
#Examples:
#if player is in rain:
#if player is in water:
#player is in lava:
#player is in bubble column
#Paper (in rain, lava and bubble column)
condition:
	patterns:
		%entities% (is|are) in (water|lava|[a] bubble[ ]column|rain)
		%entities% (isn't|is not|aren't|are not) in (water|lava|[a] bubble[ ]column|rain)

#Event Cancelled
#Checks whether or not the event is cancelled.
#since 2.2-dev36
#Examples:
#on click:
#	if event is cancelled:
#		broadcast "no clicks allowed!"
condition:
	patterns:
		[the] event is cancel[l]ed
		[the] event (is not|isn't) cancel[l]ed

#Exists/Is Set
#Checks whether a given expression or variable is set.
#since 1.2
#Examples:
#{teams::%player's uuid%::preferred-team} is not set
#on damage:
#	projectile exists
#	broadcast "%attacker% used a %projectile% to attack %victim%!"
condition:
	patterns:
		%objects% (exist[s]|(is|are) set)
		%objects% (do[es](n't| not) exist|(is|are)(n't| not) set)

#Fishing Lure Applied
#Checks if the lure enchantment is applied to the current fishing event.
#since 2.10
#Examples:
#on fishing line cast:
#	if lure enchantment bonus is applied:
#		cancel event
condition:
	patterns:
		lure enchantment bonus is (applied|active)
		lure enchantment bonus is(n't| not) (applied|active)

#Goat Has Horns
#Checks to see if a goat has or does not have a left, right, or both horns.
#since 2.11
#Examples:
#	if last spawned goat does not have both horns:
#		make last spawned goat have both horns
#
#	if {_goat} has a right horn:
#		force {_goat} to not have a right horn
#
condition:
	patterns:
		%livingentities% (has|have) ((any|a) horn|[a] left horn[s]|[a] right horn[s]|both horns)
		%livingentities% (doesn't|does not|do not|don't) have ((any|a) horn|[a] left horn[s]|[a] right horn[s]|both horns)

#Has AI
#Checks whether an entity has AI.
#since 2.5
#Examples:
#target entity has ai
condition:
	patterns:
		%livingentities% (has|have) (ai|artificial intelligence)
		%livingentities% (doesn't|does not|do not|don't) have (ai|artificial intelligence)

#Has Chat Filtering
#Checks whether a player has chat filtering enabled.
#since 2.10
#Examples:
#if player doesn't have chat filtering enabled:
#send "<gray>This server may contain mature chat messages. You have been warned!" to player
#Paper
condition:
	patterns:
		%players% (has|have) (chat|text) filtering (on|enabled)
		%players% (doesn't|does not|do not|don't) have (chat|text) filtering (on|enabled)

#Has Client Weather
#Checks whether the given players have a custom client weather
#since 2.3
#Examples:
#if the player has custom weather:
#	message "Your custom weather is %player's weather%"
condition:
	patterns:
		%players% (has|have) [a] (client|custom) weather [set]
		%players% (doesn't|does not|do not|don't) have [a] (client|custom) weather [set]

#Has Custom Model Data
#Check if an item has a custom model data tag
#since 2.5
#Examples:
#player's tool has custom model data
#1.14+
condition:
	patterns:
		%itemtypes% (has|have) [custom] model data
		%itemtypes% (doesn't|does not|do not|don't) have [custom] model data

#Has Glowing Text
#Checks whether a sign (either a block or an item) has glowing text
#since 2.8.0
#Examples:
#if target block has glowing text
condition:
	patterns:
		%blocks/itemtypes% (has|have) glowing text
		%blocks/itemtypes% (doesn't|does not|do not|don't) have glowing text

#Has Item Cooldown
#Check whether a cooldown is active on the specified material for a specific player.
#since 2.8.0
#Examples:
#if player has player's tool on cooldown:
#	send "You can't use this item right now. Wait %item cooldown of player's tool for player%"
condition:
	patterns:
		%players% (has|have) [([an] item|a)] cooldown (on|for) %itemtypes%
		%players% (has|have) %itemtypes% on [(item|a)] cooldown
		%players% (doesn't|does not|do not|don't) have [([an] item|a)] cooldown (on|for) %itemtypes%
		%players% (doesn't|does not|do not|don't) have %itemtypes% on [(item|a)] cooldown

#Has Item Tooltips
#Whether the entire or additional tooltip of an item is shown or hidden.
#The 'entire tooltip' is what shows to the player when they hover an item (i.e. name, lore, etc.).
#The 'additional tooltip' hides certain information from certain items (potions, maps, books, fireworks, and banners).
#since 2.9.0
#Examples:
#send true if entire tooltip of player's tool is shown
#if additional tooltip of {_item} is hidden:
#Spigot 1.20.5+
condition:
	patterns:
		[the] [entire|additional] tool[ ]tip[s] of %itemtypes% (is|are) (shown|hidden)
		[the] [entire|additional] tool[ ]tip[s] of %itemtypes% (isn't|is not|aren't|are not) (shown|hidden)
		%itemtypes%'[s] [entire|additional] tool[ ]tip[s] (is|are) (shown|hidden)
		%itemtypes%'[s] [entire|additional] tool[ ]tip[s] (isn't|is not|aren't|are not) (shown|hidden)

#Has Line of Sight
#Checks whether living entities have an unobstructed line of sight to other entities or locations.
#since 2.8.0
#Examples:
#player has direct line of sight to location 5 blocks to the right of player
#victim has line of sight to attacker
#player has no line of sight to location 100 blocks in front of player
condition:
	patterns:
		%livingentities% (has|have) [a] [direct] line of sight to %entities/locations%
		%livingentities% does(n't| not) have [a] [direct] line of sight to %entities/locations%
		%livingentities% (has|have) no [direct] line of sight to %entities/locations%

#Has Loot Table
#Checks whether an entity or block has a loot table. The loot tables of chests will be deleted when the chest is opened or broken.
#since 2.10
#Examples:
#set event-block to chest
#if event-block has a loot table:
#	 this will never happen, because it doesn't have a loot table.
#set loot table of event-block to "minecraft:chests/simple_dungeon"
#if event-block has a loot table:
#	 this will happen, because it now has a loot table.
condition:
	patterns:
		%blocks/entities% (has|have) [a] loot[ ]table
		%blocks/entities% (doesn't|does not|do not|don't) have [a] loot[ ]table

#Has Metadata
#Checks whether a metadata holder has a metadata tag.
#since 2.2-dev36
#Examples:
#if player has metadata value "healer":
condition:
	patterns:
		%metadataholders% (has|have) metadata [(value|tag)[s]] %strings%
		%metadataholders% (doesn't|does not|do not|don't) have metadata [(value|tag)[s]] %strings%

#Has Permission
#Test whether a player has a certain permission.
#since 1.0
#Examples:
#player has permission "skript.tree"
#victim has the permission "admin":
#	send "You're attacking an admin!" to attacker
condition:
	patterns:
		%commandsenders% (has|have) [the] permission[s] %strings%
		%commandsenders% (doesn't|does not|do not|don't) have [the] permission[s] %strings%

#Has Played Before
#Checks whether a player has played on this server before. You can also use on first join if you want to make triggers for new players.
#since 1.4, 2.7 (multiple players)
#Examples:
#player has played on this server before
#player hasn't played before
condition:
	patterns:
		%offlineplayers% [(has|have|did)] [already] play[ed] [on (this|the) server] (before|already)
		%offlineplayers% (has not|hasn't|have not|haven't|did not|didn't) [(already|yet)] play[ed] [on (this|the) server] (before|already|yet)

#Has Potion
#Checks whether the given living entities have specific potion effects.
#since 2.6.1
#Examples:
#if player has potion speed:
#	send "You are sonic!"
#if all players have potion effects speed and haste:
#	broadcast "You are ready to MINE!"
condition:
	patterns:
		%livingentities% (has|have) potion[s] [effect[s]] %potioneffecttypes%
		%livingentities% (doesn't|does not|do not|don't) have potion[s] [effect[s]] %potioneffecttypes%

#Has Resource Pack
#Checks whether the given players have a server resource pack loaded. Please note that this can't detect player's own resource pack, only the resource pack that sent by the server.
#since 2.4
#Examples:
#if the player has a resource pack loaded:
#Paper 1.9 or newer
condition:
	patterns:
		%players% (has|have) [a] resource pack [(loaded|installed)]
		%players% (doesn't|does not|do not|don't) have [a] resource pack [(loaded|installed)]

#Has Scoreboard Tag
#Checks whether the given entities has the given scoreboard tags.
#since 2.3
#Examples:
#if the targeted armor stand has the scoreboard tag "test tag":
condition:
	patterns:
		%entities% (has|have) [the] score[ ]board tag[s] %strings%
		%entities% (doesn't|does not|do not|don't) have [the] score[ ]board tag[s] %strings%

#Ignition Process
#Checks if a creeper is going to explode.
#since 2.5
#Examples:
#if the last spawned creeper is going to explode:
#	loop all players in radius 3 of the last spawned creeper
#		send "RUN!!!" to the loop-player
#Paper
condition:
	patterns:
		[creeper[s]] %livingentities% ((is|are)|(isn't|is not|aren't|are not)) going to explode
		[creeper[s]] %livingentities% ((is|are)|(isn't|is not|aren't|are not)) in the (ignition|explosion) process
		creeper[s] %livingentities% ((is|are)|(isn't|is not|aren't|are not)) ignited

#In The Past/Future
#Checks whether a date is in the past or future.
#Note that using the 'now' expression will not be in the past or future when used directly in the condition.
#since 2.10
#Examples:
#set {_date} to now
#wait 5 seconds
#if {_date} is in the past:
#	 this will be true
#if now is in the future:
#	 this will be false
#set {_dates::*} to 1 day from now, 12 days from now, and 1 year from now
#if {_dates::*} are in the future:
#	 this will be true
#if {_dates::*} have passed:
#	 this will be false
condition:
	patterns:
		%dates% (is|are)[(n't| not)] in the (past|future)
		%dates% ha(s|ve)[(n't| not)] passed

#Is Adult
#Checks whether or not a living entity is an adult.
#since 2.10
#Examples:
#on drink:
#	event-entity is not an adult
#	kill event-entity
condition:
	patterns:
		%livingentities% (is|are) [an] adult
		%livingentities% (isn't|is not|aren't|are not) [an] adult

#Is Alive
#Checks whether an entity is alive. Works for non-living entities too.
#since 2.0, 2.4-alpha4 (non-living entity support)
#Examples:
#if {villager-buddy::%player's uuid%} is not dead:
#on shoot:
#	while the projectile is alive:
condition:
	patterns:
		%entities% (is|are) (alive|dead)
		%entities% (isn't|is not|aren't|are not) (alive|dead)

#Is Baby
#Checks whether or not a living entity is a baby.
#since 2.10
#Examples:
#on drink:
#	event-entity is a baby
#	kill event-entity
condition:
	patterns:
		%livingentities% (is|are) a (child|baby)
		%livingentities% (isn't|is not|aren't|are not) a (child|baby)

#Is Banned
#Checks whether a player or IP is banned.
#since 1.4
#Examples:
#player is banned
#victim is not IP-banned
#"127.0.0.1" is banned
condition:
	patterns:
		%offlineplayers/strings% (is|are) banned
		%players/strings% (is|are) IP(-| |)banned
		%offlineplayers/strings% (isn't|is not|aren't|are not) banned
		%players/strings% (isn't|is not|aren't|are not) IP(-| |)banned

#Is Bed/Anchor Spawn
#Checks what the respawn location of a player in the respawn event is.
#since 2.7
#Examples:
#on respawn:
#	the respawn location is a bed
#	broadcast "%player% is respawning in their bed! So cozy!"
#Minecraft 1.16+
condition:
	patterns:
		[the] respawn location (was|is)[(n'| no)t] [a] (bed|respawn anchor)

#Is Block
#Checks whether an item is a block.
#since 2.4
#Examples:
#player's held item is a block
#{list::*} are blocks
condition:
	patterns:
		%itemtypes% (is|are) ([a] block|blocks)
		%itemtypes% (isn't|is not|aren't|are not) ([a] block|blocks)

#Is Block Redstone Powered
#Checks if a block is indirectly or directly powered by redstone
#since 2.5
#Examples:
#if clicked block is redstone powered:
#	send "This block is well-powered by redstone!"
#if clicked block is indirectly redstone powered:
#	send "This block is indirectly redstone powered."
condition:
	patterns:
		%blocks% (is|are) redstone powered
		%blocks% (is|are) indirectly redstone powered
		%blocks% (is|are)(n't| not) redstone powered
		%blocks% (is|are)(n't| not) indirectly redstone powered

#Is Blocking
#Checks whether a player is blocking with their shield.
#since unknown (before 2.1)
#Examples:
#on damage of player:
#	victim is blocking
#	damage attacker by 0.5 hearts
condition:
	patterns:
		%players% (is|are) (blocking|defending) [with [a] shield]
		%players% (isn't|is not|aren't|are not) (blocking|defending) [with [a] shield]

#Is Burning
#Checks whether an entity is on fire, e.g. a zombie due to being in sunlight, or any entity after falling into lava.
#since 1.4.4
#Examples:
# increased attack against burning targets
#victim is burning:
#	increase damage by 2
condition:
	patterns:
		%entities% (is|are) (burning|ignited|on fire)
		%entities% (isn't|is not|aren't|are not) (burning|ignited|on fire)

#Is Charged
#Checks if a creeper, wither, or wither skull is charged (powered).
#since 2.5, 2.10 (withers, wither skulls)
#Examples:
#if the last spawned creeper is charged:
#	broadcast "A charged creeper is at %location of last spawned creeper%"
condition:
	patterns:
		%entities% (is|are) (charged|powered)
		%entities% (isn't|is not|aren't|are not) (charged|powered)

#Is Charging Fireball
#Check whether a ghast is charging a fireball.
#since 2.11
#Examples:
#if last spawned ghast is charging fireball:
#	kill last spawned ghast
condition:
	patterns:
		%livingentities% (is|are) charging [a] fireball
		%livingentities% (isn't|is not|aren't|are not) charging [a] fireball

#Is Climbing
#Whether a living entity is climbing, such as a spider up a wall or a player on a ladder.
#since 2.8.0
#Examples:
#spawn a spider at location of spawn
#wait a second
#if the last spawned spider is climbing:
#	message"The spider is now climbing!"
#Minecraft 1.17+
condition:
	patterns:
		%livingentities% (is|are) climbing
		%livingentities% (isn't|is not|aren't|are not) climbing

#Is Conditional
#Checks whether a command block is conditional or not.
#since 2.10
#Examples:
#if {_block} is conditional:
#	make {_block} unconditional
condition:
	patterns:
		%blocks% (is|are) [un]conditional
		%blocks% (isn't|is not|aren't|are not) [un]conditional

#Is Custom Name Visible
#Checks if an entity's custom name is visible.
#since 2.10
#Examples:
#send true if target's custom name is visible
condition:
	patterns:
		%entities%'[s] custom name[s] (is|are) visible
		%entities%'[s] custom name[s] (isn't|is not|are not|aren't) visible
		custom name of %entities% (is|are) visible
		custom name of %entities% (isn't|is not|are not|aren't) visible

#Is Dancing
#Checks to see if an entity is dancing, such as allays, parrots, or piglins.
#since 2.11
#Examples:
#if last spawned allay is dancing:
#	broadcast "Dance Party!"
#Paper 1.20.1+ (piglins)
condition:
	patterns:
		%livingentities% (is|are) dancing
		%livingentities% (isn't|is not|aren't|are not) dancing

#Is Eating
#Whether a panda or horse type (horse, camel, donkey, llama, mule) is eating.
#since 2.11
#Paper (horse type)
condition:
	patterns:
		%livingentities% (is|are) eating
		%livingentities% (isn't|is not|aren't|are not) eating

#Is Edible
#Checks whether an item is edible.
#since 2.2-dev36
#Examples:
#steak is edible
#player's tool is edible
condition:
	patterns:
		%itemtypes% (is|are) edible
		%itemtypes% (isn't|is not|aren't|are not) edible

#Is Empty
#Checks whether an inventory, an inventory slot, a queue, or a text is empty.
#since unknown (before 2.1)
#Examples:
#player's inventory is empty
condition:
	patterns:
		%inventories/slots/strings/numbered% (is|are) empty
		%inventories/slots/strings/numbered% (isn't|is not|aren't|are not) empty

#Is Enchanted
#Checks whether an item is enchanted.
#since 1.4.6
#Examples:
#tool of the player is enchanted with efficiency 2
#helm, chestplate, leggings or boots are enchanted
condition:
	patterns:
		%itemtypes% (is|are) enchanted [with %enchantmenttype%]
		%itemtypes% (isn't|is not|aren't|are not) enchanted [with %enchantmenttype%]

#Is Evenly Divisible By
#Check if a number is evenly divisible by another number.
#since 2.10
#Examples:
#if 5 is evenly divisible by 5:
#if 11 cannot be evenly divided by 10:
condition:
	patterns:
		%numbers% (is|are) evenly divisible by %number%
		%numbers% (isn't|is not|aren't|are not) evenly divisible by %number%
		%numbers% can be evenly divided by %number%
		%numbers% (can't|can[ ]not) be evenly divided by %number%

#Is Fire Resistant
#Checks whether an item is fire resistant.
#since 2.9.0
#Examples:
#if player's tool is fire resistant:
#if {_items::*} aren't resistant to fire:
#Spigot 1.20.5+
condition:
	patterns:
		%itemtypes% (is|are) (fire resistant|resistant to fire)
		%itemtypes% (isn't|is not|aren't|are not) (fire resistant|resistant to fire)

#Is Fish Hook in Open Water
#Checks whether the fish hook is in open water.
#Open water is defined by a 5x4x5 area of water, air and lily pads. If in open water, treasure items may be caught.
#since 2.10
#Examples:
#on fish catch:
#	if fish hook is in open water:
#		send "You will catch a shark soon!"
condition:
	patterns:
		%entities% (is|are) in open water[s]
		%entities% (isn't|is not|aren't|are not) in open water[s]

#Is Flammable
#Checks whether an item is flammable.
#since 2.2-dev36
#Examples:
#wood is flammable
#player's tool is flammable
condition:
	patterns:
		%itemtypes% (is|are) flammable
		%itemtypes% (isn't|is not|aren't|are not) flammable

#Is Flying
#Checks whether a player is flying.
#since 1.4.4
#Examples:
#player is not flying
condition:
	patterns:
		%players% (is|are) flying
		%players% (isn't|is not|aren't|are not) flying

#Is From A Mob Spawner
#Checks if an entity was spawned from a mob spawner.
#since 2.10
#Examples:
#send whether target is from a mob spawner
#PaperMC
condition:
	patterns:
		%entities% (is|are) from a [mob] spawner
		%entities% (isn't|aren't|is not|are not) from a [mob] spawner
		%entities% (was|were) spawned (from|by) a [mob] spawner
		%entities% (wasn't|weren't|was not|were not) spawned (from|by) a [mob] spawner

#Is Frozen
#Checks whether an entity is frozen.
#since 2.7
#Examples:
#if player is frozen:
#	kill player
condition:
	patterns:
		%entities% (is|are) frozen
		%entities% (isn't|is not|aren't|are not) frozen

#Is Fuel
#Checks whether an item can be used as fuel in a furnace.
#since 2.5.1
#Examples:
#on right click on furnace:
#	if player's tool is not fuel:
#		send "Please hold a valid fuel item in your hand"
#		cancel event
condition:
	patterns:
		%itemtypes% (is|are) [furnace] fuel
		%itemtypes% (isn't|is not|aren't|are not) [furnace] fuel

#Is Gliding
#Checks whether a living entity is gliding.
#since 2.7
#Examples:
#if player is gliding
condition:
	patterns:
		%livingentities% (is|are) gliding
		%livingentities% (isn't|is not|aren't|are not) gliding

#Is Hand Raised
#Checks whether an entity has one or both of their hands raised.
#Hands are raised when an entity is using an item (eg: blocking, drawing a bow, eating).
#since 2.8.0
#Examples:
#on damage of player:
#	if victim's main hand is raised:
#		drop player's tool at player
#		set player's tool to air
#Paper
condition:
	patterns:
		%livingentities%'[s] [main] hand[s] (is|are) raised
		%livingentities%'[s] [main] hand[s] (isn't|is not|aren't|are not) raised
		[main] hand[s] of %livingentities% (is|are) raised
		[main] hand[s] of %livingentities% (isn't|is not|aren't|are not) raised
		%livingentities%'[s] off[ |-]hand[s] (is|are) raised
		%livingentities%'[s] off[ |-]hand[s] (isn't|is not|aren't|are not) raised
		off[ |-]hand[s] of %livingentities% (is|are) raised
		off[ |-]hand[s] of %livingentities% (isn't|is not|aren't|are not) raised

#Is Holding
#Checks whether a player is holding a specific item. Cannot be used with endermen, use 'entity is [not] an enderman holding <item type>' instead.
#since 1.0
#Examples:
#player is holding a stick
#victim isn't holding a sword of sharpness
condition:
	patterns:
		[%livingentities%] ha(s|ve) %itemtypes% in [main] hand
		[%livingentities%] (is|are) holding %itemtypes% [in main hand]
		[%livingentities%] ha(s|ve) %itemtypes% in off[(-| )]hand
		[%livingentities%] (is|are) holding %itemtypes% in off[(-| )]hand
		[%livingentities%] (ha(s|ve) not|do[es]n't have) %itemtypes% in [main] hand
		[%livingentities%] (is not|isn't) holding %itemtypes% [in main hand]
		[%livingentities%] (ha(s|ve) not|do[es]n't have) %itemtypes% in off[(-| )]hand
		[%livingentities%] (is not|isn't) holding %itemtypes% in off[(-| )]hand

#Is In Love
#Checks whether or not a living entity is in love.
#since 2.10
#Examples:
#on spawn of living entity:
#	if entity is in love:
#broadcast "That was quick!"
condition:
	patterns:
		%livingentities% (is|are) in lov(e|ing) [state|mode]
		%livingentities% (isn't|is not|aren't|are not) in lov(e|ing) [state|mode]

#Is Incendiary
#Checks if an entity will create fire when it explodes. This condition is also usable in an explosion prime event.
#since 2.5
#Examples:
#on explosion prime:
#	if the explosion is fiery:
#		broadcast "A fiery explosive has been ignited!"
condition:
	patterns:
		%entities% ((is|are) incendiary|cause[s] a[n] (incendiary|fiery) explosion)
		%entities% ((is not|are not|isn't|aren't) incendiary|(does not|do not|doesn't|don't) cause[s] a[n] (incendiary|fiery) explosion)
		the [event(-| )]explosion (is|(is not|isn't)) (incendiary|fiery)

#Is Infinite
#Checks whether potion effects are infinite.
#since 2.7
#Examples:
#all of the active potion effects of the player are infinite
condition:
	patterns:
		%potioneffects% (is|are) infinite
		%potioneffects% (isn't|is not|aren't|are not) infinite

#Is Interactable
#Checks wether or not a block is interactable.
#since 2.5.2
#Examples:
#on block break:
#	if event-block is interactable:
#		cancel event
#		send "You cannot break interactable blocks!"
condition:
	patterns:
		%itemtypes% (is|are) interactable
		%itemtypes% (isn't|is not|aren't|are not) interactable

#Is Invisible
#Checks whether a living entity is invisible.
#since 2.7
#Examples:
#target entity is invisible
condition:
	patterns:
		%livingentities% (is|are) (invisible|visible)
		%livingentities% (isn't|is not|aren't|are not) (invisible|visible)

#Is Invulnerable
#Checks whether an entity or a gamemode is invulnerable.
#For gamemodes, Paper and Minecraft 1.20.6 are required
#since 2.5, 2.10 (gamemode)
#Examples:
#target entity is invulnerable
#loop all gamemodes:
#	if loop-value is not invulnerable:
#		broadcast "the gamemode %loop-value% is vulnerable!"
#Paper 1.20.6+ (gamemodes)
condition:
	patterns:
		%entities/gamemodes% (is|are) (invulnerable|invincible)
		%entities/gamemodes% (isn't|is not|aren't|are not) (invulnerable|invincible)

#Is Jumping
#Checks whether a living entity is jumping. This condition does not work on players.
#since 2.8.0
#Examples:
#on spawn of zombie:
#	while event-entity is not jumping:
#		wait 5 ticks
#	push event-entity upwards
#Paper 1.15+
condition:
	patterns:
		%livingentities% (is|are) jumping
		%livingentities% (isn't|is not|aren't|are not) jumping

#Is Leashed
#Checks to see if an entity is currently leashed.
#since 2.5
#Examples:
#target entity is leashed
condition:
	patterns:
		%livingentities% (is|are) leashed
		%livingentities% (isn't|is not|aren't|are not) leashed

#Is Loaded
#Checks whether a world, chunk or script is loaded.
#'chunk at 1, 1' uses chunk coordinates, which are location coords divided by 16.
#since 2.3, 2.5 (revamp with chunk at location/coords), 2.10 (Scripts)
#Examples:
#if chunk at {home::%player's uuid%} is loaded:
#if chunk 1, 10 in world "world" is loaded:
#if world("lobby") is loaded:
#if script named "MyScript.sk" is loaded:
condition:
	patterns:
		chunk[s] %directions% [%locations%] (is|are)[((n't| not))] loaded
		chunk [at] %number%, %number% (in|of) [world] %world% is[((n't| not))] loaded
		%scripts/worlds% (is|are)[(n't| not)] loaded
		script[s] %scripts% (is|are)[(n't| not)] loaded
		world[s] %worlds% (is|are)[(n't| not)] loaded

#Is Lootable
#Checks whether an entity or block is lootable. Lootables are entities or blocks that can have a loot table.
#since 2.10
#Examples:
#spawn a pig at event-location
#set {_pig} to last spawned entity
#if {_pig} is lootable:
#	set loot table of {_pig} to "minecraft:entities/cow"
#	 the pig will now drop the loot of a cow when killed, because it is indeed a lootable entity.
#set block at event-location to chest
#if block at event-location is lootable:
#	set loot table of block at event-location to "minecraft:chests/simple_dungeon"
#	 the chest will now generate the loot of a simple dungeon when opened, because it is indeed a lootable block.
#set block at event-location to wool block
#if block at event-location is lootable:
#	 uh oh, nothing will happen because a wool is not a lootable block.
condition:
	patterns:
		%blocks/entities% (is|are) lootable
		%blocks/entities% (isn't|is not|aren't|are not) lootable

#Is Normalized
#Checks whether a vector is normalized i.e. length of 1
#since 2.5.1
#Examples:
#vector of player's location is normalized
condition:
	patterns:
		%vectors% (is|are) normalized
		%vectors% (isn't|is not|aren't|are not) normalized

#Is Occluding
#Checks whether an item is a block and completely blocks vision.
#since 2.5.1
#Examples:
#player's tool is occluding
condition:
	patterns:
		%itemtypes% (is|are) occluding
		%itemtypes% (isn't|is not|aren't|are not) occluding

#Is Online
#Checks whether a player is online. The 'connected' pattern will return false once this player leaves the server, even if they rejoin. Be aware that using the 'connected' pattern with a variable will not have this special behavior. Use the direct event-player or other non-variable expression for best results.
#since 1.4
#Examples:
#player is online
#player-argument is offline
#while player is connected:
#	wait 60 seconds
#	send "hello!" to player
# The following will act like `{_player} is online`.
# Using variables with `is connected` will not behave the same as with non-variables.
#while {_player} is connected:
#	broadcast "online!"
#	wait 1 tick
#Paper 1.20+ (Connected)
condition:
	patterns:
		%offlineplayers% (is|are) (online|offline|connected)
		%offlineplayers% (isn't|is not|aren't|are not) (online|offline|connected)

#Is Operator
#Checks whether a player is a server operator.
#since 2.7
#Examples:
#player is an operator
condition:
	patterns:
		%offlineplayers% (is|are) [[a] server|an] op[erator][s]
		%offlineplayers% (isn't|is not|aren't|are not) [[a] server|an] op[erator][s]

#Is Passable
#Checks whether a block is passable.
#A block is passable if it has no colliding parts that would prevent players from moving through it.
#Blocks like tall grass, flowers, signs, etc. are passable, but open doors, fence gates, trap doors, etc. are not because they still have parts that can be collided with.
#since 2.5.1
#Examples:
#if player's targeted block is passable
condition:
	patterns:
		%blocks% (is|are) passable
		%blocks% (isn't|is not|aren't|are not) passable

#Is Pathfinding
#Checks whether living entities are pathfinding.
#Can only be a living entity that is a Mob.
#since 2.9.0
#Examples:
#make {_entity} pathfind to {_location} at speed 2
#while {_entity} is pathfinding
#	wait a second
#launch flickering trailing burst firework colored red at location of {_entity}
#subtract 10 from {defence::tower::health}
#clear entity within {_entity}
#Paper
condition:
	patterns:
		%livingentities% (is|are) pathfinding [to[wards] %livingentity/location%]
		%livingentities% (isn't|is not|aren't|are not) pathfinding [to[wards] %livingentity/location%]

#Is Persistent
#Whether entities, players, or leaves are persistent.
#Persistence of entities is whether they are retained through server restarts.
#Persistence of leaves is whether they should decay when not connected to a log block within 6 meters.
#Persistence of players is if the player's playerdata should be saved when they leave the server. Players' persistence is reset back to 'true' when they join the server.
#Passengers inherit the persistence of their vehicle, meaning a persistent zombie put on a non-persistent chicken will become non-persistent. This does not apply to players.
#By default, all entities are persistent.
#since 2.11
#Examples:
#on spawn:
#	if event-entity is persistent:
#		make event-entity not persistent
condition:
	patterns:
		%entities/blocks% (is|are) persistent
		%entities/blocks% (isn't|is not|aren't|are not) persistent

#Is Playing Dead
#Checks to see if an axolotl is playing dead.
#since 2.11
#Examples:
#if last spawned axolotl is playing dead:
#	make last spawned axolotl stop playing dead
condition:
	patterns:
		%livingentities% (is|are) playing dead
		%livingentities% (isn't|is not|aren't|are not) playing dead

#Is Plugin Enabled
#Check if a plugin is enabled/disabled on the server.
#Plugin names can be found in the plugin's 'plugin.yml' file or by using the '/plugins' command, they are NOT the name of the plugin's jar file.
#When checking if a plugin is not enabled, this will return true if the plugin is either disabled or not on the server. 
#When checking if a plugin is disabled, this will return true if the plugin is on the server and is disabled.
#since 2.6
#Examples:
#if plugin "Vault" is enabled:
#if plugin "WorldGuard" is not enabled:
#if plugins "Essentials" and "Vault" are enabled:
#if plugin "MyBrokenPlugin" is disabled:
condition:
	patterns:
		plugin[s] %strings% (is|are) enabled
		plugin[s] %strings% (is|are)(n't| not) enabled
		plugin[s] %strings% (is|are) disabled

#Is Poisoned
#Checks whether an entity is poisoned.
#since 1.4.4
#Examples:
#player is poisoned:
#	cure the player from poison
#	message "You have been cured!"
condition:
	patterns:
		%livingentities% (is|are) poisoned
		%livingentities% (isn't|is not|aren't|are not) poisoned

#Is Preferred Tool
#Checks whether an item is the preferred tool for a block. A preferred tool is one that will drop the block's item when used. For example, a wooden pickaxe is a preferred tool for grass and stone blocks, but not for iron ore.
#since 2.7
#Examples:
#on left click:
#	event-block is set
#	if player's tool is the preferred tool for event-block:
#		break event-block naturally using player's tool
#	else:
#		cancel event
#1.16.5+, Paper 1.19.2+ (blockdata)
condition:
	patterns:
		%itemtypes% (is|are) %blocks/blockdatas%'s preferred tool[s]
		%itemtypes% (is|are) [the|a] preferred tool[s] (for|of) %blocks/blockdatas%
		%itemtypes% (is|are)(n't| not) %blocks/blockdatas%'s preferred tool[s]
		%itemtypes% (is|are)(n't| not) [the|a] preferred tool[s] (for|of) %blocks/blockdatas%

#Is Pressing Key
#Checks if a player is pressing a certain input key.
#since 2.10
#Examples:
#on player input:
#	if player is pressing forward movement key:
#		send "You are moving forward!"
#Minecraft 1.21.2+
condition:
	patterns:
		%players% (is|are) pressing %inputkeys%
		%players% (isn't|is not|aren't|are not) pressing %inputkeys%
		%players% (was|were) pressing %inputkeys%
		%players% (wasn't|was not|weren't|were not) pressing %inputkeys%

#Is Riding
#Tests whether an entity is riding any entity, a specific entity type, or a specific entity.
#since 2.0, 2.11 (entities)
#Examples:
#if player is riding:
#if player is riding an entity:
#if player is riding a saddled pig:
#if player is riding last spawned horse:
condition:
	patterns:
		%entities% (is|are) riding [%entitydatas/entities%]
		%entities% (isn't|is not|aren't|are not) riding [%entitydatas/entities%]

#Is Riptiding
#Checks to see if an entity is currently using the Riptide enchantment.
#since 2.5
#Examples:
#target entity is riptiding
condition:
	patterns:
		%livingentities% (is|are) riptiding
		%livingentities% (isn't|is not|aren't|are not) riptiding

#Is Saddled
#Checks whether a given entity (horse or steerable) is saddled.
#If 'properly' is used, this will only return true if the entity is wearing specifically a saddle item.
#since 2.10
#Examples:
#send whether {_horse} is saddled
condition:
	patterns:
		%livingentities% (is|are) [properly] saddled
		%livingentities% (isn't|is not|aren't|are not) [properly] saddled

#Is Screaming
#Check whether a goat or enderman is screaming.
#since 2.11
#Examples:
#	if last spawned goat is not screaming:
#		make last spawned goat scream
#
#	if {_enderman} is screaming:
#		force {_enderman} to stop screaming
#
#Paper (endermen)
condition:
	patterns:
		%livingentities% (is|are) screaming
		%livingentities% (isn't|is not|aren't|are not) screaming

#Is Script Loaded
#Check if the current script, or another script, is currently loaded.
#since 2.2-dev31
#Examples:
#script is loaded
#script "example.sk" is loaded
condition:
	patterns:
		script[s] [%strings%] (is|are) loaded
		script[s] [%strings%] (isn't|is not|aren't|are not) loaded

#Is Silent
#Checks whether an entity is silent i.e. its sounds are disabled.
#since 2.5
#Examples:
#target entity is silent
condition:
	patterns:
		%entities% (is|are) silent
		%entities% (isn't|is not|aren't|are not) silent

#Is Sleeping
#Checks whether an entity is sleeping.
#since 1.4.4, 2.11 (living entities)
#Examples:
#if player is sleeping:
#	make player wake up without spawn location update
#if last spawned fox is sleeping:
#	make last spawned fox stop sleeping
condition:
	patterns:
		%livingentities% (is|are) sleeping
		%livingentities% (isn't|is not|aren't|are not) sleeping

#Is Slime Chunk
#Tests whether a chunk is a so-called slime chunk.
#Slimes can generally spawn in the swamp biome and in slime chunks.
#For more info, see the Minecraft wiki.
#since 2.3
#Examples:
#command /slimey:
#	trigger:
#		if chunk at player is a slime chunk:
#			send "Yeah, it is!"
#		else:
#			send "Nope, it isn't"
condition:
	patterns:
		%chunk% (is|are) ([a] slime chunk|slime chunks|slimey)
		%chunk% (isn't|is not|aren't|are not) ([a] slime chunk|slime chunks|slimey)

#Is Sneaking
#Checks whether a player is sneaking.
#since 1.4.4
#Examples:
# prevent mobs from seeing sneaking players if they are at least 4 meters apart
#on target:
#	target is sneaking
#	distance of target and the entity is bigger than 4
#	cancel the event
condition:
	patterns:
		%players% (is|are) sneaking
		%players% (isn't|is not|aren't|are not) sneaking

#Is Solid
#Checks whether an item is solid.
#since 2.2-dev36
#Examples:
#grass block is solid
#player's tool isn't solid
condition:
	patterns:
		%itemtypes% (is|are) solid
		%itemtypes% (isn't|is not|aren't|are not) solid

#Is Sprinting
#Checks whether a player is sprinting.
#since 1.4.4
#Examples:
#player is not sprinting
condition:
	patterns:
		%players% (is|are) sprinting
		%players% (isn't|is not|aren't|are not) sprinting

#Is Stackable
#Checks whether an item is stackable.
#since 2.7
#Examples:
#diamond axe is stackable
#birch wood is stackable
#torch is stackable
condition:
	patterns:
		%itemstacks% (is|are) stackable
		%itemstacks% (isn't|is not|aren't|are not) stackable

#Is Swimming
#Checks whether a living entity is swimming.
#since 2.3
#Examples:
#player is swimming
condition:
	patterns:
		%livingentities% (is|are) swimming
		%livingentities% (isn't|is not|aren't|are not) swimming

#Is Tagged
#Checks whether an item, block, entity, or entitydata is tagged with the given tag.
#since 2.10
#Examples:
#if player's tool is tagged with minecraft tag "enchantable/sharp_weapon":
#	enchant player's tool with sharpness 1
#if all logs are tagged with tag "minecraft:logs"
condition:
	patterns:
		%itemtypes/entities/entitydatas% (is|are) tagged (as|with) %minecrafttags%
		%itemtypes/entities/entitydatas% (isn't|is not|aren't|are not) tagged (as|with) %minecrafttags%

#Is Tameable
#Check if an entity is tameable.
#since 2.5
#Examples:
#on damage:
#	if victim is tameable:
#		cancel event
condition:
	patterns:
		%livingentities% (is|are) tameable
		%livingentities% (isn't|is not|aren't|are not) tameable

#Is Tamed
#Check if a tameable entity is tamed (horse, parrot, cat, etc.).
#since 2.10
#Examples:
#send true if {_horse} is tamed
#tame {_horse} if {_horse} is untamed
condition:
	patterns:
		%entities% (is|are) (tamed|domesticated)
		%entities% (isn't|is not|aren't|are not) (tamed|domesticated)

#Is Ticking
#Checks if an entity is ticking.
#since 2.10
#Examples:
#send true if target is ticking
#PaperMC
condition:
	patterns:
		%entities% (is|are) ticking
		%entities% (isn't|is not|aren't|are not) ticking

#Is Transparent
#Checks whether an item is transparent. Note that this condition may not work for all blocks, due to the transparency list used by Spigot not being completely accurate.
#since 2.2-dev36
#Examples:
#player's tool is transparent.
condition:
	patterns:
		%itemtypes% (is|are) transparent
		%itemtypes% (isn't|is not|aren't|are not) transparent

#Is Unbreakable
#Checks whether an item is unbreakable.
#since 2.5.1, 2.9.0 (breakable)
#Examples:
#if event-item is unbreakable:
#	send "This item is unbreakable!" to player
#if tool of {_p} is breakable:
#	send "Your tool is breakable!" to {_p}
condition:
	patterns:
		%itemtypes% (is|are) [un]breakable
		%itemtypes% (isn't|is not|aren't|are not) [un]breakable

#Is Using Experimental Feature
#Checks whether a script is using an experimental feature by name.
#since 2.9.0
#Examples:
#the script is using "example feature"
#on load:
#	if the script is using "example feature":
#		broadcast "You're using an experimental feature!"
condition:
	patterns:
		%script% is using %strings%
		%scripts% are using %strings%
		%script% is(n't| not) using %strings%
		%scripts% are(n't| not) using %strings%

#Is Valid
#Checks whether something (an entity, a script, a config, etc.) is valid.
#An invalid entity may have died or de-spawned for some other reason.
#An invalid script reference may have been reloaded, moved or disabled since.
#since 2.7, 2.10 (Scripts & Configs)
#Examples:
#if event-entity is valid
condition:
	patterns:
		%entities/scripts% (is|are) valid
		%entities/scripts% (isn't|is not|aren't|are not) valid

#Is Wearing
#Checks whether an entity is wearing some items (usually armor).
#since 1.0
#Examples:
#player is wearing an iron chestplate and iron leggings
#player is wearing all diamond armour
#target is wearing wolf armor
condition:
	patterns:
		%livingentities% (is|are) wearing %itemtypes%
		%livingentities% (isn't|is not|aren't|are not) wearing %itemtypes%

#Is Whitelisted
#Whether or not the server or a player is whitelisted, or the server is whitelist enforced.
#since 2.5.2, 2.9.0 (enforce, offline players)
#Examples:
#if the player is whitelisted:
#if the server is whitelisted:
#if the server whitelist is enforced:
#MC 1.17+ (enforce)
condition:
	patterns:
		[the] server (is|(isn't|is not)) (in white[ ]list mode|white[ ]listed)
		%offlineplayers% (is|are|(isn't|is not|aren't|are not)) white[ ]listed
		[the] server white[ ]list (is|(isn't|is not)) enforced

#Is Within
#Whether a location is within something else. The "something" can be a block, an entity, a chunk, a world, or a cuboid formed by two other locations.
#Note that using the is between condition will refer to a straight line between locations, while this condition will refer to the cuboid between locations.
#since 2.7, 2.11 (world borders)
#Examples:
#if player's location is within {_loc1} and {_loc2}:
#	send "You are in a PvP zone!" to player
#if player is in world("world"):
#	send "You are in the overworld!" to player
#if attacker's location is inside of victim:
#	cancel event
#	send "Back up!" to attacker and victim
#if player is in world "world1" or world "world2":
#	kill player
#if player is in world "world" and chunk at location(0, 0, 0):
#	give player 1 diamond
#MC 1.17+ (within block)
condition:
	patterns:
		%locations% (is|are) within %location% and %location%
		%locations% (isn't|is not|aren't|are not) within %location% and %location%
		%locations% (is|are) (within|in[side [of]]) %entities/chunks/worlds/worldborders/blocks%
		%locations% (isn't|is not|aren't|are not) (within|in[side [of]]) %entities/chunks/worlds/worldborders/blocks%

#Is Within Radius
#Checks whether a location is within a certain radius of another location.
#since 2.7
#Examples:
#on damage:
#	if attacker's location is within 10 blocks around {_spawn}:
#		cancel event
#		send "You can't PVP in spawn."
condition:
	patterns:
		%locations% (is|are) within %number% (block|metre|meter)[s] (around|of) %locations%
		%locations% (isn't|is not|aren't|are not) within %number% (block|metre|meter)[s] (around|of) %locations%

#Is a Skript command
#Checks whether a command/string is a custom Skript command.
#since 2.6
#Examples:
# Example 1
#on command:
#	command is a skript command
# Example 2
#"sometext" is a skript command
condition:
	patterns:
		%string% (is|are) [a] s(k|c)ript (command|cmd)
		%string% (isn't|is not|aren't|are not) [a] s(k|c)ript (command|cmd)

#Is of Type
#Checks whether an item or an entity is of the given type. This is mostly useful for variables, as you can use the general 'is' condition otherwise (e.g. 'victim is a creeper').
#since 1.4
#Examples:
#tool is of type {selected type}
#victim is of type {villager type}
condition:
	patterns:
		%itemstacks/entities% (is|are) of type[s] %itemtypes/entitydatas%
		%itemstacks/entities% (isn't|is not|aren't|are not) of type[s] %itemtypes/entitydatas%

#Is on Ground
#Checks whether an entity is on ground.
#since 2.2-dev26
#Examples:
#player is not on ground
condition:
	patterns:
		%entities% (is|are) on [the] ground
		%entities% (isn't|is not|aren't|are not) on [the] ground

#Item Has Enchantment Glint Override
#Checks whether an item has the enchantment glint overridden, or is forced to glint or not.
#since 2.10
#Examples:
#if the player's tool has the enchantment glint override
#	send "Your tool has the enchantment glint override." to player
#if {_item} is forced to glint:
#	send "This item is forced to glint." to player
#else if {_item} is forced to not glint:
#	send "This item is forced to not glint." to player
#else:
#	send "This item does not have any glint override." to player
#Spigot 1.20.5+
condition:
	patterns:
		%itemtypes% (has|have) enchantment glint overrid(den|e)
		%itemtypes% (doesn't|does not|do not|don't) have enchantment glint overrid(den|e)
		%itemtypes% (is|are) forced to [not] glint
		%itemtypes% (isn't|is not|aren't|are not) forced to [not] glint

#Leash Will Drop
#Checks whether the leash item will drop during the leash detaching in an unleash event.
#since 2.10
#Examples:
#on unleash:
#	if the leash will drop:
#		prevent the leash from dropping
#	else:
#		allow the leash to drop
#Paper 1.16+
condition:
	patterns:
		[the] (lead|leash) [item] (will|(won't|will not)) (drop|be dropped)

#Left Handed
#Checks if living entities or players are left or right-handed. Armor stands are neither right nor left-handed.
#Paper 1.17.1+ is required for non-player entities.
#since 2.8.0
#Examples:
#on damage of player:
#	if victim is left handed:
#		cancel event
#Paper 1.17.1+ (entities)
condition:
	patterns:
		%livingentities% (is|are) (left|right)( |-)handed
		%livingentities% (isn't|is not|aren't|are not) (left|right)( |-)handed

#Lid Is Open/Closed
#Check to see whether lidded blocks (chests, shulkers, etc.) are open or closed.
#since 2.10
#Examples:
#if the lid of {_chest} is closed:
#	open the lid of {_block}
condition:
	patterns:
		[the] lid[s] of %blocks% (is|are) (open[ed]|close[d])
		[the] lid[s] of %blocks% (isn't|is not|aren't|are not) (open[ed]|close[d])
		%blocks%'[s] lid[s] (is|are) (open[ed]|close[d])
		%blocks%'[s] lid[s] (isn't|is not|aren't|are not) (open[ed]|close[d])

#Matches
#Checks whether the defined strings match the input regexes (Regular expressions).
#since 2.5.2
#Examples:
#on chat:
#	if message partially matches "\d":
#		send "Message contains a digit!"
#	if message doesn't match "[A-Za-z]+":
#		send "Message doesn't only contain letters!"
condition:
	patterns:
		%strings% (match[es]|do[es](n't| not) match) %strings%
		%strings% (partially match[es]|do[es](n't| not) partially match) %strings%

#Panda Is On Its Back
#Whether a panda is on its back.
#since 2.11
#Examples:
#if last spawned panda is on its back:
#	make last spawned panda get off its back
#
condition:
	patterns:
		%livingentities% (is|are) on (its|their) back[s]
		%livingentities% (isn't|is not|aren't|are not) on (its|their) back[s]

#Panda Is Rolling
#Whether a panda is rolling.
#since 2.11
condition:
	patterns:
		%livingentities% (is|are) rolling
		%livingentities% (isn't|is not|aren't|are not) rolling

#Panda Is Scared
#Whether a panda is scared.
#since 2.11
condition:
	patterns:
		%livingentities% (is|are) scared
		%livingentities% (isn't|is not|aren't|are not) scared

#Panda Is Sneezing
#Whether a panda is sneezing.
#since 2.11
condition:
	patterns:
		%livingentities% (is|are) sneezing
		%livingentities% (isn't|is not|aren't|are not) sneezing

#PvP
#Checks the PvP state of a world.
#since 1.3.4
#Examples:
#PvP is enabled
#PvP is disabled in "world"
condition:
	patterns:
		(is PvP|PvP is) enabled [in %worlds%]
		(is PvP|PvP is) disabled [in %worlds%]

#Resource Pack
#Checks state of the resource pack in a resource pack request response event.
#since 2.4
#Examples:
#on resource pack response:
#	if the resource pack wasn't accepted:
#		kick the player due to "You have to install the resource pack to play in this server!"
condition:
	patterns:
		[the] resource pack (was|is|has) [been] %resourcepackstate%
		[the] resource pack (was|is|has)(n't| not) [been] %resourcepackstate%

#Running Minecraft
#Checks if current Minecraft version is given version or newer.
#since 2.5
#Examples:
#running minecraft "1.14"
condition:
	patterns:
		running [(below)] minecraft %string%

#Starts/Ends With
#Checks if a text starts or ends with another.
#since 2.2-dev36, 2.5.1 (multiple strings support)
#Examples:
#if the argument starts with "test" or "debug":
#	send "Stop!"
condition:
	patterns:
		%strings% (start|end)[s] with %strings%
		%strings% (doesn't|does not|do not|don't) (start|end) with %strings%

#Text Display Has Drop Shadow
#Returns whether the text of a display has drop shadow applied.
#since 2.10
#Examples:
#if {_display} has drop shadow:
#	remove drop shadow from the text of {_display}
condition:
	patterns:
		[[the] text of] %displays% (has|have) [a] (drop|text) shadow
		%displays%'[s] text (has|have) [a] (drop|text) shadow
		[[the] text of] %displays% (doesn't|does not|do not|don't) have [a] (drop|text) shadow
		%displays%'[s] text (doesn't|does not|do not|don't) have [a] (drop|text) shadow

#Text Display Visible Through Blocks
#Returns whether text displays can be seen through blocks or not.
#since 2.10
#Examples:
#if last spawned text display is visible through walls:
#	prevent last spawned text display from being visible through walls
condition:
	patterns:
		%displays% (is|are) visible through (blocks|walls)
		%displays% (isn't|is not|aren't|are not) visible through (blocks|walls)

#Time
#Tests whether a given real time was more or less than some time span ago.
#since 2.0
#Examples:
#command /command-with-cooldown:
#	trigger:
#		{command::%player's uuid%::last-usage} was less than a minute ago:
#			message "Please wait a minute between uses of this command."
#			stop
#		set {command::%player's uuid%::last-usage} to now
#		 ... actual command trigger here ...
condition:
	patterns:
		%date% (was|were)( more|(n't| not) less) than %timespan% [ago]
		%date% (was|were)((n't| not) more| less) than %timespan% [ago]

#Will Consume Boosting Firework
#Checks to see if the firework used in an 'elytra boost' event will be consumed.
#since 2.10
#Examples:
#on elytra boost:
#	if the used firework will be consumed:
#		prevent the used firework from being consume
#Paper
condition:
	patterns:
		[the] (boosting|used) firework will be consumed
		[the] (boosting|used) firework (will not|won't) be consumed

#Will Despawn
#Checks if the dropped item will be despawned naturally through Minecraft's timer.
#since 2.11
#Examples:
#if all dropped items can despawn naturally:
#	prevent all dropped items from naturally despawning
condition:
	patterns:
		%itementities% will (despawn naturally|naturally despawn)
		%itementities% (will (not|neither)|won't) (despawn naturally|naturally despawn)
		%itementities% can (despawn naturally|naturally despawn)
		%itementities% (can't|cannot|can not) (despawn naturally|naturally despawn)

#At Time
#An event that occurs at a given minecraft time in every world or only in specific worlds.
#since 1.3.4
#Examples:
#at 18:00
#at 7am in "world"
event "at_time":
	patterns:
		[on] at %time% [in %worlds%]
	event-values: world

#On Anvil Damage
#Called when an anvil is damaged/broken from being used to repair/rename items.
#Note: this does not include anvil damage from falling.
#since 2.7
#Examples:
#on anvil damage:
#	cancel the event
#Paper
event "anvil_damage":
	patterns:
		[on] anvil damag(e|ing)
	event-values: inventory

#On Anvil Prepare
#Called when an item is put in a slot for repair by an anvil. Please note that this event is called multiple times in a single item slot move.
#since 2.7
#Examples:
#on anvil prepare:
#	event-item is set  result item
#	chance of 5%:
#		set repair cost to repair cost * 50%
#		send "You're LUCKY! You got 50% discount." to player
event "anvil_prepare":
	patterns:
		[on] anvil prepar(e|ing)
	event-values: inventory, item stack, player, slot

#On AoE Cloud Effect
#Called when area effect cloud applies its potion effect. This happens every 5 ticks by default.
#since 2.2-dev21
#Examples:
#on area cloud effect:
event "aoe_cloud_effect":
	patterns:
		[on] (area|AoE) [cloud] effect
	event-values: command sender, entity, living entities, location, potion effect type, world

#On Arm Swing
#Called when a player swings their arm.
#since 2.5.1
#Examples:
#on arm swing:
#	send "You swung your arm!"
event "arm_swing":
	patterns:
		[on] [player] arm swing
	event-values: player, world

#On Armor Change
#Called when armor pieces of a player are changed.
#since 2.5, 2.11 (equipment slots)
#Examples:
#on armor change:
#	broadcast the old armor item
#on helmet change:
#Paper
event "armor_change":
	patterns:
		[on] [player] armo[u]r change[d]
		[on] [player] %equipmentslot% change[d]
	event-values: equipment slot, player, slot, world, future event-item stack, past event-item stack

#On Bat Toggle Sleep
#Called when a bat attempts to go to sleep or wakes up.
#since 2.11
#Examples:
#on bat toggle sleep:
event "bat_toggle_sleep":
	patterns:
		[on] bat toggle sleep
	event-values: command sender, entity, location, world

#On Beacon Change Effect
#Called when a player changes the effects of a beacon.
#since 2.10
#Examples:
#on beacon effect change:
#	broadcast event-player
#	broadcast event-block
#	broadcast primary beacon effect
#	broadcast secondary beacon effect
#on beacon change effect:
#on player change beacon effect:
#Paper
event "beacon_change_effect":
	patterns:
		[on] beacon change effect
		[on] beacon effect change
		[on] player chang(e[s]|ing) [of] beacon effect
	event-values: block, player, world

#On Beacon Effect
#Called when a player gets an effect from a beacon.
#since 2.10
#Examples:
#on beacon effect:
#	broadcast applied effect
#	broadcast event-player
#	broadcast event-block
#on primary beacon effect apply of haste:
#on application of secondary beacon effect:
#on beacon effect of speed:
#Paper
event "beacon_effect":
	patterns:
		[on] [primary|secondary] beacon effect [of %potioneffecttypes%]
		[on] application of [primary|secondary] beacon effect [of %potioneffecttypes%]
		[on] [primary|secondary] beacon effect apply [of %potioneffecttypes%]

#On Beacon Toggle
#Called when a beacon is activated or deactivated.
#since 2.10
#Examples:
#on beacon toggle:
#on beacon activate:
#on beacon deactivate:
#Paper
event "beacon_toggle":
	patterns:
		[on] beacon toggle
		[on] beacon activat(e|ion)
		[on] beacon deactivat(e|ion)
	event-values: block, location, world

#On Bed Enter
#Called when a player starts sleeping.
#since 1.0
#Examples:
#on bed enter:
event "bed_enter":
	patterns:
		[on] bed enter[ing]
		[on] [player] enter[ing] [a] bed
	event-values: block, player, world

#On Bed Leave
#Called when a player leaves a bed.
#since 1.0
#Examples:
#on player leaving a bed:
event "bed_leave":
	patterns:
		[on] bed leav(e|ing)
		[on] [player] leav(e|ing) [a] bed
	event-values: block, player, world

#On Bell Resonate
#Called when a bell resonates, highlighting nearby raiders.
#since 2.9.0
#Examples:
#on bell resonate:
#	send "<red>Raiders are nearby!" to all players in radius 32 around event-block
#Spigot 1.19.4+
event "bell_resonate":
	patterns:
		[on] bell resonat(e|ing)
	event-values: block, entities, location, world

#On Bell Ring
#Called when a bell is rung.
#since 2.9.0
#Examples:
#on bell ring:
#	send "<gold>Ding-dong!<reset>" to all players in radius 10 of event-block
#Spigot 1.19.4+ or Paper 1.16.5+ (no event-direction)
event "bell_ring":
	patterns:
		[on] bell ring[ing]
	event-values: block, direction, entity, location, world

#On Block Damage
#Called when a player starts to break a block. You can usually just use the leftclick event for this.
#since 1.0
#Examples:
#on block damaging:
#	if block is log:
#		send "You can't break the holy log!"
event "block_damage":
	patterns:
		[on] block damag(ing|e)
	event-values: block, location, player, world

#On Block Drop
#Called when a block broken by a player drops something.
#<ul>
#event-player: The player that broke the block
#past event-block: The block that was broken
#event-block: The block after being broken
#event-items (or drops): The drops of the block
#event-entities: The entities of the dropped items
#</ul>
#If the breaking of the block leads to others being broken, such as torches, they will appearin "event-items" and "event-entities".
#since 2.10
#Examples:
#on block drop:
#	broadcast event-player
#	broadcast past event-block
#	broadcast event-block
#	broadcast event-items
#	broadcast event-entities
#on block drop of oak log:
event "block_drop":
	patterns:
		[on] block drop[ping] [[of] %itemtypes/blockdatas%]
	event-values: block, entities, item stacks, location, player, world, past event-block

#On Block Fertilize
#Called when a player fertilizes blocks.
#since 2.5
#Examples:
#on block fertilize:
#	send "Fertilized %size of fertilized blocks% blocks got fertilized."
#Minecraft 1.13 or newer
event "block_fertilize":
	patterns:
		[on] [block] fertilize
	event-values: block, blocks, location, player, world

#On Block Growth
#Called when a crop grows. Alternative to new form of generic grow event.
#since 2.2-Fixes-V10
#Examples:
#on crop growth:
event "block_growth":
	patterns:
		[on] (plant|crop|block) grow[(th|ing)] [[of] %itemtypes%]
	event-values: block, location, world, past event-block

#On Book Edit
#Called when a player edits a book.
#since 2.2-dev31
#Examples:
#on book edit:
event "book_edit":
	patterns:
		[on] book (edit|change|write)
	event-values: item stack, player, texts, world, past event-item stack, past event-texts

#On Book Sign
#Called when a player signs a book.
#since 2.2-dev31
#Examples:
#on book sign:
event "book_sign":
	patterns:
		[on] book sign[ing]
	event-values: item stack, player, texts, world, past event-item stack, past event-texts

#On Break / Mine
#Called when a block is broken by a player. If you use 'on mine', only events where the broken block dropped something will call the trigger.
#since 1.0 (break), unknown (mine), 2.6 (BlockData support)
#Examples:
#on mine:
#on break of stone:
#on mine of any ore:
#on break of chest[facing=north]:
#on break of potatoes[age=7]:
event "break_mine":
	patterns:
		[on] [block] (break[ing]|min(e|ing)) [[of] %itemtypes/blockdatas%]
	event-values: block, entity, entity, location, player, world, future event-block, past event-block

#On Broadcast
#Called when a message is broadcasted.
#since 2.10
#Examples:
#on broadcast:
#	set broadcast-message to "&c[BROADCAST] %broadcasted message%"
event "broadcast":
	patterns:
		[on] broadcast

#On Bucket Empty
#Called when a player empties a bucket. You can also use the place event with a check for water or lava.
#since 1.0
#Examples:
#on bucket empty:
event "bucket_empty":
	patterns:
		[on] bucket empty[ing]
		[on] [player] empty[ing] [a] bucket
	event-values: block, player, world, past event-block

#On Bucket fill
#Called when a player fills a bucket.
#since 1.0
#Examples:
#on player filling a bucket:
event "bucket_fill":
	patterns:
		[on] bucket fill[ing]
		[on] [player] fill[ing] [a] bucket
	event-values: block, player, world, future event-block

#On Burn
#Called when a block is destroyed by fire.
#since 1.0, 2.6 (BlockData support)
#Examples:
#on burn:
#on burn of wood, fences, or chests:
#on burn of oak_log[axis=y]:
event "burn":
	patterns:
		[on] [block] burn[ing] [[of] %itemtypes/blockdatas%]
	event-values: block, location, world

#On Can Build Check
#Called when a player rightclicks on a block while holding a block or a placeable item. You can either cancel the event to prevent the block from being built, or uncancel it to allow it.
#Please note that the data value of the block to be placed is not available in this event, only its ID.
#since 1.0 (basic), 2.0 ([un]cancellable)
#Examples:
#on block can build check:
#	cancel event
event "can_build_check":
	patterns:
		[on] [block] can build check
	event-values: block, location, player, world, past event-block

#On Chat
#Called whenever a player chats.
#Use chat format to change message format.
#Use chat recipients to edit chat recipients.
#since 1.4.1
#Examples:
#on chat:
#	if player has permission "owner":
#		set chat format to "<red>[player]<light gray>: <light red>[message]"
#	else if player has permission "admin":
#		set chat format to "<light red>[player]<light gray>: <orange>[message]"
#	else: default message format
#		set chat format to "<orange>[player]<light gray>: <white>[message]"
event "chat":
	patterns:
		[on] chat
	event-values: player, world

#On Chunk Generate
#Called after a new chunk was generated.
#since 1.0
#Examples:
#on chunk generate:
event "chunk_generate":
	patterns:
		[on] chunk (generat|populat)(e|ing)
	event-values: chunk, world

#On Chunk Load
#Called when a chunk loads. The chunk might or might not contain mobs when it's loaded.
#since 1.0
#Examples:
#on chunk load:
event "chunk_load":
	patterns:
		[on] chunk load[ing]
	event-values: chunk, world

#On Chunk Unload
#Called when a chunk is unloaded due to not being near any player.
#since 1.0
#Examples:
#on chunk unload:
event "chunk_unload":
	patterns:
		[on] chunk unload[ing]
	event-values: chunk, world

#On Click
#Called when a user clicks on a block, an entity or air with or without an item in their hand.
#Please note that rightclick events with an empty hand while not looking at a block are not sent to the server, so there's no way to detect them.
#Also note that a leftclick on an entity is an attack and thus not covered by the 'click' event, but the 'damage' event.
#since 1.0, 2.10 (blockdata)
#Examples:
#on click:
#on rightclick holding a fishing rod:
#on leftclick on a stone or obsidian:
#on rightclick on a creeper:
#on click with a sword:
#on click on chest[facing=north]:
#on click on campfire[lit=true]:
event "click":
	patterns:
		[on] [(right|left)(| |-)][mouse(| |-)]click[ing] [on %entitydata/itemtype/blockdata%] [(with|using|holding) %itemtype%]
		[on] [(right|left)(| |-)][mouse(| |-)]click[ing] (with|using|holding) %itemtype% on %entitydata/itemtype/blockdata%
	event-values: block, block action, blockface, direction, entity, equipment slot, item stack, location, player, vector, world

#On Combust
#Called when an entity is set on fire, e.g. by fire or lava, a fireball, or by standing in direct sunlight (zombies, skeletons).
#since 1.0
#Examples:
#on combust:
event "combust":
	patterns:
		[on] combust[ing]
	event-values: command sender, entity, location, world

#On Command
#Called when a player enters a command (not necessarily a Skript command) but you can check if command is a skript command, see Is a Skript command condition.
#since 2.0
#Examples:
#on command:
#on command "/stop":
#on command "pm Njol ":
event "command":
	patterns:
		[on] command [%strings%]
	event-values: command sender, player, world

#On Connect
#Called when the player connects to the server. This event is called before the player actually joins the server, so if you want to prevent players from joining you should prefer this event over on join.
#since 2.0
#Examples:
#on connect:
#	player doesn't have permission "VIP"
#	number of players is greater than 15
#	kick the player due to "The last 5 slots are reserved for VIP players."
event "connect":
	patterns:
		[on] [player] connect[ing]
	event-values: player, world

#On Consume
#Called when a player is done eating/drinking something, e.g. an apple, bread, meat, milk or a potion.
#since 2.0
#Examples:
#on consume:
event "consume":
	patterns:
		[on] [player] ((eat|drink)[ing]|consum(e|ing)) [[of] %itemtypes%]
	event-values: item stack, player, world

#On Craft
#Called when a player crafts an item.
#since unknown (before 2.1)
#Examples:
#on craft:
event "craft":
	patterns:
		[on] [player] craft[ing] [[of] %itemtypes%]
	event-values: click type, inventory, inventory action, item stack, player, slot, text, world

#On Creeper Power
#Called when a creeper is struck by lighting and gets powered. Cancel the event to prevent the creeper from being powered.
#since 1.0
#Examples:
#on creeper power:
event "creeper_power":
	patterns:
		[on] creeper power
	event-values: command sender, entity, location, world

#On Damage
#Called when an entity receives damage, e.g. by an attack from another entity, lava, fire, drowning, fall, suffocation, etc.
#since 1.0, 2.7 (by entity)
#Examples:
#on damage:
#on damage of a player:
#on damage of player by zombie:
event "damage":
	patterns:
		[on] damag(e|ing) [of %entitydata%] [by %entitydata%]
	event-values: block, damage cause, projectile

#On Death
#Called when a living entity (including players) dies.
#since 1.0
#Examples:
#on death:
#on death of player:
#on death of a wither or ender dragon:
#	broadcast "A %entity% has been slain in %world%!"
event "death":
	patterns:
		[on] death [of %entitydatas%]
	event-values: damage cause, item stacks, projectile

#On Dispense
#Called when a dispenser dispenses an item.
#since unknown (before 2.1)
#Examples:
#on dispense of iron block:
#	send "that'd be 19.99 please!"
event "dispense":
	patterns:
		[on] dispens(e|ing) [[of] %itemtypes%]
	event-values: block, item stack, location, world

#On Drop
#Called when a player drops an item from their inventory, or an entity drops an item, such as a chicken laying an egg.
#since unknown (before 2.1), 2.7 (entity)
#Examples:
#on drop:
#	if event-item is compass:
#		cancel event
#on entity drop of an egg:
#	if event-entity is a chicken:
#		set item of event-dropped item to a diamond
event "drop":
	patterns:
		[on] [player|entity] drop[ping] [[of] %itemtypes%]
	event-values: command sender, dropped item, entity, item stack, location, player, world

#On Egg Throw
#Called when a player throws an egg and it lands. You can just use the shoot event in most cases. However, this event allows modification of properties like the hatched entity type and the number of entities to hatch.
#since 1.0
#Examples:
#on throw of an egg:
event "egg_throw":
	patterns:
		[on] throw[ing] [of] [an] egg
		[on] [player] egg throw
	event-values: player, projectile, world

#On Elytra Boost
#Called when a player uses a firework to boost their fly speed when flying with an elytra.
#since 2.10
#Examples:
#on elytra boost:
#	if the used firework will be consumed:
#		prevent the used firework from being consume
#Paper
event "elytra_boost":
	patterns:
		[on] elytra boost
	event-values: entity, item stack, item type, player, world

#On Enchant
#Called when a player successfully enchants an item.
# To get the enchanted item, see the enchant item expression
#since 2.5
#Examples:
#on enchant:
#	if the clicked button is 1:  offer 1
#		set the applied enchantments to sharpness 10 and unbreaking 10
event "enchant":
	patterns:
		[on] [item] enchant
	event-values: block, enchantment types, item stack, player

#On Enchant Prepare
#Called when a player puts an item into enchantment table. This event may be called multiple times.
# To get the enchant item, see the enchant item expression
#since 2.5
#Examples:
#on enchant prepare:
#	set enchant offer 1 to sharpness 1
#	set the cost of enchant offer 1 to 10 levels
event "enchant_prepare":
	patterns:
		[on] [item] enchant prepare
	event-values: block, item stack, player

#On Enderman Enrage
#Called when an enderman gets mad because a player looked at them.
#Note: This does not stop enderman from targeting the player as a result of getting damaged.
#since 2.9.0
#Examples:
# Stops endermen from getting angry players with the permission "safeFrom.enderman"
#on enderman enrage:
#	if player has permission "safeFrom.enderman":
#		cancel event
#Paper
event "enderman_enrage":
	patterns:
		[on] enderman (enrage|anger)
	event-values: command sender, entity, location, player, world

#On Enderman/Sheep/Silverfish/Falling Block
#Called when an enderman places or picks up a block, a sheep eats grass, a silverfish boops into/out of a block or a falling block lands and turns into a block respectively.
#event-block represents the old block and event-blockdata represents the new replacement that'll be applied to the block.
#since unknown, 2.5.2 (falling block), 2.8.0 (any entity support)
#Examples:
#on sheep eat:
#	kill event-entity
#	broadcast "A sheep stole some grass!"
#on falling block land:
#	event-entity is a falling dirt
#	cancel event
event "endermansheepsilverfishfalling_block":
	patterns:
		[on] enderman place
		[on] enderman pickup
		[on] sheep eat
		[on] silverfish enter
		[on] silverfish exit
		[on] falling block fall[ing]
		[on] falling block land[ing]
		[on] (entity|%*-entitydatas%) chang(e|ing) block[s]
	event-values: block, block data, command sender, entity, location, world, future event-block data, past event-block

#On Entity Breed
#Called whenever two animals begin to conceive a child. The type can be specified.
#since 2.10
#Examples:
#on breeding of llamas:
#	send "When a %breeding mother% and %breeding father% love each other very much they make %offspring%" to breeder
event "entity_breed":
	patterns:
		[on] [entity] breed[ing] [of %entitytypes%]
	event-values: command sender, entity, item stack, location, world

#On Entity Dismount
#Called when an entity dismounts.
#since 2.2-dev13b
#Examples:
#on dismount:
#	kill event-entity
event "entity_dismount":
	patterns:
		[on] dismount[ing]
	event-values: command sender, entity, location, world

#On Entity Jump
#Called when an entity jumps.
#since 2.7
#Examples:
#on entity jump:
#	if entity is a wither skeleton:
#		cancel event
#Paper 1.15.2+
event "entity_jump":
	patterns:
		[on] entity jump[ing]
	event-values: command sender, entity, location, world

#On Entity Mount
#Called when entity starts riding another.
#since 2.2-dev13b
#Examples:
#on mount:
#	cancel event
event "entity_mount":
	patterns:
		[on] mount[ing]
	event-values: command sender, entity, location, world

#On Entity Portal
#Called when an entity uses a nether or end portal. Cancel the event to prevent the entity from teleporting.
#since 2.5.3
#Examples:
#on entity portal:
#	broadcast "A %type of event-entity% has entered a portal!
event "entity_portal":
	patterns:
		[on] entity portal
	event-values: command sender, entity, location, world, past event-location

#On Entity Potion Effect
#Called when an entity's potion effect is modified.
#This modification can include adding, removing or changing their potion effect.
#since 2.10
#Examples:
#on entity potion effect modification:
#		broadcast "A potion effect was added to %event-entity%!" 
#on entity potion effect modification of night vision:
event "entity_potion_effect":
	patterns:
		[on] entity potion effect [modif[y|ication]] [[of] %potioneffecttypes%] [due to %entitypotioncause%]
	event-values: command sender, entity, entity potion cause, location, potion effect, potion effect type, world, past event-potion effect

#On Entity Shoot Bow
#Called when an entity shoots a bow.
#event-entity refers to the shot projectile/entity.
#
#since 2.11
#Examples:
#on player shoot bow:
#	chance of 30%:
#		damage event-slot by 10
#		send "Your bow has taken increased damage!" to shooter
#
#on stray shooting bow:
#	set {_e} to event-entity
#	spawn a cow at {_e}:
#		set velocity of entity to velocity of {_e}
#	set event-entity to last spawned entity
#
event "entity_shoot_bow":
	patterns:
		[on] %entitydatas% shoot[ing] (bow|projectile)
	event-values: command sender, entity, item stack, item type, location, projectile, slot, world

#On Entity Transform
#Called when an entity is about to be replaced by another entity.
#Examples when it's called include; when a zombie gets cured and a villager spawns, an entity drowns in water like a zombie that turns to a drown, an entity that gets frozen in powder snow, a mooshroom that when sheared, spawns a new cow.
#since 2.8.0
#Examples:
#on a zombie transforming due to curing:
#on mooshroom transforming:
#on zombie, skeleton or slime transform:
event "entity_transform":
	patterns:
		[on] (entit(y|ies)|%*-entitydatas%) transform[ing] [due to %transformreasons%]
	event-values: command sender, entities, entity, location, transform reason, world

#On Experience Change
#Called when a player's experience changes.
#since 2.7
#Examples:
#on level progress change:
#	set {_xp} to event-experience
#	broadcast "%{_xp}%"
event "experience_change":
	patterns:
		[on] [player] (level progress|[e]xp|experience) (change|update|increase|decrease)
	event-values: experience point, player, world

#On Experience Cooldown Change
#Called when a player's experience cooldown changes.
#Experience cooldown is how long until a player can pick up another orb of experience.
#since 2.10
#Examples:
#on player experience cooldown change:
#	broadcast event-player
#	broadcast event-timespan
#	broadcast past event-timespan
#	broadcast xp cooldown change reason
event "experience_cooldown_change":
	patterns:
		[on] player (experience|[e]xp) cooldown change
	event-values: experience cooldown change reason, player, time span, world, past event-time span

#On Experience Spawn
#Called whenever experience is about to spawn.
#Please note that this event will not fire for xp orbs spawned by plugins (including Skript) with Bukkit.
#since 2.0
#Examples:
#on xp spawn:
#	world is "minigame_world"
#	cancel event
event "experience_spawn":
	patterns:
		[on] [e]xp[erience] [orb] spawn
		[on] spawn of [a[n]] [e]xp[erience] [orb]
	event-values: experience point, location

#On Explode
#Called when an entity (a primed TNT or a creeper) explodes.
#since 1.0
#Examples:
#on explosion:
event "explode":
	patterns:
		[on] explo(d(e|ing)|sion)
	event-values: command sender, entity, location, world

#On Explosion Prime
#Called when an explosive is primed, i.e. an entity will explode shortly. Creepers can abort the explosion if the player gets too far away, while TNT will explode for sure after a short time.
#since 1.0
#Examples:
#on explosion prime:
event "explosion_prime":
	patterns:
		[on] explosion prime
	event-values: command sender, entity, location, world

#On Fade
#Called when a block 'fades away', e.g. ice or snow melts.
#since 1.0, 2.6 (BlockData support)
#Examples:
#on fade of snow or ice:
#on fade of snow[layers=2]
event "fade":
	patterns:
		[on] [block] fad(e|ing) [[of] %itemtypes/blockdatas%]
	event-values: block, location, world, future event-block, past event-block

#On Firework Explode
#Called when a firework explodes.
#since 2.4
#Examples:
#on firework explode:
#	if event-colors contains red:
#on firework exploding colored red, light green and black:
#on firework explosion colored rgb 0, 255, 0:
#	broadcast "A firework colored %colors% was exploded at %location%!"
event "firework_explode":
	patterns:
		[on] [a] firework explo(d(e|ing)|sion) [colo[u]red %colors%]
	event-values: colors, command sender, entity, firework effect, location, projectile, world

#On First Join
#Called when a player joins the server for the first time.
#since 1.3.7
#Examples:
#on first join:
#	broadcast "Welcome %player% to the server!"
event "first_join":
	patterns:
		[on] first (join|login)
	event-values: player, world

#On Fishing
#Called when a player triggers a fishing event.
#An entity hooked event is triggered when an entity gets caught by a fishing rod.
#A fish escape event is called when the player fails to click on time, and the fish escapes.
#A fish approaching event is when the bobber is waiting to be hooked, and a fish is approaching.
#A fishing state change event is triggered whenever the fishing state changes.
#since 2.10, 2.11 (state change)
#Examples:
#on fishing line cast:
#	send "You caught a fish!" to player
#on entity caught:
#	push event-entity vector from entity to player
#on fishing state change:
#	if event-fishing state is fish caught:
#		broadcast "A fish has been caught!"
#Paper (bobber lured)
event "fishing":
	patterns:
		[on] [fishing] (line|rod) cast
		[on] fish (caught|catch)
		[on] entity (hook[ed]|caught|catch)
		[on] (bobber|hook) (in|hit) ground
		[on] fish (escape|get away)
		[on] [fishing] (rod|line) reel in
		[on] fish bit(e|ing)
		[on] (fish approach[ing]|(bobber|hook) lure[d])
		[on] fishing state change[d]
	event-values: entity, fishing state, player, projectile, world

#On Flight Toggle
#Called when a players stops/starts flying.
#since 2.2-dev36
#Examples:
#on flight toggle:
#	if {game::%player%::playing} exists:
#		cancel event
event "flight_toggle":
	patterns:
		[on] [player] flight toggl(e|ing)
		[on] [player] toggl(e|ing) flight
	event-values: player, world

#On Flow
#Called when a blocks flows or teleports to another block. This not only applies to water and lava, but teleporting dragon eggs as well.
#since 1.0
#Examples:
#on block flow:
#	if event-block is water:
#		broadcast "Build more dams! It's starting to get wet in here"
event "flow":
	patterns:
		[on] [block] flow[ing]
		[on] block mov(e|ing)
	event-values: block, location, world, future event-block

#On Form
#Called when a block is created, but not by a player, e.g. snow forms due to snowfall, water freezes in cold biomes. This isn't called when block spreads (mushroom growth, water physics etc.), as it has its own event (see spread event).
#since 1.0, 2.6 (BlockData support)
#Examples:
#on form of snow:
#on form of a mushroom:
event "form":
	patterns:
		[on] [block] form[ing] [[of] %itemtypes/blockdatas%]
	event-values: block, location, world, past event-block

#On Fuel Burn
#Called when a furnace burns an item from its fuel slot.
#since 1.0, 2.10 (specific item)
#Examples:
#on fuel burning:
#	broadcast fuel burned
#	if burned fuel is coal:
#		add 20 seconds to burn time
event "fuel_burn":
	patterns:
		[on] [furnace] fuel burn[ing] [of %itemtypes%]
	event-values: block, location, world

#On Furnace Item Extract
#Called when a player takes any item out of the furnace.
#since 2.10
#Examples:
#on furnace extract:
#	if event-items is an iron ingot:
#		remove event-items from event-player's inventory
event "furnace_item_extract":
	patterns:
		[on] furnace [item] extract[ion] [of %itemtypes%]
	event-values: block, item stacks, location, player, world

#On Gamemode Change
#Called when a player's gamemode changes.
#since 1.0
#Examples:
#on gamemode change:
#on gamemode change to adventure:
event "gamemode_change":
	patterns:
		[on] game[ ]mode change [to %gamemode%]
	event-values: player, world

#On Gliding State Change
#Called when an entity toggles glider on or off, or when server toggles gliding state of an entity forcibly.
#since 2.2-dev21
#Examples:
#on toggling gliding:
#	cancel the event  bad idea, but you CAN do it!
event "gliding_state_change":
	patterns:
		[on] (gliding state change|toggl(e|ing) gliding)
	event-values: command sender, entity, location, world

#On Grow
#Called when a tree, giant mushroom or plant grows to next stage.
#"of" matches any grow event, "from" matches only the old state, "into" matches only the new state,and "from into" requires matching both the old and new states.
#Using "and" lists in this event is equivalent to using "or" lists. The event will trigger if any one of the elements is what grew.
#since 1.0, 2.2-dev20 (plants), 2.8.0 (from, into, blockdata)
#Examples:
#on grow:
#on grow of tree:
#on grow of wheat[age=7]:
#on grow from a sapling:
#on grow into tree:
#on grow from a sapling into tree:
#on grow of wheat, carrots, or potatoes:
#on grow into tree, giant mushroom, cactus:
#on grow from wheat[age=0] to wheat[age=1] or wheat[age=2]:
event "grow":
	patterns:
		[on] grow[th] [of (%structuretypes%|%itemtypes/blockdatas%)]
		[on] grow[th] from %itemtypes/blockdatas%
		[on] grow[th] [in]to (%structuretypes%|%itemtypes/blockdatas%)
		[on] grow[th] from %itemtypes/blockdatas% [in]to (%structuretypes%|%itemtypes/blockdatas%)
	event-values: block, blocks, location, world, future event-block, future event-blocks, past event-block

#On Hand Item Swap
#Called whenever a player swaps the items in their main- and offhand slots.
#Works also when one or both of the slots are empty.
#The event is called before the items are actually swapped,
#so when you use the player's tool or player's offtool expressions,
#they will return the values before the swap -
#this enables you to cancel the event before anything happens.
#since 2.3
#Examples:
#on swap hand items:
#	event-player's tool is a diamond sword
#	cancel event
event "hand_item_swap":
	patterns:
		[on] swap[ping of] [(hand|held)] item[s]
	event-values: player, world

#On Heal
#Called when an entity is healed, e.g. by eating (players), being fed (pets), or by the effect of a potion of healing (overworld mobs) or harm (nether mobs).
#since 1.0, 2.9.0 (by reason)
#Examples:
#on heal:
#on player healing from a regeneration potion:
#on healing of a zombie, cow or a wither:
#	heal reason is healing potion
#	cancel event
event "heal":
	patterns:
		[on] heal[ing] [of %entitydatas%] [(from|due to|by) %healreasons%]
		[on] %entitydatas% heal[ing] [(from|due to|by) %healreasons%]
	event-values: command sender, entity, heal reason, location, world

#On Horse Jump
#Called when a horse jumps.
#since 2.5.1
#Examples:
#on horse jump:
#	push event-entity upwards at speed 2
event "horse_jump":
	patterns:
		[on] horse jump
	event-values: command sender, entity, location, world

#On Hunger Meter Change
#Called when the hunger bar of a player changes, i.e. either increases by eating or decreases over time.
#since 1.4.4
#Examples:
#on food bar change:
event "hunger_meter_change":
	patterns:
		[on] (food|hunger) (level|met(er|re)|bar) chang(e|ing)
	event-values: command sender, entity, location, world

#On Ignition
#Called when a block starts burning, i.e. a fire block is placed next to it and this block is flammable.
#The burn event will be called when the block is about do be destroyed by the fire.
#since 1.0
#Examples:
#on block ignite:
#	if event-block is a ladder:
#		cancel event
event "ignition":
	patterns:
		[on] [block] ignit(e|ion)
	event-values: block, location, player, world

#On Inventory Click
#Called when clicking on inventory slot.
#since 2.2-Fixes-V10
#Examples:
#on inventory click:
#	if event-item is stone:
#		give player 1 stone
#		remove 20$ from player's balance
event "inventory_click":
	patterns:
		[on] [player] inventory(-| )click[ing] [[at] %itemtypes%]
	event-values: click type, inventory, inventory action, item stack, player, slot, text, world

#On Inventory Close
#Called when player's currently viewed inventory is closed.
#since 2.2-dev21
#Examples:
#on inventory close:
#	if player's location is {location}:
#		send "You exited the shop!"
event "inventory_close":
	patterns:
		[on] inventory clos(ing|e[d])
	event-values: inventory, inventory close reason, player

#On Inventory Drag
#Called when a player drags an item in their cursor across the inventory.
#since 2.7
#Examples:
#on inventory drag:
#	if player's current inventory is {_gui}:
#		send "You can't drag your items here!" to player
#		cancel event
event "inventory_drag":
	patterns:
		[on] inventory drag[ging]
	event-values: click type, inventories, item stack, item stacks, player, slots, world, past event-item stack

#On Inventory Item Move
#Called when an entity or block (e.g. hopper) tries to move items directly from one inventory to another.
#When this event is called, the initiator may have already removed the item from the source inventory and is ready to move it into the destination inventory.
#If this event is cancelled, the items will be returned to the source inventory.
#since 2.8.0
#Examples:
#on inventory item move:
#	broadcast "%holder of past event-inventory% is transporting %event-item% to %holder of event-inventory%!"
event "inventory_item_move":
	patterns:
		[on] inventory item (move|transport)
		[on] inventory (mov(e|ing)|transport[ing]) [an] item
	event-values: block, inventory, item stack, future event-block, future event-inventory

#On Inventory Open
#Called when an inventory is opened for player.
#since 2.2-dev21
#Examples:
#on inventory open:
#	close player's inventory
event "inventory_open":
	patterns:
		[on] inventory open[ed]
	event-values: inventory, player

#On Inventory Pickup
#Called when an inventory (a hopper, a hopper minecart, etc.) picks up an item
#since 2.5.1
#Examples:
#on inventory pickup:
event "inventory_pickup":
	patterns:
		[on] inventory pick[ ]up
	event-values: dropped item, inventory, item stack

#On Inventory Slot Change
#Called when a slot in a player's inventory is changed.
#Warning: setting the event-slot to a new item can result in an infinite loop.
#since 2.7
#Examples:
#on inventory slot change:
#	if event-item is a diamond:
#		send "You obtained a diamond!" to player
#Paper 1.19.2+
event "inventory_slot_change":
	patterns:
		[on] [player] inventory slot chang(e|ing)
	event-values: item stack, player, slot, world, past event-item stack

#On Item Break
#Called when a player breaks their tool because its damage reached the maximum value.
#This event cannot be cancelled.
#since 2.1.1
#Examples:
#on tool break:
event "item_break":
	patterns:
		[on] [player] tool break[ing]
		[on] [player] break[ing] (a|the|) tool
	event-values: item stack, player, world

#On Item Damage
#Called when an item is damaged. Most tools are damaged by using them; armor is damaged when the wearer takes damage.
#since 2.5
#Examples:
#on item damage:
#	cancel event
event "item_damage":
	patterns:
		[on] item damag(e|ing)
	event-values: item stack, player, world

#On Item Despawn
#Called when an item is about to be despawned from the world, usually 5 minutes after it was dropped.
#since 2.2-dev35
#Examples:
#on item despawn of diamond:
#	send "Not my precious!"
#	cancel event
event "item_despawn":
	patterns:
		[on] (item[ ][stack]|[item] %itemtypes%) despawn[ing]
		[on] [item[ ][stack]] despawn[ing] [[of] %itemtypes%]
	event-values: command sender, dropped item, entity, item stack, location, world

#On Item Mend
#Called when a player has an item repaired via the Mending enchantment.
#since 2.5.1
#Examples:
#on item mend:
#	chance of 50%:
#		cancel the event
#		send "Oops! Mending failed!" to player
#Minecraft 1.13 or newer
event "item_mend":
	patterns:
		[on] item mend[ing]
	event-values: entity, item stack, player, world

#On Item Merge
#Called when dropped items merge into a single stack. event-entity will be the entity which is trying to merge, and future event-entity will be the entity which is being merged into.
#since 2.2-dev35
#Examples:
#on item merge of gold blocks:
#	cancel event
event "item_merge":
	patterns:
		[on] (item[ ][stack]|[item] %itemtypes%) merg(e|ing)
		[on] item[ ][stack] merg(e|ing) [[of] %itemtypes%]
	event-values: command sender, dropped item, entity, item stack, location, world, future event-dropped item

#On Item Spawn
#Called whenever an item stack is spawned in a world, e.g. as drop of a block or mob, a player throwing items out of their inventory, or a dispenser dispensing an item (not shooting it).
#since unknown (before 2.1)
#Examples:
#on item spawn of iron sword:
#	broadcast "Someone dropped an iron sword!"
event "item_spawn":
	patterns:
		[on] item spawn[ing] [[of] %itemtypes%]
	event-values: command sender, entity, item stack, location, world

#On Join
#Called when the player joins the server. The player is already in a world when this event is called, so if you want to prevent players from joining you should prefer on connect over this event.
#since 1.0
#Examples:
#on join:
#	message "Welcome on our awesome server!"
#	broadcast "%player% just joined the server!"
event "join":
	patterns:
		[on] [player] (login|logging in|join[ing])
	event-values: player, world

#On Jump
#Called whenever a player jumps.
#This event requires PaperSpigot.
#since 2.3
#Examples:
#on jump:
#	event-player does not have permission "jump"
#	cancel event
event "jump":
	patterns:
		[on] [player] jump[ing]
	event-values: player, world

#On Kick
#Called when a player is kicked from the server. You can change the kick message or cancel the event entirely.
#since 1.0
#Examples:
#on kick:
event "kick":
	patterns:
		[on] [player] (kick|being kicked)
	event-values: player, world

#On Language Change
#Called after a player changed their language in the game settings. You can use the language expression to get the current language of the player.
#This event requires Minecraft 1.12+.
#since 2.3
#Examples:
#on language change:
#	if player's language starts with "en":
#		send "Hello!"
event "language_change":
	patterns:
		[on] [player] (language|locale) chang(e|ing)
		[on] [player] chang(e|ing) (language|locale)
	event-values: player, world

#On Leash / Unleash
#Called when an entity is leashed or unleashed. Cancelling these events will prevent the leashing or unleashing from occurring.
#since 2.10
#Examples:
#on player leash of a sheep:
#	send "Baaaaa--" to player
#on player leash:
#	send "<%event-entity%> Let me go!" to player
#on unleash:
#	broadcast "<%event-entity%> I'm free"
#on player unleash:
#	send "<%event-entity%> Thanks for freeing me!" to player
event "leash_unleash":
	patterns:
		[on] [player] [un]leash[ing] [of %entitydatas%]
	event-values: command sender, entity, location, player, text, unleash reason, world, future event-entity

#On Leaves Decay
#Called when a leaf block decays due to not being connected to a tree.
#since 1.0
#Examples:
#on leaves decay:
event "leaves_decay":
	patterns:
		[on] leaves decay[ing]
	event-values: block, location, world

#On Level Change
#Called when a player's level changes, e.g. by gathering experience or by enchanting something.
#since 1.0, 2.4 (level up/down)
#Examples:
#on level change:
event "level_change":
	patterns:
		[on] [player] level (change|up|down)
	event-values: player, world

#On Lightning Strike
#Called when lightning strikes.
#since 1.0
#Examples:
#on lightning:
#	spawn a zombie at location of event-entity
event "lightning_strike":
	patterns:
		[on] lightning [strike]
	event-values: entity, world

#On Loot Generate
#Called when a loot table of an inventory is generated in the world.
#For example, when opening a shipwreck chest.
#since 2.7
#Examples:
#on loot generate:
#	chance of 10%
#	add 64 diamonds to the loot
#	send "You hit the jackpot at %event-location%!"
#MC 1.16+
event "loot_generate":
	patterns:
		[on] loot generat(e|ing)
	event-values: entity, location, loot context, loot table, world

#On Love Mode Enter
#Called whenever an entity enters a state of being in love.
#since 2.10
#Examples:
#on love mode enter:
#	cancel event  No one is allowed love here
event "love_mode_enter":
	patterns:
		[on] [entity] enter[s] love mode
		[on] [entity] love mode [enter]
	event-values: command sender, entity, living entity, living entity, location, world

#On Move / Rotate
#Called when a player or entity moves or rotates their head.
#NOTE: Move event will only be called when the entity/player moves position, keyword 'turn around' is for orientation (ie: looking around), and the combined syntax listens for both.
#NOTE: These events can be performance heavy as they are called quite often.
#since 2.6, 2.8.0 (turn around)
#Examples:
#on player move:
#	if player does not have permission "player.can.move":
#		cancel event
#on skeleton move:
#	if event-entity is not in world "world":
#		kill event-entity
#on player turning around:
#	send action bar "You are currently turning your head around!" to player
#Paper 1.16.5+ (entity move)
event "move_rotate":
	patterns:
		[on] %entitydata% (move|walk|step|(turn[ing] around|rotate))
		[on] %entitydata% (move|walk|step) or (turn[ing] around|rotate)
		[on] %entitydata% (turn[ing] around|rotate) or (move|walk|step)
	event-values: block, chunk, command sender, entity, location, player, teleport cause, world, future event-location, past event-chunk, past event-location

#On Move On
#Called when a player moves onto a certain type of block.
#Please note that using this event can cause lag if there are many players online.
#since 2.0
#Examples:
#on walking on dirt or grass:
#on stepping on stone:
event "move_on":
	patterns:
		[on] (step|walk)[ing] (on|over) %*itemtypes%
	event-values: block, chunk, location, player, teleport cause, world, past event-chunk, past event-location

#On Physics
#Called when a physics check is done on a block. By cancelling this event you can prevent some things from happening, e.g. sand falling, dirt turning into grass, torches dropping if their supporting block is destroyed, etc.Please note that using this event might cause quite some lag since it gets called extremely often.
#since 1.4.6
#Examples:
# prevents sand from falling
#on block physics:
#	block is sand
#	cancel event
event "physics":
	patterns:
		[on] [block] physics
	event-values: block, location, world

#On Pick Up
#Called when a player/entity picks up an item. Please note that the item is still on the ground when this event is called.
#since unknown (before 2.1), 2.5 (entity)
#Examples:
#on pick up:
#on entity pickup of wheat:
event "pick_up":
	patterns:
		[on] [(player|entity)] (pick[ ]up|picking up) [[of] %itemtypes%]
	event-values: command sender, dropped item, entity, item stack, item type, location, player, projectile, world

#On Pig Zap
#Called when a pig is stroke by lightning and transformed into a zombie pigman. Cancel the event to prevent the transformation.
#since 1.0
#Examples:
#on pig zap:
event "pig_zap":
	patterns:
		[on] pig[ ]zap
	event-values: command sender, entities, entity, location, transform reason, world

#On Piglin Barter
#Called when a piglin finishes bartering. A piglin may start bartering after picking up an item on its bartering list.
#Cancelling will prevent piglins from dropping items, but will still make them pick up the input.
#since 2.10
#Examples:
#on piglin barter:
#	if barter drops contain diamond:
#		send "Diamonds belong in the money pit!" to player
#		cancel event
#Minecraft 1.16+
event "piglin_barter":
	patterns:
		[on] piglin (barter[ing]|trad(e|ing))
	event-values: command sender, entity, location, world

#On Piston Extend
#Called when a piston is about to extend.
#since 1.0
#Examples:
#on piston extend:
#	broadcast "A piston is extending!"
event "piston_extend":
	patterns:
		[on] piston extend[ing]
	event-values: block, location, world

#On Piston Retract
#Called when a piston is about to retract.
#since 1.0
#Examples:
#on piston retract:
#	broadcast "A piston is retracting!"
event "piston_retract":
	patterns:
		[on] piston retract[ing]
	event-values: block, location, world

#On Place
#Called when a player places a block.
#since 1.0, 2.6 (BlockData support)
#Examples:
#on place:
#on place of a furnace, workbench or chest:
#on break of chest[type=right] or chest[type=left]
event "place":
	patterns:
		[on] [block] (plac(e|ing)|build[ing]) [[of] %itemtypes/blockdatas%]
	event-values: block, blockface, direction, entity, item stack, location, player, world, future event-item stack, past event-block, past event-item stack

#On Player Chunk Enter
#Called when a player enters a chunk. Note that this event is based on 'player move' event, and may be called frequent internally.
#since 2.7
#Examples:
#on player enters a chunk:
#	send "You entered a chunk: %past event-chunk% -> %event-chunk%!" to player
event "player_chunk_enter":
	patterns:
		[on] [player] (enter[s] [a] chunk|chunk enter[ing])
	event-values: block, chunk, location, player, teleport cause, world, past event-chunk, past event-location

#On Player Deep Sleep
#Called when a player has slept long enough to count as passing the night/storm.
#Cancelling this event will prevent the player from being counted as deeply sleeping unless they exit and re-enter the bed.
#since 2.7
#Examples:
#on player deep sleeping:
#	send "Zzzz.." to player
#Paper 1.16+
event "player_deep_sleep":
	patterns:
		[on] [player] deep sleep[ing]
	event-values: player, world

#On Player Input
#Called when a player sends an updated input to the server.
#Note: The input keys event value is the set of keys the player is currently pressing, not the keys that were pressed or released.
#since 2.10
#Examples:
#on any input key press:
#	send "You are pressing: %event-inputkeys%" to player
#Minecraft 1.21.3+
event "player_input":
	patterns:
		[on] [player] (toggle|toggling|press[ing]|release|releasing) of (%inputkeys%|(an|any) input key)
		[on] ([player] %inputkeys%|[an|any [player]] input key) (toggle|toggling|press[ing]|release|releasing)
	event-values: input keys, player, world, past event-input keys

#On Player Pickup Arrow
#Called when a player picks up an arrow from the ground.
#since 2.8.0
#Examples:
#on arrow pickup:
#	cancel the event
#	teleport event-projectile to block 5 above event-projectile
#Minecraft 1.14+ (event-projectile)
event "player_pickup_arrow":
	patterns:
		[on] [player] (pick[ing| ]up [an] arrow|arrow pick[ing| ]up)
	event-values: dropped item, entity, item stack, player, projectile, world

#On Player Trade
#Called when a player has traded with a villager.
#since 2.7
#Examples:
#on player trade:
#	chance of 50%:
#		cancel event
#		send "The trade was somehow denied!" to player
#Paper 1.16.5+
event "player_trade":
	patterns:
		[on] player trad(e|ing)
	event-values: entity, living entity, merchant recipe, player, world

#On Player World Change
#Called when a player enters a world. Does not work with other entities!
#since 2.2-dev28
#Examples:
#on player world change:
#	world is "city"
#	send "Welcome to the City!"
event "player_world_change":
	patterns:
		[on] [player] world chang(ing|e[d])
	event-values: player, world, past event-world

#On Portal
#Called when a player uses a nether or end portal. Cancel the event to prevent the player from teleporting.
#since 1.0
#Examples:
#on player portal:
event "portal":
	patterns:
		[on] [player] portal
	event-values: block, chunk, location, player, teleport cause, world, past event-chunk, past event-location

#On Portal Create
#Called when a portal is created, either by a player or mob lighting an obsidian frame on fire, or by a nether portal creating its teleportation target in the nether/overworld.
#In Minecraft 1.14+, you can use the player in this event.
#Please note that there may not always be a player (or other entity) in this event.
#since 1.0, 2.5.3 (event-entity support)
#Examples:
#on portal create:
#Minecraft 1.14+ (event-entity support)
event "portal_create":
	patterns:
		[on] portal creat(e|ion)
	event-values: blocks, entity, world

#On Portal Enter
#Called when an entity enters a nether portal or an end portal. Please note that this event will be fired many times for a nether portal.
#since 1.0
#Examples:
#on portal enter:
event "portal_enter":
	patterns:
		[on] portal enter[ing]
		[on] entering [a] portal
	event-values: command sender, entity, location, world

#On Prepare Craft
#Called just before displaying crafting result to player. Note that setting the result item might or might not work due to Bukkit bugs.
#since 2.2-Fixes-V10
#Examples:
#on preparing craft of torch:
event "prepare_craft":
	patterns:
		[on] [player] (preparing|beginning) craft[ing] [[of] %itemtypes%]
	event-values: inventory, item stack, player, slot, text

#On Pressure Plate / Trip
#Called when a player steps on a pressure plate or tripwire respectively.
#since 1.0 (pressure plate), 1.4.4 (tripwire)
#Examples:
#on step on pressure plate:
event "pressure_plate_trip":
	patterns:
		[on] [step[ping] on] [a] [pressure] plate
		[on] (trip|[step[ping] on] [a] tripwire)
	event-values: block, block action, blockface, direction, equipment slot, item stack, player, vector, world

#On Projectile Collide
#Called when a projectile collides with an entity.
#since 2.5
#Examples:
#on projectile collide:
#	teleport shooter of event-projectile to event-entity
#Paper
event "projectile_collide":
	patterns:
		[on] projectile collide
	event-values: command sender, entity, location, projectile, world

#On Projectile Hit
#Called when a projectile hits an entity or a block.
#since 1.0
#Examples:
#on projectile hit:
#	if victim's health <= 3:
#		delete event-projectile
event "projectile_hit":
	patterns:
		[on] projectile hit
	event-values: block, projectile

#On Quit
#Called when a player leaves the server.
#since 1.0 (simple disconnection)
#Examples:
#on quit:
#on disconnect:
event "quit":
	patterns:
		[on] (quit[ting]|disconnect[ing]|log[ ]out|logging out|leav(e|ing))
	event-values: player, quit reason, world

#On Ready Arrow
#Called when a player is firing a bow and the server is choosing an arrow to use.
#Cancelling this event will skip the current arrow item and fire a new event for the next arrow item.
#The arrow and bow in the event can be accessed with the Readied Arrow/Bow expression.
#since 2.8.0
#Examples:
#on player ready arrow:
#	selected bow's name is "Spectral Bow"
#	if selected arrow is not a spectral arrow:
#		cancel event
#Paper
event "ready_arrow":
	patterns:
		[on] [player] ((ready|choose|draw|load) arrow|arrow (choose|draw|load))
	event-values: player, world

#On Redstone
#Called when the redstone current of a block changes. This event is of not much use yet.
#since 1.0
#Examples:
#on redstone change:
#	send "someone is using redstone" to console
event "redstone":
	patterns:
		[on] redstone [current] [chang(e|ing)]
	event-values: block, location, world

#On Resource Pack Request Response
#Called when a player takes action on a resource pack request sent via the 
#send resource pack effect. 
#The resource pack condition can be used 
#to check the resource pack state.
#This event will be triggered once when the player accepts or declines the resource pack request, 
#and once when the resource pack is successfully installed or failed to download.
#since 2.4
#Examples:
#on resource pack request response:
#	if the resource pack was declined or failed to download:
#on resource pack deny:
#	kick the player due to "You have to install the resource pack to play in this server!"
event "resource_pack_request_response":
	patterns:
		[on] resource pack [request] response
		[on] resource pack [request] %resourcepackstates%
	event-values: player, world

#On Respawn
#Called when a player respawns. You should prefer this event over the death event as the player is technically alive when this event is called.
#since 1.0
#Examples:
#on respawn:
event "respawn":
	patterns:
		[on] [player] respawn[ing]
	event-values: player, world

#On Resurrect Attempt
#Called when an entity dies, always. If they are not holding a totem, this is cancelled - you can, however, uncancel it.
#since 2.2-dev28
#Examples:
#on resurrect attempt:
#	entity is player
#	entity has permission "admin.undying"
#	uncancel the event
event "resurrect_attempt":
	patterns:
		[on] [entity] resurrect[ion] [attempt]
	event-values: command sender, entity, location, slot, world

#On Riptide
#Called when the player activates the riptide enchantment, using their trident to propel them through the air.
#Note: the riptide action is performed client side, so manipulating the player in this event may have undesired effects.
#since 2.5
#Examples:
#on riptide:
#	send "You are riptiding!"
event "riptide":
	patterns:
		[on] [use of] riptide [enchant[ment]]
	event-values: item stack, player, world

#On Script Load/Unload
#Called directly after the trigger is loaded, or directly before the whole script is unloaded.
#The keyword 'async' indicates the trigger can be ran asynchronously, 
#since 2.0
#Examples:
#on load:
#	set {running::%script%} to true
#on unload:
#	set {running::%script%} to false
event "script_loadunload":
	patterns:
		[on] [async] [script] (load|init|enable)
		[on] [async] [script] (unload|stop|disable)
	event-values: command sender

#On Send Command List
#Called when the server sends a list of commands to the player. This usually happens on join. The sent commands can be modified via the sent commands expression.
#Modifications will affect what commands show up for the player to tab complete. They will not affect what commands the player can actually run.
#Adding new commands to the list is illegal behavior and will be ignored.
#since 2.8.0
#Examples:
#on send command list:
#	set command list to command list where [input does not contain ":"]
#	remove "help" from command list
event "send_command_list":
	patterns:
		[on] send[ing] [of [the]] [server] command[s] list
		[on] [server] command list send
	event-values: player, world

#On Server List Ping
#Called when a server list ping is coming in, generally when a Minecraft client pings the server to show its information in the server list.
#The IP expression can be used to get the IP adress of the pinger.
#This event can be cancelled on PaperSpigot 1.12.2+ only and this means the player will see the server as offline (but still can join).
#Also you can use MOTD, Max Players, Online Players Count, Protocol Version, Version String, Hover List and Server Icon expressions, and Player Info Visibility and Hide Player from Server List effects to modify the server list.
#since 2.3
#Examples:
#on server list ping:
#	set the motd to "Welcome %{player-by-IP::%ip%}%! Join now!" if {player-by-IP::%ip%} is set, else "Join now!"
#	set the fake max players count to (online players count + 1)
#	set the shown icon to a random server icon out of {server-icons::*}
event "server_list_ping":
	patterns:
		[on] server [list] ping

#On Server Start/Stop
#Called when the server starts or stops (actually, when Skript starts or stops, so a /reload will trigger these events as well).
#since 2.0
#Examples:
#on skript start:
#on server stop:
event "server_startstop":
	patterns:
		[on] (server|skript) (start|load|enable)
		[on] (server|skript) (stop|unload|disable)
	event-values: command sender

#On Sheep Regrow Wool
#Called when sheep regrows its sheared wool back.
#since 2.2-dev21
#Examples:
#on sheep grow wool:
#	cancel event
event "sheep_regrow_wool":
	patterns:
		[on] sheep [re]grow[ing] wool
	event-values: command sender, entity, location, world

#On Shoot
#Called whenever a projectile is shot. Use the shooter expression to get who shot the projectile.
#since 1.0
#Examples:
#on shoot:
#	if projectile is an arrow:
#		send "you shot an arrow!" to shooter
event "shoot":
	patterns:
		[on] [projectile] shoot
	event-values: projectile

#On Sign Change
#As signs are placed empty, this event is called when a player is done editing a sign.
#since 1.0
#Examples:
#on sign change:
#	line 2 is empty
#	set line 1 to "<red>%line 1%"
event "sign_change":
	patterns:
		[on] sign (chang[e]|edit)[ing]
		[on] [player] (chang[e]|edit)[ing] [a] sign
	event-values: block, location, player, texts, world

#On Slime Split
#Called when a slime splits. Usually this happens when a big slime dies.
#since 2.2-dev26
#Examples:
#on slime split:
event "slime_split":
	patterns:
		[on] slime split[ting]
	event-values: command sender, entity, location, world

#On Smelt
#Called when a furnace smelts an item in its input slot.
#since 1.0, 2.10 (specific item)
#Examples:
#on smelt:
#	clear the smelted item
#on smelt of raw iron:
#	broadcast smelted item
#	set the smelted item to iron block
event "smelt":
	patterns:
		[on] [furnace] [ore] smelt[ed|ing] [of %itemtypes%]
		[on] [furnace] smelt[ed|ing] of ore
	event-values: block, location, world

#On Sneak Toggle
#Called when a player starts or stops sneaking. Use is sneaking to get whether the player was sneaking before the event was called.
#since 1.0
#Examples:
# make players that stop sneaking jump
#on sneak toggle:
#	player is sneaking
#	push the player upwards at speed 0.5
event "sneak_toggle":
	patterns:
		[on] [player] toggl(e|ing) sneak
		[on] [player] sneak toggl(e|ing)
	event-values: player, world

#On Spawn
#Called when an entity spawns (excluding players).
#since 1.0, 2.5.1 (non-living entities)
#Examples:
#on spawn of a zombie:
#on spawn of an ender dragon:
#	broadcast "A dragon has been sighted in %world%!"
event "spawn":
	patterns:
		[on] spawn[ing] [of %entitydatas%]
	event-values: block, command sender, entity, item stack, location, projectile, spawn reason, world

#On Spawn Change
#Called when the spawn point of a world changes.
#since 1.0
#Examples:
#on spawn change:
#	broadcast "someone changed the spawn!"
event "spawn_change":
	patterns:
		[on] [world] spawn change
	event-values: world

#On Spectate
#Called with a player starts, stops or swaps spectating an entity.
#since 2.7
#Examples:
#on player start spectating of a zombie:
#Paper
event "spectate":
	patterns:
		[on] [player] stop spectating [(of|from) %*entitydatas%]
		[on] [player] (swap|switch) spectating [(of|from) %*entitydatas%]
		[on] [player] start spectating [of %*entitydatas%]
	event-values: player, world

#On Sponge Absorb
#Called when a sponge absorbs blocks.
#since 2.5
#Examples:
#on sponge absorb:
#	loop absorbed blocks:
#		broadcast "%loop-block% was absorbed by a sponge"!
#Minecraft 1.13 or newer
event "sponge_absorb":
	patterns:
		[on] sponge absorb
	event-values: block, location, world

#On Spread
#Called when a new block forms as a result of a block that can spread, e.g. water or mushrooms.
#since 1.0
#Examples:
#on spread:
event "spread":
	patterns:
		[on] spread[ing]
	event-values: block, location, world, past event-block

#On Sprint Toggle
#Called when a player starts or stops sprinting. Use is sprinting to get whether the player was sprinting before the event was called.
#since 1.0
#Examples:
#on sprint toggle:
#	player is not sprinting
#	send "Run!"
event "sprint_toggle":
	patterns:
		[on] [player] toggl(e|ing) sprint
		[on] [player] sprint toggl(e|ing)
	event-values: player, world

#On Start Smelt
#Called when a furnace starts smelting an item in its ore slot.
#since 2.10
#Examples:
#on smelting start:
#	if the smelting item is raw iron:
#		set total cook time to 1 second
#on smelting start of raw iron:
#	add 20 seconds to total cook time
event "start_smelt":
	patterns:
		[on] [furnace] start [of] smelt[ing] [[of] %itemtypes%]
		[on] [furnace] smelt[ing] start [of %itemtypes%]
	event-values: block, location, world

#On Stonecutter Recipe Select
#Called when a player selects a recipe in a stonecutter.
#since 2.8.0
#Examples:
#on stonecutting stone slabs
#	cancel the event
#on stonecutting:
#	broadcast "%player% is using stonecutter to craft %event-item%!"
#Paper 1.16+
event "stonecutter_recipe_select":
	patterns:
		[on] stonecutting [[of] %itemtypes%]
	event-values: item stack, player, world

#On Stop Using Item
#Called when a player stops using an item. For example, when the player releases the interact button when holding a bow, an edible item, or a spyglass.
#Note that event-timespan will return the time the item was used for.
#since 2.8.0
#Examples:
#on player stop using item:
#	broadcast "%player% used %event-item% for %event-timespan%."
#Paper 1.18.2+
event "stop_using_item":
	patterns:
		[on] [player] (stop|end) (using item|item use)
	event-values: item type, number, player, time span, world

#On Swim Toggle
#Called when an entity swims or stops swimming.
#since 2.3
#Examples:
#on swim toggle:
#	event-entity does not have permission "swim"
#	cancel event
#1.13 or newer
event "swim_toggle":
	patterns:
		[on] [entity] toggl(e|ing) swim
		[on] [entity] swim toggl(e|ing)
	event-values: command sender, entity, location, world

#On System Time
#Called when the local time of the system the server is running on reaches the provided real-life time.
#since 2.11
#Examples:
#at 14:20 in real time:
#at 2:30am real time:
#at 6:10 pm in real time:
#at 5:00 am and 5:00 pm in real time:
#at 5:00 and 17:00 in real time:
event "system_time":
	patterns:
		[on] at %times% [in] real time

#On Tame
#Called when a player tames a wolf or ocelot. Can be cancelled to prevent the entity from being tamed.
#since 1.0
#Examples:
#on tame:
event "tame":
	patterns:
		[on] [entity] tam(e|ing)
	event-values: command sender, entity, location, world

#On Target
#Called when a mob starts/stops following/attacking another entity, usually a player.
#since 1.0
#Examples:
#on entity target:
#	target is a player
event "target":
	patterns:
		[on] [entity] target
		[on] [entity] un[-]target
	event-values: command sender, entity, location, world

#On Teleport
#This event can be used to listen to teleports from non-players or player entities respectively.
#When teleporting entities, the event may also be called due to a result of natural causes, such as an enderman or shulker teleporting, or wolves teleporting to players.
#When teleporting players, the event can be called by teleporting through a nether/end portal, or by other means (e.g. plugins).
#since 1.0, 2.9.0 (entity teleport)
#Examples:
#on teleport:
#on player teleport:
#on creeper teleport:
event "teleport":
	patterns:
		[on] [%entitytypes%] teleport[ing]
	event-values: block, chunk, command sender, entity, location, player, teleport cause, world, past event-chunk, past event-location

#On Tool Change
#Called whenever a player changes their held item by selecting a different slot (e.g. the keys 1-9 or the mouse wheel), not by dropping or replacing the item in the current slot.
#since 1.0
#Examples:
#on player's held item change:
event "tool_change":
	patterns:
		[on] [player['s]] (tool|item held|held item) chang(e|ing)
	event-values: player, slot, world, past event-slot

#On Vehicle Collision
#Called when a vehicle collides with a block or entity.
#since 2.10
#Examples:
#on vehicle collision:
#on vehicle collision with obsidian:
#on vehicle collision with a zombie:
event "vehicle_collision":
	patterns:
		[on] vehicle collision [(with|of) [a[n]] %itemtypes/blockdatas/entitydatas%]
		[on] vehicle block collision [(with|of) [a[n]] %itemtypes/blockdatas%]
		[on] vehicle entity collision [(with|of) [a[n]] %entitydatas%]
	event-values: block, entity, vehicle, world

#On Vehicle Create
#Called when a new vehicle is created, e.g. when a player places a boat or minecart.
#since 1.0
#Examples:
#on vehicle create:
event "vehicle_create":
	patterns:
		[on] vehicle create
		[on] creat(e|ing|ion of) [a] vehicle
	event-values: entity, vehicle, world

#On Vehicle Damage
#Called when a vehicle gets damage. Too much damage will destroy the vehicle.
#since 1.0
#Examples:
#on vehicle damage:
event "vehicle_damage":
	patterns:
		[on] vehicle damage
		[on] damag(e|ing) [a] vehicle
	event-values: entity, vehicle, world

#On Vehicle Destroy
#Called when a vehicle is destroyed. Any passenger will be ejected and the vehicle might drop some item(s).
#since 1.0
#Examples:
#on vehicle destroy:
#	cancel event
event "vehicle_destroy":
	patterns:
		[on] vehicle destroy
		[on] destr(oy[ing]|uction of) [a] vehicle
	event-values: entity, vehicle, world

#On Vehicle Enter
#Called when an entity enters a vehicle, either deliberately (players) or by falling into them (mobs).
#since 1.0
#Examples:
#on vehicle enter:
#	entity is a player
#	cancel event
event "vehicle_enter":
	patterns:
		[on] vehicle enter
		[on] enter[ing] [a] vehicle
	event-values: entity, vehicle, world

#On Vehicle Exit
#Called when an entity exits a vehicle.
#since 1.0
#Examples:
#on vehicle exit:
#	if event-entity is a spider:
#		kill event-entity
event "vehicle_exit":
	patterns:
		[on] vehicle exit
		[on] exit[ing] [a] vehicle
	event-values: entity, living entity, vehicle, world

#On Vehicle Move
#Called when a vehicle moves.
#Please note that using this event can cause lag if there are multiple vehicle entities, i.e. Horse, Pig, Boat, Minecart
#since 2.10
#Examples:
#on vehicle move:
#	broadcast past event-location
#	broadcast event-location
event "vehicle_move":
	patterns:
		[on] vehicle move
	event-values: entity, location, vehicle, world, past event-location

#On Weather Change
#Called when a world's weather changes.
#since 1.0
#Examples:
#on weather change:
#on weather change to sunny:
event "weather_change":
	patterns:
		[on] weather change [to %weathertypes%]
	event-values: world

#On World Border Bounds Change
#Called when a world border changes its bounds, either over time, or instantly.
#This event does not get called for virtual borders.
#since 2.11
#Examples:
#on worldborder bounds change:
#	broadcast "The diameter of %event-worldborder% is changing from %past event-number% to %event-number% over the next %event-timespan%"
#Paper 1.16+
event "world_border_bounds_change":
	patterns:
		[on] world[ ]border [bounds] chang(e|ing)
	event-values: number, time span, world, world border, past event-number

#On World Border Bounds Finish Change
#Called when a moving world border has finished its move.
#This event does not get called for virtual borders.
#since 2.11
#Examples:
#on worldborder bounds finish change:
#	broadcast "Over the past %event-timespan%, the diameter of %event-worldborder% went from %past event-number% to %event-number%"
#Paper 1.16+
event "world_border_bounds_finish_change":
	patterns:
		[on] world[ ]border [bounds] finish chang(e|ing)
	event-values: number, time span, world, world border, past event-number

#On World Border Center Change
#Called when a world border's center has changed.
#This event does not get called for virtual borders.
#since 2.11
#Examples:
#on worldborder center change:
#	broadcast "The center of %event-worldborder% has moved from %past event-location% to %event-location%"
#Paper 1.16+
event "world_border_center_change":
	patterns:
		[on] world[ ]border center chang(e|ing)
	event-values: location, world, world border, past event-location

#On World Init
#Called when a world is initialized. As all default worlds are initialized before
#any scripts are loaded, this event is only called for newly created worlds.
#World management plugins might change the behaviour of this event though.
#since 1.0, 2.8.0 (defining worlds)
#Examples:
#on world init of "world_the_end":
event "world_init":
	patterns:
		[on] world init[ialization] [of %worlds%]
	event-values: world

#On World Load
#Called when a world is loaded. As with the world init event, this event will not be called for the server's default world(s).
#since 1.0, 2.8.0 (defining worlds)
#Examples:
#on world load of "world_nether":
#	broadcast "The world %event-world% has been loaded!"
event "world_load":
	patterns:
		[on] world load[ing] [of %worlds%]
	event-values: world

#On World Save
#Called when a world is saved to disk. Usually all worlds are saved simultaneously, but world management plugins could change this.
#since 1.0, 2.8.0 (defining worlds)
#Examples:
#on world save of "world":
#	broadcast "The world %event-world% has been saved"
event "world_save":
	patterns:
		[on] world sav(e|ing) [of %worlds%]
	event-values: world

#On World Unload
#Called when a world is unloaded. This event will never be called if you don't have a world management plugin.
#since 1.0, 2.8.0 (defining worlds)
#Examples:
#on world unload:
#	broadcast "the %event-world% has been unloaded!"
event "world_unload":
	patterns:
		[on] world unload[ing] [of %worlds%]
	event-values: world

#On Zombie Break Door
#Called when a zombie is done breaking a wooden door. Can be cancelled to prevent the zombie from breaking the door.
#since 1.0
#Examples:
#on zombie breaking a wood door:
event "zombie_break_door":
	patterns:
		[on] zombie break[ing] [a] [wood[en]] door
	event-values: block, block data, command sender, entity, location, world, future event-block data, past event-block

#Periodical
#An event that is called periodically.
#since 1.0
#Examples:
#every 2 seconds:
#every minecraft hour:
#every tick:  can cause lag depending on the code inside the event
#every minecraft days:
event "periodical":
	patterns:
		[on] every %timespan%

#Periodical
#An event that is called periodically.
#since 1.0
#Examples:
#every 2 seconds in "world":
#every minecraft hour in "flatworld":
#every tick in "world":  can cause lag depending on the code inside the event
#every minecraft days in "plots":
event "eventperiodical":
	patterns:
		[on] every %timespan% in [world[s]] %worlds%
	event-values: world

#Absorbed blocks
#The blocks absorbed by a sponge block.
#since 2.5
#Examples:
#the absorbed blocks
expression:
	patterns:
		[the] absorbed blocks
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Active Item
#Returns the item the entities are currently using (ie: the food they're eating, the bow they're drawing back, etc.). This cannot be changed. If an entity is not using any item, this will return null.
#since 2.8.0
#Examples:
#on damage of player:
#	if victim's active tool is a bow:
#		interrupt player's active item use
#Paper
expression:
	patterns:
		[the] (raised|active) (tool|item|weapon) of %livingentities%
		%livingentities%'[s] (raised|active) (tool|item|weapon)
	return type: item
#Active Item Use Time
#Returns the time that the entities have either spent using an item, or the time left for them to finish using an item.
#If an entity is not using any item, this will return 0 seconds.
#since 2.8.0
#Examples:
#on right click:
#	broadcast player's remaining item use time
#	wait 1 second
#	broadcast player's item use time
#Paper
expression:
	patterns:
		[the] [elapsed|remaining] (item|tool) us[ag]e time of %livingentities%
		%livingentities%'[s] [elapsed|remaining] (item|tool) us[ag]e time
	return type: timespan
#Affected Entities
#The affected entities in the area cloud effect event.
#since 2.4
#Examples:
#on area cloud effect:
#	loop affected entities:
#		if loop-value is a player:
#			send "WARNING: you've step on an area effect cloud!" to loop-value
expression:
	patterns:
		[the] affected entities
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: livingentity
#Age of Block/Entity
#Returns the age or maximum age of blocks and age for entities (there in no maximum age for entities).
#For blocks, 'Age' represents the different growth stages that a crop-like block can go through. A value of 0 indicates that the crop was freshly planted, whilst a value equal to 'maximum age' indicates that the crop is ripe and ready to be harvested.
#For entities, 'Age' represents the time left for them to become adults and it's in minus increasing to be 0 which means they're adults, e.g. A baby cow needs 20 minutes to become an adult which equals to 24,000 ticks so their age will be -24000 once spawned.
#since 2.7
#Examples:
# Set targeted crop to fully grown crop
#set age of targeted block to maximum age of targeted block
# 
# Spawn a baby cow that will only need 1 minute to become an adult
#spawn a baby cow at player
#set age of last spawned entity to -1200  in ticks = 60 seconds
expression:
	patterns:
		[the] [max[imum]] age of %blocks/entities%
		%blocks/entities%'[s] [max[imum]] age
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#All Banned Players/IPs
#Obtains the list of all banned players or IP addresses.
#since 2.7
#Examples:
#command /banlist:
#	trigger:
#		send all the banned players
expression:
	patterns:
		[all [[of] the]|the] banned (players|(ips|ip addresses))
	return type: object
#All Operators
#The list of operators on the server.
#since 2.7
#Examples:
#set {_ops::*} to all operators
expression:
	patterns:
		[all [[of] the]|the] [server] [non(-| )]op[erator]s
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: offlineplayer
#All Permissions
#Returns all permissions of the defined player(s). Note that the modifications to resulting list do not actually change permissions.
#since 2.2-dev33
#Examples:
#set {_permissions::*} to all permissions of the player
expression:
	patterns:
		[(all [[of] the]|the)] permissions (from|of) %players%
		[(all [[of] the]|the)] %players%'[s] permissions
	return type: text
#All Scripts
#Returns all of the scripts, or just the enabled or disabled ones.
#since 2.5
#Examples:
#command /scripts:
#	trigger:
#		send "All Scripts: %scripts%" to player
#		send "Loaded Scripts: %enabled scripts%" to player
#		send "Unloaded Scripts: %disabled scripts%" to player
expression:
	patterns:
		[all [of the]|the] scripts [without ([subdirectory] paths|parents)]
		[all [of the]|the] (enabled|loaded) scripts [without ([subdirectory] paths|parents)]
		[all [of the]|the] (disabled|unloaded) scripts [without ([subdirectory] paths|parents)]
	return type: text
#All Scripts (Experimental)
#Returns all of the scripts, or just the enabled or disabled ones.
#since 2.10
#Examples:
#command /scripts:
#	trigger:
#		send "All Scripts: %scripts%" to player
#		send "Loaded Scripts: %enabled scripts%" to player
#		send "Unloaded Scripts: %disabled scripts%" to player
expression:
	patterns:
		[all [[of] the]|the] scripts
		[all [[of] the]|the] (enabled|loaded) scripts
		[all [[of] the]|the] (disabled|unloaded) scripts
	return type: script
#All Tags of a Type
#Returns all the tags.
#`minecraft tag` will return only the vanilla tags, `datapack tag` will return only datapack-provided tags, `paper tag` will return only Paper's custom tags (if you are running Paper), and `custom tag` will look in the "skript" namespace for custom tags you've registered.
#You can also filter by tag types using "item", "block", or "entity".
#since 2.10
#Examples:
#broadcast minecraft tags
#send paper entity tags
#broadcast all block tags
#Paper (paper tags)
expression:
	patterns:
		[all [[of] the]|the] [minecraft|datapack|paper|(custom|skript)] [item|block|entity [type]] tags
	return type: minecrafttag
#All commands
#Returns all registered commands or all script commands.
#since 2.6
#Examples:
#send "Number of all commands: %size of all commands%"
#send "Number of all script commands: %size of all script commands%"
expression:
	patterns:
		[(all|the|all [of] the)] [registered] [(script)] commands
	return type: text
#Allay Duplication Cooldown
#The cooldown time until an allay can duplicate again naturally.
#Resetting the cooldown time will set the cooldown time to the same amount of time after an allay has duplicated.
#since 2.11
#Examples:
#set {_time} to the duplicate cooldown of last spawned allay
#add 5 seconds to the duplication cool down time of last spawned allay
#remove 3 seconds from the duplicating cooldown time of last spawned allay
#clear the clone cool down of last spawned allay
#reset the cloning cool down time of last spawned allay
expression:
	patterns:
		[the] (duplicat(e|ing|ion)|clon(e|ing)) cool[ ]down [time] [of %livingentities%]
		%livingentities%'[s] (duplicat(e|ing|ion)|clon(e|ing)) cool[ ]down [time]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Allay Target Jukebox
#The location of the jukebox an allay is set to.
#since 2.11
#Examples:
#set {_loc} to the target jukebox of last spawned allay
expression:
	patterns:
		[the] target jukebox [of %livingentities%]
		%livingentities%'[s] target jukebox
	return type: location
#Alpha/Red/Green/Blue Color Value
#The alpha, red, green, or blue value of colors. Ranges from 0 to 255.
#Alpha represents opacity.
#since 2.10
#Examples:
#broadcast red value of rgb(100, 0, 50)  sends '100'
#set {_red} to red's red value + 10
expression:
	patterns:
		[the] (alpha|red|green|blue) (value|component) of %colors%
		%colors%'[s] (alpha|red|green|blue) (value|component)
	return type: integer
#Alphabetical Sort
#Sorts given strings in alphabetical order.
#since 2.2-dev18b
#Examples:
#set {_list::*} to alphabetically sorted {_strings::*}
expression:
	patterns:
		alphabetically sorted %strings%
	return type: text
#Altitude
#Effectively an alias of 'y-coordinate of …', it represents the height of some object above bedrock.
#since 1.4.3
#Examples:
#on damage:
#	altitude of the attacker is higher than the altitude of the victim
#	set damage to damage * 1.2
expression:
	patterns:
		[the] altitude[s] of %locations%
		%locations%'[s] altitude[s]
	return type: num
#Amount
#The amount or size of something.
#Please note that amount of %items% will not return the number of items, but the number of stacks, e.g. 1 for a stack of 64 torches. To get the amount of items in a stack, see the item amount expression.
#Also, you can get the recursive size of a list, which will return the recursive size of the list with sublists included, e.g.
#<pre>
#{list::*} Structure
#
#  ├──── {list::1}: 1
#
#  ├──── {list::2}: 2
#
#  │     ├──── {list::2::1}: 3
#
#  │     │    └──── {list::2::1::1}: 4
#
#  │     └──── {list::2::2}: 5
#
#  └──── {list::3}: 6
#</pre>
#Where using %size of {list::*}% will only return 3 (the first layer of indices only), while %recursive size of {list::*}% will return 6 (the entire list)
#Please note that getting a list's recursive size can cause lag if the list is large, so only use this expression if you need to!
#since 1.0
#Examples:
#message "There are %number of all players% players online!"
expression:
	patterns:
		[the] (amount|number|size) of %numbered%
		[the] (amount|number|size) of %objects%
		[the] recursive (amount|number|size) of %objects%
	return type: num
#Amount of Items
#Counts how many of a particular item type are in a given inventory.
#since 2.0
#Examples:
#message "You have %number of ores in the player's inventory% ores in your inventory."
expression:
	patterns:
		[the] (amount|number) of %itemtypes% (in|of) %inventories%
	return type: long
#Angle
#Represents the passed number value in degrees.
#If radians is specified, converts the passed value to degrees. This conversion may not be entirely accurate, due to floating point precision.
#since 2.10
#Examples:
#set {_angle} to 90 degrees
#{_angle} is 90  true
#180 degrees is pi  true
#pi radians is 180 degrees  true
expression:
	patterns:
		%number% [in] deg[ree][s]
		%number% [in] rad[ian][s]
		%numbers% in deg[ree][s]
		%numbers% in rad[ian][s]
	return type: num
#Anvil Repair Cost
#Returns the experience cost (in levels) to complete the current repair or the maximum experience cost (in levels) to be allowed by the current repair.
#The default value of max cost set by vanilla Minecraft is 40.
#since 2.8.0
#Examples:
#on inventory click:
#	if {AnvilRepairSaleActive} = true:
#		wait a tick  recommended, to avoid client bugs
#		set anvil repair cost to anvil repair cost * 50%
#		send "Anvil repair sale is ON!" to player
#on inventory click:
#	player have permission "anvil.repair.max.bypass"
#	set max repair cost of event-inventory to 99999
expression:
	patterns:
		[the] [anvil] [item] [max[imum]] repair cost [of %inventories%]
		%inventories%'[s] [anvil] [item] [max[imum]] repair cost
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Anvil Text Input
#An expression to get the name to be applied to an item in an anvil inventory.
#since 2.7
#Examples:
#on inventory click:
#	type of event-inventory is anvil inventory
#	if the anvil text input of the event-inventory is "FREE OP":
#		ban player
expression:
	patterns:
		[the] anvil [inventory] (rename|text) input of %inventories%
		%inventories%'[s] anvil [inventory] (rename|text) input
	return type: text
#Any Of
#Returns an 'or list' composed of the given objects. For example, `any of (1, 2, and 3)` is equivalent to `1, 2, or 3`
#Useful when doing comparisons with variable lists.
#Examples:
#if any of {_numbers::*} are 1:
#if any of {teamA::*} are within location(0, 0, 0) and location(10, 10, 10):
expression:
	patterns:
		(any [one]|one) of [the] %objects%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Applied Beacon Effect
#The type of effect applied by a beacon.
#since 2.10
#Examples:
#on beacon effect:
#	if the applied effect is primary beacon effect:
#		broadcast "Is Primary"
#	else if applied effect = secondary effect:
#		broadcast "Is Secondary"
#Paper
expression:
	patterns:
		[the] applied [beacon] effect
	return type: potioneffecttype
#Applied Enchantments
#The applied enchantments in an enchant event.
# Deleting or removing the applied enchantments will prevent the item's enchantment.
#since 2.5
#Examples:
#on enchant:
#	set the applied enchantments to sharpness 10 and fire aspect 5
expression:
	patterns:
		[the] applied enchant[ment]s
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: enchanting type
#Argument
#Usable in script commands and command events. Holds the value of an argument given to the command, e.g. if the command "/tell <player> <text>" is used like "/tell Njol Hello Njol!" argument 1 is the player named "Njol" and argument 2 is "Hello Njol!".
#One can also use the type of the argument instead of its index to address the argument, e.g. in the above example 'player-argument' is the same as 'argument 1'.
#Please note that specifying the argument type is only supported in script commands.
#since 1.0, 2.7 (support for command events)
#Examples:
#give the item-argument to the player-argument
#damage the player-argument by the number-argument
#give a diamond pickaxe to the argument
#add argument 1 to argument 2
#heal the last argument
expression:
	patterns:
		[the] last arg[ument]
		[the] arg[ument](-| )<(\d+)>
		[the] <(\d*1)st|(\d*2)nd|(\d*3)rd|(\d*[4-90])th> arg[ument][s]
		[(all [[of] the]|the)] arg[ument][(s)]
		[the] %*classinfo%( |-)arg[ument][( |-)<\d+>]
		[the] arg[ument]( |-)%*classinfo%[( |-)<\d+>]
	return type: object
#Arithmetic
#Arithmetic expressions, e.g. 1 + 2, (health of player - 2) / 3, etc.
#since 1.4.2
#Examples:
#set the player's health to 10 - the player's health
#loop (argument + 2) / 5 times:
#	message "Two useless numbers: %loop-num * 2 - 5%, %2^loop-num - 1%"
#message "You have %health of player * 2% half hearts of HP!"
expression:
	patterns:
		(%object%)[ ]+[ ](%object%)
		(%object%)[ ]+[ ]%object%
		%object%[ ]+[ ](%object%)
		%object%[ ]+[ ]%object%
		(%object%)[ ]-[ ](%object%)
		(%object%)[ ]-[ ]%object%
		%object%[ ]-[ ](%object%)
		%object%[ ]-[ ]%object%
		(%object%)[ ]*[ ](%object%)
		(%object%)[ ]*[ ]%object%
		%object%[ ]*[ ](%object%)
		%object%[ ]*[ ]%object%
		(%object%)[ ]/[ ](%object%)
		(%object%)[ ]/[ ]%object%
		%object%[ ]/[ ](%object%)
		%object%[ ]/[ ]%object%
		(%object%)[ ]^[ ](%object%)
		(%object%)[ ]^[ ]%object%
		%object%[ ]^[ ](%object%)
		%object%[ ]^[ ]%object%
	return type: object
#Armor Change Item
#Get the unequipped or equipped armor item from a 'armor change' event.
#since 2.11
#Examples:
#on armor change
#	broadcast the old armor item
#
#Paper
expression:
	patterns:
		[the] (old|unequipped) armo[u]r item
		[the] (new|equipped) armo[u]r item
	return type: item
#Armor Slot
#Equipment of living entities, i.e. the boots, leggings, chestplate or helmet.
#Body armor is a special slot that can only be used for:
#<ul>
#Horses: Horse armour (doesn't work on zombie or skeleton horses)
#Wolves: Wolf Armor
#Llamas (regular or trader): Carpet
#</ul>
#since 1.0, 2.8.0 (armor), 2.10 (body armor)
#Examples:
#set chestplate of the player to a diamond chestplate
#helmet of player is neither a helmet nor air  player is wearing a block, e.g. from another plugin
expression:
	patterns:
		[the] (((boots|shoes)|leg[ging]s|chestplate[s]|helmet[s]) [(item|slot)]|armo[u]r[s]|body armo[u]r) of %livingentities%
		%livingentities%'[s] (((boots|shoes)|leg[ging]s|chestplate[s]|helmet[s]) [(item|slot)]|armo[u]r[s]|body armo[u]r)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: slot
#Arrow Attached Block
#Returns the attached block of an arrow.
#since 2.8.0
#Examples:
#set hit block of last shot arrow to diamond block
expression:
	patterns:
		[the] (attached|hit) block of %projectiles%
		%projectiles%'[s] (attached|hit) block
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Arrow Knockback Strength
#An arrow's knockback strength.
#since 2.5.1
#Examples:
#on shoot:
#	event-projectile is an arrow
#	set arrow knockback strength of event-projectile to 10
expression:
	patterns:
		[the] arrow knockback strength of %projectiles%
		%projectiles%'[s] arrow knockback strength
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: long
#Arrows Stuck
#The number of arrows stuck in a living entity.
#since 2.5
#Examples:
#set arrows stuck in player to 5
expression:
	patterns:
		[number of] arrow[s] stuck in %livingentities%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: long
#Attack Cooldown
#Returns the current cooldown for a player's attack. This is used to calculate damage, with 1.0 representing a fully charged attack and 0.0 representing a non-charged attack.
#NOTE: Currently this can not be set to anything.
#since 2.6.1
#Examples:
#on damage:
#	if attack cooldown of attacker < 1:
#		set damage to 0
#		send "Your hit was too weak! wait until your weapon is fully charged next time." to attacker
#Minecraft 1.15+
expression:
	patterns:
		[the] attack cooldown of %players%
		%players%'[s] attack cooldown
	return type: float
#Attacked
#The victim of a damage event, e.g. when a player attacks a zombie this expression represents the zombie. When using Minecraft 1.11+, this also covers the hit entity in a projectile hit event.
#since 1.3, 2.6.1 (projectile hit event)
#Examples:
#on damage:
#	victim is a creeper
#	damage the attacked by 1 heart
expression:
	patterns:
		[the] (attacked|damaged|victim) [<(.+)>]
	return type: entity
#Attacker
#The attacker of a damage event, e.g. when a player attacks a zombie this expression represents the player.
#Please note that the attacker can also be a block, e.g. a cactus or lava, but this expression will not be set in these cases.
#since 1.3
#Examples:
#on damage:
#	attacker is a player
#	health of attacker is less than or equal to 2
#	damage victim by 1 heart
expression:
	patterns:
		[the] (attacker|damager)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: entity
#Banner Pattern
#Creates a new banner pattern.
#since 2.10
#Examples:
#set {_pattern} to a creeper banner pattern colored red
#add {_pattern} to banner patterns of {_banneritem}
#remove {_pattern} from banner patterns of {_banneritem}
#set the 1st banner pattern of block at location(0,0,0) to {_pattern}
#clear the 1st banner pattern of block at location(0,0,0)
expression:
	patterns:
		[a] %bannerpatterntype% colo[u]red %color%
	return type: bannerpattern
#Banner Pattern Item
#Gets the item from a banner pattern type.
#Note that not all banner pattern types have an item.
#since 2.10
#Examples:
#set {_item} to creeper charged banner pattern item
#set {_item} to snout banner pattern item
#set {_item} to thing banner pattern item
expression:
	patterns:
		[a[n]] %*bannerpatterntypes% item[s]
	return type: itemtype
#Banner Patterns
#Gets or sets the banner patterns of a banner.
#In order to set a specific position of a banner, there needs to be that many patterns already on the banner.
#This expression will add filler patterns to the banner to allow the specified position to be set.
#For Example, setting the 3rd banner pattern of a banner that has no patterns on it, will internally add 3 base patterns, allowing the 3rd banner pattern to be set.
#since 2.10
#Examples:
#broadcast banner patterns of {_banneritem}
#broadcast 1st banner pattern of block at location(0,0,0)
#clear banner patterns of {_banneritem}
expression:
	patterns:
		[all [[of] the]|the] banner pattern[s] of %itemstacks/itemtypes/slots/blocks%
		%itemstacks/itemtypes/slots/blocks%'[s] banner pattern[s]
		[the] %integer%[st|nd|rd|th] [banner] pattern of %itemstacks/itemtypes/slots/blocks%
		%itemstacks/itemtypes/slots/blocks%'[s] %integer%[st|nd|rd|th] [banner] pattern
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: bannerpattern
#Barter Drops
#The items dropped by the piglin in a piglin bartering event.
#since 2.10
#Examples:
#on piglin barter:
#	if the bartering drops contain a jack-o-lantern:
#		remove jack-o-lantern from bartering output
#		broadcast "it's not halloween yet!"
expression:
	patterns:
		[the] [piglin] barter[ing] drops
	return type: itemtype
#Barter Input
#The item picked up by the piglin in a piglin bartering event.
#since 2.10
#Examples:
#on piglin barter:
#	if the bartering input is a gold ingot:
#		broadcast "my precious..."
expression:
	patterns:
		[the] [piglin] barter[ing] input
	return type: itemtype
#Beacon Effects
#The active effects of a beacon.
#The secondary effect can be set to anything, but the icon in the GUI will not display correctly.
#The secondary effect can only be set when the beacon is at max tier.
#The primary and secondary effect can not be the same, primary will always retain the potion type and secondary will be cleared.
#You can only change the range on Paper.
#since 2.10
#Examples:
#broadcast tier of {_block}
#set primary beacon effect of {_block} to haste
#add 1 to range of {_block}
#Paper (range)
expression:
	patterns:
		%blocks%['s] primary [beacon] effect
		[the] primary [beacon] effect [of %blocks%]
		%blocks%['s] secondary [beacon] effect
		[the] secondary [beacon] effect [of %blocks%]
		%blocks%['s] [beacon] range
		[the] [beacon] range [of %blocks%]
		%blocks%['s] [beacon] tier
		[the] [beacon] tier [of %blocks%]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Bed
#Returns the bed location of a player, i.e. the spawn point of a player if they ever slept in a bed and the bed still exists and is unobstructed however, you can set the unsafe bed location of players and they will respawn there even if it has been obstructed or doesn't exist anymore and that's the default behavior of this expression otherwise you will need to be specific i.e. safe bed location.
#NOTE: Offline players can not have their bed location changed, only online players.
#since 2.0, 2.7 (offlineplayers, safe bed)
#Examples:
#if bed of player exists:
#	teleport player the the player's bed
#else:
#	teleport the player to the world's spawn point
#set the bed location of player to spawn location of world("world")  unsafe/invalid bed location
#set the safe bed location of player to spawn location of world("world")  safe/valid bed location
expression:
	patterns:
		[the] [((safe|valid)|(unsafe|invalid))] bed[s] [location[s]] of %offlineplayers%
		%offlineplayers%'[s] [((safe|valid)|(unsafe|invalid))] bed[s] [location[s]]
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: location
#Beehive Honey Level
#The current or max honey level of a beehive.
#The max level is 5, which cannot be changed.
#since 2.11
#Examples:
#set the honey level of {_beehive} to the max honey level of {_beehive}
expression:
	patterns:
		[the] [max[imum]] honey level [of %blocks%]
		%blocks%'[s] [max[imum]] honey level
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Beehive Target Flower
#The flower a beehive has selected to pollinate from.
#since 2.11
#Examples:
#set the target flower of {_beehive} to location(0, 0, 0)
#clear the target flower of {_beehive}
expression:
	patterns:
		[the] target flower [of %blocks%]
		%blocks%'[s] target flower
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: location
#Biome
#The biome at a certain location. Please note that biomes are only defined for x/z-columns
#(i.e. the altitude (y-coordinate) doesn't matter), up until Minecraft 1.15.x.
#As of Minecraft 1.16, biomes are now 3D (per block vs column).
#since 1.4.4, 2.6.1 (3D biomes)
#Examples:
# damage player in deserts constantly
#every real minute:
#	loop all players:
#		biome at loop-player is desert
#		damage the loop-player by 1
expression:
	patterns:
		[the] biome [(of|%direction%) %locations%]
		%locations%'[s] biome
	set:
#		(internal code)
	return type: biome
#Block
#The block involved in the event, e.g. the clicked block or the placed block.
#Can optionally include a direction as well, e.g. 'block above' or 'block in front of the player'.
#since 1.0
#Examples:
#block is ore
#set block below to air
#spawn a creeper above the block
#loop blocks in radius 4:
#	loop-block is obsidian
#	set loop-block to water
#block is a chest:
#	clear the inventory of the block
expression:
	patterns:
		[the] [event-]block
		[the] block %direction% [%location%]
	return type: block
#Block Break Speed
#Gets the speed at which the given player would break this block, taking into account tools, potion effects, whether or not the player is in water, enchantments, etc. The returned value is the amount of progress made in breaking the block each tick. When the total breaking progress reaches 1.0, the block is broken. Note that the break speed can change in the course of breaking a block, e.g. if a potion effect is applied or expires, or the player jumps/enters water.
#since 2.7
#Examples:
#on left click using diamond pickaxe:
#	event-block is set
#	send "Break Speed: %break speed for player%" to player
#1.17+
expression:
	patterns:
		[the] break speed[s] [of %blocks%] [for %players%]
		%block%'[s] break speed[s] [for %players%]
	return type: float
#Block Data
#Get the block data associated with a block.
#This data can also be used to set blocks.
#since 2.5, 2.5.2 (set), 2.10 (block displays)
#Examples:
#set {_data} to block data of target block
#set block at player to {_data}
#set block data of target block to oak_stairs[facing=south;waterlogged=true]
expression:
	patterns:
		[the] block[ ]data of %blocks/displays%
		%blocks/displays%'[s] block[ ]data
	set:
#		(internal code)
	return type: blockdata
#Block Hardness
#Obtains the block's hardness level (also known as "strength"). This number is used to calculate the time required to break each block.
#since 2.6
#Examples:
#set {_hard} to block hardness of target block
#if block hardness of target block > 5:
#Minecraft 1.13+
expression:
	patterns:
		[the] [block] hardness of %itemtypes%
		%itemtypes%'[s] [block] hardness
	return type: num
#Block Sound
#Gets the sound that a given block, blockdata, or itemtype will use in a specific scenario.
#This will return a string in the form of "SOUND_EXAMPLE", which can be used in the play sound syntax.
#Check out this website for a list of sounds in Minecraft, or this one to go to the Sounds wiki page.
#since 2.10
#Examples:
#play sound (break sound of dirt) at all players
#set {_sounds::*} to place sounds of dirt, grass block, blue wool and stone
expression:
	patterns:
		[the] (break|fall|hit|place|step) sound[s] of %blocks/blockdatas/itemtypes%
		%blocks/blockdatas/itemtypes%'[s] (break|fall|hit|place|step) sound[s]
	return type: text
#Block Sphere
#All blocks in a sphere around a center, mostly useful for looping.
#since 1.0
#Examples:
#loop blocks in radius 5 around the player:
#	set loop-block to air
expression:
	patterns:
		[(all [[of] the]|the)] blocks in radius %number% [(of|around) %location%]
		[(all [[of] the]|the)] blocks around %location% in radius %number%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Blocks
#Blocks relative to other blocks or between other blocks.
#Can be used to get blocks relative to other blocks or for looping.
#Blocks from/to and between will return a straight line whereas blocks within will return a cuboid.
#since 1.0, 2.5.1 (within/cuboid/chunk)
#Examples:
#loop blocks above the player:
#loop blocks between the block below the player and the targeted block:
#set the blocks below the player, the victim and the targeted block to air
#set all blocks within {loc1} and {loc2} to stone
#set all blocks within chunk at player to air
expression:
	patterns:
		[(all [[of] the]|the)] blocks %direction% [%locations%]
		[(all [[of] the]|the)] blocks from %location% [on] %direction%
		[(all [[of] the]|the)] blocks from %location% to %location%
		[(all [[of] the]|the)] blocks between %location% and %location%
		[(all [[of] the]|the)] blocks within %location% and %location%
		[(all [[of] the]|the)] blocks (in|within) %chunk%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Book Author
#The author of a book.
#since 2.2-dev31
#Examples:
#on book sign:
#	message "Book Title: %author of event-item%"
expression:
	patterns:
		[the] [book] (author|writer|publisher) of %itemtypes%
		%itemtypes%'[s] [book] (author|writer|publisher)
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Book Pages
#The pages of a book (Supports Skript's chat format)
#Note: In order to modify the pages of a new written book, you must have the title and author
#of the book set. Skript will do this for you, but if you want your own, please set those values.
#since 2.2-dev31, 2.7 (changers)
#Examples:
#on book sign:
#	message "Book Pages: %pages of event-item%"
#	message "Book Page 1: %page 1 of event-item%"
#set page 1 of player's held item to "Book writing"
expression:
	patterns:
		[all [[of] the]|the] [book] (pages|content) of %itemtypes/itemstacks%
		%itemtypes/itemstacks%'[s] [book] (pages|content)
		[book] page %number% of %itemtypes/itemstacks%
		%itemtypes/itemstacks%'[s] [book] page %number%
	add:
#		(internal code)
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Book Title
#The title of a book.
#since 2.2-dev31
#Examples:
#on book sign:
#	message "Book Title: %title of event-item%"
expression:
	patterns:
		[the] book (name|title) of %itemtypes%
		%itemtypes%'[s] book (name|title)
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Breeding Family
#Represents family members within a breeding event.
#since 2.10
#Examples:
#on breeding:
#	send "When a %breeding mother% and %breeding father% love each other very much, they make a %bred offspring%" to breeder
expression:
	patterns:
		[the] breeding mother
		[the] breeding father
		[the] [bred] (offspring|child)
		[the] breeder
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: livingentity
#Case Text
#Copy of given text in Lowercase, Uppercase, Proper Case, camelCase, PascalCase, Snake_Case, and Kebab-Case
#since 2.2-dev16 (lowercase and uppercase), 2.5 (advanced cases)
#Examples:
#"Oops!" in lowercase  oops!
#"oops!" in uppercase  OOPS!
#"hellO i'm steve!" in proper case  HellO I'm Steve!
#"hellO i'm steve!" in strict proper case  Hello I'm Steve!
#"spAwn neW boSs ()" in camel case  spAwnNeWBoSs()
#"spAwn neW boSs ()" in strict camel case  spawnNewBoss()
#"geneRate ranDom numBer ()" in pascal case  GeneRateRanDomNumBer()
#"geneRate ranDom numBer ()" in strict pascal case  GenerateRandomNumber()
#"Hello Player!" in snake case  Hello_Player!
#"Hello Player!" in lower snake case  hello_player!
#"Hello Player!" in upper snake case  HELLO_PLAYER!
#"What is your name?" in kebab case  What-is-your-name?
#"What is your name?" in lower kebab case  what-is-your-name?
#"What is your name?" in upper kebab case  WHAT-IS-YOUR-NAME?
expression:
	patterns:
		%strings% in (upper|lower)[ ]case
		(upper|lower)[ ]case %strings%
		capitali(s|z)ed %strings%
		%strings% in [(lenient|strict) ](proper|title)[ ]case
		[(lenient|strict) ](proper|title)[ ]case %strings%
		%strings% in [(lenient|strict) ]camel[ ]case
		[(lenient|strict) ]camel[ ]case %strings%
		%strings% in [(lenient|strict) ]pascal[ ]case
		[(lenient|strict) ]pascal[ ]case %strings%
		%strings% in [(lower|upper|capital|screaming)[ ]]snake[ ]case
		[(lower|upper|capital|screaming)[ ]]snake[ ]case %strings%
		%strings% in [(lower|upper|capital)[ ]]kebab[ ]case
		[(lower|upper|capital)[ ]]kebab[ ]case %strings%
	return type: text
#Center of World Border
#The center of a world border.
#since 2.11
#Examples:
#set world border center of {_worldborder} to location(10, 0, 20)
expression:
	patterns:
		[the] world[ ]border (center|middle) [of %worldborders%]
		%worldborders%'[s] world[ ]border (center|middle)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: location
#Character Codepoint
#Returns the Unicode codepoint of a character
#since 2.9.0
#Examples:
#function is_in_order(letters: strings) :: boolean:
#	loop {_letters::*}:
#		set {_codepoint} to codepoint of lowercase loop-value
#		return false if {_codepoint} is not set  'loop-value is not a single character'
#		if:
#			{_previous-codepoint} is set
#			 if the codepoint of the current character is not
#			  1 more than the codepoint of the previous character
#			  then the letters are not in order
#			{_codepoint} - {_previous-codepoint} is not 1
#		then:
#			return false
#		set {_previous-codepoint} to {_codepoint}
#	return true
expression:
	patterns:
		[the] [unicode|character] code([ ]point| position) of %strings%
		%strings%'[s] [unicode|character] code([ ]point| position)
	return type: integer
#Character from Codepoint
#Returns the character at the specified codepoint
#since 2.9.0
#Examples:
#function chars_between(lower: string, upper: string) :: strings:
#	set {_lower} to codepoint of {_lower}
#	return {_none} if {_lower} is not set
#	set {_upper} to codepoint of {_upper}
#	return {_none} if {_upper} is not set
#	loop integers between {_lower} and {_upper}:
#		add character from codepoint loop-value to {_chars::*}
#	return {_chars::*}
expression:
	patterns:
		character (from|at|with) code([ ]point| position) %integer%
	return type: text
#Characters Between
#All characters between two given characters, useful for generating random strings. This expression uses the Unicode numerical code of a character to determine which characters are between the two given characters. The ASCII table linked here shows this ordering for the first 256 characters.
#If you would like only alphanumeric characters you can use the 'alphanumeric' option in the expression.
#If strings of more than one character are given, only the first character of each is used.
#since 2.8.0
#Examples:
#loop characters from "a" to "f":
#	broadcast "%loop-value%"
# 0123456789:;<=>?@ABC... ...uvwxyz
#send characters between "0" and "z"
# 0123456789ABC... ...uvwxyz
#send alphanumeric characters between "0" and "z"
expression:
	patterns:
		[(all [[of] the]|the)] [alphanumeric] characters (between|from) %string% (and|to) %string%
	return type: text
#Chat Format
#Can be used to get/retrieve the chat format. The sender of a message is represented by [player] or [sender], and the message by [message] or [msg].
#since 2.2-dev31
#Examples:
#set the chat format to "<yellow>[player]<light gray>: <green>[message]"
expression:
	patterns:
		[the] (message|chat) format[ting]
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Chat Recipients
#Recipients of chat events where this is called.
#since 2.2-Fixes-v7, 2.2-dev35 (clearing recipients)
#Examples:
#chat recipients
expression:
	patterns:
		[chat][( |-)]recipients
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: player
#Chunk
#Returns the chunk of a block, location or entity is in, or a list of the loaded chunks of a world.
#since 2.0, 2.8.0 (loaded chunks)
#Examples:
#add the chunk at the player to {protected chunks::*}
#set {_chunks::*} to the loaded chunks of the player's world
expression:
	patterns:
		[(all [[of] the]|the)] chunk[s] (of|%directions%) %locations%
		%locations%'[s] chunk[s]
		[(all [[of] the]|the)] loaded chunks (of|in) %worlds%
	reset:
#		(internal code)
	return type: chunk
#Clicked Block/Entity/Inventory/Slot
#The clicked block, entity, inventory, inventory slot, inventory click type or inventory action.
#since 1.0, 2.2-dev35 (more clickable things)
#Examples:
#message "You clicked on a %type of clicked entity%!"
#if the clicked block is a chest:
#	show the inventory of the clicked block to the player
expression:
	patterns:
		[the] (clicked [enchant[ment]] (button|option)|clicked (block|%*itemtype/entitydata%)|clicked slot|clicked inventory|click (type|action)|inventory action)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Color of
#The color of an item, entity, block, firework effect, or text display.
#This can also be used to color chat messages with "<%color of ...%>this text is colored!".
#Do note that firework effects support setting, adding, removing, resetting, and deleting; text displays support setting and resetting; and items, entities, and blocks only support setting, and only for very few items/blocks.
#since 1.2, 2.10 (displays)
#Examples:
#on click on wool:
#	message "This wool block is <%color of block%>%color of block%<reset>!"
#	set the color of the block to black
expression:
	patterns:
		[the] colo[u]r[s] of %blocks/itemtypes/entities/fireworkeffects/displays%
		%blocks/itemtypes/entities/fireworkeffects/displays%'[s] colo[u]r[s]
	return type: color
#Colored / Uncolored
#Parses <color>s and, optionally, chat styles in a message or removes
#any colors and chat styles from the message. Parsing all
#chat styles requires this expression to be used in same line with
#the send effect.
#since 2.0
#Examples:
#on chat:
#	set message to colored message  Safe; only colors get parsed
#command /fade <player>:
#	trigger:
#		set display name of the player-argument to uncolored display name of the player-argument
#command /format <text>:
#	trigger:
#		message formatted text-argument  Safe, because we're sending to whoever used this command
expression:
	patterns:
		(colo[u]r-|colo[u]red )%strings%
		(format-|formatted )%strings%
		(un|non)[-](colo[u]r-|colo[u]red |format-|formatted )%strings%
	return type: text
#Command
#The command that caused an 'on command' event (excluding the leading slash and all arguments)
#since 2.0, 2.7 (support for script commands)
#Examples:
# prevent any commands except for the /exit command during some game
#on command:
#	if {game::%player%::playing} is true:
#		if the command is not "exit":
#			message "You're not allowed to use commands during the game"
#			cancel the event
expression:
	patterns:
		[the] (full|complete|whole) command
		[the] command [(label|alias)]
	return type: text
#Command Block Command
#Gets or sets the command associated with a command block or minecart with command block.
#since 2.10
#Examples:
#send command of {_block}
#set command of {_cmdMinecart} to "say asdf"
expression:
	patterns:
		[the] [command[ ]block] command of %blocks/entities%
		%blocks/entities%'[s] [command[ ]block] command
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Command Info
#Get information about a command.
#since 2.6
#Examples:
#main command label of command "skript"
#description of command "help"
#label of command "pl"
#usage of command "help"
#aliases of command "bukkit:help"
#permission of command "/op"
#command "op"'s permission message
#command "sk"'s plugin owner
#command /greet <player>:
#	usage: /greet <target>
#	trigger:
#		if arg-1 is sender:
#			send "&cYou can't greet yourself! Usage: %the usage%"
#			stop
#		send "%sender% greets you!" to arg-1
#		send "You greeted %arg-1%!"
expression:
	patterns:
		[the] main command [label|name] [of [[the] command[s] %strings%]]
		command[s] %strings%'[s] main command [label|name]
		[the] description [of [[the] command[s] %strings%]]
		command[s] %strings%'[s] description
		[the] label [of [[the] command[s] %strings%]]
		command[s] %strings%'[s] label
		[the] usage [of [[the] command[s] %strings%]]
		command[s] %strings%'[s] usage
		[(all|the|all [of] the)] aliases [of [[the] command[s] %strings%]]
		command[s] %strings%'[s] aliases
		[the] permission [of [[the] command[s] %strings%]]
		command[s] %strings%'[s] permission
		[the] permission message [of [[the] command[s] %strings%]]
		command[s] %strings%'[s] permission message
		[the] plugin [owner] [of [[the] command[s] %strings%]]
		command[s] %strings%'[s] plugin [owner]
	return type: text
#Command Sender
#The player or the console who sent a command. Mostly useful in commands and command events.
#If the command sender is a command block, its location can be retrieved by using %block's location%
#since 2.0
#Examples:
#make the command sender execute "/say hi!"
#on command:
#	log "%executor% used command /%command% %arguments%" to "commands.log"
expression:
	patterns:
		[the] [command['s]] (sender|executor)
	return type: sender
#Compass Target
#The location a player's compass is pointing at.
#As of Minecraft 1.21.4, the compass is controlled by the resource pack and by default will not point to this compass target when used outside of the overworld dimension.
#since 2.0
#Examples:
# make all player's compasses target a player stored in {compass::target::%player%}
#every 5 seconds:
#	loop all players:
#		set the loop-player's compass target to location of {compass::target::%%loop-player%}
expression:
	patterns:
		[the] compass target of %players%
		%players%'[s] compass target
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: location
#Config (Experimental)
#The Skript config.
#This can be reloaded, or navigated to retrieve options.
#since 2.10
#Examples:
#set {_node} to node "language" in the skript config
#if text value of {_node} is "french":
#	broadcast "Bonjour!"
#
expression:
	patterns:
		[the] [skript] config
	return type: config
#Console
#Represents the server's console which can receive messages and execute commands
#since 1.3.1
#Examples:
#execute console command "/stop"
#send "message to console" to the console
expression:
	patterns:
		[the] (console|server)
	return type: sender
#Consumed Item
#Represents the item consumed within an entity shoot bow and item consume event.
#since 2.11
#Examples:
#on player or skeleton shoot projectile:
#	if the consumed item is an arrow:
#		cancel event
#		send "You're now allowed to shoot your arrows." to shooter
#
#on player consume:
#	if the consumed item is cooked porkchop:
#		send "Well aren't you just a little piggy wiggly!" to player
#	if player has scoreboard tag "vegetarian":
#		set the consumed item to a carrot
#
expression:
	patterns:
		[the] consumed item
	return type: item
#Cooldown Time/Remaining Time/Elapsed Time/Last Usage/Bypass Permission
#Only usable in command events. Represents the cooldown time, the remaining time, the elapsed time,
#the last usage date, or the cooldown bypass permission.
#since 2.2-dev33
#Examples:
#command /home:
#	cooldown: 10 seconds
#	cooldown message: You last teleported home %elapsed time% ago, you may teleport home again in %remaining time%.
#	trigger:
#		teleport player to {home::%player%}
expression:
	patterns:
		[the] remaining [time] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]
		[the] elapsed [time] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]
		[the] ((cooldown|wait) time|[wait] time of [the] (cooldown|wait) [(of|for) [the] [current] command])
		[the] last usage [date] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]
		[the] [cooldown] bypass perm[ission] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Coordinate
#Represents a given coordinate of a location. 
#since 1.4.3
#Examples:
#player's y-coordinate is smaller than 40:
#	message "Watch out for lava!"
expression:
	patterns:
		[the] (x|y|z)(-| )(coord[inate]|pos[ition]|loc[ation])[s] of %locations%
		%locations%'[s] (x|y|z)(-| )(coord[inate]|pos[ition]|loc[ation])[s]
	return type: num
#Create Loot Context
#Create a loot context.
#since 2.10
#Examples:
#set {_player} to player
#set {_context} to a loot context at player:
#	set loot luck value to 10
#	set looter to {_player}
#	set looted entity to last spawned pig
#give player loot items of loot table "minecraft:entities/iron_golem" with loot context {_context}
expression:
	patterns:
		[a] loot context %direction% %location%
	return type: lootcontext
#Create WorldBorder
#Create a virtual worldborder. You can make this a real border by setting a world's worldborder to a virtual border.
#since 2.11
#Examples:
#set player's worldborder to a virtual worldborder
#on join:
#	set {_border} to a worldborder:
#		set worldborder radius to 25
#		set worldborder warning distance of event-worldborder to 5
#	set worldborder of player to {_border}
expression:
	patterns:
		a [virtual] world[ ]border
	return type: worldborder
#Creature/Entity/Player/Projectile/Villager/Powered Creeper/etc.
#The entity involved in an event (an entity is a player, a creature or an inanimate object like ignited TNT, a dropped item or an arrow).
#You can use the specific type of the entity that's involved in the event, e.g. in a 'death of a creeper' event you can use 'the creeper' instead of 'the entity'.
#since 1.0
#Examples:
#give a diamond sword of sharpness 3 to the player
#kill the creeper
#kill all powered creepers in the wolf's world
#projectile is an arrow
expression:
	patterns:
		[the] [event-]<.+>
	return type: entity
#Cursor Slot
#The item which the player has on their inventory cursor. This slot is always empty if player has no inventory open.
#since 2.2-dev17
#Examples:
#cursor slot of player is dirt
#set cursor slot of player to 64 diamonds
expression:
	patterns:
		[the] cursor slot of %players%
		%players%'[s] cursor slot
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: slot
#Custom Chest Inventory
#Returns a chest inventory with the given amount of rows and the name. Use the open inventory effect to open it.
#since 2.2-dev34, 2.8.0 (chat format)
#Examples:
#open chest inventory with 1 row named "test" to player
#set {_inventory} to a chest inventory with 1 row
#set slot 4 of {_inventory} to a diamond named "example"
#open {_inventory} to player
#open chest inventory named "<00ff00>hex coloured title!" with 6 rows to player
#Paper 1.16+ (chat format)
expression:
	patterns:
		[a] [new] chest inventory (named|with name) %string% [with %number% row[s]]
		[a] [new] chest inventory with %number% row[s] [(named|with name) %string%]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: inventory
#Custom Model Data
#Get/set the CustomModelData tag for an item. (Value is an integer between 0 and 99999999)
#since 2.5
#Examples:
#set custom model data of player's tool to 3
#set {_model} to custom model data of player's tool
#1.14+
expression:
	patterns:
		[the] [custom] model data of %itemtypes%
		%itemtypes%'[s] [custom] model data
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: long
#Damage
#How much damage is done in a entity/vehicle/item damage events.
#For entity damage events, possibly ignoring armour, criticals and/or enchantments (remember that in Skript '1' is one full heart, not half a heart).
#For items, it's the amount of durability damage the item will be taking.
#since 1.3.5, 2.8.0 (item damage event)
#Examples:
#on item damage:
#	event-item is any tool
#	clear damage  unbreakable tools as the damage will be 0
#on damage:
#	increase the damage by 2
expression:
	patterns:
		[the] damage
	return type: num
#Damage Amount of World Border
#The amount of damage a player takes per second for each block they are outside the border plus the border buffer.
#Players only take damage when outside of the world's world border, and the damage value cannot be less than 0.
#since 2.11
#Examples:
#set world border damage amount of {_worldborder} to 1
expression:
	patterns:
		[the] world[ ]border damage amount [of %worldborders%]
		%worldborders%'[s] world[ ]border damage amount
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: double
#Damage Buffer of World Border
#The amount of blocks a player may safely be outside the border before taking damage.
#Players only take damage when outside of the world's world border, and the damage buffer distance cannot be less than 0.
#since 2.11
#Examples:
#set world border damage buffer of {_worldborder} to 10
expression:
	patterns:
		[the] world[ ]border damage buffer [of %worldborders%]
		%worldborders%'[s] world[ ]border damage buffer
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: double
#Damage Cause
#The damage cause of a damage event. Please click on the link for more information.
#since 2.0
#Examples:
#damage cause is lava, fire or burning
expression:
	patterns:
		[the] damage (cause|type)
	return type: damagecause
#Damage Value/Durability
#The damage value/durability of an item.
#since 1.2, 2.7 (durability reversed)
#Examples:
#set damage value of player's tool to 10
#reset the durability of {_item}
#set durability of player's held item to 0
expression:
	patterns:
		[the] (damage[s] [value[s]]|durabilit(y|ies)) of %itemtypes/itemstacks/slots%
		%itemtypes/itemstacks/slots%'[s] (damage[s] [value[s]]|durabilit(y|ies))
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Damaged Item
#Directly damages an item. In MC versions 1.12.2 and lower, this can be used to apply data values to items/blocks
#since 2.4
#Examples:
#give player diamond sword with damage value 100
#set player's tool to diamond hoe damaged by 250
#give player diamond sword with damage 700 named "BROKEN SWORD"
#set {_item} to diamond hoe with damage value 50 named "SAD HOE"
#set target block of player to wool with data value 1
#set target block of player to potato plant with data value 7
expression:
	patterns:
		%itemtype% with (damage|data) [value] %number%
		%itemtype% damaged by %number%
	return type: itemtype
#Date Ago/Later
#A date the specified timespan before/after another date.
#since 2.2-dev33
#Examples:
#set {_yesterday} to 1 day ago
#set {_hourAfter} to 1 hour after {someOtherDate}
#set {_hoursBefore} to 5 hours before {someOtherDate}
expression:
	patterns:
		%timespan% (ago|in the past|before [the] [date] %date%)
		%timespan% (later|(from|after) [the] [date] %date%)
	return type: date
#De-queue Queue (Experimental)
#Requires the using queues experimental feature flag to be enabled.
#
#Unrolls a queue into a regular list of values, which can be stored in a list variable.
#The order of the list will be the same as the order of the elements in the queue.
#If a list variable is set to this, it will use numerical indices.
#The original queue will not be changed.
#since 2.10 (experimental)
#Examples:
#set {queue} to a new queue
#add "hello" and "there" to {queue}
#set {list::*} to dequeued {queue}
expression:
	patterns:
		(de|un)queued %queue%
		unrolled %queue%
	return type: object
#Default Value
#A shorthand expression for giving things a default value. If the first thing isn't set, the second thing will be returned.
#since 2.2-dev36
#Examples:
#broadcast {score::%player's uuid%} otherwise "%player% has no score!"
expression:
	patterns:
		%objects% (otherwise|?) %objects%
	return type: object
#Difference
#The difference between two values
#Supported types include numbers, dates and times.
#since 1.4
#Examples:
#if difference between {command::%player%::lastuse} and now is smaller than a minute:
#	message "You have to wait a minute before using this command again!"
expression:
	patterns:
		difference (between|of) %object% and %object%
	return type: object
#Difficulty
#The difficulty of a world.
#since 2.3
#Examples:
#set the difficulty of "world" to hard
expression:
	patterns:
		[the] difficult(y|ies) of %worlds%
		%worlds%'[s] difficult(y|ies)
	set:
#		(internal code)
	return type: difficulty
#Direction
#A helper expression for the direction type.
#since 1.0 (basic), 2.0 (extended)
#Examples:
#thrust the player upwards
#set the block behind the player to water
#loop blocks above the player:
#	set {_rand} to a random integer between 1 and 10
#	set the block {_rand} meters south east of the loop-block to stone
#block in horizontal facing of the clicked entity from the player is air
#spawn a creeper 1.5 meters horizontally behind the player
#spawn a TNT 5 meters above and 2 meters horizontally behind the player
#thrust the last spawned TNT in the horizontal direction of the player with speed 0.2
#push the player upwards and horizontally forward at speed 0.5
#push the clicked entity in in the direction of the player at speed -0.5
#open the inventory of the block 2 blocks below the player to the player
#teleport the clicked entity behind the player
#grow a regular tree 2 meters horizontally behind the player
expression:
	patterns:
		[%number% [(block|met(er|re))[s]] [to the]] (north[(-| |)(east|west)][(ward(s|ly|)|er(n|ly|))] [of]|south[(-| |)(east|west)][(ward(s|ly|)|er(n|ly|))] [of]|(east|west)[(ward(s|ly|)|er(n|ly|))] [of]|above|over|(up|down)[ward(s|ly|)]|below|under[neath]|beneath) [%direction%]
		[%number% [(block|met(er|re))[s]]] in [the] (direction|horizontal direction|facing|horizontal facing) of %entity/block% (of|from|)
		[%number% [(block|met(er|re))[s]]] in %entity/block%'[s] (direction|horizontal direction|facing|horizontal facing) (of|from|)
		[%number% [(block|met(er|re))[s]]] (in[ ]front [of]|forward[s]|behind|backwards|[to the] (right|left) [of])
		[%number% [(block|met(er|re))[s]]] horizontal[ly] (in[ ]front [of]|forward[s]|behind|backwards|to the (right|left) [of])
	return type: direction
#Display Billboard
#Returns or changes the billboard setting of displays.
#This describes the axes/points around which the display can pivot.
#Displays spawn with the 'fixed' billboard by default. Resetting this expression will also set it to 'fixed'.
#since 2.10
#Examples:
#set billboard of the last spawned text display to center
expression:
	patterns:
		[the] bill[ |-]board[ing] [setting] [of %displays%]
		%displays%'[s] bill[ |-]board[ing] [setting]
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: billboard
#Display Brightness
#Returns or changes the brightness override of displays.
#Unmodified displays will not have a brightness override value set. Resetting or deleting this value will remove the override.
#Use the 'block' or 'sky' options to get/change specific values or get both values as a list by using neither option.
#NOTE: setting only one of the sky/block light overrides of a display without an existing override will set both sky and block light to the given value. Make sure to set both block and sky levels to your desired values for the best results. Likewise, you can only clear the brightness override, you cannot clear/reset the sky/block values individually.
#since 2.10
#Examples:
#set sky light override of the last spawned text display to 7
#subtract 3 from the block light level override of the last spawned text display
#if sky light level override of {_display} is 5:
#	clear brightness override of {_display}
expression:
	patterns:
		[the] [block|sky] (light [level]|brightness) override[s] of %displays%
		%displays%'[s] [block|sky] (light [level]|brightness) override[s]
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Display Glow Color Override
#Returns or changes the glowing color override of displays.
#This overrides whatever color is already set for the scoreboard team of the displays.
#since 2.10
#Examples:
#set glow color override of the last spawned text display to blue
expression:
	patterns:
		[the] glow[ing] colo[u]r[s] override[s] [of %displays%]
		%displays%'[s] glow[ing] colo[u]r[s] override[s]
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: color
#Display Height/Width
#Returns or changes the height or width of displays.
#The rendering culling bounding box spans horizontally width/2 from entity position, which determines the point at which the display will be frustum culled (no longer rendered because the game determines you are no longer able to see it).
#If set to 0, no culling will occur on both the vertical and horizontal directions. Default is 0.0.
#since 2.10
#Examples:
#set display height of the last spawned text display to 2.5
expression:
	patterns:
		[the] display (height|width) [of %displays%]
		%displays%'[s] display (height|width)
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: float
#Display Interpolation Delay/Duration
#Returns or changes the interpolation delay/duration of displays.
#Interpolation duration is the amount of time a display will take to interpolate, or shift, between its current state and a new state.
#Interpolation delay is the amount of ticks before client-side interpolation will commence.Setting to 0 seconds will make it immediate.
#Resetting either value will return that value to 0.
#since 2.10
#Examples:
#set interpolation delay of the last spawned text display to 2 ticks
expression:
	patterns:
		[the] interpolation (delay|duration)[s] [of %displays%]
		%displays%'[s] interpolation (delay|duration)[s]
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Display Shadow Radius/Strength
#Returns or changes the shadow radius/strength of displays.
#since 2.10
#Examples:
#set shadow radius of the last spawned text display to 1.75
expression:
	patterns:
		[the] shadow (radius|strength) [of %displays%]
		%displays%'[s] shadow (radius|strength)
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: float
#Display Teleport Delay/Duration
#The teleport duration of displays is the amount of time it takes to get between locations.
#0 means that updates are applied immediately.
#1 means that the display entity will move from current position to the updated one over one tick.
#Higher values spread the movement over multiple ticks. Max of 59 ticks.
#since 2.10
#Examples:
#set teleport delay of the last spawned text display to 2 ticks
#teleport last spawned text display to {_location}
#wait 2 ticks
#message "display entity has arrived at %{_location}%"
#Spigot 1.20.4+
expression:
	patterns:
		[the] teleport[ation] duration[s] [of %displays%]
		%displays%'[s] teleport[ation] duration[s]
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Display Transformation Rotation
#Returns or changes the transformation rotation of displays.
#The left rotation is applied first, with the right rotation then being applied based on the rotated axis.
#since 2.10
#Examples:
#set left transformation rotation of last spawned block display to quaternion(1, 0, 0, 0)  reset block display
expression:
	patterns:
		[the] (left|right) [transformation] rotation [of %displays%]
		%displays%'[s] (left|right) [transformation] rotation
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: quaternion
#Display Transformation Scale/Translation
#Returns or changes the transformation scale or translation of displays.
#since 2.10
#Examples:
#set transformation translation of display to vector from -0.5, -0.5, -0.5  Center the display in the same position as a block
expression:
	patterns:
		[the] (display|[display] transformation) (scale|translation) of %displays%
		%displays%'[s] (display|[display] transformation) (scale|translation)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: vector
#Display View Range
#Returns or changes the view range of displays.
#Default value is 1.0. This value is then multiplied by 64 and the player's entity view distance setting to determine the actual range.
#For example, a player with 150% entity view distance will see a block display with a view range of 1.2 at 1.2 * 64 * 150% = 115.2 blocks away.
#since 2.10
#Examples:
#set view range of the last spawned text display to 2.9
expression:
	patterns:
		[the] [display] view (range|radius) [of %displays%]
		%displays%'[s] [display] view (range|radius)
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: float
#Distance
#The distance between two points.
#since 1.0
#Examples:
#if the distance between the player and {home::%uuid of player%} is smaller than 20:
#	message "You're very close to your home!"
expression:
	patterns:
		[the] distance between %location% and %location%
	return type: num
#Dropped Item Owner
#The uuid of the owner of the dropped item.
#Setting the owner of a dropped item means only that entity or player can pick it up.
#Dropping an item does not automatically make the entity or player the owner.
#
#since 2.11
expression:
	patterns:
		[the] uuid of [the] [dropped] item owner [of %itementities%]
		[the] [dropped] item owner's uuid [of %itementities%]
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: uuid
#Dropped Item Thrower
#The uuid of the entity or player that threw/dropped the dropped item.
#since 2.11
#Examples:
#set the uuid of the dropped item thrower of {_dropped item} to player
#if the uuid of the dropped item thrower of {_dropped item} is uuid of player:
#
#clear the item thrower of {_dropped item}
expression:
	patterns:
		[the] uuid of [the] [dropped] item thrower [of %itementities%]
		[the] [dropped] item thrower's uuid [of %itementities%]
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: uuid
#Drops
#Only works in death events. Holds the drops of the dying creature. Drops can be prevented by removing them with "remove ... from drops", e.g. "remove all pickaxes from the drops", or "clear drops" if you don't want any drops at all.
#since 1.0
#Examples:
#clear drops
#remove 4 planks from the drops
expression:
	patterns:
		[the] drops
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: itemtype
#Drops Of Block
#A list of the items that will drop when a block is broken.
#since 2.5.1
#Examples:
#on break of block:
#	give drops of block using player's tool to player
#Minecraft 1.15+ ('as %entity%')
expression:
	patterns:
		[(all|the|all [of] the)] drops of %blocks% [(using|with) %itemtype% [(as %entity%)]]
		%blocks%'s drops [(using|with) %itemtype% [(as %entity%)]]
	return type: itemtype
#Elements
#The first, last, range or a random element of a set, e.g. a list variable, or a queue.
#Asking for elements from a queue will also remove them from the queue, see the new queue expression for more information.
#See also: random expression
#since 2.0, 2.7 (relative to last element), 2.8.0 (range of elements)
#Examples:
#broadcast the first 3 elements of {top players::*}
#set {_last} to last element of {top players::*}
#set {_random player} to random element out of all players
#send 2nd last element of {top players::*} to player
#set {page2::*} to elements from 11 to 20 of {top players::*}
#broadcast the 1st element in {queue}
#broadcast the first 3 elements in {queue}
expression:
	patterns:
		[the] (first|last) element [out] of %objects%
		[the] (first|last) %integer% elements [out] of %objects%
		[a] random element [out] of %objects%
		[the] %integer%(st|nd|rd|th) [[to] last] element [out] of %objects%
		[the] elements (from|between) %integer% (to|and) %integer% [out] of %objects%
		[the] (first|next|last) element (of|in) %queue%
		[the] (first|last) %integer% elements (of|in) %queue%
		[a] random element (of|in) %queue%
		[the] %integer%(st|nd|rd|th) [[to] last] element (of|in) %queue%
		[the] elements (from|between) %integer% (to|and) %integer% (of|in) %queue%
	return type: object
#Enchant Item
#The enchant item in an enchant prepare event or enchant event.
#It can be modified, but enchantments will still be applied in the enchant event.
#since 2.5
#Examples:
#on enchant:
#	set the enchanted item to a diamond chestplate
#on enchant prepare:
#	set the enchant item to a wooden sword
expression:
	patterns:
		[the] enchant[ed] item
	set:
#		(internal code)
	return type: itemtype
#Enchanting Experience Cost
#The cost of enchanting in an enchant event.
#This is number that was displayed in the enchantment table, not the actual number of levels removed.
#since 2.5
#Examples:
#on enchant:
#	send "Cost: %the displayed enchanting cost%" to player
expression:
	patterns:
		[the] [displayed] ([e]xp[erience]|enchanting) cost
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: long
#Enchantment Bonus
#The enchantment bonus in an enchant prepare event. This represents the number of bookshelves affecting/surrounding the enchantment table.
#since 2.5
#Examples:
#on enchant:
#	send "There are %enchantment bonus% bookshelves surrounding this enchantment table!" to player
expression:
	patterns:
		[the] enchantment bonus
	return type: long
#Enchantment Level
#The level of a particular enchantment on an item.
#since 2.0
#Examples:
#player's tool is a sword of sharpness:
#	message "You have a sword of sharpness %level of sharpness of the player's tool% equipped"
expression:
	patterns:
		[the] [enchant[ment]] level[s] of %enchantments% (on|of) %itemtypes%
		[the] %enchantments% [enchant[ment]] level[s] (on|of) %itemtypes%
		%itemtypes%'[s] %enchantments% [enchant[ment]] level[s]
		%itemtypes%'[s] [enchant[ment]] level[s] of %enchantments%
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: long
#Enchantment Offer
#The enchantment offer in enchant prepare events.
#since 2.5
#Examples:
#on enchant prepare:
#	send "Your enchantment offers are: %the enchantment offers%" to player
#1.11 or newer
expression:
	patterns:
		[all [of]] [the] enchant[ment] offers
		enchant[ment] offer[s] %numbers%
		[the] %number%(st|nd|rd|th) enchant[ment] offer
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: enchantoffer
#Enchantment Offer Cost
#The cost of an enchantment offer. This is displayed to the right of an enchantment offer.
#If the cost is changed, it will always be at least 1.
#This changes how many levels are required to enchant, but does not change the number of levels removed.
#To change the number of levels removed, use the enchant event.
#since 2.5
#Examples:
#set cost of enchantment offer 1 to 50
#1.11 or newer
expression:
	patterns:
		[the] [enchant[ment]] cost of %enchantmentoffers%
		%enchantmentoffers%'[s] [enchant[ment]] cost
	add:
#		(internal code)
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: long
#Ender Chest
#The ender chest of a player.
#since 2.0
#Examples:
#open the player's ender chest to the player
expression:
	patterns:
		[the] ender[ ]chest[s] of %players%
		%players%'[s] ender[ ]chest[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: inventory
#Enderman Carrying BlockData
#The block data an enderman is carrying.
#Custom attributes such as NBT or names do not transfer over.
#Blocks, blockdatas and items are acceptable objects to change the carrying block.
#since 2.11
#Examples:
#broadcast the carrying blockdata of last spawned enderman
#set the carried block of last spawned enderman to an oak log
#set the carrying block data of {_enderman} to oak stairs[facing=north]
#set the carried blockdata of {_enderman} to {_item}
#clear the carried blockdata of {_enderman}
expression:
	patterns:
		[the] carr(ied|ying) block[[ ]data] of %livingentities%
		%livingentities%'[s] carr(ied|ying) block[[ ]data]
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: blockdata
#Entities
#All entities in all worlds, in a specific world, in a chunk, in a radius around a certain location or within two locations. e.g. all players, all creepers in the player's world, or players in radius 100 of the player.
#since 1.2.1, 2.5 (chunks), 2.10 (within)
#Examples:
#kill all creepers in the player's world
#send "Psst!" to all players within 100 meters of the player
#give a diamond to all ops
#heal all tamed wolves in radius 2000 around {town center}
#delete all monsters in chunk at player
#size of all players within {_corner::1} and {_corner::2}}
expression:
	patterns:
		[(all [[of] the]|the)] %*entitydatas% [(in|of) ([world[s]] %worlds%|%chunks%)]
		[(all [[of] the]|the)] entities of type[s] %entitydatas% [(in|of) ([world[s]] %worlds%|%chunks%)]
		[(all [[of] the]|the)] %*entitydatas% (within|[with]in radius) %number% [(block[s]|met(er|re)[s])] (of|around) %location%
		[(all [[of] the]|the)] entities of type[s] %entitydatas% in radius %number% (of|around) %location%
		[(all [[of] the]|the)] %*entitydatas% within %location% and %location%
		[(all [[of] the]|the)] entities of type[s] %entitydatas% within %location% and %location%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: entity
#Entity AI
#Returns whether an entity has AI.
#since 2.5
#Examples:
#set artificial intelligence of target entity to false
expression:
	patterns:
		[the] (ai|artificial intelligence) of %livingentities%
		%livingentities%'[s] (ai|artificial intelligence)
	set:
#		(internal code)
	return type: boolean
#Entity Attribute
#The numerical value of an entity's particular attribute.
#Note that the movement speed attribute cannot be reliably used for players. For that purpose, use the speed expression instead.
#Resetting an entity's attribute is only available in Minecraft 1.11 and above.
#since 2.5, 2.6.1 (final attribute value)
#Examples:
#on damage of player:
#	send "You are wounded!" to victim
#	set victim's attack speed attribute to 2
expression:
	patterns:
		[the] %attributetype% [((total|final|modified))] attribute [value] of %entities%
		%entities%'[s] %attributetype% [((total|final|modified))] attribute [value]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Entity Fire Burn Duration
#How much time an entity will be burning for.
#since 2.7, 2.10 (maximum)
#Examples:
#send "You will stop burning in %fire time of player%"
#send the max burn time of target
expression:
	patterns:
		[the] [max[imum]] (burn[ing]|fire) (time|duration) of %entities%
		%entities%'[s] [max[imum]] (burn[ing]|fire) (time|duration)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Entity Owner
#The owner of a tameable entity (i.e. horse or wolf).
#since 2.5
expression:
	patterns:
		[the] (owner|tamer) of %livingentities%
		%livingentities%'[s] (owner|tamer)
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: offlineplayer
#Entity Size
#Changes the entity size of slimes and phantoms. This is not the same as changing the scale attribute of an entity.
#When changing the size of a slime, its health is fully resorted and will have changes done to its max health, movement speed and attack damage.
#The default minecraft size of a slime is anywhere between 0 and 2, with a maximum of 126.
#The default minecraft size of a phantom is 0 with a maximum size of 64.
#since 2.11
expression:
	patterns:
		[the] entity size of %livingentities%
		%livingentities%'[s] entity size
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Entity Snapshot
#Returns the entity snapshot of a provided entity, which includes all the data associated with it (name, health, attributes, etc.) at the time this expression is used.
#Individual attributes of a snapshot cannot be modified or retrieved.
#since 2.10
#Examples:
#spawn a pig at location(0, 0, 0):
#	set the max health of entity to 20
#	set the health of entity to 20
#	set {_snapshot} to the entity snapshot of entity
#	clear entity
#spawn {_snapshot} at location(0, 0, 0)
#Minecraft 1.20.2+
expression:
	patterns:
		[the] entity snapshot of %entities/entitydatas%
		%entities/entitydatas%'[s] entity snapshot
	return type: entitysnapshot
#Entity Sound
#Gets the sound that a given entity will make in a specific scenario.
#since 2.10
#Examples:
#play sound (hurt sound of player) at player
#set {_sounds::*} to death sounds of (all mobs in radius 10 of player)
#Spigot 1.19.2+
expression:
	patterns:
		[the] (damage|hurt) sound[s] of %livingentities%
		%livingentities%'[s] (damage|hurt) sound[s]
		[the] death sound[s] of %livingentities%
		%livingentities%'[s] death sound[s]
		[the] [(tall|high)|(low|normal)] fall damage sound[s] [from [[a] height [of]] %number%] of %livingentities%
		%livingentities%'[s] [(tall|high)|(low|normal)] fall [damage] sound[s] [from [[a] height [of]] %number%]
		[the] swim[ming] sound[s] of %livingentities%
		%livingentities%'[s] swim[ming] sound[s]
		[the] [(fast|speedy)] splash sound[s] of %livingentities%
		%livingentities%'[s] [(fast|speedy)] splash sound[s]
		[the] eat[ing] sound[s] of %livingentities% [(with|using|[while] eating [a]) %itemtype%]
		%livingentities%'[s] eat[ing] sound[s]
		[the] drink[ing] sound[s] of %livingentities% [(with|using|[while] drinking [a]) %itemtype%]
		%livingentities%'[s] drink[ing] sound[s]
		[the] ambient sound[s] of %livingentities%
		%livingentities%'[s] ambient sound[s]
	return type: text
#Entity Storage Entity Count
#The current number of entities stored inside an entity block storage (i.e. beehive).
#The maximum amount of entities an entity block storage can hold.
#since 2.11
#Examples:
#broadcast the stored entity count of {_beehive}
#set the maximum entity count of {_beehive} to 20
expression:
	patterns:
		[the] [max[imum]] [stored] entity count [of %blocks%]
		%blocks%'[s] [max[imum]] [stored] entity count
	return type: integer
#Entity/Player/World from UUID
#Get an entity, player, offline player or world from a UUID.
#Unloaded entities or players that are offline (when using 'player from %uuid%') will return nothing.
#since 2.11
#Examples:
#set {_player} to player from "a0789aeb-7b46-43f6-86fb-cb671fed5775" parsed as uuid
#set {_offline player} to offline player from {_some uuid}
#set {_entity} to entity from {_some uuid}
#set {_world} to world from {_some uuid}
expression:
	patterns:
		[offline[ ]]player[s] from %uuids%
		entit(y|ies) from %uuids%
		world[s] from %uuids%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: object
#Exhaustion
#The exhaustion of a player. This is mainly used to determine the rate of hunger depletion.
#since 2.2-dev35
#Examples:
#set exhaustion of all players to 1
expression:
	patterns:
		[the] exhaustion of %players%
		%players%'[s] exhaustion
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Experience
#How much experience was spawned in an experience spawn or block break event. Can be changed.
#since 2.1, 2.5.3 (block break event), 2.7 (experience change event), 2.10 (breeding, fishing)
#Examples:
#on experience spawn:
#	add 5 to the spawned experience
#on break of coal ore:
#	clear dropped experience
#on break of diamond ore:
#	if tool of player = diamond pickaxe:
#		add 100 to dropped experience
#on breed:
#	breeding father is a cow
#	set dropped experience to 10
#on fish catch:
#	add 70 to dropped experience
expression:
	patterns:
		[the] (spawned|dropped|) [e]xp[erience] [orb[s]]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: experience
#Experience Cooldown Change Reason
#The experience change reason within an experience cooldown change event.
#since 2.10
#Examples:
#on player experience cooldown change:
#	if xp cooldown change reason is plugin:
#		Changed by a plugin
#	else if xp cooldown change reason is orb pickup:
#		Changed by picking up xp orb
expression:
	patterns:
		[the] (experience|[e]xp) cooldown change (reason|cause|type)
	return type: experience cooldown change reason
#Experience Pickup Cooldown
#The experience cooldown of a player.
#Experience cooldown is how long until a player can pick up another orb of experience.
#The cooldown of a player must be 0 to pick up another orb of experience.
#since 2.10
#Examples:
#send experience cooldown of player
#set the xp pickup cooldown of player to 1 hour
#if exp collection cooldown of player >= 10 minutes:
#	clear the experience pickup cooldown of player
expression:
	patterns:
		[the] (experience|[e]xp) [pickup|collection] cooldown of %players%
		%players%'[s] (experience|[e]xp) [pickup|collection] cooldown
	add:
#		(internal code)
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Exploded Blocks
#Get all the blocks that were destroyed in an explode event. Supports add/remove/set/clear/delete blocks.
#since 2.5, 2.8.6 (modify blocks)
#Examples:
#on explode:
#	loop exploded blocks:
#		add loop-block to {exploded::blocks::*}
#on explode:
#	loop exploded blocks:
#		if loop-block is grass:
#			remove loop-block from exploded blocks
#on explode:
#	clear exploded blocks
#on explode:
#	set exploded blocks to blocks in radius 10 around event-entity
#on explode:
#	add blocks above event-entity to exploded blocks
expression:
	patterns:
		[the] exploded blocks
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Explosion Block Yield
#The percentage of exploded blocks dropped in an explosion event.
#When changing the yield, a value greater than 1 will function the same as using 1.
#Attempting to change the yield to a value less than 0 will have no effect.
#since 2.5
#Examples:
#on explode:
#set the explosion's block yield to 10%
expression:
	patterns:
		[the] [explosion['s]] block (yield|amount)
		[the] percentage of blocks dropped
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Explosion Yield
#The yield of the explosion in an explosion prime event. This is how big the explosion is.
# When changing the yield, values less than 0 will be ignored.
# Read this wiki page for more information
#since 2.5
#Examples:
#on explosion prime:
#	set the yield of the explosion to 10
expression:
	patterns:
		[the] explosion (yield|radius|size)
		[the] (yield|radius|size) of [the] explosion
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Explosive Yield
#The yield of an explosive (creeper, ghast, primed tnt, fireball, etc.). This is how big of an explosion is caused by the entity.
#Read this wiki page for more information.
#The yield of ghasts can only be set to between 0 and 127.
#since 2.5, 2.11 (ghasts)
#Examples:
#on spawn of a creeper:
#	set the explosive yield of the event-entity to 10
#Paper (ghasts)
expression:
	patterns:
		[the] explosive (yield|radius|size|power) of %entities%
		%entities%'[s] explosive (yield|radius|size|power)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Facing
#The facing of an entity or block, i.e. exactly north, south, east, west, up or down (unlike direction which is the exact direction, e.g. '0.5 south and 0.7 east')
#since 1.4
#Examples:
# makes a bridge
#loop blocks from the block below the player in the horizontal facing of the player:
#	set loop-block to cobblestone
expression:
	patterns:
		[the] (horizontal|) facing of %livingentities/blocks%
		%livingentities/blocks%'[s] (horizontal|) facing
	return type: direction
#Fall Distance
#The distance an entity has fallen for.
#since 2.5
#Examples:
#set all entities' fall distance to 10
#on damage:
#	send "%victim's fall distance%" to victim
expression:
	patterns:
		[the] fall[en] (distance|height) of %entities%
		%entities%'[s] fall[en] (distance|height)
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Fertilized Blocks
#The blocks fertilized in block fertilize events.
#since 2.5
#Examples:
#the fertilized blocks
#Minecraft 1.13 or newer
expression:
	patterns:
		[all] [the] fertilized blocks
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Filter
#Filters a list based on a condition. 
#For example, if you ran 'broadcast "something" and "something else" where [string input is "something"]', 
#only "something" would be broadcast as it is the only string that matched the condition.
#since 2.2-dev36, 2.10 (parenthesis pattern)
#Examples:
#send "congrats on being staff!" to all players where [player input has permission "staff"]
#loop (all blocks in radius 5 of player) where [block input is not air]:
expression:
	patterns:
		%objects% (where|that match) \[<.+>\]
		%objects% (where|that match) (<.+>)
	return type: object
#Final Damage
#How much damage is done in a damage event, considering all types of damage reduction. Can NOT be changed.
#since 2.2-dev19
#Examples:
#send "%final damage%" to victim
expression:
	patterns:
		[the] final damage
	return type: num
#Firework Effect
#Represents a 'firework effect' which can be used in the launch firework effect.
#since 2.4
#Examples:
#launch flickering trailing burst firework colored blue and green at player
#launch trailing flickering star colored purple, yellow, blue, green and red fading to pink at target entity
#launch ball large colored red, purple and white fading to light green and black at player's location with duration 1
expression:
	patterns:
		(|flickering|trailing|flickering trailing|trailing flickering) %fireworktype% [firework [effect]] colo[u]red %colors%
		(|flickering|trailing|flickering trailing|trailing flickering) %fireworktype% [firework [effect]] colo[u]red %colors% fad(e|ing) [to] %colors%
	return type: fireworkeffect
#Fishing Approach Angle
#Returns the angle at which the fish will approach the fishing hook, after the wait time.
#The angle is in degrees, with 0 being positive Z, 90 being negative X, 180 being negative Z, and 270 being positive X.
#By default, returns a value between 0 and 360 degrees.
#since 2.10
#Examples:
#on fish approach:
#	if any:
#		maximum fishing approach angle is bigger than 300.5 degrees
#		min fishing approach angle is smaller than 59.5 degrees
#	then:
#		cancel event
expression:
	patterns:
		(min[imum]|max[imum]) fish[ing] approach[ing] angle
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: float
#Fishing Bite Time
#Returns the time it takes a fish to bite the fishing hook, after it started approaching the hook.
#May return a timespan of 0 seconds. If modifying the value, it should be at least 1 tick.
#since 2.10
#Examples:
#on fish approach:
#	set fishing bite time to 5 seconds
#Paper 1.20.6
expression:
	patterns:
		fish[ing] bit(e|ing) [wait] time
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Fishing Hook
#The fishing hook in a fishing event.
#since 2.10
#Examples:
#on fish line cast:
#	wait a second
#	teleport player to fishing hook
expression:
	patterns:
		[the] fish[ing] (hook|bobber)
	delete:
#		(internal code)
	return type: entity
#Fishing Hooked Entity
#Returns the hooked entity in the hooked event.
#since 2.10
#Examples:
#on entity hooked:
#	if hooked entity is a player:
#		teleport hooked entity to player
expression:
	patterns:
		hook[ed] entity
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: entity
#Fishing Wait Time
#Returns the minimum and/or maximum waiting time of the fishing hook. 
#Default minimum value is 5 seconds and maximum is 30 seconds, before lure is applied.
#since 2.10
#Examples:
#on fishing line cast:
#	set min fish waiting time to 10 seconds
#	set max fishing waiting time to 20 seconds
expression:
	patterns:
		(min[imum]|max[imum]) fish[ing] wait[ing] time
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Flight Mode
#Whether the player(s) are allowed to fly. Use Make Fly effect to force player(s) to fly.
#since 2.2-dev34
#Examples:
#set flight mode of player to true
#send "%flying state of all players%"
expression:
	patterns:
		[the] fl(y[ing]|ight) (mode|state) of %players%
		%players%'[s] fl(y[ing]|ight) (mode|state)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: boolean
#Food Level
#The food level of a player from 0 to 10. Has several aliases: food/hunger level/meter/bar. 
#since 1.0
#Examples:
#set the player's food level to 10
expression:
	patterns:
		[the] (food|hunger)[[ ](level|met(er|re)|bar)] [of %players%]
		%players%'[s] (food|hunger)[[ ](level|met(er|re)|bar)]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Formatted Date
#Converts date to human-readable text format. By default, 'yyyy-MM-dd HH:mm:ss z' (e.g. '2018-03-30 16:03:12 +01') will be used. For reference, see this Wikipedia article.
#since 2.2-dev31, 2.7 (support variables in format)
#Examples:
#command /date:
#	trigger:
#		send "Full date: %now formatted human-readable%" to sender
#		send "Short date: %now formatted as "yyyy-MM-dd"%" to sender
expression:
	patterns:
		%dates% formatted [human-readable] [(with|as) %string%]
		[human-readable] formatted %dates% [(with|as) %string%]
	return type: text
#Former/Future State
#Represents the value of an expression before an event happened or the value it will have directly after the event, e.g. the old or new level respectively in a level change event.
#Note: The past, future and present states of an expression are sometimes called 'time states' of an expression.
#Note 2: If you don't specify whether to use the past or future state of an expression that has different values, its default value will be used which is usually the value after the event.
#since 1.1
#Examples:
#on teleport:
#	former world was "world_nether"  or 'world was'
#	world will be "world"  or 'world after the event is'
#on tool change:
#	past tool is an axe
#	the tool after the event will be air
#on weather change:
#	set {weather::%world%::old} to past weather
#	set {weather::%world%::current} to the new weather
expression:
	patterns:
		[the] (former|past|old) [state] [of] %objects%
		%objects% before [the event]
		[the] (future|to-be|new) [state] [of] %objects%
		%objects%(-to-be| after[(wards| the event)])
	return type: object
#Free / Max / Total Memory
#The free, max or total memory of the server in Megabytes.
#since 2.8.0
#Examples:
#while player is online:
#	send action bar "Memory left: %free memory%/%max memory%MB" to player
#	wait 5 ticks
expression:
	patterns:
		[the] [server] (free|max[imum]|total) (memory|ram)
	return type: double
#Freeze Time
#How much time an entity has been in powdered snow for.
#since 2.7
#Examples:
#player's freeze time is less than 3 seconds:
#	send "you're about to freeze!" to the player
expression:
	patterns:
		[the] freeze time of %entities%
		%entities%'[s] freeze time
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Function (Experimental)
#Obtain a function by name, which can be executed.
#since 2.10
#Examples:
#set {_function} to the function named "myFunction"
#run {_function} with arguments 13 and true
expression:
	patterns:
		[the|a] function [named] %string% [(in|from) %script%]
		[the] functions [named] %strings% [(in|from) %script%]
		[all [[of] the]|the] functions (in|from) %script%
	return type: function
#Furnace Event Items
#Represents the different items in furnace events.
#Only 'smelting item' can be changed.
#since 2.10
#Examples:
#on furnace smelt:
#	broadcast smelted item
#	 Or 'result'
#on furnace extract:
#	broadcast extracted item
#on fuel burn:
#	broadcast burned fuel
#on smelting start:
#	broadcast smelting item
#	clear smelting item
expression:
	patterns:
		[the] (smelted item|result[ item])
		[the] extracted item[s]
		[the] smelting item
		[the] burned (fuel|item)
	return type: item
#Furnace Slot
#A slot of a furnace, i.e. either the ore, fuel or result slot.
#since 1.0, 2.8.0 (syntax rework)
#Examples:
#set the fuel slot of the clicked block to a lava bucket
#set the block's ore slot to 64 iron ore
#clear the result slot of the block
#on smelt:
#	if the fuel slot is charcoal:
#		add 5 seconds to the burn time
expression:
	patterns:
		[the] (ore|input) slot[s] [of %blocks%]
		%blocks%'[s] (ore|input) slot[s]
		[the] fuel slot[s] [of %blocks%]
		%blocks%'[s] fuel slot[s]
		[the] (result|output) slot[s] [of %blocks%]
		%blocks%'[s] (result|output) slot[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: slot
#Furnace Times
#The cook time, total cook time, and burn time of a furnace. Can be changed.
#<ul>
#cook time: The amount of time an item has been smelting for.
#total cook time: The amount of time required to finish smelting an item.
#burn time: The amount of time left for the current fuel until consumption of another fuel item.
#</ul>
#since 2.10
#Examples:
#set the cooking time of {_block} to 10
#set the total cooking time of {_block} to 50
#set the fuel burning time of {_block} to 100
#on smelt:
#	if the fuel slot is charcoal:
#		add 5 seconds to the fuel burn time
expression:
	patterns:
		[the] [furnace] cook[ing] time [of %blocks%]
		%blocks%'[s]cook[ing] time
		[the] [furnace] total cook[ing] time [of %blocks%]
		%blocks%'[s]total cook[ing] time
		[the] [furnace] fuel burn[ing] time [of %blocks%]
		%blocks%'[s]fuel burn[ing] time
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Game Mode
#The gamemode of a player. (Gamemodes)
#since 1.0
#Examples:
#player's gamemode is survival
#set the player's gamemode to creative
expression:
	patterns:
		[the] game[ ]mode of %players%
		%players%'[s] game[ ]mode
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: gamemode
#Gamerule Value
#The gamerule value of a world.
#since 2.5
#Examples:
#set the gamerule commandBlockOutput of world "world" to false
#Minecraft 1.13+
expression:
	patterns:
		[the] gamerule %gamerule% of %worlds%
	set:
#		(internal code)
	return type: gamerule value
#Gliding State
#Sets of gets gliding state of player. It allows you to set gliding state of entity even if they do not have an Elytra equipped.
#since 2.2-dev21
#Examples:
#set gliding of player to off
expression:
	patterns:
		[the] (gliding|glider) [state] of %livingentities%
		%livingentities%'[s] (gliding|glider) [state]
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: boolean
#Glowing
#Indicates if targeted entity is glowing (new 1.9 effect) or not. Glowing entities can be seen through walls.
#since 2.2-dev18
#Examples:
#set glowing of player to true
expression:
	patterns:
		[the] glowing of %entities%
		%entities%'[s] glowing
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: boolean
#Gravity
#If entity is affected by gravity or not, i.e. if it has Minecraft 1.10+ NoGravity flag.
#since 2.2-dev21
#Examples:
#set gravity of player off
expression:
	patterns:
		[the] gravity of %entities%
		%entities%'[s] gravity
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: boolean
#Hanging Entity/Remover
#Returns the hanging entity or remover in hanging break and place events.
#since 2.6.2
#Examples:
#on break of item frame:
#	if item of hanging entity is diamond pickaxe:
#		cancel event
#		if hanging remover is a player:
#			send "You can't break that item frame!" to hanging remover
expression:
	patterns:
		[the] hanging (entity|remover)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: entity
#Hash
#Hashes the given text using the MD5 or SHA-256 algorithms. Each algorithm is suitable for different use cases.<p>
#MD5 is provided mostly for backwards compatibility, as it is outdated and not secure. 
#SHA-256 is more secure, and can used to hash somewhat confidental data like IP addresses and even passwords. 
#It is not that secure out of the box, so please consider using salt when dealing with passwords! 
#When hashing data, you must specify algorithms that will be used for security reasons! 
#<p>Please note that a hash cannot be reversed under normal circumstanses. You will not be able to get original value from a hash with Skript.
#since 2.0, 2.2-dev32 (SHA-256 algorithm)
#Examples:
#command /setpass <text>:
#	trigger:
#		set {password::%uuid of player%} to text-argument hashed with SHA-256
#command /login <text>:
#	trigger:
#		if text-argument hashed with SHA-256 is {password::%uuid of player%}:
#			message "Login successful."
#		else:
#			message "Wrong password!"
expression:
	patterns:
		%strings% hash[ed] with (MD5|SHA-256)
	return type: text
#Hatching Entity Type
#The type of the entity that will be hatched in a Player Egg Throw event.
#since 2.7
#Examples:
#on player egg throw:
#	set the hatching entity type to a primed tnt
expression:
	patterns:
		[the] hatching entity [type]
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: entitytype
#Hatching Number
#The number of entities that will be hatched in a Player Egg Throw event.
#Please note that no more than 127 entities can be hatched at once.
#since 2.7
#Examples:
#on player egg throw:
#	set the hatching number to 10
expression:
	patterns:
		[the] hatching number
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: byte
#Head location
#The location of an entity's head, mostly useful for players and e.g. looping blocks in the player's line of sight.
#Please note that this location is only accurate for entities whose head is exactly above their center, i.e. players, endermen, zombies, skeletons, etc., but not sheep, pigs or cows.
#since 2.0
#Examples:
#set the block at the player's head to air
#set the block in front of the player's eyes to glass
#loop blocks in front of the player's head:
expression:
	patterns:
		[the] (head|eye[s]) [location[s]] of %livingentities%
		%livingentities%'[s] (head|eye[s]) [location[s]]
	return type: location
#Heal Amount
#The amount of health healed in a heal event.
#since 2.5.1
#Examples:
#on player healing:
#	increase the heal amount by 2
#	remove 0.5 from the healing amount
expression:
	patterns:
		[the] heal[ing] amount
	return type: double
#Heal Reason
#The heal reason of a heal event.
#since 2.5
#Examples:
#on heal:
#	heal reason is satiated
#	send "You ate enough food and gained full health back!"
expression:
	patterns:
		[the] (regen|health regain|heal[ing]) (reason|cause)
	return type: regen reason
#Health
#The health of a creature, e.g. a player, mob, villager, etc. The minimum value is 0, and the maximum is the creature's max health (e.g. 10 for players).
#since 1.0
#Examples:
#message "You have %health% HP left."
expression:
	patterns:
		[the] health of %livingentities%
		%livingentities%'[s] health
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Hidden Players
#The players hidden from a player that were hidden using the entity visibility effect.
#since 2.3
#Examples:
#message "<light red>You are currently hiding: <light gray>%hidden players of the player%"
expression:
	patterns:
		[(all [[of] the]|the)] hidden players (of|for) %players%
		[(all [[of] the]|the)] players hidden (from|for|by) %players%
	add:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: player
#Horse Domestication
#Gets and/or sets the (max) domestication of a horse.
#The domestication of a horse is how close a horse is to becoming tame - the higher the domestication, the closer they are to becoming tame (must be between 1 and the max domestication level of the horse).
#The max domestication of a horse is how long it will take for a horse to become tame (must be greater than 0).
#since 2.10
#Examples:
#function domesticateAndTame(horse: entity, p: offline player, i: int = 10):
#	add {_i} to domestication level of {_horse}
#	if domestication level of {_horse} >= max domestication level of {_horse}:
#		tame {_horse}
#		set tamer of {_horse} to {_p}
expression:
	patterns:
		[the] [max[imum]] domestication level of %livingentities%
		%livingentities%'[s] [max[imum]] domestication level
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Hostname
#The hostname used by the connecting player to connect to the server in a connect event.
#since 2.6.1
#Examples:
#on connect:
#	hostname is "testers.example.com"
#	send "Welcome back tester!"
expression:
	patterns:
		[the] (host|domain)[ ][name]
	return type: text
#Hotbar Button
#The hotbar button clicked in an inventory click event.
#since 2.5
#Examples:
#on inventory click:
#	send "You clicked the hotbar button %hotbar button%!"
expression:
	patterns:
		[the] hotbar button
	return type: long
#Hotbar Slot
#The currently selected hotbar slot.
#To retrieve its number use Slot Index expression.
#Use future and past tense to grab the previous slot in an item change event, see example.
#since 2.2-dev36
#Examples:
#message "%player's current hotbar slot%"
#set player's selected hotbar slot to slot 4 of player
#send "index of player's current hotbar slot = 1"  second slot from the left
#on item held change:
#	if the selected hotbar slot was a diamond:
#		set the currently selected hotbar slot to slot 5 of player
expression:
	patterns:
		[the] [([currently] selected|current)] hotbar slot[s] [of %players%]
		%players%'[s] [([currently] selected|current)] hotbar slot[s]
	set:
#		(internal code)
	return type: slot
#Hover List
#The list when you hover on the player counts of the server in the server list.
#This can be changed using texts or players in a server list ping event only. Adding players to the list means adding the name of the players.
#And note that, for example if there are 5 online players (includes fake online count) in the server and the hover list is set to 3 values, Minecraft will show "... and 2 more ..." at end of the list.
#since 2.3
#Examples:
#on server list ping:
#	clear the hover list
#	add "&aWelcome to the &6Minecraft &aserver!" to the hover list
#	add "" to the hover list  A blank line
#	add "&cThere are &6%online players count% &conline players!" to the hover list
#Paper 1.12.2 or newer
expression:
	patterns:
		[the] [custom] [player|server] (hover|sample) ([message] list|message)
		[the] [custom] player [hover|sample] list
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Humidity
#Humidity of given blocks.
#since 2.2-dev35
#Examples:
#set {_humidity} to event-block's humidity
expression:
	patterns:
		[the] humidit(y|ies) of %blocks%
		%blocks%'[s] humidit(y|ies)
	return type: num
#IP
#The IP address of a player, or the connected player in a connect event, or the pinger in a server list ping event.
#since 1.4, 2.2-dev26 (when used in connect event), 2.3 (when used in server list ping event)
#Examples:
#ban the IP address of the player
#broadcast "Banned the IP %IP of player%"
#on connect:
#	log "[%now%] %player% (%ip%) is connected to the server."
#on server list ping:
#	send "%IP-address%" to the console
expression:
	patterns:
		IP[s][( |-)address[es]] of %players%
		%players%'[s] IP[s][( |-)address[es]]
		IP[( |-)address]
	return type: text
#Index Of
#The first or last index of a character (or text) in a text, or -1 if it doesn't occur in the text. Indices range from 1 to the length of the text.
#since 2.1
#Examples:
#set {_first} to the first index of "@" in the text argument
#if {_s} contains "abc":
#	set {_s} to the first (index of "abc" in {_s} + 3) characters of {_s}  removes everything after the first "abc" from {_s}
expression:
	patterns:
		[the] (|first|last) index of %string% in %string%
	return type: long
#Indices of List
#Returns all the indices of a list variable, optionally sorted by their values.
#To sort the indices, all objects in the list must be comparable;
#Otherwise, this expression will just return the unsorted indices.
#since 2.4 (indices), 2.6.1 (sorting)
#Examples:
#set {l::*} to "some", "cool" and "values"
#broadcast "%indices of {l::*}%"  result is 1, 2 and 3
#set {_leader-board::first} to 17
#set {_leader-board::third} to 30
#set {_leader-board::second} to 25
#set {_leader-board::fourth} to 42
#set {_ascending-indices::*} to sorted indices of {_leader-board::*} in ascending order
#broadcast "%{_ascending-indices::*}%" result is first, second, third, fourth
#set {_descending-indices::*} to sorted indices of {_leader-board::*} in descending order
#broadcast "%{_descending-indices::*}%" result is fourth, third, second, first
expression:
	patterns:
		[(the|all [[of] the])] (indexes|indices) of %objects%
		%objects%'[s] (indexes|indices)
		[sorted] (indices|indexes) of %objects% in (ascending|descending) order
		[sorted] %objects%'[s] (indices|indexes) in (ascending|descending) order
	return type: text
#Initiator Inventory
#Returns the initiator inventory in an on inventory item move event.
#since 2.8.0
#Examples:
#on inventory item move:
#	holder of event-initiator-inventory is a chest
#	broadcast "Item transport happening at %location at holder of event-initiator-inventory%!"
expression:
	patterns:
		[the] [event-]initiator[( |-)inventory]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: inventory
#Input
#Represents the input in a filter expression or sort effect.
#For example, if you ran 'broadcast "something" and "something else" where [input is "something"]
#the condition would be checked twice, using "something" and "something else" as the inputs.
#The 'input index' pattern can be used when acting on a variable to access the index of the input.
#since 2.2-dev36, 2.9.0 (input index)
#Examples:
#send "congrats on being staff!" to all players where [input has permission "staff"]
#sort {_list::*} based on length of input index
expression:
	patterns:
		input
		%*classinfo% input
		input index
	return type: object
#Inventory
#The inventory of a block or player. You can usually omit this expression and can directly add or remove items to/from blocks or players.
#since 1.0
#Examples:
#add a plank to the player's inventory
#clear the player's inventory
#remove 5 wool from the inventory of the clicked block
expression:
	patterns:
		[the] inventor(y|ies) of %inventoryholders/itemtypes%
		%inventoryholders/itemtypes%'[s] inventor(y|ies)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Inventory Action
#The inventory action of an inventory event. Please click on the link for more information.
#since 2.2-dev16
#Examples:
#inventory action is pickup all
expression:
	patterns:
		[the] inventory action
	return type: inventoryaction
#Inventory Close Reason
#The inventory close reason of an inventory close event.
#since 2.8.0
#Examples:
#on inventory close:
#	inventory close reason is teleport
#	send "Your inventory closed due to teleporting!" to player
#Paper
expression:
	patterns:
		[the] inventory clos(e|ing) (reason|cause)
	return type: inventoryclosereason
#Inventory Holder/Viewers/Rows/Slots
#Gets the amount of rows/slots, viewers and holder of an inventory.
#NOTE: 'Viewers' expression returns a list of players viewing the inventory. Note that a player is considered to be viewing their own inventory and internal crafting screen even when said inventory is not open.
#since 2.2-dev34, 2.5 (slots)
#Examples:
#event-inventory's amount of rows
#holder of player's top inventory
#{_inventory}'s viewers
expression:
	patterns:
		(holder[s]|viewers|[amount of] rows|[amount of] slots) of %inventories%
		%inventories%'[s] (holder[s]|viewers|[amount of] rows|[amount of] slots)
	add:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: object
#Inventory Slot
#Represents a slot in an inventory. It can be used to change the item in an inventory too.
#since 2.2-dev24
#Examples:
#if slot 0 of player is air:
#	set slot 0 of player to 2 stones
#	remove 1 stone from slot 0 of player
#	add 2 stones to slot 0 of player
#	clear slot 1 of player
expression:
	patterns:
		[the] slot[s] %numbers% of %inventory%
		%inventory%'[s] slot[s] %numbers%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: slot
#Item
#The item involved in an event, e.g. in a drop, dispense, pickup or craft event.
#since unknown (before 2.1)
#Examples:
#on dispense:
#	item is a clock
#	set the time to 6:00
expression:
	patterns:
		[the] item
	return type: item
#Item Amount
#The amount of an item stack.
#since 2.2-dev24
#Examples:
#send "You have got %item amount of player's tool% %player's tool% in your hand!" to player
expression:
	patterns:
		[the] item[[ ]stack] (amount|size|number) of %slots/itemtypes/itemstacks%
		%slots/itemtypes/itemstacks%'[s] item[[ ]stack] (amount|size|number)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: long
#Item Cooldown
#Change the cooldown of a specific material to a certain amount of Timespan.
#since 2.8.0
#Examples:
#on right click using stick:
#	set item cooldown of player's tool for player to 1 minute
#	set item cooldown of stone and grass for all players to 20 seconds
#	reset item cooldown of cobblestone and dirt for all players
expression:
	patterns:
		[the] [item] cooldown of %itemtypes% for %players%
		%players%'[s] [item] cooldown for %itemtypes%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Item Display Transform
#Returns or changes the item display transform of item displays.
#since 2.10
#Examples:
#set the item transform of the last spawned item display to first person left handed
#set the item transform of the last spawned item display to no transform  Reset to default
expression:
	patterns:
		[the] item [display] transform [of %displays%]
		%displays%'[s] item [display] transform
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: itemdisplaytransform
#Item Enchantments
#All the enchantments an item type has.
#since 2.2-dev36
#Examples:
#clear enchantments of event-item
expression:
	patterns:
		[the] enchantments of %itemtypes%
		%itemtypes%'[s] enchantments
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: enchanting type
#Item Flags
#The item flags of an item. Can be modified.
#since 2.10
#Examples:
#set item flags of player's tool to hide enchants and hide attributes
#add hide potion effects to item flags of player's held item
#remove hide enchants from item flags of {legendary sword}
expression:
	patterns:
		[the] item flags of %itemtypes%
		%itemtypes%'[s] item flags
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: itemflag
#Item of an Entity
#An item associated with an entity. For dropped item entities, it gets the item that was dropped.
#For item frames, the item inside the frame is returned.
#For throwable projectiles (snowballs, enderpearls etc.) or item displays, it gets the displayed item.
#Other entities do not have items associated with them.
#since 2.2-dev35, 2.2-dev36 (improved), 2.5.2 (throwable projectiles), 2.10 (item displays)
#Examples:
#item of event-entity
#set the item inside of event-entity to a diamond sword named "Example"
expression:
	patterns:
		[the] item [inside] of %entities%
		%entities%'[s] item [inside]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: slot
#Item with CustomModelData
#Get an item with a CustomModelData tag. (Value is an integer between 0 and 99999999)
#since 2.5
#Examples:
#give player a diamond sword with custom model data 2
#set slot 1 of inventory of player to wooden hoe with custom model data 357
#1.14+
expression:
	patterns:
		%itemtype% with [custom] model data %number%
	return type: itemtype
#Item with Enchantment Glint
#Get an item with or without enchantment glint.
#since 2.10
#Examples:
#set {_item with glint} to diamond with enchantment glint
#set {_item without glint} to diamond without enchantment glint
#Spigot 1.20.5+
expression:
	patterns:
		%itemtypes% with[out] [enchant[ment]] glint
	return type: itemtype
#Item with Item Flags
#Creates a new item with the specified item flags.
#since 2.10
#Examples:
#give player diamond sword with item flags hide enchants and hide attributes
#set {_item} to player's tool with item flag hide additional tooltip
#give player torch with hide placed on item flag
#set {_item} to diamond sword with all item flags
expression:
	patterns:
		%itemtypes% with [the] item flag[s] %itemflags%
		%itemtypes% with [the] %itemflags% item flag[s]
		%itemtypes% with all [the] item flags
	return type: itemtype
#Item with Lore
#Returns the given item type with the specified lore added to it.
#If multiple strings are passed, each of them will be a separate line in the lore.
#since 2.3
#Examples:
#set {_test} to stone with lore "line 1" and "line 2"
#give {_test} to player
expression:
	patterns:
		%itemtype% with [(a|the)] lore %strings%
	return type: itemtype
#Item with Tooltip
#Get an item with or without entire/additional tooltip.
#If changing the 'entire' tooltip of an item, nothing will show up when a player hovers over it.
#If changing the 'additional' tooltip, only specific parts (which change per item) will be hidden.
#since INSERT VERSION
#Examples:
#set {_item with additional tooltip} to diamond with additional tooltip
#set {_item without entire tooltip} to diamond without entire tooltip
#Minecraft 1.20.5+
expression:
	patterns:
		%itemtypes% with[out] [entire|additional] tool[ ]tip[s]
	return type: itemtype
#Items
#Items or blocks of a specific type, useful for looping.
#since 1.0 pre-5
#Examples:
#loop items of type ore and log:
#	block contains loop-item
#	message "Theres at least one %loop-item% in this block"
#drop all blocks at the player  drops one of every block at the player
expression:
	patterns:
		[all [[of] the]|the] block[[ ]type]s
		every block[[ ]type]
		[all [[of] the]|the|every] block[s] of type[s] %itemtypes%
		[all [[of] the]|the|every] item[s] of type[s] %itemtypes%
	return type: itemtype
#Items In
#All items or specific type(s) of items in an inventory. Useful for looping or storing in a list variable.
#Please note that the positions of the items in the inventory are not saved, only their order is preserved.
#since 2.0, 2.8.0 (specific types of items)
#Examples:
#loop all items in the player's inventory:
#	loop-item is enchanted
#	remove loop-item from the player
#set {inventory::%uuid of player%::*} to items in the player's inventory
expression:
	patterns:
		[all [[of] the]] items ([with]in|of|contained in|out of) [inventor(y|ies)] %inventories%
		all [[of] the] %itemtypes% ([with]in|of|contained in|out of) [inventor(y|ies)] %inventories%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: slot
#Join & Split
#Joins several texts with a common delimiter (e.g. ", "), or splits a text into multiple texts at a given delimiter.
#since 2.1, 2.5.2 (regex support), 2.7 (case sensitivity), 2.10 (without trailing string)
#Examples:
#message "Online players: %join all players' names with "" | ""%"  %all players% would use the default "x, y, and z"
#set {_s::*} to the string argument split at ","
expression:
	patterns:
		(concat[enate]|join) %strings% [(with|using|by) [[the] delimiter] %string%]
		split %string% (at|using|by) [[the] delimiter] %string% [with case sensitivity] [without [the] trailing [empty] (string|text)]
		%string% split (at|using|by) [[the] delimiter] %string% [with case sensitivity] [without [the] trailing [empty] (string|text)]
		regex split %string% (at|using|by) [[the] delimiter] %string% [without [the] trailing [empty] (string|text)]
		regex %string% split (at|using|by) [[the] delimiter] %string% [without [the] trailing [empty] (string|text)]
	return type: text
#Language
#Currently selected game language of a player. The value of the language is not defined properly.
#The vanilla Minecraft client will use lowercase language / country pairs separated by an underscore, but custom resource packs may use any format they wish.
#since 2.3
#Examples:
#message player's current language
expression:
	patterns:
		[the] [([currently] selected|current)] [game] (language|locale) [setting] of %players%
		%players%'[s] [([currently] selected|current)] [game] (language|locale) [setting]
	return type: text
#Last Attacker
#The last block or entity that attacked an entity.
#since 2.5.1
#Examples:
#send "%last attacker of event-entity%"
expression:
	patterns:
		[the] last attacker of %entity%
		%entity%'[s] last attacker
	return type: object
#Last Damage
#The last damage that was done to an entity. Note that changing it doesn't deal more/less damage.
#since 2.5.1
#Examples:
#set last damage of event-entity to 2
expression:
	patterns:
		[the] last damage of %livingentities%
		%livingentities%'[s] last damage
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Last Damage Cause
#Cause of last damage done to an entity
#since 2.2-Fixes-V10
#Examples:
#set last damage cause of event-entity to fire tick
expression:
	patterns:
		[the] last damage (cause|reason|type) of %livingentities%
		%livingentities%'[s] last damage (cause|reason|type)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: damagecause
#Last Death Location
#Gets the last death location of a player, or offline player, if available.
#Can also be set, reset, and deleted if the player is online.
#since 2.10
#Examples:
#set {_loc} to the last death location of player
#teleport player to last death location of (random element out of all players)
expression:
	patterns:
		[the] [last] death location[s] of %offlineplayers%
		%offlineplayers%'[s] [last] death location[s]
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: location
#Last Loaded Server Icon
#Returns the last loaded server icon with the load server icon effect.
#since 2.3
#Examples:
#set {server-icon} to the last loaded server icon
#Paper 1.12.2 or newer
expression:
	patterns:
		[the] [last[ly]] loaded server icon
	return type: servericon
#Last Resource Pack Response
#Returns the last resource pack response received from a player.
#since 2.4
#Examples:
#if player's last resource pack response is deny or download fail:
#Paper 1.9 or newer
expression:
	patterns:
		[the] [last] resource pack response[s] of %players%
		%players%'[s] [last] resource pack response[s]
	return type: resourcepackstate
#Last Spawned Entity
#Holds the entity that was spawned most recently with the spawn effect (section), dropped with the drop effect, shot with the shoot effect or created with the lightning effect. Please note that even though you can spawn multiple mobs simultaneously (e.g. with 'spawn 5 creepers'), only the last spawned mob is saved and can be used. If you spawn an entity, shoot a projectile and drop an item you can however access all them together.
#since 1.3 (spawned entity), 2.0 (shot entity), 2.2-dev26 (dropped item), 2.7 (struck lightning, firework)
#Examples:
#spawn a priest
#set {healer::%spawned priest%} to true
#shoot an arrow from the last spawned entity
#ignite the shot projectile
#drop a diamond sword
#push last dropped item upwards
#teleport player to last struck lightning
#delete last launched firework
expression:
	patterns:
		[the] [last[ly]] (spawned|shot) %*entitydata%
		[the] [last[ly]] dropped (item)
		[the] [last[ly]] (created|struck) (lightning)
		[the] [last[ly]] (launched|deployed) (firework)
	return type: entity
#Last/First Login Time
#When a player last/first logged in the server. 'last login' requires paper to get the last login, otherwise it will get the last time they were seen on the server.
#since 2.5
#Examples:
#command /onlinefor:
#	trigger:
#		send "You have been online for %difference between player's last login and now%."
#		send "You first joined the server %difference between player's first login and now% ago."
expression:
	patterns:
		[the] (last|first) login of %offlineplayers%
		%offlineplayers%'[s] (last|first) login
	return type: date
#Leash Holder
#The leash holder of a living entity.
#since 2.3
#Examples:
#set {_example} to the leash holder of the target mob
expression:
	patterns:
		[the] leash holder[s] of %livingentities%
		%livingentities%'[s] leash holder[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: entity
#Length
#The length of a text, in number of characters.
#since 2.1
#Examples:
#set {_l} to length of the string argument
expression:
	patterns:
		[the] length of %strings%
		%strings%'[s] length
	return type: long
#Level
#The level of a player.
#since unknown (before 2.1)
#Examples:
#reduce the victim's level by 1
#set the player's level to 0
expression:
	patterns:
		[the] level of %players%
		%players%'[s] level
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: long
#Level Progress
#The player's progress in reaching the next level, this represents the experience bar in the game. Please note that this value is between 0 and 1 (e.g. 0.5 = half experience bar).
#Changing this value can cause the player's level to change if the resulting level progess is negative or larger than 1, e.g. increase the player's level progress by 0.5 will make the player gain a level if their progress was more than 50%.
#since 2.0
#Examples:
# use the exp bar as mana
#on rightclick with a blaze rod:
#	player's level progress is larger than 0.2
#	shoot a fireball from the player
#	reduce the player's level progress by 0.2
#every 2 seconds:
#	loop all players:
#		level progress of loop-player is smaller than 0.9:
#			increase level progress of the loop-player by 0.1
#		else:
#			set level progress of the loop-player to 0.99
#on xp spawn:
#	cancel event
expression:
	patterns:
		[the] level progress of %players%
		%players%'[s] level progress
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Light Level
#Gets the light level at a certain location which ranges from 0 to 15.
#It can be separated into sunlight (15 = direct sunlight, 1-14 = indirect) and block light (torches, glowstone, etc.). The total light level of a block is the maximum of the two different light types.
#since 1.3.4
#Examples:
# set vampire players standing in bright sunlight on fire
#every 5 seconds:
#	loop all players:
#		{vampire::%uuid of loop-player%} is true
#		sunlight level at the loop-player is greater than 10
#		ignite the loop-player for 5 seconds
expression:
	patterns:
		[(sky|sun|block)[ ]]light[ ]level [(of|%direction%) %location%]
	return type: byte
#Loaded Plugins
#An expression to obtain a list of the names of the server's loaded plugins.
#since 2.7
#Examples:
#if the loaded plugins contains "Vault":
#	broadcast "This server uses Vault plugin!"
#send "Plugins (%size of loaded plugins%): %plugins%" to player
expression:
	patterns:
		[(all [[of] the]|the)] [loaded] plugins
	return type: text
#Location
#The location of a block or entity. This not only represents the x, y and z coordinates of the location but also includes the world and the direction an entity is looking (e.g. teleporting to a saved location will make the teleported entity face the same saved direction every time).
#Please note that the location of an entity is at it's feet, use head location to get the location of the head.
#Examples:
#set {home::%uuid of player%} to the location of the player
#message "You home was set to %player's location% in %player's world%."
expression:
	patterns:
		(location|position) of %location%
		%location%'[s] (location|position)
	return type: location
#Location
#The location where an event happened (e.g. at an entity or block), or a location relative to another (e.g. 1 meter above another location).
#since 2.0
#Examples:
#drop 5 apples at the event-location  exactly the same as writing 'drop 5 apples'
#set {_loc} to the location 1 meter above the player
expression:
	patterns:
		[the] [event-](location|position)
		[the] (location|position) %directions% [%location%]
	return type: location
#Location At
#Allows to create a location from three coordinates and a world.
#since 2.0
#Examples:
#set {_loc} to the location at arg-1, arg-2, arg-3 of the world arg-4
#distance between the player and the location (0, 0, 0) is less than 200
expression:
	patterns:
		[the] (location|position) [at] [(][x[ ][=[ ]]]%number%, [y[ ][=[ ]]]%number%, [and] [z[ ][=[ ]]]%number%[)] [[(in|of) [[the] world]] %world%]
	return type: location
#Loop Iteration
#Returns the loop's current iteration count (for both normal and while loops).
#since 2.8.0
#Examples:
#while player is online:
#	give player 1 stone
#	wait 5 ticks
#	if loop-counter > 30:
#		stop loop
#loop {top-balances::*}:
#	if loop-iteration <= 10:
#		broadcast "%loop-iteration% %loop-index% has $%loop-value%"
expression:
	patterns:
		[the] loop(-| )(counter|iteration)[-%*number%]
	return type: long
#Loop value
#Returns the previous, current, or next looped value.
#since 1.0, 2.8.0 (loop-counter), 2.10 (previous, next)
#Examples:
# Countdown
#loop 10 times:
#	message "%11 - loop-number%"
#	wait a second
# Generate a 10x10 floor made of randomly colored wool below the player
#loop blocks from the block below the player to the block 10 east of the block below the player:
#	loop blocks from the loop-block to the block 10 north of the loop-block:
#		set loop-block-2 to any wool
#loop {top-balances::*}:
#	loop-iteration <= 10
#	send "%loop-iteration% %loop-index% has $%loop-value%"
#loop shuffled (integers between 0 and 8):
#	if all:
#		previous loop-value = 1
#		loop-value = 4
#		next loop-value = 8
#	then:
#		 kill all players
expression:
	patterns:
		[the] [current] loop-<.+>
		[the] next loop-<.+>
		[the] previous loop-<.+>
	return type: object
#Loot
#The loot that will be generated in a 'loot generate' event.
#since 2.7
#Examples:
#on loot generate:
#	chance of %10
#	add 64 diamonds to loot
#	send "You hit the jackpot!!"
#MC 1.16+
expression:
	patterns:
		[the] loot
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: item
#Loot Context
#The loot context involved in the context create section.
#since 2.10
#Examples:
#set {_context} to a new loot context at {_location}:
#	broadcast loot context
expression:
	patterns:
		[the] loot[ ]context
	return type: lootcontext
#Loot Location of Loot Context
#Returns the loot location of a loot context.
#since 2.10
#Examples:
#set {_player} to player
#set {_context} to a loot context at player:
#	if {_player} is in "world_nether":
#		set loot location to location of last spawned pig
#send loot location of {_context} to player
expression:
	patterns:
		[the] loot[ing] [context] location [of %lootcontexts%]
		%lootcontexts%'[s] loot[ing] [context] location
	return type: location
#Loot Table
#Returns the loot table of an entity or block.
#Setting the loot table of a block will update the block state, and once opened will generate loot of the specified loot table. Please note that doing so may cause warnings in the console due to over-filling the chest.
#Please note that resetting/deleting the loot table of an ENTITY will reset the entity's loot table to its default.
#since 2.10
#Examples:
#set loot table of event-entity to "minecraft:entities/ghast"
# this will set the loot table of the entity to a ghast's loot table, thus dropping ghast tears and gunpowder
#set loot table of event-block to "minecraft:chests/simple_dungeon"
expression:
	patterns:
		[the] loot[ ]table[s] of %entities/blocks%
		%entities/blocks%'[s] loot[ ]table[s]
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: loottable
#Loot Table from Key
#Returns the loot table from a namespaced key.
#since 2.10
#Examples:
#set {_table} to loot table "minecraft:chests/simple_dungeon"
expression:
	patterns:
		[the] loot[ ]table[s] %strings%
	return type: loottable
#Loot of Loot Table
#Returns the items of a loot table using a loot context. Not specifying a loot context will use a loot context with a location at the world's origin.
#since 2.10
#Examples:
#set {_items::*} to loot items of the loot table "minecraft:chests/simple_dungeon" with loot context {_context}
# this will set {_items::*} to the items that would be dropped from the simple dungeon loot table with the given loot context
#give player loot items of entity's loot table with loot context {_context}
# this will give the player the items that the entity would drop with the given loot context
expression:
	patterns:
		[the] loot of %loottables% [(with|using) %lootcontext%]
		%loottables%'[s] loot [(with|using) %lootcontext%]
	return type: item
#Looted Entity of Loot Context
#Returns the looted entity of a loot context.
#since 2.10
#Examples:
#set {_entity} to looted entity of {_context}
#set {_context} to a loot context at player:
#	set loot luck value to 10
#	set looter to player
#	set looted entity to last spawned pig
expression:
	patterns:
		[the] looted entity [of %lootcontexts%]
		%lootcontexts%'[s] looted entity
	return type: entity
#Looter of Loot Context
#Returns the looter of a loot context. Note that setting the looter will read the looter's tool enchantments (e.g. looting) when generating loot.
#since 2.10
#Examples:
#set {_killer} to looter of {_context}
#set {_context} to a loot context at player:
#	set loot luck value to 10
#	set looter to player
#	set looted entity to last spawned pig
expression:
	patterns:
		[the] (looter|looting player) [of %lootcontexts%]
		%lootcontexts%'[s] (looter|looting player)
	return type: player
#Lore
#An item's lore.
#since 2.1
#Examples:
#set the 1st line of the item's lore to "<orange>Excalibur 2.0"
expression:
	patterns:
		[the] lore of %itemstack/itemtype%
		%itemstack/itemtype%'[s] lore
		[the] line %number% of [the] lore of %itemstack/itemtype%
		[the] line %number% of %itemstack/itemtype%'[s] lore
		[the] %number%(st|nd|rd|th) line of [the] lore of %itemstack/itemtype%
		[the] %number%(st|nd|rd|th) line of %itemstack/itemtype%'[s] lore
	return type: text
#Love Time
#The amount of time the animals have been in love for. Using a value of 30 seconds is equivalent to using an item to breed them.
#Only works on animals that can be bred and returns '0 seconds' for animals that can't be bred.
#since 2.10
#Examples:
#on right click:
#	send "%event-entity% has been in love for %love time of event-entity% more than you!" to player
expression:
	patterns:
		[the] love[d] time of %livingentities%
		%livingentities%'[s] love[d] time
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Lowest/Highest Solid Block
#An expression to obtain the lowest or highest solid (impassable) block at a location.
#Note that the y-coordinate of the location is not taken into account for this expression.
#since 2.2-dev34, 2.9.0 (lowest solid block, 'non-air' option removed, additional syntax option)
#Examples:
#teleport the player to the block above the highest block at the player
#set the highest solid block at the player's location to the lowest solid block at the player's location
expression:
	patterns:
		[the] (highest|lowest) [solid] block (at|of) %locations%
		%locations%'[s] (highest|lowest) [solid] block
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Luck of Loot Context
#Returns the luck of a loot context as a float. This represents the luck potion effect that an entity can have.
#since 2.10
#Examples:
#set {_luck} to loot luck value of {_context}
#set {_context} to a loot context at player:
#	set loot luck value to 10
#	set looter to player
#	set looted entity to last spawned pig
expression:
	patterns:
		[the] loot[ing] [context] luck [value|factor] [of %lootcontexts%]
		%lootcontexts%'[s] loot[ing] [context] luck [value|factor]
	return type: float
#MOTD
#The message of the day in the server list. This can be changed in a server list ping event only.
#'default MOTD' returns the default MOTD always and can't be changed.
#since 2.3
#Examples:
#on server list ping:
#	set the motd to "Join now!"
expression:
	patterns:
		[the] [(default)|(shown|displayed)] (MOTD|message of [the] day)
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Max Durability
#The maximum durability of an item. Changing requires Minecraft 1.20.5+
#Note: 'delete' will remove the max durability from the item (making it a non-damageable item). Delete requires Paper 1.21+
#since 2.5, 2.9.0 (change)
#Examples:
#maximum durability of diamond sword
#if max durability of player's tool is not 0:  Item is damageable
#set max durability of player's tool to 5000
#add 5 to max durability of player's tool
#reset max durability of player's tool
#delete max durability of player's tool
#Minecraft 1.20.5+ (custom amount)
expression:
	patterns:
		[the] max[imum] (durabilit(y|ies)|damage) of %itemtypes/itemstacks/slots%
		%itemtypes/itemstacks/slots%'[s] max[imum] (durabilit(y|ies)|damage)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Max Health
#The maximum health of an entity, e.g. 10 for a player.
#since 2.0
#Examples:
#on join:
#	set the maximum health of the player to 100
#spawn a giant
#set the last spawned entity's max health to 1000
expression:
	patterns:
		[the] max[imum] health of %livingentities%
		%livingentities%'[s] max[imum] health
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Max Item Use Time
#Returns the max duration an item can be used for before the action completes. E.g. it takes 1.6 seconds to drink a potion, or 1.4 seconds to load an unenchanted crossbow.
#Some items, like bows and shields, do not have a limit to their use. They will return 1 hour.
#since 2.8.0
#Examples:
#on right click:
#	broadcast max usage duration of player's tool
#Paper
expression:
	patterns:
		[the] max[imum] [item] us(e|age) (time|duration) of %itemstacks%
		%itemstacks%'[s] max[imum] [item] us(e|age) (time|duration)
	return type: timespan
#Max Minecart Speed
#The maximum speed of a minecart.
#since 2.5.1
#Examples:
#on right click on minecart:
#	set max minecart speed of event-entity to 1
expression:
	patterns:
		[the] max[imum] minecart (speed|velocity) of %entities%
		%entities%'[s] max[imum] minecart (speed|velocity)
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Max Players
#The count of max players. This can be changed in a server list ping event only.
#'real max players' returns the real count of max players of the server and can be modified on Paper 1.16 or later.
#since 2.3, 2.7 (modify max real players)
#Examples:
#on server list ping:
#	set the max players count to (online players count + 1)
#Paper 1.16+ (modify max real players)
expression:
	patterns:
		[the] [(real|default)|(fake|shown|displayed)] max[imum] player[s] [count|amount|number|size]
		[the] [(real|default)|(fake|shown|displayed)] max[imum] (count|amount|number|size) of players
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Maximum Freeze Time
#The maximum amount of time an entity can spend in powdered snow before taking damage.
#since 2.7
#Examples:
#difference between player's freeze time and player's max freeze time is less than 1 second:
#	send "you're about to freeze!" to the player
expression:
	patterns:
		[the] max[imum] freeze time of %entities%
		%entities%'[s] max[imum] freeze time
	return type: timespan
#Maximum Stack Size
#The maximum stack size of an item (e.g. 64 for torches, 16 for buckets, 1 for swords, etc.) or inventory.
#In 1.20.5+, the maximum stack size of items can be changed to any integer from 1 to 99, and stacked up to the maximum stack size of the inventory they're in.
#since 2.1, 2.10 (changeable, inventories)
#Examples:
#send "You can hold %max stack size of player's tool% of %type of player's tool% in a slot." to player
#set the maximum stack size of inventory of all players to 16
#add 8 to the maximum stack size of player's tool
#reset the maximum stack size of {_gui}
#Spigot 1.20.5+ (changeable)
expression:
	patterns:
		[the] max[imum] stack[[ ]size] of %itemtypes/inventories%
		%itemtypes/inventories%'[s] max[imum] stack[[ ]size]
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Me
#A 'me' expression that can be used in players' effect commands only.
#since 2.1.1
#Examples:
#!heal me
#!kick myself
#!give a diamond axe to me
expression:
	patterns:
		me
		my[self]
	add:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: player
#Mending Repair Amount
#The number of durability points an item is to be repaired in a mending event.
# Modifying the repair amount will affect how much experience is given to the player after mending.
#since 2.5.1
#Examples:
#on item mend:
#	set the mending repair amount to 100
expression:
	patterns:
		[the] [mending] repair amount
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: long
#Message
#The (chat) message of a chat event, the join message of a join event, the quit message of a quit event, the death message of a death event or the broadcasted message in a broadcast event. This expression is mostly useful for being changed.
#since 1.4.6 (chat message), 1.4.9 (join & quit messages), 2.0 (death message), 2.9.0 (clear message), 2.10 (broadcasted message)
#Examples:
#on chat:
#	player has permission "admin"
#	set message to "&c%message%"
#on first join:
#	set join message to "Welcome %player% to our awesome server!"
#on join:
#	player has played before
#	set join message to "Welcome back, %player%!"
#on quit:
#	if {vanish::%player's uuid%} is set:
#		clear quit message
#	else:
#		set quit message to "%player% left this awesome server!"
#on death:
#	set the death message to "%player% died!"
#on broadcast:
#	set broadcast message to "&a[BROADCAST] %broadcast message%"
expression:
	patterns:
		[the] [chat( |-)]message
		[the] (join|log[ ]in)( |-)message
		[the] (quit|leave|log[ ]out|kick)( |-)message
		[the] death( |-)message
		[the] broadcast(-|[ed] )message
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Metadata
#Metadata is a way to store temporary data on entities, blocks and more that disappears after a server restart.
#since 2.2-dev36, 2.10 (add, remove)
#Examples:
#set metadata value "healer" of player to true
#broadcast "%metadata value ""healer"" of player%"
#clear metadata value "healer" of player
expression:
	patterns:
		metadata [(value|tag)[s]] %strings% of %metadataholders%
		%metadataholders%'[s] metadata [(value|tag)[s]] %string%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Middle of Location
#Returns the middle/center of a location. In other words, returns the middle of the X, Z coordinates and the floor value of the Y coordinate of a location.
#since 2.6.1
#Examples:
#command /stuck:
#	executable by: players
#	trigger:
#		teleport player to the center of player's location
#		send "You're no longer stuck."
expression:
	patterns:
		[the] (middle|center) [point] of %location%
		%location%'[s] (middle|center) [point]
	return type: location
#Minecart Derailed / Flying Velocity
#The velocity of a minecart as soon as it has been derailed or as soon as it starts flying.
#since 2.5.1
#Examples:
#on right click on minecart:
#	set derailed velocity of event-entity to vector 2, 10, 2
expression:
	patterns:
		[the] [minecart] (derailed|flying) velocity of %entities%
		%entities%'[s] [minecart] (derailed|flying) velocity
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: vector
#Moon Phase
#The current moon phase of a world.
#since 2.7
#Examples:
#if moon phase of player's world is full moon:
#	send "Watch for the wolves!"
#Paper 1.16+
expression:
	patterns:
		[the] (lunar|moon) phase[s] of %worlds%
		%worlds%'[s] (lunar|moon) phase[s]
	return type: lunarphase
#Moved blocks
#Blocks which are moved in a piston event. Cannot be used outside of piston events.
#since 2.2-dev27
#Examples:
#the moved blocks
expression:
	patterns:
		[the] moved blocks
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Name / Display Name / Tab List Name
#Represents the Minecraft account, display or tab list name of a player, or the custom name of an item, entity, block, inventory, gamerule, world, script or function.
#Players:
#	Name: The Minecraft account name of the player. Can't be changed, but 'display name' can be changed.
#	Display Name: The name of the player that is displayed in messages. This name can be changed freely and can include color codes, and is shared among all plugins (e.g. chat plugins will use the display name).
#Entities:
#	Name: The custom name of the entity. Can be changed. But for living entities, the players will have to target the entity to see its name tag. For non-living entities, the name will not be visible at all. To prevent this, use 'display name'.
#	Display Name: The custom name of the entity. Can be changed, which will also enable custom name visibility of the entity so name tag of the entity will be visible always.
#Items:
#	Name and Display Name: The custom name of the item (not the Minecraft locale name). Can be changed.
#Inventories:
#	Name and Display Name: The name/title of the inventory. Changing name of an inventory means opening the same inventory with the same contents but with a different name to its current viewers.
#Gamerules:
#	Name: The name of the gamerule. Cannot be changed.
#Worlds:
#	Name: The name of the world. Cannot be changed.
#Scripts:
#	Name: The name of a script, excluding its file extension.
#since before 2.1, 2.2-dev20 (inventory name), 2.4 (non-living entity support, changeable inventory name), 2.7 (worlds)
#Examples:
#on join:
#	player has permission "name.red"
#	set the player's display name to "<red>[admin] <gold>%name of player%"
#	set the player's tab list name to "<green>%player's name%"
#set the name of the player's tool to "Legendary Sword of Awesomeness"
expression:
	patterns:
		[the] name[s] of %offlineplayers/entities/nameds/inventories%
		%offlineplayers/entities/nameds/inventories%'[s] name[s]
		[the] (display|nick|chat|custom)[ ]name[s] of %offlineplayers/entities/nameds/inventories%
		%offlineplayers/entities/nameds/inventories%'[s] (display|nick|chat|custom)[ ]name[s]
		[the] (player|tab)[ ]list name[s] of %players%
		%players%'[s] (player|tab)[ ]list name[s]
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Named Item/Inventory
#Directly names an item/inventory, useful for defining a named item/inventory in a script. If you want to (re)name existing items/inventories you can either use this expression or use set <a href='ExprName'>name of <item/inventory> to <text></code>.
#since 2.0, 2.2-dev34 (inventories)
#Examples:
#give a diamond sword of sharpness 100 named "<gold>Excalibur" to the player
#set tool of player to the player's tool named "<gold>Wand"
#set the name of the player's tool to "<gold>Wand"
#open hopper inventory named "Magic Hopper" to player
expression:
	patterns:
		%itemtype/inventorytype% (named|with name[s]) %string%
	return type: object
#Nearest Entity
#Gets the entity nearest to a location or another entity.
#since 2.7
#Examples:
#kill the nearest pig and cow relative to player
#teleport player to the nearest cow relative to player
#teleport player to the nearest entity relative to player
#on click:
#	kill nearest pig
expression:
	patterns:
		[the] nearest %*entitydatas% [[relative] to %entity/location%]
		[the] %*entitydatas% nearest [to %entity/location%]
	return type: entity
#New Line
#Returns a line break separator.
#since 2.5
#Examples:
#send "Hello%nl%Goodbye!" to player
expression:
	patterns:
		nl
		new[ ]line
		line[ ]break
	return type: text
#No Damage Ticks
#The number of ticks that an entity is invulnerable to damage for.
#since 2.5, 2.11 (deprecated)
#Examples:
#on damage:
#	set victim's invulnerability ticks to 20 Victim will not take damage for the next second
expression:
	patterns:
		[the] (invulnerability|invincibility|no damage) tick[s] [of %livingentities%]
		%livingentities%'[s] (invulnerability|invincibility|no damage) tick[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: long
#No Damage Time
#The amount of time an entity is invulnerable to any damage.
#since 2.11
#Examples:
#on damage:
#	set victim's invulnerability time to 20 ticks Victim will not take damage for the next second
#if the no damage timespan of {_entity} is 0 seconds:
#	set the invincibility time span of {_entity} to 1 minute
expression:
	patterns:
		[the] (invulnerability|invincibility|no damage) time[[ ]span] [of %livingentities%]
		%livingentities%'[s] (invulnerability|invincibility|no damage) time[[ ]span]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Node (Experimental)
#Returns a node inside a config (or another section-node).
#Nodes in Skript configs are written in the format `key: value`.
#Section nodes can contain other nodes.
#since 2.10
#Examples:
#set {_node} to node "language" in the skript config
#if text value of {_node} is "french":
#	broadcast "Bonjour!"
#
#set {_script} to the current script
#loop nodes of the current script:
#	broadcast name of loop-value
expression:
	patterns:
		[the] node %string% (of|in) %node%
		%node%'[s] node %string%
		[the] nodes (of|in) %nodes%
		%node%'[s] nodes
	return type: node
#Now
#The current system time of the server. Use time to get the Minecraft time of a world.
#since 1.4
#Examples:
#broadcast "Current server time: %now%"
expression:
	patterns:
		now
	return type: date
#Number of Characters
#The number of uppercase, lowercase, or digit characters in a string.
#since 2.5
#Examples:
#Simple Chat Filter
#on chat:
#	if number of uppercase chars in message / length of message > 0.5
#		cancel event
#		send "<red>Your message has to many caps!" to player
expression:
	patterns:
		number of upper[ ]case char(acters|s) in %string%
		number of lower[ ]case char(acters|s) in %string%
		number of digit char(acters|s) in %string%
	return type: long
#Numbers
#All numbers between two given numbers, useful for looping.
#Use 'numbers' if your start is not an integer and you want to keep the fractional part of the start number constant, or use 'integers' if you only want to loop integers.
#You may also use 'decimals' if you want to use the decimal precision of the start number.
#You may want to use the 'times' expression instead, for instance 'loop 5 times:'
#since 1.4.6 (integers & numbers), 2.5.1 (decimals)
#Examples:
#loop numbers from 2.5 to 5.5:  loops 2.5, 3.5, 4.5, 5.5
#loop integers from 2.9 to 5.1:  same as '3 to 5', i.e. loops 3, 4, 5
#loop decimals from 3.94 to 4:  loops 3.94, 3.95, 3.96, 3.97, 3.98, 3.99, 4
expression:
	patterns:
		[(all [[of] the]|the)] (numbers|integers|decimals) (between|from) %number% (and|to) %number%
	return type: num
#Offline players
#All players that have ever joined the server. This includes the players currently online.
#since 2.2-dev35
#Examples:
#send "Size of all players who have joined the server: %size of all offline players%"
expression:
	patterns:
		[(all [[of] the]|the)] offline[ ]players
	return type: offlineplayer
#Online Player Count
#The amount of online players. This can be changed in a server list ping event only to show fake online player amount.
#real online player count always return the real count of online players and can't be changed.
#since 2.3
#Examples:
#on server list ping:
#	 This will make the max players count 5 if there are 4 players online.
#	set the fake max players count to (online player count + 1)
#Paper (fake count)
expression:
	patterns:
		[the] [((real|default)|(fake|shown|displayed))] [online] player (count|amount|number)
		[the] [((real|default)|(fake|shown|displayed))] (count|amount|number|size) of online players
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: long
#Opened Inventory
#Return the currently opened inventory of a player.
#If no inventory is open, it returns the own player's crafting inventory.
#since 2.2-dev24, 2.2-dev35 (Just 'current inventory' works in player events)
#Examples:
#set slot 1 of player's current inventory to diamond sword
expression:
	patterns:
		[the] (current|open|top) inventory [of %players%]
		%players%'[s] (current|open|top) inventory
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: inventory
#Panda Gene
#The main or hidden gene of a panda.
#since 2.11
expression:
	patterns:
		[the] (main|hidden) gene[s] of %livingentities%
		%livingentities%'[s] (main|hidden) gene[s]
	set:
#		(internal code)
	return type: gene
#Parse
#Parses text as a given type, or as a given pattern.
#This expression can be used in two different ways: One which parses the entire text as a single instance of a type, e.g. as a number, and one that parses the text according to a pattern.
#If the given text could not be parsed, this expression will return nothing and the parse error will be set if some information is available.
#Some notes about parsing with a pattern:
#- The pattern must be a Skript pattern, e.g. percent signs are used to define where to parse which types, e.g. put a %number% or %items% in the pattern if you expect a number or some items there.
#- You have to save the expression's value in a list variable, e.g. set {parsed::*} to message parsed as "...".
#- The list variable will contain the parsed values from all %types% in the pattern in order. If a type was plural, e.g. %items%, the variable's value at the respective index will be a list variable, e.g. the values will be stored in {parsed::1::*}, not {parsed::1}.
#since 2.0
#Examples:
#set {var} to line 1 parsed as number
#on chat:
#	set {var::*} to message parsed as "buying %items% for %money%"
#	if parse error is set:
#		message "%parse error%"
#	else if {var::*} is set:
#		cancel event
#		remove {var::2} from the player's balance
#		give {var::1::*} to the player
expression:
	patterns:
		%string% parsed as (%*classinfo%|"<.*>")
	return type: object
#Parse Error
#The error which caused the last parse operation to fail, which might not be set if a pattern was used and the pattern didn't match the provided text at all.
#since 2.0
#Examples:
#set {var} to line 1 parsed as integer
#if {var} is not set:
#	parse error is set:
#		message "<red>Line 1 is invalid: %last parse error%"
#	else:
#		message "<red>Please put an integer on line 1!"
expression:
	patterns:
		[the] [last] [parse] error
	return type: text
#Passenger
#The passenger of a vehicle, or the rider of a mob.
#For 1.11.2 and above, it returns a list of passengers and you can use all changers in it.
#See also: vehicle
#since 2.0, 2.2-dev26 (Multiple passengers for 1.11.2+)
#Examples:
#for 1.11 and lower
#passenger of the minecart is a creeper or a cow
#the saddled pig's passenger is a player
#for 1.11.2+
#passengers of the minecart contains a creeper or a cow
#the boat's passenger contains a pig
#add a cow and a zombie to passengers of last spawned boat
#set passengers of player's vehicle to a pig and a horse
#remove all pigs from player's vehicle
#clear passengers of boat
expression:
	patterns:
		[the] passenger[s] of %entities%
		%entities%'[s] passenger[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: entity
#Percent of
#Returns a percentage of one or more numbers.
#since 2.8.0
#Examples:
#set damage to 10% of victim's health
#set damage to 125 percent of damage
#set {_result} to {_percent} percent of 999
#set {_result::*} to 10% of {_numbers::*}
#set experience to 50% of player's total experience
expression:
	patterns:
		%number%(\%| percent) of %numbers%
	return type: num
#Pi
#Returns the mathematical constant pi. (approx. 3.1415926535)
#since 2.7
#Examples:
#set {_tau} to pi * 2
expression:
	patterns:
		(pi|π)
	return type: double
#Pickup Delay
#The amount of time before a dropped item can be picked up by an entity.
#since 2.7
#Examples:
#drop diamond sword at {_location} without velocity
#set pickup delay of last dropped item to 5 seconds
expression:
	patterns:
		[the] pick[ ]up delay of %entities%
		%entities%'[s] pick[ ]up delay
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Ping
#Pings of players, as Minecraft server knows them. Note that they will almost certainly be different from the ones you'd get from using ICMP echo requests. This expression is only supported on some server software (PaperSpigot).
#since 2.2-dev36
#Examples:
#command /ping <player=%player%>:
#	trigger:
#		send "%arg-1%'s ping is %arg-1's ping%"
expression:
	patterns:
		[the] ping of %players%
		%players%'[s] ping
	return type: long
#Plain Item
#A plain item is an item with no modifications. It can be used to convert items to their default state or to match with other default items.
#since 2.6
#Examples:
#if the player's tool is a plain diamond:  check if player's tool has no modifications
#	send "You are holding a plain diamond!"
expression:
	patterns:
		[a[n]] (plain|unmodified) %itemtype%
	return type: itemtype
#Player Chat Completions
#The custom chat completion suggestions. You can add, set, remove, and clear them. Removing the names of online players with this expression is ineffective.
#This expression will not return anything due to Bukkit limitations.
#since 2.10
#Examples:
#add "Skript" and "Njol" to chat completions of all players
#remove "text" from {_p}'s chat completions
#clear player's chat completions
#Spigot 1.19+
expression:
	patterns:
		[the] [custom] chat completion[s] of %players%
		%players%'[s] [custom] chat completion[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Player Input Keys
#Get the current input keys of a player.
#since 2.10
#Examples:
#broadcast "%player% is pressing %current input keys of player%"
#Minecraft 1.21.2+
expression:
	patterns:
		[the] [current] (inputs|input keys) of %players%
		%players%'[s] [current] (inputs|input keys)
	return type: inputkey
#Player List Header and Footer
#The message above and below the player list in the tab menu.
#since 2.4
#Examples:
#set all players' tab list header to "Welcome to the Server!"
#send "%the player's tab list header%" to player
#reset all players' tab list header
#Minecraft 1.13 or newer
expression:
	patterns:
		[the] (player|tab)[ ]list (header|footer) [(text|message)] of %players%
		%players%'[s] (player|tab)[ ]list (header|footer) [(text|message)]
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Player Protocol Version
#Player's protocol version. For more information and list of protocol versions visit wiki.vg.
#since 2.6.2
#Examples:
#command /protocolversion &ltplayer&gt:
#	trigger:
#		send "Protocol version of %arg-1%: %protocol version of arg-1%"
#Paper 1.12.2 or newer
expression:
	patterns:
		[the] protocol version of %players%
		%players%'[s] protocol version
	return type: integer
#Player Skull
#Gets a skull item representing a player. Skulls for other entities are provided by the aliases.
#since 2.0
#Examples:
#give the victim's skull to the attacker
#set the block at the entity to the entity's skull
expression:
	patterns:
		[the] (head|skull) of %offlineplayers%
		%offlineplayers%'[s] (head|skull)
	return type: itemtype
#Portal
#The blocks associated with a portal in the portal creation event.
#since 2.4
#Examples:
#on portal creation:
#	loop portal blocks:
#		broadcast "%loop-block% is part of a portal!"
expression:
	patterns:
		[the] portal['s] blocks
		[the] blocks of [the] portal
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Portal Cooldown
#The amount of time before an entity can use a portal. By default, it is 15 seconds after exiting a nether portal or end gateway.
#Players in survival/adventure get a cooldown of 0.5 seconds, while those in creative get no cooldown.
#Resetting will set the cooldown back to the default 15 seconds for non-player entities and 0.5 seconds for players.
#since 2.8.0
#Examples:
#on portal:
#	wait 1 tick
#	set portal cooldown of event-entity to 5 seconds
expression:
	patterns:
		[the] portal cooldown of %entities%
		%entities%'[s] portal cooldown
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Potion Effect
#Create a new potion effect to apply to an entity or item type. Do note that when applying potion effects 
#to tipped arrows/lingering potions, Minecraft reduces the timespan.
#since 2.5.2
#Examples:
#set {_p} to potion effect of speed of tier 1 without particles for 10 minutes
#add {_p} to potion effects of player's tool
#add {_p} to potion effects of target entity
#add potion effect of speed 1 to potion effects of player
expression:
	patterns:
		[new] potion effect of %potioneffecttype% [potion] [[[of] tier] %number%] [(without particles)] [for %timespan%]
		[new] ambient potion effect of %potioneffecttype% [potion] [[[of] tier] %number%] [(without particles)] [for %timespan%]
	return type: potioneffect
#Potion Effect Tier
#An expression to obtain the amplifier of a potion effect applied to an entity.
#since 2.7
#Examples:
#if the amplifier of haste of player >= 3:
expression:
	patterns:
		[the] [potion] (tier|amplifier|level) of %potioneffecttypes% (of|for|on) %livingentities%
	return type: integer
#Potion Effects
#Represents the active potion effects of entities and itemtypes.
#You can clear all potion effects of an entity/itemtype and add/remove a potion effect/type to/from an entity/itemtype.
#Do note you will not be able to clear the base potion effects of a potion item. In that case, just set the item to a water bottle.
#When adding a potion effect type (rather than a potion effect), it will default to 15 seconds with tier 1.
#since 2.5.2
#Examples:
#set {_p::*} to active potion effects of player
#clear all the potion effects of player
#clear all the potion effects of player's tool
#add potion effects of player to potion effects of player's tool
#add speed to potion effects of target entity
#remove speed and night vision from potion effects of player
expression:
	patterns:
		[the] [(all [[of] the]|the)] [active] potion effects of %livingentities/itemtypes%
		%livingentities/itemtypes%'[s] [(all [[of] the]|the)] [active] potion effects
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	return type: potioneffect
#Projectile Critical State
#A projectile's critical state. The only currently accepted projectiles are arrows and tridents.
#since 2.5.1
#Examples:
#on shoot:
#	event-projectile is an arrow
#	set projectile critical mode of event-projectile to true
expression:
	patterns:
		[the] (projectile|arrow) critical (state|ability|mode) of %projectiles%
		%projectiles%'[s] (projectile|arrow) critical (state|ability|mode)
	set:
#		(internal code)
	return type: boolean
#Projectile Force
#Returns the force at which a projectile was shot within an entity shoot bow event.
#since 2.11
expression:
	patterns:
		[the] projectile force
	return type: float
#Protocol Version
#The protocol version that will be sent as the protocol version of the server in a server list ping event. For more information and list of protocol versions visit wiki.vg.
#If this protocol version doesn't match with the protocol version of the client, the client will see the version string.
#But please note that, this expression has no visual effect over the version string. For example if the server uses PaperSpigot 1.12.2, and you make the protocol version 107 (1.9),
#the version string will not be "Paper 1.9", it will still be "Paper 1.12.2".
#But then you can customize the version string as you wish.
#Also if the protocol version of the player is higher than protocol version of the server, it will say
#"Server out of date!", and if vice-versa "Client out of date!" when you hover on the ping bars.
#This can be set in a server list ping event only
#(increase and decrease effects cannot be used because that wouldn't make sense).
#since 2.3
#Examples:
#on server list ping:
#	set the version string to "<light green>Version: <orange>%minecraft version%"
#	set the protocol version to 0  13w41a (1.7) - so the player will see the custom version string almost always
#Paper 1.12.2 or newer
expression:
	patterns:
		[the] [server] [(sent|required|fake)] protocol version [number]
	set:
#		(internal code)
	return type: long
#Queue (Experimental)
#Requires the using queues experimental feature flag to be enabled.
#
#Creates a new queue.
#A queue is a set of elements that can have things removed from the start and added to the end.
#
#Any value can be added to a queue. Adding a non-existent value (e.g. `{variable that isn't set}`) will have no effect.
#This means that removing an element from the queue will always return a value unless the queue is empty.
#
#Requesting an element from a queue (e.g. `the 1st element of {queue}`) also removes it from the queue.
#since 2.10 (experimental)
#Examples:
#set {queue} to a new queue
#add "hello" and "there" to {queue}
#broadcast the first element of {queue}  hello
#broadcast the first element of {queue}  there
# queue is now empty
#set {queue} to a new queue of "hello" and "there"
#broadcast the last element of {queue}  removes 'there'
#add "world" to {queue}
#broadcast the first 2 elements of {queue}  removes 'hello', 'world'
expression:
	patterns:
		[a] [new] queue [(of|with) %objects%]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	return type: queue
#Queue Start/End (Experimental)
#Requires the using queues experimental feature flag to be enabled.
#
#The first or last element in a queue. Asking for this does not remove the element from the queue.
#
#This is designed for use with the add changer: to add or remove elements from the start or the end of the queue.
#
#since 2.10 (experimental)
#Examples:
#set {queue} to a new queue
#add "hello" to {queue}
#add "foo" to the start of {queue}
#broadcast the first element of {queue}  foo
#broadcast the first element of {queue}  hello
# queue is now empty
expression:
	patterns:
		[the] (start|end) of %queue%
		%queue%'[s] (start|end)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Quit Reason
#The quit reason as to why a player disconnected in a quit event.
#since 2.8.0
#Examples:
#on quit:
#	quit reason was kicked
#	player is banned
#	clear {server::player::%uuid of player%::*}
#Paper 1.16.5+
expression:
	patterns:
		[the] (quit|disconnect) (cause|reason)
	return type: quitreason
#Random
#Gets a random item out of a set, e.g. a random player out of all players online.
#since 1.4.9
#Examples:
#give a diamond to a random player out of all players
#give a random item out of all items to the player
expression:
	patterns:
		[a] random %*classinfo% [out] of %objects%
	return type: object
#Random Character
#One or more random characters between two given characters. Use 'alphanumeric' if you want only alphanumeric characters.
#This expression uses the Unicode numerical code of a character to determine which characters are between the two given characters.
#If strings of more than one character are given, only the first character of each is used.
#since 2.8.0
#Examples:
#set {_captcha} to join (5 random characters between "a" and "z") with ""
#send 3 random alphanumeric characters between "0" and "z"
expression:
	patterns:
		[a|%integer%] random [alphanumeric] character[s] (from|between) %string% (to|and) %string%
	return type: text
#Random Numbers
#A given amount of random numbers or integers between two given numbers. Use 'number' if you want any number with decimal parts, or use use 'integer' if you only want whole numbers.
#Please note that the order of the numbers doesn't matter, i.e. random number between 2 and 1 will work as well as random number between 1 and 2.
#since 1.4, 2.10 (Multiple random numbers)
#Examples:
#set the player's health to a random number between 5 and 10
#send "You rolled a %random integer from 1 to 6%!" to the player
#set {_chances::*} to 5 random integers between 5 and 96
#set {_decimals::*} to 3 random numbers between 2.7 and -1.5
expression:
	patterns:
		[a|%integer%] random (integer|number)[s] (from|between) %number% (to|and) %number%
	return type: num
#Random UUID
#Returns a random UUID.
#since 2.5.1, 2.11 (return UUIDs)
#Examples:
#set {_uuid} to random uuid
expression:
	patterns:
		[a] random uuid
	return type: uuid
#Raw Name
#The raw Minecraft material name of the given item. Note that this is not guaranteed to give same results on all servers.
#since unknown (2.2)
#Examples:
#raw name of tool of player
expression:
	patterns:
		(raw|minecraft|vanilla) name[s] of %itemtypes%
	return type: text
#Raw String
#Returns the string without formatting (colors etc.) and without stripping them from it, e.g. raw "&aHello There!" would output &aHello There!
#since 2.7
#Examples:
#send raw "&aThis text is unformatted!" to all players
expression:
	patterns:
		raw %strings%
	return type: text
#Readied Arrow/Bow
#The bow or arrow in a Ready Arrow event.
#since 2.8.0
#Examples:
#on player ready arrow:
#	selected bow's name is "Spectral Bow"
#	if selected arrow is not a spectral arrow:
#		cancel event
expression:
	patterns:
		[the] (readied|selected|drawn) (arrow|bow)
	return type: item
#Redstone Block Power
#Power of a redstone block
#since 2.5
#Examples:
#if redstone power of targeted block is 15:
#	send "This block is very powerful!"
expression:
	patterns:
		[the] redstone power of %blocks%
		%blocks%'[s] redstone power
	return type: long
#Remaining Air
#How much time a player has left underwater before starting to drown.
#since 2.0
#Examples:
#if the player's remaining air is less than 3 seconds:
#	send "hurry, get to the surface!" to the player
expression:
	patterns:
		[the] remaining air of %livingentities%
		%livingentities%'[s] remaining air
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Repeat String
#Repeats inputted strings a given amount of times.
#since 2.8.0
#Examples:
#broadcast nl and nl repeated 200 times
#broadcast "Hello World " repeated 5 times
#if "aa" repeated 2 times is "aaaa":
#	broadcast "Ahhhh" repeated 100 times
expression:
	patterns:
		%strings% repeated %integer% time[s]
	return type: text
#Resonating Time
#Returns the resonating time of a bell.
#A bell will start resonating five game ticks after being rung, and will continue to resonate for 40 game ticks.
#since 2.9.0
#Examples:
#broadcast "The bell has been resonating for %resonating time of target block%"
#Spigot 1.19.4+
expression:
	patterns:
		[the] resonat(e|ing) time of %block%
		%block%'[s] resonat(e|ing) time
	return type: timespan
#Respawn Anchor Charges
#The charges of a respawn anchor.
#since 2.7
#Examples:
#set the charges of event-block to 3
#Minecraft 1.16+
expression:
	patterns:
		[the] [max[imum]] charge[s] of %blocks%
		%blocks%'[s] [max[imum]] charge[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Respawn location
#The location that a player should respawn at. This is used within the respawn event.
#since 2.2-dev35
#Examples:
#on respawn:
#	set respawn location to {example::spawn}
expression:
	patterns:
		[the] respawn location
	set:
#		(internal code)
	return type: location
#Result (Experimental)
#Runs something (like a function) and returns its result.
#If the thing is expected to return multiple values, use 'results' instead of 'result'.
#since 2.10
#Examples:
#set {_function} to the function named "myFunction"
#set {_result} to the result of {_function}
#set {_list::*} to the results of {_function}
#set {_result} to the result of {_function} with arguments 13 and true
expression:
	patterns:
		[the] result[s] of [running|executing] %executable% [with arg[ument]s %objects%]
	return type: object
#Reversed List
#Reverses given list.
#since 2.4
#Examples:
#set {_list::*} to reversed {_list::*}
expression:
	patterns:
		reversed %objects%
	return type: object
#Ringing Time
#Returns the ringing time of a bell.
#A bell typically rings for 50 game ticks.
#since 2.9.0
#Examples:
#broadcast "The bell has been ringing for %ringing time of target block%"
#Spigot 1.19.4+
expression:
	patterns:
		[the] ring[ing] time of %block%
		%block%'[s] ring[ing] time
	return type: timespan
#Rotated Quaternion/Vector
#Rotates a quaternion or vector around an axis a set amount of degrees, or around all 3 axes at once.
#Vectors can only be rotated around the global X/Y/Z axes, or an arbitrary vector axis.
#Quaternions are more flexible, allowing rotation around the global or local X/Y/Z axes, arbitrary vectors, or all 3 local axes at once.
#Global axes are the ones in the Minecraft world. Local axes are relative to how the quaternion is already oriented.
#Note that rotating a quaternion around a vector results in a rotation around the local vector, so results may not be what you expect. For example, rotating around vector(1, 0, 0) is the same as rotating around the local X axis.
#The same applies to rotations by all three axes at once. In addition, rotating around all three axes of a quaternion/display at once will rotate in ZYX order, meaning the Z rotation will be applied first and the X rotation last.
#since 2.10
#Examples:
#set {_new} to {_quaternion} rotated around x axis by 10 degrees
#set {_new} to {_vector} rotated around vector(1, 1, 1) by 45
#set {_new} to {_quaternion} rotated by x 45, y 90, z 135
expression:
	patterns:
		%quaternions/vectors% rotated around [the] [global] (x|y|z)(-| )axis by %number%
		%quaternions% rotated around [the|its|their] local (x|y|z)(-| )ax(i|e)s by %number%
		%quaternions/vectors% rotated around [the] %vector% by %number%
		%quaternions% rotated by x %number%, y %number%(, [and]| and) z %number%
	return type: object
#Rotation Axis/Angle
#Returns the axis or angle that a quaternion will rotate by/around.
#All quaternions can be represented by a rotation of some amount around some axis, so this expression provides the ability to get that angle/axis.
#since 2.10
#Examples:
#set {_quaternion} to axisAngle(45, vector(1, 2, 3))
#send rotation axis of {_quaternion}  1, 2, 3
#send rotation angle of {_quaternion}  45
#set rotation angle of {_quaternion} to 135
#set rotation axis of {_quaternion} to vector(0, 1, 0)
expression:
	patterns:
		[the] rotation (angle|axis) of %quaternions%
		%quaternions%'[s] rotation (angle|axis)
	return type: object
#Rounding
#Rounds numbers normally, up (ceiling) or down (floor) respectively.
#since 2.0
#Examples:
#set {var} to rounded health of player
#set line 1 of the block to rounded "%(1.5 * player's level)%"
#add rounded down argument to the player's health
expression:
	patterns:
		[a|the] (round[ed] down|floored) %numbers%
		%numbers% (round[ed] down|floored)
		[a|the] round[ed] %numbers%
		%numbers% round[ed]
		[a|the] (round[ed] up|ceil[ing]ed) %numbers%
		%numbers% (round[ed] up|ceil[ing]ed)
	return type: long
#Saturation
#The saturation of a player. If used in a player event, it can be omitted and will default to event-player.
#since 2.2-Fixes-v10, 2.2-dev35 (fully modifiable), 2.6.2 (syntax pattern changed)
#Examples:
#set saturation of player to 20
expression:
	patterns:
		[the] saturation of %players%
		%players%'[s] saturation
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Scoreboard Tags
#Scoreboard tags are simple list of texts stored directly in the data of an entity.
#So this is a Minecraft related thing, not Bukkit, so the tags will not get removed when the server stops. You can visit visit Minecraft Wiki for more info.
#This is changeable and valid for any type of entity. Also you can use use the Has Scoreboard Tag condition to check whether an entity has the given tags.
#Requires Minecraft 1.11+ (actually added in 1.9 to the game, but added in 1.11 to Spigot).
#since 2.3
#Examples:
#on spawn of a monster:
#	if the spawn reason is mob spawner:
#		add "spawned by a spawner" to the scoreboard tags of event-entity
#on death of a monster:
#	if the attacker is a player:
#		if the victim doesn't have the scoreboard tag "spawned by a spawner":
#			add 1$ to attacker's balance
expression:
	patterns:
		[(all [[of] the]|the)] scoreboard tags of %entities%
		%entities%'[s] scoreboard tags
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Script
#The current script, or a script from its (file) name.
#If the script is enabled or disabled (or reloaded) this reference will become invalid.
#Therefore, it is recommended to obtain a script reference when needed.
#since 2.0
#Examples:
#on script load:
#	broadcast "Loaded %the current script%"
#on script load:
#	set {running::%script%} to true
#on script unload:
#	set {running::%script%} to false
#set {script} to the script named "weather.sk"
#loop the scripts in directory "quests/":
#	enable loop-value
expression:
	patterns:
		[the] [current] script
		[the] script[s] [named] %strings%
		[the] scripts in [directory|folder] %string%
	return type: script
#Sea Level
#Gets the sea level of a world.
#since 2.5.1
#Examples:
#send "The sea level in your world is %sea level in player's world%"
expression:
	patterns:
		[the] sea level of %worlds%
		%worlds%'[s] sea level
	return type: long
#Sea Pickles
#An expression to obtain or modify data relating to the pickles of a sea pickle block.
#since 2.7
#Examples:
#on block break:
#	type of block is sea pickle
#	send "Wow! This stack of sea pickles contained %event-block's sea pickle count% pickles!"
#	send "It could've contained a maximum of %event-block's maximum sea pickle count% pickles!"
#	send "It had to have contained at least %event-block's minimum sea pickle count% pickles!"
#	cancel event
#	set event-block's sea pickle count to event-block's maximum sea pickle count
#	send "This bad boy is going to hold so many pickles now!!"
expression:
	patterns:
		[the] [(min|max)[imum]] [sea] pickle(s| (count|amount)) of %blocks%
		%blocks%'[s] [(min|max)[imum]] [sea] pickle(s| (count|amount))
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Seed of Loot Table
#Returns the seed of a loot table. Setting the seed of a block or entity that does not have a loot table will not do anything.
#since 2.10
#Examples:
#set {_seed} loot table seed of block
#set loot table seed of entity to 123456789
expression:
	patterns:
		[the] loot[[ ]table] seed[s] of %entities/blocks%
		%entities/blocks%'[s] loot[[ ]table] seed[s]
	set:
#		(internal code)
	return type: long
#Sent Command List
#The commands that will be sent to the player in a send commands to player event.
#Modifications will affect what commands show up for the player to tab complete. They will not affect what commands the player can actually run.
#Adding new commands to the list is illegal behavior and will be ignored.
#since 2.8.0
#Examples:
#on send command list:
#	set command list to command list where [input does not contain ":"]
#	remove "help" from command list
expression:
	patterns:
		[the] [sent] [server] command[s] list
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Server Icon
#Icon of the server in the server list. Can be set to an icon that loaded using the
#load server icon effect,
#or can be reset to the default icon in a server list ping.
#'default server icon' returns the default server icon (server-icon.png) always and cannot be changed.
#since 2.3
#Examples:
#on script load:
#	set {server-icons::default} to the default server icon
#Paper 1.12.2 or newer
expression:
	patterns:
		[the] [((default)|(shown|sent))] [server] icon
	return type: servericon
#Sets
#Returns a list of all the values of a type. Useful for looping.
#since 1.0 pre-5, 2.7 (classinfo)
#Examples:
#loop all attribute types:
#	set loop-value attribute of player to 10
#	message "Set attribute %loop-value% to 10!"
expression:
	patterns:
		[all [[of] the]|the|every] %*classinfo%
	return type: object
#Shooter
#The shooter of a projectile.
#since 1.3.7, 2.11 (entity shoot bow event)
expression:
	patterns:
		[the] shooter [of %projectile%]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: livingentity
#Shuffled List
#Shuffles given list randomly. This is done by replacing indices by random numbers in resulting list.
#since 2.2-dev32
#Examples:
#set {_list::*} to shuffled {_list::*}
expression:
	patterns:
		shuffled %objects%
	return type: object
#Sign Text
#A line of text on a sign. Can be changed, but remember that there is a 16 character limit per line (including color codes that use 2 characters each).
#since 1.3
#Examples:
#on rightclick on sign:
#	line 2 of the clicked block is "[Heal]":
#		heal the player
#	set line 3 to "%player%"
expression:
	patterns:
		[the] line %number% [of %block%]
		[the] (1st|first|2nd|second|3rd|third|4th|fourth) line [of %block%]
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: text
#Simulation Distance
#The simulation distance of a world or a player.
#Simulation distance is the minimum distance in chunks for entities to tick.
#Simulation distance is capped to the current view distance of the world or player.
#The view distance is capped between 2 and 32 chunks.
#Paper is required to change the simulation distance for both worlds and players.
#since 2.11
#Examples:
#set simulation distance of player to 10
#add 50 to the simulation distance of world "world"
#reset the simulation distance of player
#clear the simulation distance of world "world"
#Paper (change for players), Paper 1.21+ (change for worlds)
expression:
	patterns:
		[the] simulation distance[s] of %worlds/players%
		%worlds/players%'[s] simulation distance[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Size of World Border
#The size of a world border.
#The size can not be smaller than 1.
#since 2.11
#Examples:
#set world border radius of {_worldborder} to 10
expression:
	patterns:
		[the] world[ ]border (size|diameter|radius) [of %worldborders%]
		%worldborders%'[s] world[ ]border (size|diameter|radius)
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: double
#Skull Owner
#The skull owner of a player skull.
#since 2.9.0, 2.10 (of items)
#Examples:
#set {_owner} to the skull owner of event-block
#set skull owner of {_block} to "Njol" parsed as offlineplayer
#set head owner of player's tool to {_player}
expression:
	patterns:
		[the] (head|skull) owner of %slots/itemtypes/itemstacks/blocks%
		%slots/itemtypes/itemstacks/blocks%'[s] (head|skull) owner
	set:
#		(internal code)
	return type: offlineplayer
#Slot Index
#Index of an an inventory slot. Other types of slots may or may not have indices. Note that comparing slots with numbers is also possible; if index of slot is same as the number, comparisonsucceeds. This expression is mainly for the cases where you must for some reason save the slot numbers.
#Raw index of slot is unique for the view, see Minecraft Wiki
#since 2.2-dev35, 2.8.0 (raw index)
#Examples:
#if index of event-slot is 10:
#	send "You bought a pie!"
#if display name of player's top inventory is "Custom Menu":  3 rows inventory
#	if raw index of event-slot > 27:  outside custom inventory
#		cancel event
expression:
	patterns:
		[the] [(raw|unique)] index of %slots%
		%slots%'[s] [(raw|unique)] index
	return type: long
#Sorted List
#Sorts given list in natural order. All objects in list must be comparable; if they're not, this expression will return nothing.
#since 2.2-dev19
#Examples:
#set {_sorted::*} to sorted {_players::*}
expression:
	patterns:
		sorted %objects%
	return type: object
#Source Block
#The source block in a spread event.
#since 2.7
#Examples:
#on spread:
#	if the source block is a grass block:
#		set the source block to dirt
expression:
	patterns:
		[the] source block
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Spawn
#The spawn point of a world.
#since 1.4.2
#Examples:
#teleport all players to spawn
#set the spawn point of "world" to the player's location
expression:
	patterns:
		[the] spawn[s] [(point|location)[s]] [of %worlds%]
		%worlds%'[s] spawn[s] [(point|location)[s]]
	set:
#		(internal code)
	return type: location
#Spawn Egg Entity
#Gets or sets the entity snapshot that the provided spawn eggs will spawn when used.
#since 2.10
#Examples:
#set {_item} to a zombie spawn egg
#broadcast the spawn egg entity of {_item}
#spawn a pig at location(0,0,0):
#	set the max health of entity to 20
#	set the health of entity to 20
#	set {_snapshot} to the entity snapshot of entity
#	clear entity
#set the spawn egg entity of {_item} to {_snapshot}
#if the spawn egg entity of {_item} is {_snapshot}:  Minecraft 1.20.5+
#set the spawn egg entity of {_item} to (random element out of all entities)
#set the spawn egg entity of {_item} to a zombie
#Minecraft 1.20.2+, Minecraft 1.20.5+ (comparisons)
expression:
	patterns:
		[the] spawn egg entity of %itemstacks/itemtypes/slots%
		%itemstacks/itemtypes/slots%'[s] spawn egg entity
	set:
#		(internal code)
	return type: entitysnapshot
#Spawn Reason
#The spawn reason in a spawn event.
#since 2.3
#Examples:
#on spawn:
#	spawn reason is reinforcements or breeding
#	cancel event
expression:
	patterns:
		[the] spawn[ing] reason
	return type: spawnreason
#Spawner Type
#Retrieves, sets, or resets the spawner's entity type
#since 2.4, 2.9.2 (trial spawner)
#Examples:
#on right click:
#	if event-block is spawner:
#		send "Spawner's type is %target block's entity type%"
expression:
	patterns:
		[the] (spawner|entity|creature) type[s] of %blocks%
		%blocks%'[s] (spawner|entity|creature) type[s]
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: entitytype
#Special Number
#Special number values, namely NaN, Infinity and -Infinity
#since 2.2-dev32d
#Examples:
#if {_number} is infinity value:
expression:
	patterns:
		(NaN|[(-|minus)](infinity|∞)) value
		value of (NaN|[(-|minus)](infinity|∞))
	return type: num
#Spectator Target
#Grabs the spectator target entity of the players.
#since 2.4-alpha4, 2.7 (Paper Spectator Event)
#Examples:
#on player start spectating of player:
#	message "&c%spectator target% currently has %{game::kills::%spectator target%}% kills!" to the player
#on player stop spectating:
#	past spectator target was a zombie
#	set spectator target to the nearest skeleton
#Paper
expression:
	patterns:
		spectator target [of %players%]
		%players%'[s] spectator target
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: entity
#Speed
#A player's walking or flying speed. Both can be changed, but values must be between -1 and 1 (excessive values will be changed to -1 or 1 respectively). Negative values reverse directions.
#Please note that changing a player's speed will change their FOV just like potions do.
#since unknown (before 2.1)
#Examples:
#set the player's walk speed to 1
#increase the argument's fly speed by 0.1
expression:
	patterns:
		[the] (walk[ing]|fl(y[ing]|ight))[( |-)]speed of %players%
		%players%'[s] (walk[ing]|fl(y[ing]|ight))[( |-)]speed
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#String Colors
#Retrieve the first, the last, or all of the color objects or color codes of a string.
#The retrieved color codes of the string will be formatted with the color symbol.
#since 2.11
#Examples:
#set {_colors::*} to the string colors of "<red>hey<blue>yo"
#set {_color} to the first string color code of "&aGoodbye!"
#send "%{_color}%Howdy!" to all players
expression:
	patterns:
		[all [of the|the]|the] string colo[u]r[s] [code[s]] of %strings%
		[the] first string colo[u]r[s] [code[s]] of %strings%
		[the] last string colo[u]r[s] [code[s]] of %strings%
	return type: object
#Substring
#Extracts part of a text. You can either get the first <x> characters, the last <x> characters, the character at index <x>, or the characters between indices <x> and <y>. The indices <x> and <y> should be between 1 and the length of the text (other values will be fit into this range).
#since 2.1, 2.5.2 (character at, multiple strings support)
#Examples:
#set {_s} to the first 5 characters of the text argument
#message "%subtext of {_s} from characters 2 to (the length of {_s} - 1)%"  removes the first and last character from {_s} and sends it to the player or console
#set {_characters::*} to characters at 1, 2 and 7 in player's display name
#send the last character of all players' names
expression:
	patterns:
		[the] (part|sub[ ](text|string)) of %strings% (between|from) (ind(ex|ices)|character[s]|) %number% (and|to) (index|character|) %number%
		[the] (first|last) [%number%] character[s] of %strings%
		[the] %number% (first|last) characters of %strings%
		[the] character[s] at [(index|position|indexes|indices|positions)] %numbers% (in|of) %strings%
	return type: text
#TPS (ticks per second)
#Returns the 3 most recent TPS readings, like the /tps command. This expression is only supported on some server software (PaperSpigot).
#since 2.2-dev36
#Examples:
#broadcast "%tps%"
expression:
	patterns:
		tps from [the] last ([1] minute|1[ ]m[inute])
		tps from [the] last 5[ ]m[inutes]
		tps from [the] last 15[ ]m[inutes]
		[the] tps
	return type: num
#Tag
#Represents a tag which can be used to classify items, blocks, or entities.
#Tags are composed of a value and an optional namespace: "minecraft:oak_logs".
#If you omit the namespace, one will be provided for you, depending on what kind of tag you're using. For example, `tag "doors"` will be the tag "minecraft:doors", while `paper tag "doors"` will be "paper:doors".
#`minecraft tag` will search through the vanilla tags, `datapack tag` will search for datapack-provided tags (a namespace is required here!), `paper tag` will search for Paper's custom tags if you are running Paper, and `custom tag` will look in the "skript" namespace for custom tags you've registered.
#You can also filter by tag types using "item", "block", or "entity".
#since 2.10
#Examples:
#minecraft tag "dirt"  minecraft:dirt
#paper tag "doors"  paper:doors
#tag "skript:custom_dirt"  skript:custom_dirt
#custom tag "dirt"  skript:dirt
#datapack block tag "dirt"  minecraft:dirt
#datapack tag "my_pack:custom_dirt"  my_pack:custom_dirt
#tag "minecraft:mineable/pickaxe"  minecraft:mineable/pickaxe
#custom item tag "blood_magic_sk/can_sacrifice_with"  skript:blood_magic_sk/can_sacrifice_with
#Paper (paper tags)
expression:
	patterns:
		[minecraft|datapack|paper|(custom|skript)] [item|block|entity [type]] tag %strings%
	return type: minecrafttag
#Tag Namespaced Key
#The namespaced key of a minecraft tag. This takes the form of "namespace:key", e.g. "minecraft:dirt".
#since 2.10
#Examples:
#broadcast namespaced keys of the tags of player's tool
#if the key of {_my-tag} is "minecraft:stone":
#	return true
expression:
	patterns:
		[the] [namespace[d]] key[s] of %minecrafttags%
		%minecrafttags%'[s] [namespace[d]] key[s]
	return type: text
#Tags Contents
#Returns all the values that a tag contains.
#For item and block tags, this will return items. For entity tags, it will return entity datas (a creeper, a zombie).
#since 2.10
#Examples:
#broadcast tag values of minecraft tag "dirt"
#broadcast (first element of player's tool's block tags)'s tag contents
expression:
	patterns:
		[the] tag (contents|values) of %minecrafttag%
		%minecrafttag%'[s] tag (contents|values)
	return type: object
#Tags of X
#Returns all the tags of an item, block, or entity.
#`minecraft tag` will return only the vanilla tags, `datapack tag` will return only datapack-provided tags, `paper tag` will return only Paper's custom tags (if you are running Paper), and `custom tag` will look in the "skript" namespace for custom tags you've registered.
#You can also filter by tag types using "item", "block", or "entity".
#since 2.10
#Examples:
#broadcast minecraft tags of dirt
#send true if paper item tags of target block contains paper tag "doors"
#broadcast the block tags of player's tool
#Paper (paper tags)
expression:
	patterns:
		[all [[of] the]|the] [minecraft|datapack|paper|(custom|skript)] [item|block|entity [type]] tags of %itemtype/entity/entitydata%
		%itemtype/entity/entitydata%'[s] [minecraft|datapack|paper|(custom|skript)] [item|block|entity [type]] tags
	return type: minecrafttag
#Tamer
#The tamer of an entity. Can only be used in entity tame events. You can use 'event-entity' to refer tamed entity itself.
#since 2.2-dev25
#Examples:
#on tame:
#	if the tamer is a player:
#		send "someone tamed something!" to console
expression:
	patterns:
		[the] tamer
	add:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	return type: player
#Target
#For players this is the entity at the crosshair.
#For mobs and experience orbs this is the entity they are attacking/following (if any).
#Display entities have a hit box of 0, so you should use 'target display' to collect Display entities
#May grab entities in unloaded chunks.
#since 1.4.2, 2.7 (Reset), 2.8.0 (ignore blocks)
#Examples:
#on entity target:
#	if entity's target is a player:
#		send "You're being followed by an %entity%!" to target of entity
#reset target of entity  Makes the entity target-less
#delete targeted entity of player  for players it will delete the target
#delete target of last spawned zombie  for entities it will make them target-less
expression:
	patterns:
		[the] target[[ed] %*entitydata%] [of %livingentities%] [ignoring blocks] [[with|at] ray[ ]size %number%]
		%livingentities%'[s] target[[ed] %*entitydata%] [ignoring blocks] [[with|at] ray[ ]size %number%]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: entity
#Targeted Block
#The block at the crosshair. This regards all blocks that are not air as fully solid, e.g. torches will be like a solid stone block for this expression.
#The actual target block will regard the actual hit box of the block.
#since 1.0, 2.9.0 (actual/exact)
#Examples:
#set target block of player to stone
#set target block of player to oak_stairs[waterlogged=true]
#break target block of player using player's tool
#give player 1 of type of target block
#teleport player to location above target block
#kill all entities in radius 3 around target block of player
#set {_block} to actual target block of player
#break actual target block of player
expression:
	patterns:
		[the] [(actual[ly]|exact)] target[ed] block[s] [of %livingentities%]
		%livingentities%'[s] [(actual[ly]|exact)] target[ed] block[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: block
#Teleport Cause
#The teleport cause within a player teleport event.
#since 2.2-dev35
#Examples:
#on teleport:
#	teleport cause is nether portal, end portal or end gateway
#	cancel event
expression:
	patterns:
		[the] teleport (cause|reason|type)
	return type: teleportcause
#Temperature
#Temperature at given block.
#since 2.2-dev35
#Examples:
#message "%temperature of the targeted block%"
expression:
	patterns:
		[the] temperature[s] of %blocks%
		%blocks%'[s] temperature[s]
	return type: num
#Ternary
#A shorthand expression for returning something based on a condition.
#since 2.2-dev36
#Examples:
#set {points} to 500 if {admin::%player's uuid%} is set else 100
expression:
	patterns:
		%objects% if <.+>[,] (otherwise|else) %objects%
	return type: object
#Text Display Alignment
#Returns or changes the alignment setting of text displays.
#since 2.10
#Examples:
#set text alignment of the last spawned text display to left aligned
expression:
	patterns:
		[the] text alignment[s] [of %displays%]
		%displays%'[s] text alignment[s]
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: textalignment
#Text Display Line Width
#Returns or changes the line width of text displays. Default is 200.
#since 2.10
#Examples:
#set the line width of the last spawned text display to 300
expression:
	patterns:
		[the] line width [of %displays%]
		%displays%'[s] line width
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Text Display Opacity
#Returns or changes the opacity of text displays.
#Values are between -127 and 127. The value of 127 represents it being completely opaque.
#since 2.10
#Examples:
#set the opacity of the last spawned text display to -1  Reset
expression:
	patterns:
		[the] [display] opacity [of %displays%]
		%displays%'[s] [display] opacity
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: byte
#Text Of
#Returns or changes the text/string of displays.
#Note that currently you can only use Skript chat codes when running Paper.
#since 2.10
#Examples:
#set text of the last spawned text display to "example"
expression:
	patterns:
		[the] text[s] of %displays%
		%displays%'[s] text[s]
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: text
#The Egg
#The egg thrown in a Player Egg Throw event.
#since 2.7
#Examples:
#spawn an egg at the egg
expression:
	patterns:
		[the] [thrown] egg
	delete:
#		(internal code)
	return type: projectile
#Time
#The time of a world.
#Use the "minecraft timespan" syntax to change the time according to Minecraft's time intervals.
#Since Minecraft uses discrete intervals for time (ticks), changing the time by real-world minutes or real-world seconds only changes it approximately.
#Removing an amount of time from a world's time will move the clock forward a day.
#since 1.0
#Examples:
#set time of world "world" to 2:00
#add 2 minecraft hours to time of world "world"
#add 54 real seconds to time of world "world"  approximately 1 minecraft hour
expression:
	patterns:
		[the] time[s] [([with]in|of) %worlds%]
		%worlds%'[s] time[s]
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: time
#Time Played
#The amount of time a player has played for on the server. This info is stored in the player's statistics in the main world's data folder. Changing this will also change the player's stats which can be views in the client's statistics menu.
#Using this expression on offline players on Minecraft 1.14 and below will return nothing <none>.
#since 2.5, 2.7 (offline players)
#Examples:
#set {_t} to time played of player
#if player's time played is greater than 10 minutes:
#	give player a diamond sword
#set player's time played to 0 seconds
#MC 1.15+ (offline players)
expression:
	patterns:
		[the] time played of %offlineplayers%
		%offlineplayers%'[s] time played
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Time Since/Until
#The time since a date has passed or the time until a date will pass.
#This expression will return 0 seconds if the time since or time until would be negative, e.g. if one tries to get the time since a future date.
#since 2.5, 2.10 (time until)
#Examples:
#send "%time since 5 minecraft days ago% has passed since 5 minecraft days ago!" to player
#send "%time until {countdown::end}% until the game begins!" to player
expression:
	patterns:
		[the] time since %dates%
		[the] (time [remaining]|remaining time) until %dates%
	return type: timespan
#Timespan Details
#Retrieve specific information of a timespan such as hours/minutes/etc.
#since 2.9.0
#Examples:
#set {_t} to difference between now and {Payouts::players::%uuid of player%::last-date}
#send "It has been %days of {_t}% day(s) since last payout."
expression:
	patterns:
		[the] ((tick|second|minute|hour|day|week|month|year))s of %timespans%
		%timespans%'[s] ((tick|second|minute|hour|day|week|month|year))s
	return type: long
#Tool
#The item an entity is holding in their main or off hand.
#since 1.0
#Examples:
#player's tool is a pickaxe
#player's off hand tool is a shield
#set tool of all players to a diamond sword
#set offhand tool of target entity to a bow
expression:
	patterns:
		[the] ((tool|held item|weapon)|(off[ ]hand (tool|item))) [of %livingentities%]
		%livingentities%'[s] ((tool|held item|weapon)|(off[ ]hand (tool|item)))
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: slot
#Total Experience
#The total experience, in points, of players or experience orbs.
#Adding to a player's experience will trigger Mending, but setting their experience will not.
#since 2.7
#Examples:
#set total experience of player to 100
#add 100 to player's experience
#if player's total experience is greater than 100:
#	set player's total experience to 0
#	give player 1 diamond
expression:
	patterns:
		[the] [total] experience of %entities%
		%entities%'[s] [total] experience
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Transform Reason
#The transform reason within an entity entity transform event.
#since 2.8.0
#Examples:
#on entity transform:
#	transform reason is infection, drowned or frozen
expression:
	patterns:
		[the] transform[ing] (cause|reason|type)
	return type: transformreason
#Transformed List
#Transforms (or 'maps') a list's values using a given expression. This is akin to looping over the list and getting a modified version of each value.
#Indices cannot be retained with this expression. To retain indices, see the transform effect.
#since 2.10
#Examples:
#set {_a::*} to (1, 2, and 3) transformed using (input * 2 - 1, input * 2)
# {_a::*} is now 1, 2, 3, 4, 5, and 6
# get a list of the sizes of all clans without manually looping
#set {_clan-sizes::*} to indices of {clans::*} transformed using [{clans::%input%::size}]
expression:
	patterns:
		%objects% (transformed|mapped) (using|with) \[<.+>\]
		%objects% (transformed|mapped) (using|with) (<.+>)
	return type: object
#Type of
#Type of a block, item, entity, inventory, potion effect or enchantment type.
#Types of items, blocks and block datas are item types similar to them but have amounts
#of one, no display names and, on Minecraft 1.13 and newer versions, are undamaged.
#Types of entities and inventories are entity types and inventory types known to Skript.
#Types of potion effects are potion effect types.
#Types of enchantment types are enchantments.
#since 1.4, 2.5.2 (potion effect), 2.7 (block datas), 2.10 (enchantment type)
#Examples:
#on rightclick on an entity:
#	message "This is a %type of clicked entity%!"
expression:
	patterns:
		[the] type of %entitydatas/itemtypes/inventories/potioneffects/blockdatas/enchantmenttypes%
		%entitydatas/itemtypes/inventories/potioneffects/blockdatas/enchantmenttypes%'[s] type
	return type: object
#UUID
#The UUID of a player, entity or world.
#since 2.1.2, 2.2 (offline players' uuids), 2.2-dev24 (other entities' uuids)
#Examples:
# prevents people from joining the server if they use the name of a player
# who has played on this server at least once since this script has been added
#on login:
#	if {uuid::%name of player%} exists:
#		{uuid::%name of player%} is not uuid of player
#		kick player due to "Someone with your name has played on this server before"
#	else:
#		set {uuid::%name of player%} to uuid of player
#command /what-is-my-uuid:
#	trigger:
#		set {_uuid} to uuid of player
#		send "Your UUID is '%string within {_uuid}%'"
expression:
	patterns:
		[the] UUID of %offlineplayers/worlds/entities%
		%offlineplayers/worlds/entities%'[s] UUID
	return type: uuid
#Unbreakable Items
#Creates breakable or unbreakable copies of given items.
#since 2.2-dev13b, 2.9.0 (breakable)
#Examples:
#set {_item} to unbreakable iron sword
#give breakable {_weapon} to all players
expression:
	patterns:
		[un]breakable %itemtypes%
	return type: itemtype
#Unix Date
#Converts given Unix timestamp to a date. The Unix timespan represents the number of seconds elapsed since 1 January 1970.
#since 2.5
#Examples:
#unix date of 946684800 1 January 2000 12:00 AM (UTC Time)
expression:
	patterns:
		[the] unix date of %numbers%
		%numbers%'[s] unix date
	return type: date
#Unix Timestamp
#Converts given date to Unix timestamp. This is roughly how many seconds have elapsed since 1 January 1970.
#since 2.2-dev31
#Examples:
#unix timestamp of now
expression:
	patterns:
		[the] unix timestamp of %dates%
		%dates%'[s] unix timestamp
	return type: num
#Unleash Reason
#The unleash reason in an unleash event.
#since 2.10
#Examples:
#if the unleash reason is distance:
#	broadcast "The leash was snapped in half."
expression:
	patterns:
		[the] unleash[ing] reason
	return type: unleashreason
#Value
#Returns the value of something that has a value, e.g. a node in a config.
#The value is automatically converted to the specified type (e.g. text, number) where possible.
#since 2.10 (Nodes), 2.10 (Any)
#Examples:
#set {_node} to node "language" in the skript config
#broadcast the text value of {_node}
#set {_node} to node "update check interval" in the skript config
#
#broadcast text value of {_node}
# text value of {_node} = "12 hours" (text)
#
#wait for {_node}'s timespan value
# timespan value of {_node} = 12 hours (duration)
expression:
	patterns:
		[the] %*classinfo% value [at] %string% (from|in) %node%
		[the] %*classinfo% value of %valued%
		[the] %*classinfo% values of %valueds%
		%valued%'s %*classinfo% value
		%valueds%'[s] %*classinfo% values
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: object
#Value Within
#Gets the value within objects. Usually used with variables to get the value they store rather than the variable itself, or with lists to get the values of a type.
#since 2.7
#Examples:
#set {_entity} to a random entity out of all entities
#delete entity within {_entity}  This deletes the entity itself and not the value stored in the variable
#set {_list::*} to "something", 10, "test" and a zombie
#broadcast the strings within {_list::*}  "something", "test"
expression:
	patterns:
		[the] (%*classinfo%|value[s]) (within|in) %objects%
	return type: object
#Vector/Quaternion - WXYZ Component
#Gets or changes the W, X, Y or Z component of vectors/quaternions.
#You cannot use the W component with vectors; it is for quaternions only.
#since 2.2-dev28, 2.10 (quaternions)
#Examples:
#set {_v} to vector 1, 2, 3
#send "%x of {_v}%, %y of {_v}%, %z of {_v}%"
#add 1 to x of {_v}
#add 2 to y of {_v}
#add 3 to z of {_v}
#send "%x of {_v}%, %y of {_v}%, %z of {_v}%"
#set x component of {_v} to 1
#set y component of {_v} to 2
#set z component of {_v} to 3
#send "%x component of {_v}%, %y component of {_v}%, %z component of {_v}%"
expression:
	patterns:
		[the] [vector|quaternion] (w|x|y|z) [component[s]] of %vectors/quaternions%
		%vectors/quaternions%'[s] [vector|quaternion] (w|x|y|z) [component[s]]
	return type: num
#Vectors - Angle Between
#Gets the angle between two vectors.
#since 2.2-dev28
#Examples:
#send "%the angle between vector 1, 0, 0 and vector 0, 1, 1%"
expression:
	patterns:
		[the] angle between [[the] vectors] %vector% and %vector%
	return type: num
#Vectors - Create Location from Vector
#Creates a location from a vector in a world.
#since 2.2-dev28
#Examples:
#set {_loc} to {_v} to location in world "world"
#set {_loc} to {_v} to location in world "world" with yaw 45 and pitch 90
#set {_loc} to location of {_v} in "world" with yaw 45 and pitch 90
expression:
	patterns:
		%vector% to location in %world%
		location (from|of) %vector% in %world%
		%vector% [to location] in %world% with yaw %number% and pitch %number%
		location (from|of) %vector% in %world% with yaw %number% and pitch %number%
	return type: location
#Vectors - Create from Direction
#Creates vectors from given directions.
#Relative directions are relative to the origin, (0, 0, 0). Therefore, the vector from the direction 'forwards' is (0, 0, 1).
#since 2.8.0
#Examples:
#set {_v} to vector from direction upwards
#set {_v} to vector in direction of player
#set {_v} to vector in horizontal direction of player
#set {_v} to vector from facing of player
#set {_v::*} to vectors from north, south, east, and west
expression:
	patterns:
		vector[s] [from] %directions%
		%directions% vector[s]
	return type: vector
#Vectors - Create from XYZ
#Creates a vector from x, y and z values.
#since 2.2-dev28
#Examples:
#set {_v} to vector 0, 1, 0
expression:
	patterns:
		[a] [new] vector [(from|at|to)] %number%,[ ]%number%(,[ ]| and )%number%
	return type: vector
#Vectors - Cross Product
#Gets the cross product between two vectors.
#since 2.2-dev28
#Examples:
#send "%vector 1, 0, 0 cross vector 0, 1, 0%"
expression:
	patterns:
		%vector% cross %vector%
	return type: vector
#Vectors - Cylindrical Shape
#Forms a 'cylindrical shaped' vector using yaw to manipulate the current point.
#since 2.2-dev28
#Examples:
#loop 360 times:
#	set {_v} to cylindrical vector radius 1, yaw loop-value, height 2
#set {_v} to cylindrical vector radius 1, yaw 90, height 2
expression:
	patterns:
		[a] [new] cylindrical vector [from|with] [radius] %number%, [yaw] %number%(,[ and]| and) [height] %number%
	return type: vector
#Vectors - Dot Product
#Gets the dot product between two vectors.
#since 2.2-dev28
#Examples:
#set {_dot} to {_v1} dot {_v2}
expression:
	patterns:
		%vector% dot %vector%
	return type: num
#Vectors - Length
#Gets or sets the length of a vector.
#since 2.2-dev28
#Examples:
#send "%standard length of vector 1, 2, 3%"
#set {_v} to vector 1, 2, 3
#set standard length of {_v} to 2
#send "%standard length of {_v}%"
expression:
	patterns:
		[the] (vector|standard|normal) length[s] of %vectors%
		%vectors%'[s] (vector|standard|normal) length[s]
	add:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Vectors - Location Vector Offset
#Returns the location offset by vectors.
#since 2.2-dev28
#Examples:
#set {_loc} to {_loc} ~ {_v}
expression:
	patterns:
		%location% offset by [[the] vectors] %vectors%
		%location%[ ]~[~][ ]%vectors%
	return type: location
#Vectors - Normalized
#Returns the same vector but with length 1.
#since 2.2-dev28
#Examples:
#set {_v} to normalized {_v}
expression:
	patterns:
		normalize[d] %vector%
		%vector% normalized
	return type: vector
#Vectors - Random Vector
#Creates a random unit vector.
#since 2.2-dev28, 2.7 (signed components)
#Examples:
#set {_v} to a random vector
expression:
	patterns:
		[a] random vector
	return type: vector
#Vectors - Spherical Shape
#Forms a 'spherical shaped' vector using yaw and pitch to manipulate the current point.
#since 2.2-dev28
#Examples:
#loop 360 times:
#	set {_v} to spherical vector radius 1, yaw loop-value, pitch loop-value
#set {_v} to spherical vector radius 1, yaw 45, pitch 90
expression:
	patterns:
		[a] [new] spherical vector [(from|with)] [radius] %number%, [yaw] %number%(,[ and]| and) [pitch] %number%
	return type: vector
#Vectors - Squared Length
#Gets the squared length of a vector.
#since 2.2-dev28
#Examples:
#send "%squared length of vector 1, 2, 3%"
expression:
	patterns:
		[the] squared length[s] of %vectors%
		%vectors%'[s] squared length[s]
	return type: num
#Vectors - Vector Between Locations
#Creates a vector between two locations.
#since 2.2-dev28
#Examples:
#set {_v} to vector between {_loc1} and {_loc2}
expression:
	patterns:
		[the] vector (from|between) %location% (to|and) %location%
	return type: vector
#Vectors - Vector Projection
#An expression to get the vector projection of two vectors.
#since 2.8.0
#Examples:
#set {_projection} to vector projection of vector(1, 2, 3) onto vector(4, 4, 4)
expression:
	patterns:
		[vector] projection [of] %vector% on[to] %vector%
	return type: vector
#Vectors - Vector from Location
#Creates a vector from a location.
#since 2.2-dev28
#Examples:
#set {_v} to vector of {_loc}
expression:
	patterns:
		[the] vector (of|from|to) %location%
		%location%'s vector
	return type: vector
#Vectors - Vector from Yaw and Pitch
#Creates a vector from a yaw and pitch value.
#since 2.2-dev28
#Examples:
#set {_v} to vector from yaw 45 and pitch 45
expression:
	patterns:
		[a] [new] vector (from|with) yaw %number% and pitch %number%
		[a] [new] vector (from|with) pitch %number% and yaw %number%
	return type: vector
#Vectors - Velocity
#Gets or changes velocity of an entity.
#since 2.2-dev31
#Examples:
#set player's velocity to {_v}
expression:
	patterns:
		[the] velocit(y|ies) of %entities%
		%entities%'[s] velocit(y|ies)
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: vector
#Vehicle
#The vehicle an entity is in, if any. This can actually be any entity, e.g. spider jockeys are skeletons that ride on a spider, so the spider is the 'vehicle' of the skeleton.
#See also: passenger
#since 2.0
#Examples:
#vehicle of the player is a minecart
expression:
	patterns:
		[the] vehicle[s] of %entities%
		%entities%'[s] vehicle[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	remove all:
#		(internal code)
	set:
#		(internal code)
	return type: entity
#Version
#The version of Bukkit, Minecraft or Skript respectively.
#since 2.0
#Examples:
#message "This server is running Minecraft %minecraft version% on Bukkit %bukkit version%"
#message "This server is powered by Skript %skript version%"
expression:
	patterns:
		([craft]bukkit|minecraft|skript)( |-)version
	return type: text
#Version String
#The text to show if the protocol version of the server doesn't match with protocol version of the client. You can check the protocol version expression for more information about this.
#This can only be set in a server list ping event.
#since 2.3
#Examples:
#on server list ping:
#	set the protocol version to 0  13w41a (1.7), so it will show the version string always
#	set the version string to "<light green>Version: <orange>%minecraft version%"
#Paper 1.12.2+
expression:
	patterns:
		[the] [shown|custom] version [string|text]
	set:
#		(internal code)
	return type: text
#View Distance
#The view distance of a world or a player.
#The view distance of a player is the distance in chunks sent by the server to the player. This has nothing to do with client side view distance settings.
#View distance is capped between 2 to 32 chunks.
#Paper is required to change the view distance for both worlds and players.
#since 2.4, 2.11 (worlds)
#Examples:
#set view distance of player to 10
#add 50 to the view distance of world "world"
#reset the view distance of player
#clear the view distance of world "world"
#Paper (change for players), Paper 1.21+ (change for worlds)
expression:
	patterns:
		[the] view distance[s] of %players/worlds%
		%players/worlds%'[s] view distance[s]
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#View Distance of Client
#The view distance of the client. Can not be changed. This differs from the server side view distance of player as this will retrieve the view distance the player has set on their client.
#since 2.5
#Examples:
#set {_clientView} to the client view distance of player
#set view distance of player to client view distance of player
#1.13.2+
expression:
	patterns:
		[the] client view distance[s] of %players%
		%players%'[s] client view distance[s]
	return type: long
#Villager Level/Experience
#Represents the level/experience of a villager.
#The level will determine which trades are available to players (value between 1 and 5, defaults to 1).
#When a villager's level is 1, they may lose their profession if they don't have a workstation.
#Experience works along with the leveling system, determining which level the villager will move to.
#Experience must be greater than or equal to 0.
#Learn more about villager levels on Minecraft Wiki
#since 2.10
#Examples:
#set {_level} to villager level of {_villager}
#set villager level of last spawned villager to 2
#add 1 to villager level of target entity
#remove 1 from villager level of event-entity
#reset villager level of event-entity
#set villager experience of last spawned entity to 100
expression:
	patterns:
		[the] villager (level|experience) of %livingentities%
		%livingentities%'[s] villager (level|experience)
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: num
#Villager Profession
#Represents the profession of a villager/zombie villager.
#since 2.10
#Examples:
#set {_p} to villager profession of event-entity
#villager profession of event-entity = nitwit profession
#set villager profession of {_villager} to librarian profession
#delete villager profession of event-entity
expression:
	patterns:
		[the] villager profession of %livingentities%
		%livingentities%'[s] villager profession
	delete:
#		(internal code)
	set:
#		(internal code)
	return type: villagerprofession
#Villager Type
#Represents the type of a villager/zombie villager. This usually represents the biome the villager is from.
#since 2.10
#Examples:
#set {_type} to villager type of {_villager}
#villager type of {_villager} = plains
#set villager type of event-entity to plains
expression:
	patterns:
		[the] villager type of %livingentities%
		%livingentities%'[s] villager type
	set:
#		(internal code)
	return type: villagertype
#Warden Anger Level
#The anger level a warden feels towards an entity.
#A warden can be angry towards multiple entities with different anger levels.
#If an entity reaches an anger level of 80+, the warden will pursue it.
#Anger level maxes out at 150.
#since 2.11
#Examples:
#set the anger level of last spawned warden towards player to 20
#clear the last spawned warden's anger level towards player
expression:
	patterns:
		[the] anger level [of] %livingentities% towards %livingentities%
		%livingentities%'[s] anger level towards %livingentities%
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Warden Most Angered At
#The entity a warden is most angry at.
#A warden can be angry towards multiple entities with different anger levels.
#since 2.11
#Examples:
#if the most angered entity of last spawned warden is not player:
#	set the most angered entity of last spawned warden to player
expression:
	patterns:
		[the] most angered entity of %livingentities%
		%livingentities%'[s] most angered entity
	set:
#		(internal code)
	return type: livingentity
#Warning Distance of World Border
#The warning distance of a world border. The player's screen will be tinted red when they are within this distance of the border.
#Players only see a red tint when approaching a world's worldborder and the warning distance has to be an integer greater than or equal to 0.
#since 2.11
#Examples:
#set world border warning distance of {_worldborder} to 1
expression:
	patterns:
		[the] world[ ]border warning distance [of %worldborders%]
		%worldborders%'[s] world[ ]border warning distance
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: integer
#Warning Time of World Border
#The warning time of a world border. If the border is shrinking, the player's screen will be tinted red once the border will catch the player within this time period.
#since 2.11
#Examples:
#set world border warning time of {_worldborder} to 1 second
expression:
	patterns:
		[the] world[ ]border warning time [of %worldborders%]
		%worldborders%'[s] world[ ]border warning time
	add:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: timespan
#Weather
#The weather of a world or player.
#Clearing or resetting the weather of a player will make the player's weather match the weather of the world.
#Clearing or resetting the weather of a world will make the weather clear.
#since 1.0
#Examples:
#set weather to clear
#weather in "world" is rainy
#reset custom weather of player
#set weather of player to clear
expression:
	patterns:
		[the] weather [(in|of) %players/worlds%]
		[the] (custom|client) weather [of %players%]
		%players/worlds%'[s] weather
		%players%'[s] (custom|client) weather
	delete:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: weathertype
#Whether
#A shorthand for returning the result of a condition (true or false). This is functionally identical to using `true if <condition> else false`.
#since 2.9.0
#Examples:
#set {fly} to whether player can fly
#broadcast "Flying: %whether player is flying%"
expression:
	patterns:
		whether <.+>
	return type: boolean
#Whitelist
#An expression for obtaining and modifying the server's whitelist.
#Players may be added and removed from the whitelist.
#The whitelist can be enabled or disabled by setting the whitelist to true or false respectively.
#since 2.5.2, 2.9.0 (delete)
#Examples:
#set the whitelist to false
#add all players to whitelist
#reset the whitelist
expression:
	patterns:
		[the] white[ ]list
	add:
#		(internal code)
	delete:
#		(internal code)
	remove:
#		(internal code)
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: offlineplayer
#With Fire Resistance
#Creates a copy of an item with (or without) fire resistance.
#since 2.9.0
#Examples:
#set {_x} to diamond sword with fire resistance
#equip player with netherite helmet without fire resistance
#drop fire resistant stone at player
#Spigot 1.20.5+
expression:
	patterns:
		%itemtype% with[out] fire[ ]resistance
		fire resistant %itemtype%
	return type: itemtype
#World
#The world the event occurred in.
#since 1.0
#Examples:
#world is "world_nether"
#teleport the player to the world's spawn
#set the weather in the player's world to rain
#set {_world} to world of event-chunk
expression:
	patterns:
		[the] world [of %locations/entities/chunk%]
		%locations/entities/chunk%'[s] world
	set:
#		(internal code)
	return type: world
#World Border
#Get the border of a world or a player.
#A player's world border is not persistent. Restarts, quitting, death or changing worlds will reset the border.
#since 2.11
#Examples:
#set {_border} to world border of player's world
expression:
	patterns:
		[the] world[ ]border [of %worlds/players%]
		%worlds/players%'[s] world[ ]border
	reset:
#		(internal code)
	set:
#		(internal code)
	return type: worldborder
#World Environment
#The environment of a world
#since 2.7
#Examples:
#if environment of player's world is nether:
#	apply fire resistance to player for 10 minutes
expression:
	patterns:
		[the] [world] environment of %worlds%
		%worlds%'[s] [world] environment
	return type: environment
#World Seed
#The seed of given world. Note that it will be returned as Minecraft internally treats seeds, not as you specified it in world configuration.
#since 2.2-dev35
#Examples:
#broadcast "Seed: %seed of player's world%"
expression:
	patterns:
		[the] seed[s] (from|of) %worlds%
		%worlds%'[s] seed[s]
	return type: long
#World from Name
#Returns the world from a string.
#since 2.6.1
#Examples:
#world named {game::world-name}
#the world "world"
expression:
	patterns:
		[the] world [(named|with name)] %string%
	return type: world
#Worlds
#All worlds of the server, useful for looping.
#since 1.0
#Examples:
#loop all worlds:
#	broadcast "You're in %loop-world%" to loop-world
expression:
	patterns:
		[(all [[of] the]|the)] worlds
	return type: world
#X Times
#Integers between 1 and X, used in loops to loop X times.
#since 1.4.6
#Examples:
#loop 20 times:
#	broadcast "%21 - loop-number% seconds left.."
#	wait 1 second
expression:
	patterns:
		%number% time[s]
		once
		twice
		thrice
	return type: long
#X of Item
#An expression to be able to use a certain amount of items where the amount can be any expression. Please note that this expression is not stable and might be replaced in the future.
#since 1.2
#Examples:
#give level of player of pickaxes to the player
expression:
	patterns:
		%number% of %itemstacks/itemtypes/entitytype%
	return type: object
#Yaw / Pitch
#The yaw or pitch of a location or vector.
#A yaw of 0 or 360 represents the positive z direction. Adding a positive number to the yaw of a player will rotate it clockwise.
#A pitch of 90 represents the negative y direction, or downward facing. A pitch of -90 represents upward facing. Adding a positive number to the pitch will rotate the direction downwards.
#Only Paper 1.19+ users may directly change the yaw/pitch of players.
#since 2.0, 2.2-dev28 (vector yaw/pitch), 2.9.0 (entity changers)
#Examples:
#log "%player%: %location of player%, %player's yaw%, %player's pitch%" to "playerlocs.log"
#set {_yaw} to yaw of player
#set {_p} to pitch of target entity
#set pitch of player to -90  Makes the player look upwards, Paper 1.19+ only
#add 180 to yaw of target of player  Makes the target look behind themselves
#Paper 1.19+ (player changers)
expression:
	patterns:
		[the] (yaw|pitch) of %entities/locations/vectors%
		%entities/locations/vectors%'[s] (yaw|pitch)
	return type: float