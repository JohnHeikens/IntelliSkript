{
  "conditions": [
    {
      "id": "CondFileExist",
      "name": "JSON File exists",
      "description": [
        "You can simply check whether the json-file exists or not."
      ],
      "examples": [
        "on load:",
        "\tbroadcast json file \"test\\test.json\" exists"
      ],
      "since": [
        "1.3.1"
      ],
      "patterns": [
        "json file %string% exists",
        "json file %string% does(n't| not) exists"
      ]
    },
    {
      "id": "CondJsonHas",
      "name": "JSON Has Key/Value's",
      "description": [
        "Used to get information if the key or value exists in the JSON"
      ],
      "examples": [
        "on script load:",
        "\tset {_j} to json from string \"{'Hello': {'Hi': 'There'}}\"",
        "\tif {_j} has keys \"Hello\", \"Hi\":",
        "\t\tsend true"
      ],
      "since": [
        "1.2.0"
      ],
      "patterns": [
        "%json% has ((:key|:value) %object%|(:keys|:values) %objects%)",
        "%json% does(n't| not) have ((:key|:value) %object%|(:keys|:values) %objects%)"
      ]
    },
    {
      "id": "CondJsonEmpty",
      "name": "JSON empty",
      "description": [
        "You can simply check if the file is empty."
      ],
      "examples": [
        "on script load:",
        "\tset {_j} to json from string \"{'Hello': 'There'}\"",
        "\tjson {_j} is empty: ",
        "\t\tbroadcast \"is empty\""
      ],
      "since": [
        "1.3.0"
      ],
      "patterns": [
        "json %json% is empty",
        "json %json% is(n't| not) empty"
      ]
    }
  ],
  "effects": [
    {
      "id": "EffAppend",
      "name": "Append jsonelement/cached Json/Json file",
      "description": [
        "You can append the jsonelement or the cached json or the json file"
      ],
      "examples": [
        "command sk-example:",
        "\ttrigger:",
        "\t\tappend player's location with key \"location\" to cached json \"your\"",
        "\t\tsend cached json \"your\" with pretty print",
        "",
        "\t\tset {_json} to json from player's world",
        "\t\tappend player's location with key \"location\" as nested object \"player:data[0]\" to {_json}",
        "\t\tsend {_json} with pretty print",
        "",
        "\t\tset {_fileJson} to json from file \"skJson\\test.json\"",
        "\t\tappend player's location to file \"skJson\\test.json\"",
        "\t\tset {_fileJson} to json from file \"skJson\\test.json\"",
        "\t\tsend {_fileJson} with pretty print"
      ],
      "since": [
        "2.5.0"
      ],
      "patterns": [
        "append %object/json% [:with key %string%] [:as nested object %string%] to json file %string%",
        "append %object% [:with key %string%] [:as nested object %string%] to (:cached json) %string%",
        "append %object% [:with key %string%] [:as nested object %string%] to %json%"
      ]
    },
    {
      "id": "EffChange",
      "name": "Change value of JsonElements.",
      "description": [
        "You can handle a JsonElement or cached Jsons. and change their data as you want."
      ],
      "examples": [
        "on load:",
        "\tset {-json} to json from text \"{'test': {'some': false}\"",
        "\tchange {-json} value \"test:some\" to item (iron sword named \"The &acolored &fSword\") and save it to json file \"plugins/sk-gson/test.json\"",
        "\tbroadcast {-json}",
        "",
        "\tchange cached json \"json5\" value \"test:some\" to item (iron sword named \"The &acolored &fSword\")",
        "\tbroadcast cached json \"json5\""
      ],
      "since": [
        "2.0.0"
      ],
      "patterns": [
        "change [:cached json] %json/string%['s] value %string% to %object%"
      ]
    },
    {
      "id": "EffCustomChanger",
      "name": "Custom changer of Json. Supported SET/ADD/REMOVE/RESET",
      "description": [
        "Custom changer of Json.",
        "You can set/remove/reset or add data to/from any json what you want"
      ],
      "examples": [
        "set {-json} to json from string \"{'list': [1,2,3,4]}\"",
        "set {-data::*} to 1,false,2,true",
        "set {-single} to location(0,10,10)",
        "",
        "set json values \"list\" of {_json} to {-data::*}",
        "set json value \"list\" of {_json} to {-single}",
        "set json value \"list[0]\" of {_json} to cached json \"your.input\"",
        "",
        "add json value {-single} to {-json}",
        "add json values {-data::*} to {-json}",
        "add json value {-single} to to cached json \"your.input\"",
        "",
        "remove json value \"list[1]\" from {-json}",
        "remove json value \"list\" from {-json}",
        "remove json value \"list[1]\" from cached json \"your.input\"",
        "remove index 1 from nested object \"list\" of {-json}",
        "remove object player's tool from nested object \"items\" of {-json}"
      ],
      "since": [
        "2.5.1"
      ],
      "patterns": [
        "set json value[s] %string% of [(:cached json)] %string/json% to %objects%",
        "add json value[s] %objects% to [(:cached json)] %string/json%",
        "remove json [[list]( |-)[:value]] %string% from [(:cached json)] %string/json%",
        "remove [json] (:index|:object) %object% [from nested object %string%] of [(:cached json)] %string/json%"
      ]
    },
    {
      "id": "EffLoadJsonFileToCache",
      "name": "Load json-file to internal cache",
      "description": [
        "You can load the json-file to cache with your defined string id"
      ],
      "examples": [
        "on script load:",
        "\tload json file \"plugins/skJson/test.json\" as \"skJson\""
      ],
      "since": [
        "2.5.0"
      ],
      "patterns": [
        "(load|link) json file %string% [(:as) %string%]"
      ]
    },
    {
      "id": "EffMap",
      "name": "Mapping Json to List",
      "description": [
        "Mapping json to the List and get those values"
      ],
      "examples": [
        "on load:",
        "\tset {_json} to json from string \"{'test': 'test2': {}}\"",
        "\tset {_json} to \"{\"\"test\"\": \"\"test2\"\": {}}\"",
        "\tmap {_json} to {_json::*}",
        "\tsend {_json::*}"
      ],
      "since": [
        "1.4.0"
      ],
      "patterns": [
        "map %json/string% to %objects%"
      ]
    },
    {
      "id": "EffNewJsonFile",
      "name": "New json file with given path",
      "description": [
        "New json file with given path, with or without user data.",
        "When the data was null, parser will automatically create a jsonobject inside the file",
        "When you will handle big json payload i recommend you use 'async new json file ....' "
      ],
      "examples": [
        "on script load:",
        "\tif json file \"...\" does not exists:",
        "\t\tnew json file \"...\""
      ],
      "since": [
        "2.5.0"
      ],
      "patterns": [
        "[:async] new json file %string% [with %object%]"
      ]
    },
    {
      "id": "RemoveJsonFromCache",
      "name": "Remove json from internal cache",
      "description": [
        "You can basically remove the json of given id from internal cache"
      ],
      "examples": [
        "on load:",
        "\tremove json \"test\""
      ],
      "since": [
        "2.5.0"
      ],
      "patterns": [
        "(remove|unlink) cached json %string%"
      ]
    },
    {
      "id": "EffSave",
      "name": "Save content of cached json",
      "description": [
        "Save content of cached json of your given ID back to the file."
      ],
      "examples": [
        "on unload:",
        "\tsave all cached jsons",
        "",
        "command savedata:",
        "\ttrigger:",
        "\t\tsave cached json \"entity\""
      ],
      "since": [
        "2.5.0"
      ],
      "patterns": [
        "[:async] save cached json %string%",
        "[:async] save all cached json[s]"
      ]
    },
    {
      "id": "EffWriteToJsonFile",
      "name": "Write json/json file",
      "description": [
        "You can write/re-write to jsons"
      ],
      "examples": [
        "command sk-example:",
        "\ttrigger:",
        "\t\twrite player's location to cached json \"your\"",
        "\t\tsend cached json \"your\" with pretty print",
        "",
        "\t\tset {_json} to json from player's world",
        "\t\twrite {_json} to json file \"*.json\""
      ],
      "since": [
        "2.0.0"
      ],
      "patterns": [
        "write %object% to json file %string%"
      ]
    }
  ],
  "expressions": [
    {
      "id": "ExprGetAllCachedJsons",
      "name": "All cached Jsons",
      "description": [
        "Print out all your saved json in the cache"
      ],
      "examples": [
        "on load:",
        "\tsend all cached json",
        "\tsend 1 of cached jsons"
      ],
      "since": [
        "2.5.0"
      ],
      "return type": "Object",
      "patterns": [
        "all cached json[s]",
        "%integer% of cached json[s]"
      ]
    },
    {
      "id": "ExprSkriptToJson",
      "name": "Array or List formatted to JSON.",
      "description": [
        "It allows you to convert the sheet back to Json!",
        "Value changes don't work for nested objects, to change the values of a nested object use Change"
      ],
      "examples": [
        "on script load:",
        "\tset {-json} to json from string \"{'test': [1,2,3,false,null,'some'], 'test2': {'something': false}}\"",
        "\tmap {-json} to {_json::*}",
        "\tsend \"&9%{_json::*}'s form with pretty print%\""
      ],
      "since": [
        "1.3.0"
      ],
      "return type": "json",
      "patterns": [
        "[the] (form|formatted json) of %objects%",
        "%objects%'[s] (form|formatted json)"
      ]
    },
    {
      "id": "EffSimpleParse",
      "name": "Basic Json Converter, from Json to any object for i.e. (Location, ItemStack, Inventory)",
      "description": [
        "You can deserialize correct json to skript-type, for example a tool a location, etc.",
        "<code> Also you don't need use the converter, cause the json is converted automatically, use that only in some case.</p>"
      ],
      "examples": [
        "command save_location",
        "\ttrigger:",
        "\t\tset {-json} to json from sender's location",
        "\t\tsend \"Saved location as JSON &e%{-json}%\"",
        "",
        "command jsonTeleport:",
        "\ttrigger",
        "\t\t set {_location} to parsed {-json}",
        "\t\tsend \"You will be tp to &b%{_location}%&r from Json\"",
        "\t\tteleport sender to {_location}"
      ],
      "since": [
        "2.6.21 - CleanUp code"
      ],
      "return type": "Object",
      "patterns": [
        "parsed %object%"
      ]
    },
    {
      "id": "SimpleExprJsonCount",
      "name": "Count of values or keys in the JSON",
      "description": [
        "Return the result of count of keys/values are found in the Json."
      ],
      "examples": [
        "on load:",
        "\tset {_json} to json from string \"{'Hello': {'Hi': 'There'}}\"",
        "\tsend count of value \"There\" of {_json}",
        "\tsend count of key \"There\" of json \"your\""
      ],
      "since": [
        "2.5.0"
      ],
      "return type": "integer",
      "patterns": [
        "count of (:value|:key) %object% of %json%"
      ]
    },
    {
      "id": "SimpleExprGetCachedJson",
      "name": "Get cached json",
      "description": [
        "You can get json from cached internal storage by with a key defined by you"
      ],
      "examples": [
        "on script load:",
        "\tset {_json} to cached json \"your\"",
        "\tsend {_json} with pretty print"
      ],
      "since": [
        "2.5.0"
      ],
      "return type": "json",
      "patterns": [
        "cached json %string%"
      ]
    },
    {
      "id": "ExprGet",
      "name": "Get element/elements from Json",
      "description": [
        "Get single value or values from the json",
        "<p>",
        "{\"test\": {\"player\": \"_F0cus__\"}, \"list\":[1,2,3,{\"some\":1}]}",
        "</p>"
      ],
      "examples": [
        "on load:",
        "\tset {-e} to element \"test\" of {_json}",
        "\tsend {-e}",
        "\tset {_json} to json from text \"{'test': [1,2,3,4,false]}\"",
        "\tset {-e::*} to elements \"test\" from {_json} to player",
        "\tsend {-e::*}"
      ],
      "since": [
        "2.5.0"
      ],
      "return type": "Object",
      "patterns": [
        "(element|value) %string% (of|from) %object%",
        "(elements|values) [%string%] (of|from) %object%"
      ]
    },
    {
      "id": "SimpleExprPrettyPrint",
      "name": "Json outputting as pretty printed.",
      "description": [
        "You can do colorize and smart output of your current json."
      ],
      "examples": [
        "on load:",
        "\tset {_json} to json from text \"{'player': 'your name', 'number': 10, 'bool': false}\"",
        "\tsend {_json} with pretty print"
      ],
      "since": [
        "2.0.0"
      ],
      "return type": "Text",
      "patterns": [
        "%json% with pretty print"
      ]
    },
    {
      "id": "ExprCreateJson",
      "name": "New json from bunch sources (Text/File/Request)",
      "description": [
        "You are able a create new json from bunch of sources",
        "String/text any Skript object, and from Web/Url request"
      ],
      "examples": [
        "command example [<string>]:",
        "\ttrigger:",
        "\t\tsend json from arg-1",
        "\t\tsend json from player's location",
        "\t\tsend json from player's tool",
        "\t\tsend json from text \"{'title': 'skJson', 'number': 2.0}\"",
        "",
        "on load:",
        "\tset {_n} to 9.12",
        "\tsend json from text \"{'number': ${_n}\"",
        "",
        "on load:",
        "\tsend json from request last response"
      ],
      "since": [
        "2.5.0"
      ],
      "return type": "json",
      "patterns": [
        "[a] json from (text|string) %string%",
        "[a] json from %object%",
        "[a] json from file [path] %string%",
        "[a] json from request %object%",
        "[a] new json from<.*>"
      ]
    },
    {
      "id": "ExprRawJson",
      "name": "Representing a raw json.",
      "description": [
        "json from parsed json to a object"
      ],
      "examples": [
        "command saveLocToJson:",
        "\ttrigger:",
        "\t\tset {-e} to json from player's location",
        "\t\tsend raw {-e} with pretty print to console"
      ],
      "since": [
        "2.6.2"
      ],
      "return type": "json",
      "patterns": [
        "raw json %json%"
      ]
    },
    {
      "id": "SimpleExprObjectArray",
      "name": "Simple JsonObject/JsonArray",
      "description": [
        "You can create empty array or object."
      ],
      "examples": [
        "on load:",
        "\tsend jsonobject",
        "\tsend jsonarray"
      ],
      "since": [
        "2.0.4 - 3EA"
      ],
      "return type": "json",
      "patterns": [
        "json[-]:object|json[-]:array"
      ]
    },
    {
      "id": "ExprSizeOfJson",
      "name": "Size of JSON",
      "description": [
        "Return size of JSON"
      ],
      "examples": [
        "on load:",
        "   set {-e} to json from string \"{'anything': [1,2,false]}\"",
        "   broadcast {-e}'s json size",
        "   broadcast json size of {-e}"
      ],
      "since": [
        "2.5.0"
      ],
      "return type": "integer",
      "patterns": [
        "[the] json size of %jsons%",
        "%jsons%'[s] json size"
      ]
    },
    {
      "id": "SkJsonEffectTest",
      "name": "SkJsonEffectTest",
      "return type": "Boolean",
      "patterns": [
        "[skJson] version check"
      ]
    }
  ],
  "types": [
    {
      "id": "JsonElement",
      "name": "json",
      "description": [
        "Represents a json element and its class `JsonElement.class`."
      ],
      "since": [
        "2.5.0, 2.6.2 - Fix ItemStack Converter"
      ],
      "patterns": [
        "json"
      ]
    }
  ]
}
