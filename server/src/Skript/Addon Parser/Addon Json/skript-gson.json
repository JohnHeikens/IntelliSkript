{
  "conditions": [
    {
      "id": "CondJsonFileExist",
      "name": "Json file exists",
      "description": [
        "You can check if the json file already exists or not."
      ],
      "examples": [
        "command FileExists:\n  trigger:\n    if json file \"plugins/test/main.json\" already exists:\n        set {_json} to json from string \"{'A': [{'B': {}}, false, true, 10, 20, 22.22, 'A']}\"\n"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "json [file] %string% [already] exists",
        "json [file] %string% [already] does(n't| not) exists"
      ]
    },
    {
      "id": "CondJsonIsLoaded",
      "name": "Json file is cached",
      "description": [
        "Check if the file for given id is cached"
      ],
      "examples": [
        "on load:",
        "\tif cached json \"test\" if linked:",
        "\t\tsend true"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "cached json %string% is (load|linked)",
        "cached json %string% is(n't| not) (load|linked)"
      ]
    },
    {
      "id": "CondJsonEmpty",
      "name": "Json file is empty",
      "description": [
        "You can check if the json file empty"
      ],
      "examples": [
        "Command jsonFileIsEmpty:\n    trigger:\n        if json file \"plugins/raw/test.json\" is empty:\n            send true\n        else:\n            send false\n"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "json file %string% is empty",
        "json file %string% is(n't| not) empty"
      ]
    },
    {
      "id": "CondJsonIsListened",
      "name": "Json file is listening",
      "description": [
        "Check if the file for given id is listening via JsonWatcher"
      ],
      "examples": [
        "on load:",
        "\tif cached json \"test\" is listen:",
        "\t\tsend true"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "[cached] json [id] %string% is listen",
        "[cached] json [id] %string% is(n't| not) listen"
      ]
    },
    {
      "id": "CondJsonHas",
      "name": "Json has value/key",
      "description": [
        " You can check if the inserted keys or values already in your specified json"
      ],
      "examples": [
        "on load:",
        "    set {_json} to json from string \"{'test5': [1], 'test6': ['key', 'key2', 'key3']}\"",
        "    if {_json} has keys \"test5\", \"test6\", \"A\":",
        "        send true",
        "    else:",
        "        send false"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "%json% has (:value|:key)[s] %objects%",
        "%json% does(n't| not) have (:value|:key)[s] %objects%"
      ]
    },
    {
      "id": "CondJsonType",
      "name": "Type of json",
      "description": [
        "You check json type of Json"
      ],
      "examples": [
        "on load:",
        "\tif type of {_json} is primitive:",
        "\tsend true"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "type of %json% (is|=) (1:primitive|2:[json]object|3:array)",
        "type of %json% (is(n't| not)|!=) (1:primitive|2:[json]object|3:array)"
      ]
    }
  ],
  "effects": [
    {
      "id": "EffExecuteRequest",
      "name": "Execute a http (post|get) request",
      "description": [
        "You can execute a web request to rest api. with json encoded body/headers"
      ],
      "examples": [
        "set {_headers} to json from text \"{'Content-type': 'application/json}\"",
        "execute GET request to \"https://dummyjson.com/products/1\" with headers {_headers}",
        "send request's body with pretty print"
      ],
      "since": [
        "2.8.0 performance & clean"
      ],
      "patterns": [
        "execute GET request to %string% [(:with headers) %string/json%]",
        "execute POST request to %string% [:(with headers) %string/json%] [[and] [with] (:body) %string/json%]"
      ]
    },
    {
      "id": "EffMakeListen",
      "name": "JsonWatcher - Start listening to file",
      "description": [
        "You can register listener for json file, and while the file is updated the cache for this file will be also so."
      ],
      "examples": [
        "on script load",
        "\tmake jsonwatcher listen to \"mine.id\""
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "make [json]watcher listen to %string%"
      ]
    },
    {
      "id": "EffStopListen",
      "name": "JsonWatcher - Stop listening to file",
      "description": [
        "That will be stop listen file for given id"
      ],
      "examples": [
        "on script load",
        "\tstop jsonwatcher listen to id \"mine.id\""
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "stop [json]watcher listen to [id] %string%"
      ]
    },
    {
      "id": "EffLinkJsonFile",
      "name": "Link json file with defined cache.",
      "description": [
        "You can works with the cache instead of reopening the file again & again."
      ],
      "examples": [
        "on load:",
        "\tlink json file \"<path to file>\" as \"mine.id\"",
        "\tlink json file \"<path to file>\" as \"mine.id\" and make jsonwatcher listen"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "link [json] file %string% as %string% [(:and make) [json]watcher listen]"
      ]
    },
    {
      "id": "EffJsonToSkriptList",
      "name": "Map json to skript list",
      "description": [
        "@Deprecated",
        "Mapping json to the List and get those values"
      ],
      "examples": [
        "on load:",
        "\tset {_json} to json from string \"{'test': 'test2': {}}\"",
        "\tset {_json} to \"{\"\"test\"\": \"\"test2\"\": {}}\"",
        "\tmap {_json} to {_json::*}",
        "\tsend {_json::*}"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "(map|copy) %json/string% to %objects%"
      ]
    },
    {
      "id": "EffNewJsonFile",
      "name": "New json file",
      "description": [
        "You can create a new json file."
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "[:async] new json file %string% [(:with) (object|content)[s] %object%]"
      ]
    },
    {
      "id": "RunTimer",
      "name": "RunTimer",
      "patterns": [
        "skJson debug timer (:start|:stop)",
        "skJson debug class %objects%"
      ]
    },
    {
      "id": "EffSaveCache",
      "name": "Save cached json to file",
      "description": [
        "It's allow save cached json back to the file"
      ],
      "examples": [
        "on unload:",
        "\tsave cached json \"test\""
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "[:async] save cached json %string%",
        "[:async] save all cached jsons"
      ]
    },
    {
      "id": "EffUnlinkJsonFile",
      "name": "UnLink or Unload json file",
      "description": [
        "You can unload the json file."
      ],
      "examples": [
        "on load:",
        "\tlunink json \"mine.id\""
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "unlink json %string%"
      ]
    },
    {
      "id": "EffWriteJsonFile",
      "name": "Write json file with contents",
      "description": [
        "You can write/re-write to jsons"
      ],
      "examples": [
        "command sk-example:",
        "\ttrigger:",
        "\t\tset {_json} to json from player's world",
        "\t\twrite {_json} to json file \"*.json\""
      ],
      "since": [
        "2.8.0 performance & clean"
      ],
      "patterns": [
        "[re[-]]write %object% to [json file] %string/jsonfile%"
      ]
    },
    {
      "id": "EffEditFile",
      "name": "change json file",
      "description": [
        "You can change json file."
      ],
      "examples": [
        "command jsonFileValue:",
        "\ttrigger:",
        "\t\tchange key \"A\" of jsonfile(\"plugins/<>/test.json\") to \"B\""
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "[:async] change (:value|:key) %string% of (%jsonfile/string%|(:json file) %string%) to %objects%"
      ]
    }
  ],
  "expressions": [
    {
      "id": "GetAllCachedJson",
      "name": "All cached jsons",
      "description": [
        "That will return jsons from your cache."
      ],
      "examples": [
        "command AllCachedJsons:",
        "\ttrigger:",
        "\t\tsend all cached jsons"
      ],
      "since": [
        "2.8.0 performance & clean"
      ],
      "return type": "json element",
      "changers": [
        "add",
        "remove"
      ],
      "patterns": [
        "all cached jsons"
      ]
    },
    {
      "id": "ExprSkriptListToJson",
      "name": "Array or List formatted to JSON.",
      "description": [
        "It allows you to convert the sheet back to Json!",
        "Value changes don't work for nested objects, to change the values of a nested object use Change"
      ],
      "examples": [
        "on script load:",
        "\tset {-json} to json from string \"{'test': [1,2,3,false,null,'some'], 'test2': {'something': false}}\"",
        "\tmap {-json} to {_json::*}",
        "\tsend \"&9%{_json::*}'s form with pretty print%\""
      ],
      "since": [
        "1.3.0"
      ],
      "return type": "json element",
      "changers": [
        "add",
        "remove"
      ],
      "patterns": [
        "[the] form[atted json] of %objects%",
        "%objects%'[s] form[atted json]"
      ]
    },
    {
      "id": "ExprJsonCountOf",
      "name": "Count of objects/phrases",
      "description": [
        "You can get the exact number of identical keys or values from the entire json because `count of` works recursively."
      ],
      "examples": [
        "set {_json} to json from string \"{'A': [{'B': {}}], 'X': {}, 'UN': 'A'}\"",
        "add diamond sword to {_json} for given path \"A[1]:B\"",
        "send {_json}",
        "send count of diamond sword in {_json}",
        "send number of key \"A\" in {_json}",
        "send count of \"A\" in {_json}"
      ],
      "since": [
        "2.8.0 performance & clean"
      ],
      "return type": "integer",
      "patterns": [
        "(count|number) of (:key|[value]) %object% in %json%"
      ]
    },
    {
      "id": "ExprJsonElements",
      "name": "Elements/Values of the json",
      "description": [
        "You can get the main json values, or you can also get the use values for a given object/array you can also get a single value",
        "loop-value, loop-element, loop-key",
        "",
        "Means :  -> entries entries mean the entry for the looped element, for example we have element {\"B\": false}",
        "    its entry will be loop-key = B, loop-element = false, loop-value = {B=false}",
        "!Warnings: loop-key or loop-element you can use only for entries!",
        "LOOP-PATTERNS ->",
        "\tloop-value, loop-element, loop-key"
      ],
      "examples": [
        "command GetElements:\n  trigger:\n    set {_json} to json from string \"{'A': [{'B': {}}, false, true, 10, 20, 22.22, 'A']}\"\n    add diamond sword to {_json} for given path \"A[1]:B\"\n        loop {_json}'s values:\n            send loop-value\n        loop {_json}'s elements \"A[]\":\n            send loop-element\n\n        send {_json}'s value \"A[1]\"\n        loop {_json}'s entries:\n            send loop-key\n            send loop-value\n            send loop-element\n"
      ],
      "since": [
        "2.8.0 performance & clean"
      ],
      "return type": "Object",
      "patterns": [
        "(value|element) %string% of %object%",
        "(values|elements) [%string%] of %object%",
        "entr(y|ies) [%string%] of %object%"
      ]
    },
    {
      "id": "ExprJsonLoopExpressions",
      "name": "ExprJsonLoopExpressions",
      "since": [
        "2.8.0 - performance & clean"
      ],
      "return type": "Object",
      "patterns": [
        "[the] [json-]loop-(value|:element|:key)[-<(\\d+)>]"
      ]
    },
    {
      "id": "ExprJsonCacheGet",
      "name": "Get cached json",
      "description": [
        "You can get json from cached internal storage by with a key defined by you"
      ],
      "examples": [
        "on script load:",
        "\tset {_json} to cached json \"your\"",
        "\tsend {_json} with pretty print"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "return type": "json element",
      "changers": [
        "add",
        "remove"
      ],
      "patterns": [
        "cached json %string%"
      ]
    },
    {
      "id": "ExprJsonSize",
      "name": "Json size of current element",
      "examples": [
        "command SizeJson:",
        "  trigger:",
        "    set {_json} to json from text \"{'A': 1, 'B': 2, 'C': {'A': 'B', 'X': 'Y'}}\"",
        "    send size of {_json} # = 3 (A, B, C)",
        "    send size of (element \"C\" of {_json}) # = 2 (A, X)"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "return type": "integer",
      "patterns": [
        "[the] size of %jsons%",
        "%jsons%'[s] size"
      ]
    },
    {
      "id": "JsonChanger",
      "name": "JsonChanger",
      "return type": "json element",
      "changers": [
        "add",
        "set",
        "remove"
      ],
      "patterns": [
        "json list %string% in %json%",
        "(:keys|:values) of json object [%string%] in %json%",
        "json (:value|:key) %string% in %json%"
      ]
    },
    {
      "id": "ExprGetBody",
      "name": "JsonRequest - request body",
      "description": [
        ""
      ],
      "examples": [
        "send request's body"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "return type": "json element",
      "changers": [
        "add",
        "remove"
      ],
      "patterns": [
        "[SkJson] [current] request's body",
        "[skJson] body of [current] request"
      ]
    },
    {
      "id": "ExprNewJson",
      "name": "New json",
      "description": [
        "It's allow create json from any source also from the file"
      ],
      "examples": [
        "set {_json} to json from file \"plugins/Skript/json-storage/database.json\"",
        "set {_json} to json from \"{\"\"test\"\":true}\"",
        "set {_json} to json from diamond sword",
        "set {_json} to json from player's location",
        "set {_json} to json from player's inventory"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "return type": "json element",
      "changers": [
        "add",
        "remove"
      ],
      "patterns": [
        "json[s] from [text|string] %object%",
        "json from [json] file %string%",
        "[empty] json(-| )(0:array|1:object)"
      ]
    },
    {
      "id": "ExprPrettyPrint",
      "name": "Pretty json",
      "description": [
        "Allows you to better parse json",
        "<pre>",
        "{",
        "\t\"test\": \"skJson\"",
        "\t\"Object\": {",
        "\t\t\"new\": \"data\"",
        "\t}",
        "</pre>"
      ],
      "examples": [
        "set {_json} to json from \"{'test': 'skJson', 'Object' : {'new': 'data'}}\"",
        "send {_json} with pretty print"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "return type": "Text",
      "patterns": [
        "%json% with pretty print"
      ]
    },
    {
      "id": "SupportExpressions",
      "name": "SupportExpressions",
      "return type": "json element",
      "changers": [
        "add",
        "remove"
      ],
      "patterns": [
        "(:1st|:first|:2nd|:second|:3rd|:third|:last|%integer%) element"
      ]
    }
  ],
  "types": [
    {
      "id": "JsonElement",
      "name": "json element",
      "description": [
        "Represent the json class"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "json"
      ]
    },
    {
      "id": "JsonFile",
      "name": "json file",
      "description": [
        "Represent the json file class"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "patterns": [
        "jsonfile"
      ]
    }
  ],
  "functions": [
    {
      "id": "function_jsonfile",
      "name": "jsonfile",
      "description": [
        "Get json file from string/object input"
      ],
      "examples": [
        "jsonfile(\"plugins/test/test.json\")"
      ],
      "since": [
        "2.8.0 - performance & clean"
      ],
      "return type": "Object",
      "patterns": [
        "jsonfile(file: string)"
      ]
    }
  ]
}
