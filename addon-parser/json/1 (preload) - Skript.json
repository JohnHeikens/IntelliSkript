{
  "metadata": {
    "version": "2.11.0-pre1"
  },
  "events": [
    {
      "id": "at_time",
      "name": "At Time",
      "description": [
        "An event that occurs at a given minecraft time in every world or only in specific worlds."
      ],
      "examples": [
        "at 18:00",
        "at 7am in \"world\""
      ],
      "since": [
        "1.3.4"
      ],
      "patterns": [
        "[on] at %time% [in %worlds%]"
      ],
      "event values": [
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "anvil_damage",
      "name": "On Anvil Damage",
      "description": [
        "Called when an anvil is damaged/broken from being used to repair/rename items.",
        "Note: this does not include anvil damage from falling."
      ],
      "examples": [
        "on anvil damage:",
        "\tcancel the event"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[on] anvil damag(e|ing)"
      ],
      "event values": [
        "event-inventory"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "anvil_prepare",
      "name": "On Anvil Prepare",
      "description": [
        "Called when an item is put in a slot for repair by an anvil. Please note that this event is called multiple times in a single item slot move."
      ],
      "examples": [
        "on anvil prepare:",
        "\tevent-item is set # result item",
        "\tchance of 5%:",
        "\t\tset repair cost to repair cost * 50%",
        "\t\tsend \"You're LUCKY! You got 50% discount.\" to player"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[on] anvil prepar(e|ing)"
      ],
      "event values": [
        "event-inventory",
        "event-item stack",
        "event-player",
        "event-slot"
      ],
      "cancellable": false
    },
    {
      "id": "aoe_cloud_effect",
      "name": "On AoE Cloud Effect",
      "description": [
        "Called when area effect cloud applies its potion effect. This happens every 5 ticks by default."
      ],
      "examples": [
        "on area cloud effect:"
      ],
      "since": [
        "2.2-dev21"
      ],
      "patterns": [
        "[on] (area|AoE) [cloud] effect"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-living entities",
        "event-location",
        "event-potion effect type",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "arm_swing",
      "name": "On Arm Swing",
      "description": [
        "Called when a player swings their arm."
      ],
      "examples": [
        "on arm swing:",
        "\tsend \"You swung your arm!\""
      ],
      "since": [
        "2.5.1"
      ],
      "patterns": [
        "[on] [player] arm swing"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "armor_change",
      "name": "On Armor Change",
      "description": [
        "Called when armor pieces of a player are changed."
      ],
      "examples": [
        "on armor change:",
        "\tbroadcast the old armor item",
        "on helmet change:"
      ],
      "since": [
        "2.5, 2.11 (equipment slots)"
      ],
      "patterns": [
        "[on] [player] armo[u]r change[d]",
        "[on] [player] %equipmentslot% change[d]"
      ],
      "event values": [
        "event-equipment slot",
        "event-player",
        "event-slot",
        "event-world",
        "future event-item stack",
        "past event-item stack"
      ],
      "cancellable": false,
      "required plugins": [
        "Paper"
      ],
      "keywords": [
        "armor",
        "armour"
      ]
    },
    {
      "id": "bat_toggle_sleep",
      "name": "On Bat Toggle Sleep",
      "description": [
        "Called when a bat attempts to go to sleep or wakes up."
      ],
      "examples": [
        "on bat toggle sleep:"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "[on] bat toggle sleep"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "beacon_change_effect",
      "name": "On Beacon Change Effect",
      "description": [
        "Called when a player changes the effects of a beacon."
      ],
      "examples": [
        "on beacon effect change:",
        "\tbroadcast event-player",
        "\tbroadcast event-block",
        "\tbroadcast primary beacon effect",
        "\tbroadcast secondary beacon effect",
        "on beacon change effect:",
        "on player change beacon effect:"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] beacon change effect",
        "[on] beacon effect change",
        "[on] player chang(e[s]|ing) [of] beacon effect"
      ],
      "event values": [
        "event-block",
        "event-player",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "beacon_effect",
      "name": "On Beacon Effect",
      "description": [
        "Called when a player gets an effect from a beacon."
      ],
      "examples": [
        "on beacon effect:",
        "\tbroadcast applied effect",
        "\tbroadcast event-player",
        "\tbroadcast event-block",
        "on primary beacon effect apply of haste:",
        "on application of secondary beacon effect:",
        "on beacon effect of speed:"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] [primary|secondary] beacon effect [of %potioneffecttypes%]",
        "[on] application of [primary|secondary] beacon effect [of %potioneffecttypes%]",
        "[on] [primary|secondary] beacon effect apply [of %potioneffecttypes%]"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "beacon_toggle",
      "name": "On Beacon Toggle",
      "description": [
        "Called when a beacon is activated or deactivated."
      ],
      "examples": [
        "on beacon toggle:",
        "on beacon activate:",
        "on beacon deactivate:"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] beacon toggle",
        "[on] beacon activat(e|ion)",
        "[on] beacon deactivat(e|ion)"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world"
      ],
      "cancellable": false,
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "bed_enter",
      "name": "On Bed Enter",
      "description": [
        "Called when a player starts sleeping."
      ],
      "examples": [
        "on bed enter:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] bed enter[ing]",
        "[on] [player] enter[ing] [a] bed"
      ],
      "event values": [
        "event-block",
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "bed_leave",
      "name": "On Bed Leave",
      "description": [
        "Called when a player leaves a bed."
      ],
      "examples": [
        "on player leaving a bed:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] bed leav(e|ing)",
        "[on] [player] leav(e|ing) [a] bed"
      ],
      "event values": [
        "event-block",
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "bell_resonate",
      "name": "On Bell Resonate",
      "description": [
        "Called when a bell resonates, highlighting nearby raiders."
      ],
      "examples": [
        "on bell resonate:",
        "\tsend \"<red>Raiders are nearby!\" to all players in radius 32 around event-block"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "[on] bell resonat(e|ing)"
      ],
      "event values": [
        "event-block",
        "event-entities",
        "event-location",
        "event-world"
      ],
      "cancellable": false,
      "required plugins": [
        "Spigot 1.19.4+"
      ]
    },
    {
      "id": "bell_ring",
      "name": "On Bell Ring",
      "description": [
        "Called when a bell is rung."
      ],
      "examples": [
        "on bell ring:",
        "\tsend \"<gold>Ding-dong!<reset>\" to all players in radius 10 of event-block"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "[on] bell ring[ing]"
      ],
      "event values": [
        "event-block",
        "event-direction",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Spigot 1.19.4+ or Paper 1.16.5+ (no event-direction)"
      ]
    },
    {
      "id": "block_damage",
      "name": "On Block Damage",
      "description": [
        "Called when a player starts to break a block. You can usually just use the leftclick event for this."
      ],
      "examples": [
        "on block damaging:",
        "\tif block is log:",
        "\t\tsend \"You can't break the holy log!\""
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] block damag(ing|e)"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "block_drop",
      "name": "On Block Drop",
      "description": [
        "Called when a block broken by a player drops something.",
        "<ul>",
        "event-player: The player that broke the block",
        "past event-block: The block that was broken",
        "event-block: The block after being broken",
        "event-items (or drops): The drops of the block",
        "event-entities: The entities of the dropped items",
        "</ul>",
        "",
        "If the breaking of the block leads to others being broken, such as torches, they will appearin \"event-items\" and \"event-entities\"."
      ],
      "examples": [
        "on block drop:",
        "\tbroadcast event-player",
        "\tbroadcast past event-block",
        "\tbroadcast event-block",
        "\tbroadcast event-items",
        "\tbroadcast event-entities",
        "on block drop of oak log:"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] block drop[ping] [[of] %itemtypes/blockdatas%]"
      ],
      "event values": [
        "event-block",
        "event-entities",
        "event-item stacks",
        "event-location",
        "event-player",
        "event-world",
        "past event-block"
      ],
      "cancellable": true
    },
    {
      "id": "block_fertilize",
      "name": "On Block Fertilize",
      "description": [
        "Called when a player fertilizes blocks."
      ],
      "examples": [
        "on block fertilize:",
        "\tsend \"Fertilized %size of fertilized blocks% blocks got fertilized.\""
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "[on] [block] fertilize"
      ],
      "event values": [
        "event-block",
        "event-blocks",
        "event-location",
        "event-player",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Minecraft 1.13 or newer"
      ]
    },
    {
      "id": "block_growth",
      "name": "On Block Growth",
      "description": [
        "Called when a crop grows. Alternative to new form of generic grow event."
      ],
      "examples": [
        "on crop growth:"
      ],
      "since": [
        "2.2-Fixes-V10"
      ],
      "patterns": [
        "[on] (plant|crop|block) grow[(th|ing)] [[of] %itemtypes%]"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world",
        "past event-block"
      ],
      "cancellable": true
    },
    {
      "id": "book_edit",
      "name": "On Book Edit",
      "description": [
        "Called when a player edits a book."
      ],
      "examples": [
        "on book edit:"
      ],
      "since": [
        "2.2-dev31"
      ],
      "patterns": [
        "[on] book (edit|change|write)"
      ],
      "event values": [
        "event-item stack",
        "event-player",
        "event-texts",
        "event-world",
        "past event-item stack",
        "past event-texts"
      ],
      "cancellable": true
    },
    {
      "id": "book_sign",
      "name": "On Book Sign",
      "description": [
        "Called when a player signs a book."
      ],
      "examples": [
        "on book sign:"
      ],
      "since": [
        "2.2-dev31"
      ],
      "patterns": [
        "[on] book sign[ing]"
      ],
      "event values": [
        "event-item stack",
        "event-player",
        "event-texts",
        "event-world",
        "past event-item stack",
        "past event-texts"
      ],
      "cancellable": true
    },
    {
      "id": "break_mine",
      "name": "On Break / Mine",
      "description": [
        "Called when a block is broken by a player. If you use 'on mine', only events where the broken block dropped something will call the trigger."
      ],
      "examples": [
        "on mine:",
        "on break of stone:",
        "on mine of any ore:",
        "on break of chest[facing=north]:",
        "on break of potatoes[age=7]:"
      ],
      "since": [
        "1.0 (break), unknown (mine), 2.6 (BlockData support)"
      ],
      "patterns": [
        "[on] [block] (break[ing]|min(e|ing)) [[of] %itemtypes/blockdatas%]"
      ],
      "event values": [
        "event-block",
        "event-entity",
        "event-entity",
        "event-location",
        "event-player",
        "event-world",
        "future event-block",
        "past event-block"
      ],
      "cancellable": true
    },
    {
      "id": "broadcast",
      "name": "On Broadcast",
      "description": [
        "Called when a message is broadcasted."
      ],
      "examples": [
        "on broadcast:",
        "\tset broadcast-message to \"&c[BROADCAST] %broadcasted message%\""
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] broadcast"
      ],
      "cancellable": true
    },
    {
      "id": "bucket_empty",
      "name": "On Bucket Empty",
      "description": [
        "Called when a player empties a bucket. You can also use the place event with a check for water or lava."
      ],
      "examples": [
        "on bucket empty:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] bucket empty[ing]",
        "[on] [player] empty[ing] [a] bucket"
      ],
      "event values": [
        "event-block",
        "event-player",
        "event-world",
        "past event-block"
      ],
      "cancellable": true
    },
    {
      "id": "bucket_fill",
      "name": "On Bucket fill",
      "description": [
        "Called when a player fills a bucket."
      ],
      "examples": [
        "on player filling a bucket:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] bucket fill[ing]",
        "[on] [player] fill[ing] [a] bucket"
      ],
      "event values": [
        "event-block",
        "event-player",
        "event-world",
        "future event-block"
      ],
      "cancellable": true
    },
    {
      "id": "burn",
      "name": "On Burn",
      "description": [
        "Called when a block is destroyed by fire."
      ],
      "examples": [
        "on burn:",
        "on burn of wood, fences, or chests:",
        "on burn of oak_log[axis=y]:"
      ],
      "since": [
        "1.0, 2.6 (BlockData support)"
      ],
      "patterns": [
        "[on] [block] burn[ing] [[of] %itemtypes/blockdatas%]"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "can_build_check",
      "name": "On Can Build Check",
      "description": [
        "Called when a player rightclicks on a block while holding a block or a placeable item. You can either cancel the event to prevent the block from being built, or uncancel it to allow it.",
        "Please note that the data value of the block to be placed is not available in this event, only its ID."
      ],
      "examples": [
        "on block can build check:",
        "\tcancel event"
      ],
      "since": [
        "1.0 (basic), 2.0 ([un]cancellable)"
      ],
      "patterns": [
        "[on] [block] can build check"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-player",
        "event-world",
        "past event-block"
      ],
      "cancellable": false
    },
    {
      "id": "chat",
      "name": "On Chat",
      "description": [
        "Called whenever a player chats.",
        "Use chat format to change message format.",
        "Use chat recipients to edit chat recipients."
      ],
      "examples": [
        "on chat:",
        "\tif player has permission \"owner\":",
        "\t\tset chat format to \"<red>[player]<light gray>: <light red>[message]\"",
        "\telse if player has permission \"admin\":",
        "\t\tset chat format to \"<light red>[player]<light gray>: <orange>[message]\"",
        "\telse: #default message format",
        "\t\tset chat format to \"<orange>[player]<light gray>: <white>[message]\""
      ],
      "since": [
        "1.4.1"
      ],
      "patterns": [
        "[on] chat"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "chunk_generate",
      "name": "On Chunk Generate",
      "description": [
        "Called after a new chunk was generated."
      ],
      "examples": [
        "on chunk generate:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] chunk (generat|populat)(e|ing)"
      ],
      "event values": [
        "event-chunk",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "chunk_load",
      "name": "On Chunk Load",
      "description": [
        "Called when a chunk loads. The chunk might or might not contain mobs when it's loaded."
      ],
      "examples": [
        "on chunk load:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] chunk load[ing]"
      ],
      "event values": [
        "event-chunk",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "chunk_unload",
      "name": "On Chunk Unload",
      "description": [
        "Called when a chunk is unloaded due to not being near any player."
      ],
      "examples": [
        "on chunk unload:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] chunk unload[ing]"
      ],
      "event values": [
        "event-chunk",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "click",
      "name": "On Click",
      "description": [
        "Called when a user clicks on a block, an entity or air with or without an item in their hand.",
        "Please note that rightclick events with an empty hand while not looking at a block are not sent to the server, so there's no way to detect them.",
        "Also note that a leftclick on an entity is an attack and thus not covered by the 'click' event, but the 'damage' event."
      ],
      "examples": [
        "on click:",
        "on rightclick holding a fishing rod:",
        "on leftclick on a stone or obsidian:",
        "on rightclick on a creeper:",
        "on click with a sword:",
        "on click on chest[facing=north]:",
        "on click on campfire[lit=true]:"
      ],
      "since": [
        "1.0, 2.10 (blockdata)"
      ],
      "patterns": [
        "[on] [(right|left)(| |-)][mouse(| |-)]click[ing] [on %entitydata/itemtype/blockdata%] [(with|using|holding) %itemtype%]",
        "[on] [(right|left)(| |-)][mouse(| |-)]click[ing] (with|using|holding) %itemtype% on %entitydata/itemtype/blockdata%"
      ],
      "event values": [
        "event-block",
        "event-block action",
        "event-blockface",
        "event-direction",
        "event-entity",
        "event-equipment slot",
        "event-item stack",
        "event-location",
        "event-player",
        "event-vector",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "combust",
      "name": "On Combust",
      "description": [
        "Called when an entity is set on fire, e.g. by fire or lava, a fireball, or by standing in direct sunlight (zombies, skeletons)."
      ],
      "examples": [
        "on combust:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] combust[ing]"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "command",
      "name": "On Command",
      "description": [
        "Called when a player enters a command (not necessarily a Skript command) but you can check if command is a skript command, see Is a Skript command condition."
      ],
      "examples": [
        "on command:",
        "on command \"/stop\":",
        "on command \"pm Njol \":"
      ],
      "since": [
        "2.0"
      ],
      "patterns": [
        "[on] command [%strings%]"
      ],
      "event values": [
        "event-command sender",
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "connect",
      "name": "On Connect",
      "description": [
        "Called when the player connects to the server. This event is called before the player actually joins the server, so if you want to prevent players from joining you should prefer this event over on join."
      ],
      "examples": [
        "on connect:",
        "\tplayer doesn't have permission \"VIP\"",
        "\tnumber of players is greater than 15",
        "\tkick the player due to \"The last 5 slots are reserved for VIP players.\""
      ],
      "since": [
        "2.0"
      ],
      "patterns": [
        "[on] [player] connect[ing]"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "consume",
      "name": "On Consume",
      "description": [
        "Called when a player is done eating/drinking something, e.g. an apple, bread, meat, milk or a potion."
      ],
      "examples": [
        "on consume:"
      ],
      "since": [
        "2.0"
      ],
      "patterns": [
        "[on] [player] ((eat|drink)[ing]|consum(e|ing)) [[of] %itemtypes%]"
      ],
      "event values": [
        "event-item stack",
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "craft",
      "name": "On Craft",
      "description": [
        "Called when a player crafts an item."
      ],
      "examples": [
        "on craft:"
      ],
      "since": [
        "unknown (before 2.1)"
      ],
      "patterns": [
        "[on] [player] craft[ing] [[of] %itemtypes%]"
      ],
      "event values": [
        "event-click type",
        "event-inventory",
        "event-inventory action",
        "event-item stack",
        "event-player",
        "event-slot",
        "event-text",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "creeper_power",
      "name": "On Creeper Power",
      "description": [
        "Called when a creeper is struck by lighting and gets powered. Cancel the event to prevent the creeper from being powered."
      ],
      "examples": [
        "on creeper power:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] creeper power"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "damage",
      "name": "On Damage",
      "description": [
        "Called when an entity receives damage, e.g. by an attack from another entity, lava, fire, drowning, fall, suffocation, etc."
      ],
      "examples": [
        "on damage:",
        "on damage of a player:",
        "on damage of player by zombie:"
      ],
      "since": [
        "1.0, 2.7 (by entity)"
      ],
      "patterns": [
        "[on] damag(e|ing) [of %entitydata%] [by %entitydata%]"
      ],
      "event values": [
        "event-block",
        "event-damage cause",
        "event-projectile"
      ],
      "cancellable": true
    },
    {
      "id": "death",
      "name": "On Death",
      "description": [
        "Called when a living entity (including players) dies."
      ],
      "examples": [
        "on death:",
        "on death of player:",
        "on death of a wither or ender dragon:",
        "\tbroadcast \"A %entity% has been slain in %world%!\""
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] death [of %entitydatas%]"
      ],
      "event values": [
        "event-damage cause",
        "event-item stacks",
        "event-projectile"
      ],
      "cancellable": true
    },
    {
      "id": "dispense",
      "name": "On Dispense",
      "description": [
        "Called when a dispenser dispenses an item."
      ],
      "examples": [
        "on dispense of iron block:",
        "\tsend \"that'd be 19.99 please!\""
      ],
      "since": [
        "unknown (before 2.1)"
      ],
      "patterns": [
        "[on] dispens(e|ing) [[of] %itemtypes%]"
      ],
      "event values": [
        "event-block",
        "event-item stack",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "drop",
      "name": "On Drop",
      "description": [
        "Called when a player drops an item from their inventory, or an entity drops an item, such as a chicken laying an egg."
      ],
      "examples": [
        "on drop:",
        "\tif event-item is compass:",
        "\t\tcancel event",
        "",
        "on entity drop of an egg:",
        "\tif event-entity is a chicken:",
        "\t\tset item of event-dropped item to a diamond"
      ],
      "since": [
        "unknown (before 2.1), 2.7 (entity)"
      ],
      "patterns": [
        "[on] [player|entity] drop[ping] [[of] %itemtypes%]"
      ],
      "event values": [
        "event-command sender",
        "event-dropped item",
        "event-entity",
        "event-item stack",
        "event-location",
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "egg_throw",
      "name": "On Egg Throw",
      "description": [
        "Called when a player throws an egg and it lands. You can just use the shoot event in most cases. However, this event allows modification of properties like the hatched entity type and the number of entities to hatch."
      ],
      "examples": [
        "on throw of an egg:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] throw[ing] [of] [an] egg",
        "[on] [player] egg throw"
      ],
      "event values": [
        "event-player",
        "event-projectile",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "elytra_boost",
      "name": "On Elytra Boost",
      "description": [
        "Called when a player uses a firework to boost their fly speed when flying with an elytra."
      ],
      "examples": [
        "on elytra boost:",
        "\tif the used firework will be consumed:",
        "\t\tprevent the used firework from being consume"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] elytra boost"
      ],
      "event values": [
        "event-entity",
        "event-item stack",
        "event-item type",
        "event-player",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "enchant",
      "name": "On Enchant",
      "description": [
        "Called when a player successfully enchants an item.",
        " To get the enchanted item, see the enchant item expression"
      ],
      "examples": [
        "on enchant:",
        "\tif the clicked button is 1: # offer 1",
        "\t\tset the applied enchantments to sharpness 10 and unbreaking 10"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "[on] [item] enchant"
      ],
      "event values": [
        "event-block",
        "event-enchantment types",
        "event-item stack",
        "event-player"
      ],
      "cancellable": true
    },
    {
      "id": "enchant_prepare",
      "name": "On Enchant Prepare",
      "description": [
        "Called when a player puts an item into enchantment table. This event may be called multiple times.",
        " To get the enchant item, see the enchant item expression"
      ],
      "examples": [
        "on enchant prepare:",
        "\tset enchant offer 1 to sharpness 1",
        "\tset the cost of enchant offer 1 to 10 levels"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "[on] [item] enchant prepare"
      ],
      "event values": [
        "event-block",
        "event-item stack",
        "event-player"
      ],
      "cancellable": true
    },
    {
      "id": "enderman_enrage",
      "name": "On Enderman Enrage",
      "description": [
        "Called when an enderman gets mad because a player looked at them.",
        "Note: This does not stop enderman from targeting the player as a result of getting damaged."
      ],
      "examples": [
        "# Stops endermen from getting angry players with the permission \"safeFrom.enderman\"",
        "on enderman enrage:",
        "\tif player has permission \"safeFrom.enderman\":",
        "\t\tcancel event"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "[on] enderman (enrage|anger)"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-player",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "endermansheepsilverfishfalling_block",
      "name": "On Enderman/Sheep/Silverfish/Falling Block",
      "description": [
        "Called when an enderman places or picks up a block, a sheep eats grass, a silverfish boops into/out of a block or a falling block lands and turns into a block respectively.",
        "event-block represents the old block and event-blockdata represents the new replacement that'll be applied to the block."
      ],
      "examples": [
        "on sheep eat:",
        "\tkill event-entity",
        "\tbroadcast \"A sheep stole some grass!\"",
        "",
        "on falling block land:",
        "\tevent-entity is a falling dirt",
        "\tcancel event"
      ],
      "since": [
        "unknown, 2.5.2 (falling block), 2.8.0 (any entity support)"
      ],
      "patterns": [
        "[on] enderman place",
        "[on] enderman pickup",
        "[on] sheep eat",
        "[on] silverfish enter",
        "[on] silverfish exit",
        "[on] falling block fall[ing]",
        "[on] falling block land[ing]",
        "[on] (entity|%*-entitydatas%) chang(e|ing) block[s]"
      ],
      "event values": [
        "event-block",
        "event-block data",
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world",
        "future event-block data",
        "past event-block"
      ],
      "cancellable": true
    },
    {
      "id": "entity_breed",
      "name": "On Entity Breed",
      "description": [
        "Called whenever two animals begin to conceive a child. The type can be specified."
      ],
      "examples": [
        "on breeding of llamas:",
        "\tsend \"When a %breeding mother% and %breeding father% love each other very much they make %offspring%\" to breeder"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] [entity] breed[ing] [of %entitytypes%]"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-item stack",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "entity_dismount",
      "name": "On Entity Dismount",
      "description": [
        "Called when an entity dismounts."
      ],
      "examples": [
        "on dismount:",
        "\tkill event-entity"
      ],
      "since": [
        "2.2-dev13b"
      ],
      "patterns": [
        "[on] dismount[ing]"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "entity_jump",
      "name": "On Entity Jump",
      "description": [
        "Called when an entity jumps."
      ],
      "examples": [
        "on entity jump:",
        "\tif entity is a wither skeleton:",
        "\t\tcancel event"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[on] entity jump[ing]"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper 1.15.2+"
      ]
    },
    {
      "id": "entity_mount",
      "name": "On Entity Mount",
      "description": [
        "Called when entity starts riding another."
      ],
      "examples": [
        "on mount:",
        "\tcancel event"
      ],
      "since": [
        "2.2-dev13b"
      ],
      "patterns": [
        "[on] mount[ing]"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "entity_portal",
      "name": "On Entity Portal",
      "description": [
        "Called when an entity uses a nether or end portal. Cancel the event to prevent the entity from teleporting."
      ],
      "examples": [
        "on entity portal:",
        "\tbroadcast \"A %type of event-entity% has entered a portal!"
      ],
      "since": [
        "2.5.3"
      ],
      "patterns": [
        "[on] entity portal"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world",
        "past event-location"
      ],
      "cancellable": true
    },
    {
      "id": "entity_potion_effect",
      "name": "On Entity Potion Effect",
      "description": [
        "Called when an entity's potion effect is modified.",
        "This modification can include adding, removing or changing their potion effect."
      ],
      "examples": [
        "on entity potion effect modification:",
        "\t\tbroadcast \"A potion effect was added to %event-entity%!\" ",
        "",
        "on entity potion effect modification of night vision:"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] entity potion effect [modif[y|ication]] [[of] %potioneffecttypes%] [due to %entitypotioncause%]"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-entity potion cause",
        "event-location",
        "event-potion effect",
        "event-potion effect type",
        "event-world",
        "past event-potion effect"
      ],
      "cancellable": true
    },
    {
      "id": "entity_shoot_bow",
      "name": "On Entity Shoot Bow",
      "description": [
        "Called when an entity shoots a bow.\nevent-entity refers to the shot projectile/entity.\n"
      ],
      "examples": [
        "on player shoot bow:\n\tchance of 30%:\n\t\tdamage event-slot by 10\n\t\tsend \"Your bow has taken increased damage!\" to shooter\n\non stray shooting bow:\n\tset {_e} to event-entity\n\tspawn a cow at {_e}:\n\t\tset velocity of entity to velocity of {_e}\n\tset event-entity to last spawned entity\n"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "[on] %entitydatas% shoot[ing] (bow|projectile)"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-item stack",
        "event-item type",
        "event-location",
        "event-projectile",
        "event-slot",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "entity_transform",
      "name": "On Entity Transform",
      "description": [
        "Called when an entity is about to be replaced by another entity.",
        "Examples when it's called include; when a zombie gets cured and a villager spawns, an entity drowns in water like a zombie that turns to a drown, an entity that gets frozen in powder snow, a mooshroom that when sheared, spawns a new cow."
      ],
      "examples": [
        "on a zombie transforming due to curing:",
        "on mooshroom transforming:",
        "on zombie, skeleton or slime transform:"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "[on] (entit(y|ies)|%*-entitydatas%) transform[ing] [due to %transformreasons%]"
      ],
      "event values": [
        "event-command sender",
        "event-entities",
        "event-entity",
        "event-location",
        "event-transform reason",
        "event-world"
      ],
      "cancellable": true,
      "keywords": [
        "entity transform"
      ]
    },
    {
      "id": "experience_change",
      "name": "On Experience Change",
      "description": [
        "Called when a player's experience changes."
      ],
      "examples": [
        "on level progress change:",
        "\tset {_xp} to event-experience",
        "\tbroadcast \"%{_xp}%\""
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[on] [player] (level progress|[e]xp|experience) (change|update|increase|decrease)"
      ],
      "event values": [
        "event-experience point",
        "event-player",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "experience_cooldown_change",
      "name": "On Experience Cooldown Change",
      "description": [
        "Called when a player's experience cooldown changes.",
        "Experience cooldown is how long until a player can pick up another orb of experience."
      ],
      "examples": [
        "on player experience cooldown change:",
        "\tbroadcast event-player",
        "\tbroadcast event-timespan",
        "\tbroadcast past event-timespan",
        "\tbroadcast xp cooldown change reason"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] player (experience|[e]xp) cooldown change"
      ],
      "event values": [
        "event-experience cooldown change reason",
        "event-player",
        "event-time span",
        "event-world",
        "past event-time span"
      ],
      "cancellable": false
    },
    {
      "id": "experience_spawn",
      "name": "On Experience Spawn",
      "description": [
        "Called whenever experience is about to spawn.",
        "Please note that this event will not fire for xp orbs spawned by plugins (including Skript) with Bukkit."
      ],
      "examples": [
        "on xp spawn:",
        "\tworld is \"minigame_world\"",
        "\tcancel event"
      ],
      "since": [
        "2.0"
      ],
      "patterns": [
        "[on] [e]xp[erience] [orb] spawn",
        "[on] spawn of [a[n]] [e]xp[erience] [orb]"
      ],
      "event values": [
        "event-experience point",
        "event-location"
      ],
      "cancellable": true
    },
    {
      "id": "explode",
      "name": "On Explode",
      "description": [
        "Called when an entity (a primed TNT or a creeper) explodes."
      ],
      "examples": [
        "on explosion:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] explo(d(e|ing)|sion)"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "explosion_prime",
      "name": "On Explosion Prime",
      "description": [
        "Called when an explosive is primed, i.e. an entity will explode shortly. Creepers can abort the explosion if the player gets too far away, while TNT will explode for sure after a short time."
      ],
      "examples": [
        "on explosion prime:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] explosion prime"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "fade",
      "name": "On Fade",
      "description": [
        "Called when a block 'fades away', e.g. ice or snow melts."
      ],
      "examples": [
        "on fade of snow or ice:",
        "on fade of snow[layers=2]"
      ],
      "since": [
        "1.0, 2.6 (BlockData support)"
      ],
      "patterns": [
        "[on] [block] fad(e|ing) [[of] %itemtypes/blockdatas%]"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world",
        "future event-block",
        "past event-block"
      ],
      "cancellable": true
    },
    {
      "id": "firework_explode",
      "name": "On Firework Explode",
      "description": [
        "Called when a firework explodes."
      ],
      "examples": [
        "on firework explode:",
        "\tif event-colors contains red:",
        "on firework exploding colored red, light green and black:",
        "on firework explosion colored rgb 0, 255, 0:",
        "\tbroadcast \"A firework colored %colors% was exploded at %location%!\""
      ],
      "since": [
        "2.4"
      ],
      "patterns": [
        "[on] [a] firework explo(d(e|ing)|sion) [colo[u]red %colors%]"
      ],
      "event values": [
        "event-colors",
        "event-command sender",
        "event-entity",
        "event-firework effect",
        "event-location",
        "event-projectile",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "first_join",
      "name": "On First Join",
      "description": [
        "Called when a player joins the server for the first time."
      ],
      "examples": [
        "on first join:",
        "\tbroadcast \"Welcome %player% to the server!\""
      ],
      "since": [
        "1.3.7"
      ],
      "patterns": [
        "[on] first (join|login)"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "fishing",
      "name": "On Fishing",
      "description": [
        "Called when a player triggers a fishing event.",
        "An entity hooked event is triggered when an entity gets caught by a fishing rod.",
        "A fish escape event is called when the player fails to click on time, and the fish escapes.",
        "A fish approaching event is when the bobber is waiting to be hooked, and a fish is approaching.",
        "A fishing state change event is triggered whenever the fishing state changes."
      ],
      "examples": [
        "on fishing line cast:",
        "\tsend \"You caught a fish!\" to player",
        "on entity caught:",
        "\tpush event-entity vector from entity to player",
        "on fishing state change:",
        "\tif event-fishing state is fish caught:",
        "\t\tbroadcast \"A fish has been caught!\""
      ],
      "since": [
        "2.10, 2.11 (state change)"
      ],
      "patterns": [
        "[on] [fishing] (line|rod) cast",
        "[on] fish (caught|catch)",
        "[on] entity (hook[ed]|caught|catch)",
        "[on] (bobber|hook) (in|hit) ground",
        "[on] fish (escape|get away)",
        "[on] [fishing] (rod|line) reel in",
        "[on] fish bit(e|ing)",
        "[on] (fish approach[ing]|(bobber|hook) lure[d])",
        "[on] fishing state change[d]"
      ],
      "event values": [
        "event-entity",
        "event-fishing state",
        "event-player",
        "event-projectile",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper (bobber lured)"
      ]
    },
    {
      "id": "flight_toggle",
      "name": "On Flight Toggle",
      "description": [
        "Called when a players stops/starts flying."
      ],
      "examples": [
        "on flight toggle:",
        "\tif {game::%player%::playing} exists:",
        "\t\tcancel event"
      ],
      "since": [
        "2.2-dev36"
      ],
      "patterns": [
        "[on] [player] flight toggl(e|ing)",
        "[on] [player] toggl(e|ing) flight"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "flow",
      "name": "On Flow",
      "description": [
        "Called when a blocks flows or teleports to another block. This not only applies to water and lava, but teleporting dragon eggs as well."
      ],
      "examples": [
        "on block flow:",
        "\tif event-block is water:",
        "\t\tbroadcast \"Build more dams! It's starting to get wet in here\""
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [block] flow[ing]",
        "[on] block mov(e|ing)"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world",
        "future event-block"
      ],
      "cancellable": true
    },
    {
      "id": "form",
      "name": "On Form",
      "description": [
        "Called when a block is created, but not by a player, e.g. snow forms due to snowfall, water freezes in cold biomes. This isn't called when block spreads (mushroom growth, water physics etc.), as it has its own event (see spread event)."
      ],
      "examples": [
        "on form of snow:",
        "on form of a mushroom:"
      ],
      "since": [
        "1.0, 2.6 (BlockData support)"
      ],
      "patterns": [
        "[on] [block] form[ing] [[of] %itemtypes/blockdatas%]"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world",
        "past event-block"
      ],
      "cancellable": true
    },
    {
      "id": "fuel_burn",
      "name": "On Fuel Burn",
      "description": [
        "Called when a furnace burns an item from its fuel slot."
      ],
      "examples": [
        "on fuel burning:",
        "\tbroadcast fuel burned",
        "\tif burned fuel is coal:",
        "\t\tadd 20 seconds to burn time"
      ],
      "since": [
        "1.0, 2.10 (specific item)"
      ],
      "patterns": [
        "[on] [furnace] fuel burn[ing] [of %itemtypes%]"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "furnace_item_extract",
      "name": "On Furnace Item Extract",
      "description": [
        "Called when a player takes any item out of the furnace."
      ],
      "examples": [
        "on furnace extract:",
        "\tif event-items is an iron ingot:",
        "\t\tremove event-items from event-player's inventory"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] furnace [item] extract[ion] [of %itemtypes%]"
      ],
      "event values": [
        "event-block",
        "event-item stacks",
        "event-location",
        "event-player",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "gamemode_change",
      "name": "On Gamemode Change",
      "description": [
        "Called when a player's gamemode changes."
      ],
      "examples": [
        "on gamemode change:",
        "on gamemode change to adventure:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] game[ ]mode change [to %gamemode%]"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "gliding_state_change",
      "name": "On Gliding State Change",
      "description": [
        "Called when an entity toggles glider on or off, or when server toggles gliding state of an entity forcibly."
      ],
      "examples": [
        "on toggling gliding:",
        "\tcancel the event # bad idea, but you CAN do it!"
      ],
      "since": [
        "2.2-dev21"
      ],
      "patterns": [
        "[on] (gliding state change|toggl(e|ing) gliding)"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "grow",
      "name": "On Grow",
      "description": [
        "Called when a tree, giant mushroom or plant grows to next stage.",
        "\"of\" matches any grow event, \"from\" matches only the old state, \"into\" matches only the new state,and \"from into\" requires matching both the old and new states.",
        "Using \"and\" lists in this event is equivalent to using \"or\" lists. The event will trigger if any one of the elements is what grew."
      ],
      "examples": [
        "on grow:",
        "on grow of tree:",
        "on grow of wheat[age=7]:",
        "on grow from a sapling:",
        "on grow into tree:",
        "on grow from a sapling into tree:",
        "on grow of wheat, carrots, or potatoes:",
        "on grow into tree, giant mushroom, cactus:",
        "on grow from wheat[age=0] to wheat[age=1] or wheat[age=2]:"
      ],
      "since": [
        "1.0, 2.2-dev20 (plants), 2.8.0 (from, into, blockdata)"
      ],
      "patterns": [
        "[on] grow[th] [of (%structuretypes%|%itemtypes/blockdatas%)]",
        "[on] grow[th] from %itemtypes/blockdatas%",
        "[on] grow[th] [in]to (%structuretypes%|%itemtypes/blockdatas%)",
        "[on] grow[th] from %itemtypes/blockdatas% [in]to (%structuretypes%|%itemtypes/blockdatas%)"
      ],
      "event values": [
        "event-block",
        "event-blocks",
        "event-location",
        "event-world",
        "future event-block",
        "future event-blocks",
        "past event-block"
      ],
      "cancellable": true
    },
    {
      "id": "hand_item_swap",
      "name": "On Hand Item Swap",
      "description": [
        "Called whenever a player swaps the items in their main- and offhand slots.",
        "Works also when one or both of the slots are empty.",
        "The event is called before the items are actually swapped,",
        "so when you use the player's tool or player's offtool expressions,",
        "they will return the values before the swap -",
        "this enables you to cancel the event before anything happens."
      ],
      "examples": [
        "on swap hand items:",
        "\tevent-player's tool is a diamond sword",
        "\tcancel event"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "[on] swap[ping of] [(hand|held)] item[s]"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "heal",
      "name": "On Heal",
      "description": [
        "Called when an entity is healed, e.g. by eating (players), being fed (pets), or by the effect of a potion of healing (overworld mobs) or harm (nether mobs)."
      ],
      "examples": [
        "on heal:",
        "on player healing from a regeneration potion:",
        "on healing of a zombie, cow or a wither:",
        "\theal reason is healing potion",
        "\tcancel event"
      ],
      "since": [
        "1.0, 2.9.0 (by reason)"
      ],
      "patterns": [
        "[on] heal[ing] [of %entitydatas%] [(from|due to|by) %healreasons%]",
        "[on] %entitydatas% heal[ing] [(from|due to|by) %healreasons%]"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-heal reason",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "horse_jump",
      "name": "On Horse Jump",
      "description": [
        "Called when a horse jumps."
      ],
      "examples": [
        "on horse jump:",
        "\tpush event-entity upwards at speed 2"
      ],
      "since": [
        "2.5.1"
      ],
      "patterns": [
        "[on] horse jump"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "hunger_meter_change",
      "name": "On Hunger Meter Change",
      "description": [
        "Called when the hunger bar of a player changes, i.e. either increases by eating or decreases over time."
      ],
      "examples": [
        "on food bar change:"
      ],
      "since": [
        "1.4.4"
      ],
      "patterns": [
        "[on] (food|hunger) (level|met(er|re)|bar) chang(e|ing)"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "ignition",
      "name": "On Ignition",
      "description": [
        "Called when a block starts burning, i.e. a fire block is placed next to it and this block is flammable.",
        "The burn event will be called when the block is about do be destroyed by the fire."
      ],
      "examples": [
        "on block ignite:",
        "\tif event-block is a ladder:",
        "\t\tcancel event"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [block] ignit(e|ion)"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "inventory_click",
      "name": "On Inventory Click",
      "description": [
        "Called when clicking on inventory slot."
      ],
      "examples": [
        "on inventory click:",
        "\tif event-item is stone:",
        "\t\tgive player 1 stone",
        "\t\tremove 20$ from player's balance"
      ],
      "since": [
        "2.2-Fixes-V10"
      ],
      "patterns": [
        "[on] [player] inventory(-| )click[ing] [[at] %itemtypes%]"
      ],
      "event values": [
        "event-click type",
        "event-inventory",
        "event-inventory action",
        "event-item stack",
        "event-player",
        "event-slot",
        "event-text",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "inventory_close",
      "name": "On Inventory Close",
      "description": [
        "Called when player's currently viewed inventory is closed."
      ],
      "examples": [
        "on inventory close:",
        "\tif player's location is {location}:",
        "\t\tsend \"You exited the shop!\""
      ],
      "since": [
        "2.2-dev21"
      ],
      "patterns": [
        "[on] inventory clos(ing|e[d])"
      ],
      "event values": [
        "event-inventory",
        "event-inventory close reason",
        "event-player"
      ],
      "cancellable": false
    },
    {
      "id": "inventory_drag",
      "name": "On Inventory Drag",
      "description": [
        "Called when a player drags an item in their cursor across the inventory."
      ],
      "examples": [
        "on inventory drag:",
        "\tif player's current inventory is {_gui}:",
        "\t\tsend \"You can't drag your items here!\" to player",
        "\t\tcancel event"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[on] inventory drag[ging]"
      ],
      "event values": [
        "event-click type",
        "event-inventories",
        "event-item stack",
        "event-item stacks",
        "event-player",
        "event-slots",
        "event-world",
        "past event-item stack"
      ],
      "cancellable": true
    },
    {
      "id": "inventory_item_move",
      "name": "On Inventory Item Move",
      "description": [
        "Called when an entity or block (e.g. hopper) tries to move items directly from one inventory to another.",
        "When this event is called, the initiator may have already removed the item from the source inventory and is ready to move it into the destination inventory.",
        "If this event is cancelled, the items will be returned to the source inventory."
      ],
      "examples": [
        "on inventory item move:",
        "\tbroadcast \"%holder of past event-inventory% is transporting %event-item% to %holder of event-inventory%!\""
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "[on] inventory item (move|transport)",
        "[on] inventory (mov(e|ing)|transport[ing]) [an] item"
      ],
      "event values": [
        "event-block",
        "event-inventory",
        "event-item stack",
        "future event-block",
        "future event-inventory"
      ],
      "cancellable": true
    },
    {
      "id": "inventory_open",
      "name": "On Inventory Open",
      "description": [
        "Called when an inventory is opened for player."
      ],
      "examples": [
        "on inventory open:",
        "\tclose player's inventory"
      ],
      "since": [
        "2.2-dev21"
      ],
      "patterns": [
        "[on] inventory open[ed]"
      ],
      "event values": [
        "event-inventory",
        "event-player"
      ],
      "cancellable": true
    },
    {
      "id": "inventory_pickup",
      "name": "On Inventory Pickup",
      "description": [
        "Called when an inventory (a hopper, a hopper minecart, etc.) picks up an item"
      ],
      "examples": [
        "on inventory pickup:"
      ],
      "since": [
        "2.5.1"
      ],
      "patterns": [
        "[on] inventory pick[ ]up"
      ],
      "event values": [
        "event-dropped item",
        "event-inventory",
        "event-item stack"
      ],
      "cancellable": true
    },
    {
      "id": "inventory_slot_change",
      "name": "On Inventory Slot Change",
      "description": [
        "Called when a slot in a player's inventory is changed.",
        "Warning: setting the event-slot to a new item can result in an infinite loop."
      ],
      "examples": [
        "on inventory slot change:",
        "\tif event-item is a diamond:",
        "\t\tsend \"You obtained a diamond!\" to player"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[on] [player] inventory slot chang(e|ing)"
      ],
      "event values": [
        "event-item stack",
        "event-player",
        "event-slot",
        "event-world",
        "past event-item stack"
      ],
      "cancellable": false,
      "required plugins": [
        "Paper 1.19.2+"
      ]
    },
    {
      "id": "item_break",
      "name": "On Item Break",
      "description": [
        "Called when a player breaks their tool because its damage reached the maximum value.",
        "This event cannot be cancelled."
      ],
      "examples": [
        "on tool break:"
      ],
      "since": [
        "2.1.1"
      ],
      "patterns": [
        "[on] [player] tool break[ing]",
        "[on] [player] break[ing] (a|the|) tool"
      ],
      "event values": [
        "event-item stack",
        "event-player",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "item_damage",
      "name": "On Item Damage",
      "description": [
        "Called when an item is damaged. Most tools are damaged by using them; armor is damaged when the wearer takes damage."
      ],
      "examples": [
        "on item damage:",
        "\tcancel event"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "[on] item damag(e|ing)"
      ],
      "event values": [
        "event-item stack",
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "item_despawn",
      "name": "On Item Despawn",
      "description": [
        "Called when an item is about to be despawned from the world, usually 5 minutes after it was dropped."
      ],
      "examples": [
        "on item despawn of diamond:",
        "\tsend \"Not my precious!\"",
        "\tcancel event"
      ],
      "since": [
        "2.2-dev35"
      ],
      "patterns": [
        "[on] (item[ ][stack]|[item] %itemtypes%) despawn[ing]",
        "[on] [item[ ][stack]] despawn[ing] [[of] %itemtypes%]"
      ],
      "event values": [
        "event-command sender",
        "event-dropped item",
        "event-entity",
        "event-item stack",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "item_mend",
      "name": "On Item Mend",
      "description": [
        "Called when a player has an item repaired via the Mending enchantment."
      ],
      "examples": [
        "on item mend:",
        "\tchance of 50%:",
        "\t\tcancel the event",
        "\t\tsend \"Oops! Mending failed!\" to player"
      ],
      "since": [
        "2.5.1"
      ],
      "patterns": [
        "[on] item mend[ing]"
      ],
      "event values": [
        "event-entity",
        "event-item stack",
        "event-player",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Minecraft 1.13 or newer"
      ]
    },
    {
      "id": "item_merge",
      "name": "On Item Merge",
      "description": [
        "Called when dropped items merge into a single stack. event-entity will be the entity which is trying to merge, and future event-entity will be the entity which is being merged into."
      ],
      "examples": [
        "on item merge of gold blocks:",
        "\tcancel event"
      ],
      "since": [
        "2.2-dev35"
      ],
      "patterns": [
        "[on] (item[ ][stack]|[item] %itemtypes%) merg(e|ing)",
        "[on] item[ ][stack] merg(e|ing) [[of] %itemtypes%]"
      ],
      "event values": [
        "event-command sender",
        "event-dropped item",
        "event-entity",
        "event-item stack",
        "event-location",
        "event-world",
        "future event-dropped item"
      ],
      "cancellable": true
    },
    {
      "id": "item_spawn",
      "name": "On Item Spawn",
      "description": [
        "Called whenever an item stack is spawned in a world, e.g. as drop of a block or mob, a player throwing items out of their inventory, or a dispenser dispensing an item (not shooting it)."
      ],
      "examples": [
        "on item spawn of iron sword:",
        "\tbroadcast \"Someone dropped an iron sword!\""
      ],
      "since": [
        "unknown (before 2.1)"
      ],
      "patterns": [
        "[on] item spawn[ing] [[of] %itemtypes%]"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-item stack",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "join",
      "name": "On Join",
      "description": [
        "Called when the player joins the server. The player is already in a world when this event is called, so if you want to prevent players from joining you should prefer on connect over this event."
      ],
      "examples": [
        "on join:",
        "\tmessage \"Welcome on our awesome server!\"",
        "\tbroadcast \"%player% just joined the server!\""
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [player] (login|logging in|join[ing])"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "jump",
      "name": "On Jump",
      "description": [
        "Called whenever a player jumps.",
        "This event requires PaperSpigot."
      ],
      "examples": [
        "on jump:",
        "\tevent-player does not have permission \"jump\"",
        "\tcancel event"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "[on] [player] jump[ing]"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "kick",
      "name": "On Kick",
      "description": [
        "Called when a player is kicked from the server. You can change the kick message or cancel the event entirely."
      ],
      "examples": [
        "on kick:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [player] (kick|being kicked)"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "language_change",
      "name": "On Language Change",
      "description": [
        "Called after a player changed their language in the game settings. You can use the language expression to get the current language of the player.",
        "This event requires Minecraft 1.12+."
      ],
      "examples": [
        "on language change:",
        "\tif player's language starts with \"en\":",
        "\t\tsend \"Hello!\""
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "[on] [player] (language|locale) chang(e|ing)",
        "[on] [player] chang(e|ing) (language|locale)"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "leash_unleash",
      "name": "On Leash / Unleash",
      "description": [
        "Called when an entity is leashed or unleashed. Cancelling these events will prevent the leashing or unleashing from occurring."
      ],
      "examples": [
        "on player leash of a sheep:",
        "\tsend \"Baaaaa--\" to player",
        "",
        "on player leash:",
        "\tsend \"<%event-entity%> Let me go!\" to player",
        "",
        "on unleash:",
        "\tbroadcast \"<%event-entity%> I'm free\"",
        "",
        "on player unleash:",
        "\tsend \"<%event-entity%> Thanks for freeing me!\" to player"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] [player] [un]leash[ing] [of %entitydatas%]"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-player",
        "event-text",
        "event-unleash reason",
        "event-world",
        "future event-entity"
      ],
      "cancellable": true
    },
    {
      "id": "leaves_decay",
      "name": "On Leaves Decay",
      "description": [
        "Called when a leaf block decays due to not being connected to a tree."
      ],
      "examples": [
        "on leaves decay:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] leaves decay[ing]"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "level_change",
      "name": "On Level Change",
      "description": [
        "Called when a player's level changes, e.g. by gathering experience or by enchanting something."
      ],
      "examples": [
        "on level change:"
      ],
      "since": [
        "1.0, 2.4 (level up/down)"
      ],
      "patterns": [
        "[on] [player] level (change|up|down)"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "lightning_strike",
      "name": "On Lightning Strike",
      "description": [
        "Called when lightning strikes."
      ],
      "examples": [
        "on lightning:",
        "\tspawn a zombie at location of event-entity"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] lightning [strike]"
      ],
      "event values": [
        "event-entity",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "loot_generate",
      "name": "On Loot Generate",
      "description": [
        "Called when a loot table of an inventory is generated in the world.",
        "For example, when opening a shipwreck chest."
      ],
      "examples": [
        "on loot generate:",
        "\tchance of 10%",
        "\tadd 64 diamonds to the loot",
        "\tsend \"You hit the jackpot at %event-location%!\""
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[on] loot generat(e|ing)"
      ],
      "event values": [
        "event-entity",
        "event-location",
        "event-loot context",
        "event-loot table",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "MC 1.16+"
      ]
    },
    {
      "id": "love_mode_enter",
      "name": "On Love Mode Enter",
      "description": [
        "Called whenever an entity enters a state of being in love."
      ],
      "examples": [
        "on love mode enter:",
        "\tcancel event # No one is allowed love here"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] [entity] enter[s] love mode",
        "[on] [entity] love mode [enter]"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-living entity",
        "event-living entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "move_rotate",
      "name": "On Move / Rotate",
      "description": [
        "Called when a player or entity moves or rotates their head.",
        "NOTE: Move event will only be called when the entity/player moves position, keyword 'turn around' is for orientation (ie: looking around), and the combined syntax listens for both.",
        "NOTE: These events can be performance heavy as they are called quite often."
      ],
      "examples": [
        "on player move:",
        "\tif player does not have permission \"player.can.move\":",
        "\t\tcancel event",
        "on skeleton move:",
        "\tif event-entity is not in world \"world\":",
        "\t\tkill event-entity",
        "on player turning around:",
        "\tsend action bar \"You are currently turning your head around!\" to player"
      ],
      "since": [
        "2.6, 2.8.0 (turn around)"
      ],
      "patterns": [
        "[on] %entitydata% (move|walk|step|(turn[ing] around|rotate))",
        "[on] %entitydata% (move|walk|step) or (turn[ing] around|rotate)",
        "[on] %entitydata% (turn[ing] around|rotate) or (move|walk|step)"
      ],
      "event values": [
        "event-block",
        "event-chunk",
        "event-command sender",
        "event-entity",
        "event-location",
        "event-player",
        "event-teleport cause",
        "event-world",
        "future event-location",
        "past event-chunk",
        "past event-location"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper 1.16.5+ (entity move)"
      ]
    },
    {
      "id": "move_on",
      "name": "On Move On",
      "description": [
        "Called when a player moves onto a certain type of block.",
        "Please note that using this event can cause lag if there are many players online."
      ],
      "examples": [
        "on walking on dirt or grass:",
        "on stepping on stone:"
      ],
      "since": [
        "2.0"
      ],
      "patterns": [
        "[on] (step|walk)[ing] (on|over) %*itemtypes%"
      ],
      "event values": [
        "event-block",
        "event-chunk",
        "event-location",
        "event-player",
        "event-teleport cause",
        "event-world",
        "past event-chunk",
        "past event-location"
      ],
      "cancellable": true
    },
    {
      "id": "physics",
      "name": "On Physics",
      "description": [
        "Called when a physics check is done on a block. By cancelling this event you can prevent some things from happening, e.g. sand falling, dirt turning into grass, torches dropping if their supporting block is destroyed, etc.Please note that using this event might cause quite some lag since it gets called extremely often."
      ],
      "examples": [
        "# prevents sand from falling",
        "on block physics:",
        "\tblock is sand",
        "\tcancel event"
      ],
      "since": [
        "1.4.6"
      ],
      "patterns": [
        "[on] [block] physics"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "pick_up",
      "name": "On Pick Up",
      "description": [
        "Called when a player/entity picks up an item. Please note that the item is still on the ground when this event is called."
      ],
      "examples": [
        "on pick up:",
        "on entity pickup of wheat:"
      ],
      "since": [
        "unknown (before 2.1), 2.5 (entity)"
      ],
      "patterns": [
        "[on] [(player|entity)] (pick[ ]up|picking up) [[of] %itemtypes%]"
      ],
      "event values": [
        "event-command sender",
        "event-dropped item",
        "event-entity",
        "event-item stack",
        "event-item type",
        "event-location",
        "event-player",
        "event-projectile",
        "event-world"
      ],
      "cancellable": true,
      "keywords": [
        "pickup"
      ]
    },
    {
      "id": "pig_zap",
      "name": "On Pig Zap",
      "description": [
        "Called when a pig is stroke by lightning and transformed into a zombie pigman. Cancel the event to prevent the transformation."
      ],
      "examples": [
        "on pig zap:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] pig[ ]zap"
      ],
      "event values": [
        "event-command sender",
        "event-entities",
        "event-entity",
        "event-location",
        "event-transform reason",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "piglin_barter",
      "name": "On Piglin Barter",
      "description": [
        "Called when a piglin finishes bartering. A piglin may start bartering after picking up an item on its bartering list.",
        "Cancelling will prevent piglins from dropping items, but will still make them pick up the input."
      ],
      "examples": [
        "on piglin barter:",
        "\tif barter drops contain diamond:",
        "\t\tsend \"Diamonds belong in the money pit!\" to player",
        "\t\tcancel event"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] piglin (barter[ing]|trad(e|ing))"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Minecraft 1.16+"
      ]
    },
    {
      "id": "piston_extend",
      "name": "On Piston Extend",
      "description": [
        "Called when a piston is about to extend."
      ],
      "examples": [
        "on piston extend:",
        "\tbroadcast \"A piston is extending!\""
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] piston extend[ing]"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "piston_retract",
      "name": "On Piston Retract",
      "description": [
        "Called when a piston is about to retract."
      ],
      "examples": [
        "on piston retract:",
        "\tbroadcast \"A piston is retracting!\""
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] piston retract[ing]"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "place",
      "name": "On Place",
      "description": [
        "Called when a player places a block."
      ],
      "examples": [
        "on place:",
        "on place of a furnace, workbench or chest:",
        "on break of chest[type=right] or chest[type=left]"
      ],
      "since": [
        "1.0, 2.6 (BlockData support)"
      ],
      "patterns": [
        "[on] [block] (plac(e|ing)|build[ing]) [[of] %itemtypes/blockdatas%]"
      ],
      "event values": [
        "event-block",
        "event-blockface",
        "event-direction",
        "event-entity",
        "event-item stack",
        "event-location",
        "event-player",
        "event-world",
        "future event-item stack",
        "past event-block",
        "past event-item stack"
      ],
      "cancellable": true
    },
    {
      "id": "player_chunk_enter",
      "name": "On Player Chunk Enter",
      "description": [
        "Called when a player enters a chunk. Note that this event is based on 'player move' event, and may be called frequent internally."
      ],
      "examples": [
        "on player enters a chunk:",
        "\tsend \"You entered a chunk: %past event-chunk% -> %event-chunk%!\" to player"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[on] [player] (enter[s] [a] chunk|chunk enter[ing])"
      ],
      "event values": [
        "event-block",
        "event-chunk",
        "event-location",
        "event-player",
        "event-teleport cause",
        "event-world",
        "past event-chunk",
        "past event-location"
      ],
      "cancellable": true
    },
    {
      "id": "player_deep_sleep",
      "name": "On Player Deep Sleep",
      "description": [
        "Called when a player has slept long enough to count as passing the night/storm.",
        "Cancelling this event will prevent the player from being counted as deeply sleeping unless they exit and re-enter the bed."
      ],
      "examples": [
        "on player deep sleeping:",
        "\tsend \"Zzzz..\" to player"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[on] [player] deep sleep[ing]"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper 1.16+"
      ]
    },
    {
      "id": "player_input",
      "name": "On Player Input",
      "description": [
        "Called when a player sends an updated input to the server.",
        "Note: The input keys event value is the set of keys the player is currently pressing, not the keys that were pressed or released."
      ],
      "examples": [
        "on any input key press:",
        "\tsend \"You are pressing: %event-inputkeys%\" to player"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] [player] (toggle|toggling|press[ing]|release|releasing) of (%inputkeys%|(an|any) input key)",
        "[on] ([player] %inputkeys%|[an|any [player]] input key) (toggle|toggling|press[ing]|release|releasing)"
      ],
      "event values": [
        "event-input keys",
        "event-player",
        "event-world",
        "past event-input keys"
      ],
      "cancellable": false,
      "required plugins": [
        "Minecraft 1.21.3+"
      ]
    },
    {
      "id": "player_pickup_arrow",
      "name": "On Player Pickup Arrow",
      "description": [
        "Called when a player picks up an arrow from the ground."
      ],
      "examples": [
        "on arrow pickup:",
        "\tcancel the event",
        "\tteleport event-projectile to block 5 above event-projectile"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "[on] [player] (pick[ing| ]up [an] arrow|arrow pick[ing| ]up)"
      ],
      "event values": [
        "event-dropped item",
        "event-entity",
        "event-item stack",
        "event-player",
        "event-projectile",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Minecraft 1.14+ (event-projectile)"
      ]
    },
    {
      "id": "player_trade",
      "name": "On Player Trade",
      "description": [
        "Called when a player has traded with a villager."
      ],
      "examples": [
        "on player trade:",
        "\tchance of 50%:",
        "\t\tcancel event",
        "\t\tsend \"The trade was somehow denied!\" to player"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[on] player trad(e|ing)"
      ],
      "event values": [
        "event-entity",
        "event-living entity",
        "event-merchant recipe",
        "event-player",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper 1.16.5+"
      ]
    },
    {
      "id": "player_world_change",
      "name": "On Player World Change",
      "description": [
        "Called when a player enters a world. Does not work with other entities!"
      ],
      "examples": [
        "on player world change:",
        "\tworld is \"city\"",
        "\tsend \"Welcome to the City!\""
      ],
      "since": [
        "2.2-dev28"
      ],
      "patterns": [
        "[on] [player] world chang(ing|e[d])"
      ],
      "event values": [
        "event-player",
        "event-world",
        "past event-world"
      ],
      "cancellable": false
    },
    {
      "id": "portal",
      "name": "On Portal",
      "description": [
        "Called when a player uses a nether or end portal. Cancel the event to prevent the player from teleporting."
      ],
      "examples": [
        "on player portal:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [player] portal"
      ],
      "event values": [
        "event-block",
        "event-chunk",
        "event-location",
        "event-player",
        "event-teleport cause",
        "event-world",
        "past event-chunk",
        "past event-location"
      ],
      "cancellable": true
    },
    {
      "id": "portal_create",
      "name": "On Portal Create",
      "description": [
        "Called when a portal is created, either by a player or mob lighting an obsidian frame on fire, or by a nether portal creating its teleportation target in the nether/overworld.",
        "In Minecraft 1.14+, you can use the player in this event.",
        "Please note that there may not always be a player (or other entity) in this event."
      ],
      "examples": [
        "on portal create:"
      ],
      "since": [
        "1.0, 2.5.3 (event-entity support)"
      ],
      "patterns": [
        "[on] portal creat(e|ion)"
      ],
      "event values": [
        "event-blocks",
        "event-entity",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Minecraft 1.14+ (event-entity support)"
      ]
    },
    {
      "id": "portal_enter",
      "name": "On Portal Enter",
      "description": [
        "Called when an entity enters a nether portal or an end portal. Please note that this event will be fired many times for a nether portal."
      ],
      "examples": [
        "on portal enter:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] portal enter[ing]",
        "[on] entering [a] portal"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "prepare_craft",
      "name": "On Prepare Craft",
      "description": [
        "Called just before displaying crafting result to player. Note that setting the result item might or might not work due to Bukkit bugs."
      ],
      "examples": [
        "on preparing craft of torch:"
      ],
      "since": [
        "2.2-Fixes-V10"
      ],
      "patterns": [
        "[on] [player] (preparing|beginning) craft[ing] [[of] %itemtypes%]"
      ],
      "event values": [
        "event-inventory",
        "event-item stack",
        "event-player",
        "event-slot",
        "event-text"
      ],
      "cancellable": false
    },
    {
      "id": "pressure_plate_trip",
      "name": "On Pressure Plate / Trip",
      "description": [
        "Called when a player steps on a pressure plate or tripwire respectively."
      ],
      "examples": [
        "on step on pressure plate:"
      ],
      "since": [
        "1.0 (pressure plate), 1.4.4 (tripwire)"
      ],
      "patterns": [
        "[on] [step[ping] on] [a] [pressure] plate",
        "[on] (trip|[step[ping] on] [a] tripwire)"
      ],
      "event values": [
        "event-block",
        "event-block action",
        "event-blockface",
        "event-direction",
        "event-equipment slot",
        "event-item stack",
        "event-player",
        "event-vector",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "projectile_collide",
      "name": "On Projectile Collide",
      "description": [
        "Called when a projectile collides with an entity."
      ],
      "examples": [
        "on projectile collide:",
        "\tteleport shooter of event-projectile to event-entity"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "[on] projectile collide"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-projectile",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "projectile_hit",
      "name": "On Projectile Hit",
      "description": [
        "Called when a projectile hits an entity or a block."
      ],
      "examples": [
        "on projectile hit:",
        "\tif victim's health <= 3:",
        "\t\tdelete event-projectile"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] projectile hit"
      ],
      "event values": [
        "event-block",
        "event-projectile"
      ],
      "cancellable": true
    },
    {
      "id": "quit",
      "name": "On Quit",
      "description": [
        "Called when a player leaves the server."
      ],
      "examples": [
        "on quit:",
        "on disconnect:"
      ],
      "since": [
        "1.0 (simple disconnection)"
      ],
      "patterns": [
        "[on] (quit[ting]|disconnect[ing]|log[ ]out|logging out|leav(e|ing))"
      ],
      "event values": [
        "event-player",
        "event-quit reason",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "ready_arrow",
      "name": "On Ready Arrow",
      "description": [
        "Called when a player is firing a bow and the server is choosing an arrow to use.",
        "Cancelling this event will skip the current arrow item and fire a new event for the next arrow item.",
        "The arrow and bow in the event can be accessed with the Readied Arrow/Bow expression."
      ],
      "examples": [
        "on player ready arrow:",
        "\tselected bow's name is \"Spectral Bow\"",
        "\tif selected arrow is not a spectral arrow:",
        "\t\tcancel event"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "[on] [player] ((ready|choose|draw|load) arrow|arrow (choose|draw|load))"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "redstone",
      "name": "On Redstone",
      "description": [
        "Called when the redstone current of a block changes. This event is of not much use yet."
      ],
      "examples": [
        "on redstone change:",
        "\tsend \"someone is using redstone\" to console"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] redstone [current] [chang(e|ing)]"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "resource_pack_request_response",
      "name": "On Resource Pack Request Response",
      "description": [
        "Called when a player takes action on a resource pack request sent via the ",
        "send resource pack effect. ",
        "The resource pack condition can be used ",
        "to check the resource pack state.",
        "",
        "This event will be triggered once when the player accepts or declines the resource pack request, ",
        "and once when the resource pack is successfully installed or failed to download."
      ],
      "examples": [
        "on resource pack request response:",
        "\tif the resource pack was declined or failed to download:",
        "",
        "on resource pack deny:",
        "\tkick the player due to \"You have to install the resource pack to play in this server!\""
      ],
      "since": [
        "2.4"
      ],
      "patterns": [
        "[on] resource pack [request] response",
        "[on] resource pack [request] %resourcepackstates%"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "respawn",
      "name": "On Respawn",
      "description": [
        "Called when a player respawns. You should prefer this event over the death event as the player is technically alive when this event is called."
      ],
      "examples": [
        "on respawn:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [player] respawn[ing]"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "resurrect_attempt",
      "name": "On Resurrect Attempt",
      "description": [
        "Called when an entity dies, always. If they are not holding a totem, this is cancelled - you can, however, uncancel it."
      ],
      "examples": [
        "on resurrect attempt:",
        "\tentity is player",
        "\tentity has permission \"admin.undying\"",
        "\tuncancel the event"
      ],
      "since": [
        "2.2-dev28"
      ],
      "patterns": [
        "[on] [entity] resurrect[ion] [attempt]"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-slot",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "riptide",
      "name": "On Riptide",
      "description": [
        "Called when the player activates the riptide enchantment, using their trident to propel them through the air.",
        "Note: the riptide action is performed client side, so manipulating the player in this event may have undesired effects."
      ],
      "examples": [
        "on riptide:",
        "\tsend \"You are riptiding!\""
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "[on] [use of] riptide [enchant[ment]]"
      ],
      "event values": [
        "event-item stack",
        "event-player",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "script_loadunload",
      "name": "On Script Load/Unload",
      "description": [
        "Called directly after the trigger is loaded, or directly before the whole script is unloaded.",
        "The keyword 'async' indicates the trigger can be ran asynchronously, "
      ],
      "examples": [
        "on load:",
        "\tset {running::%script%} to true",
        "on unload:",
        "\tset {running::%script%} to false"
      ],
      "since": [
        "2.0"
      ],
      "patterns": [
        "[on] [async] [script] (load|init|enable)",
        "[on] [async] [script] (unload|stop|disable)"
      ],
      "event values": [
        "event-command sender"
      ],
      "cancellable": false
    },
    {
      "id": "send_command_list",
      "name": "On Send Command List",
      "description": [
        "Called when the server sends a list of commands to the player. This usually happens on join. The sent commands can be modified via the sent commands expression.",
        "Modifications will affect what commands show up for the player to tab complete. They will not affect what commands the player can actually run.",
        "Adding new commands to the list is illegal behavior and will be ignored."
      ],
      "examples": [
        "on send command list:",
        "\tset command list to command list where [input does not contain \":\"]",
        "\tremove \"help\" from command list"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "[on] send[ing] [of [the]] [server] command[s] list",
        "[on] [server] command list send"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "server_list_ping",
      "name": "On Server List Ping",
      "description": [
        "Called when a server list ping is coming in, generally when a Minecraft client pings the server to show its information in the server list.",
        "The IP expression can be used to get the IP adress of the pinger.",
        "This event can be cancelled on PaperSpigot 1.12.2+ only and this means the player will see the server as offline (but still can join).",
        "",
        "Also you can use MOTD, Max Players, Online Players Count, Protocol Version, Version String, Hover List and Server Icon expressions, and Player Info Visibility and Hide Player from Server List effects to modify the server list."
      ],
      "examples": [
        "on server list ping:",
        "\tset the motd to \"Welcome %{player-by-IP::%ip%}%! Join now!\" if {player-by-IP::%ip%} is set, else \"Join now!\"",
        "\tset the fake max players count to (online players count + 1)",
        "\tset the shown icon to a random server icon out of {server-icons::*}"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "[on] server [list] ping"
      ],
      "cancellable": true
    },
    {
      "id": "server_startstop",
      "name": "On Server Start/Stop",
      "description": [
        "Called when the server starts or stops (actually, when Skript starts or stops, so a /reload will trigger these events as well)."
      ],
      "examples": [
        "on skript start:",
        "on server stop:"
      ],
      "since": [
        "2.0"
      ],
      "patterns": [
        "[on] (server|skript) (start|load|enable)",
        "[on] (server|skript) (stop|unload|disable)"
      ],
      "event values": [
        "event-command sender"
      ],
      "cancellable": false
    },
    {
      "id": "sheep_regrow_wool",
      "name": "On Sheep Regrow Wool",
      "description": [
        "Called when sheep regrows its sheared wool back."
      ],
      "examples": [
        "on sheep grow wool:",
        "\tcancel event"
      ],
      "since": [
        "2.2-dev21"
      ],
      "patterns": [
        "[on] sheep [re]grow[ing] wool"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "shoot",
      "name": "On Shoot",
      "description": [
        "Called whenever a projectile is shot. Use the shooter expression to get who shot the projectile."
      ],
      "examples": [
        "on shoot:",
        "\tif projectile is an arrow:",
        "\t\tsend \"you shot an arrow!\" to shooter"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [projectile] shoot"
      ],
      "event values": [
        "event-projectile"
      ],
      "cancellable": true
    },
    {
      "id": "sign_change",
      "name": "On Sign Change",
      "description": [
        "As signs are placed empty, this event is called when a player is done editing a sign."
      ],
      "examples": [
        "on sign change:",
        "\tline 2 is empty",
        "\tset line 1 to \"<red>%line 1%\""
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] sign (chang[e]|edit)[ing]",
        "[on] [player] (chang[e]|edit)[ing] [a] sign"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-player",
        "event-texts",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "slime_split",
      "name": "On Slime Split",
      "description": [
        "Called when a slime splits. Usually this happens when a big slime dies."
      ],
      "examples": [
        "on slime split:"
      ],
      "since": [
        "2.2-dev26"
      ],
      "patterns": [
        "[on] slime split[ting]"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "smelt",
      "name": "On Smelt",
      "description": [
        "Called when a furnace smelts an item in its input slot."
      ],
      "examples": [
        "on smelt:",
        "\tclear the smelted item",
        "on smelt of raw iron:",
        "\tbroadcast smelted item",
        "\tset the smelted item to iron block"
      ],
      "since": [
        "1.0, 2.10 (specific item)"
      ],
      "patterns": [
        "[on] [furnace] [ore] smelt[ed|ing] [of %itemtypes%]",
        "[on] [furnace] smelt[ed|ing] of ore"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "sneak_toggle",
      "name": "On Sneak Toggle",
      "description": [
        "Called when a player starts or stops sneaking. Use is sneaking to get whether the player was sneaking before the event was called."
      ],
      "examples": [
        "# make players that stop sneaking jump",
        "on sneak toggle:",
        "\tplayer is sneaking",
        "\tpush the player upwards at speed 0.5"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [player] toggl(e|ing) sneak",
        "[on] [player] sneak toggl(e|ing)"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "spawn",
      "name": "On Spawn",
      "description": [
        "Called when an entity spawns (excluding players)."
      ],
      "examples": [
        "on spawn of a zombie:",
        "on spawn of an ender dragon:",
        "\tbroadcast \"A dragon has been sighted in %world%!\""
      ],
      "since": [
        "1.0, 2.5.1 (non-living entities)"
      ],
      "patterns": [
        "[on] spawn[ing] [of %entitydatas%]"
      ],
      "event values": [
        "event-block",
        "event-command sender",
        "event-entity",
        "event-item stack",
        "event-location",
        "event-projectile",
        "event-spawn reason",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "spawn_change",
      "name": "On Spawn Change",
      "description": [
        "Called when the spawn point of a world changes."
      ],
      "examples": [
        "on spawn change:",
        "\tbroadcast \"someone changed the spawn!\""
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [world] spawn change"
      ],
      "event values": [
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "spectate",
      "name": "On Spectate",
      "description": [
        "Called with a player starts, stops or swaps spectating an entity."
      ],
      "examples": [
        "on player start spectating of a zombie:"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[on] [player] stop spectating [(of|from) %*entitydatas%]",
        "[on] [player] (swap|switch) spectating [(of|from) %*entitydatas%]",
        "[on] [player] start spectating [of %*entitydatas%]"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "sponge_absorb",
      "name": "On Sponge Absorb",
      "description": [
        "Called when a sponge absorbs blocks."
      ],
      "examples": [
        "on sponge absorb:",
        "\tloop absorbed blocks:",
        "\t\tbroadcast \"%loop-block% was absorbed by a sponge\"!"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "[on] sponge absorb"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Minecraft 1.13 or newer"
      ]
    },
    {
      "id": "spread",
      "name": "On Spread",
      "description": [
        "Called when a new block forms as a result of a block that can spread, e.g. water or mushrooms."
      ],
      "examples": [
        "on spread:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] spread[ing]"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world",
        "past event-block"
      ],
      "cancellable": true
    },
    {
      "id": "sprint_toggle",
      "name": "On Sprint Toggle",
      "description": [
        "Called when a player starts or stops sprinting. Use is sprinting to get whether the player was sprinting before the event was called."
      ],
      "examples": [
        "on sprint toggle:",
        "\tplayer is not sprinting",
        "\tsend \"Run!\""
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [player] toggl(e|ing) sprint",
        "[on] [player] sprint toggl(e|ing)"
      ],
      "event values": [
        "event-player",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "start_smelt",
      "name": "On Start Smelt",
      "description": [
        "Called when a furnace starts smelting an item in its ore slot."
      ],
      "examples": [
        "on smelting start:",
        "\tif the smelting item is raw iron:",
        "\t\tset total cook time to 1 second",
        "on smelting start of raw iron:",
        "\tadd 20 seconds to total cook time"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] [furnace] start [of] smelt[ing] [[of] %itemtypes%]",
        "[on] [furnace] smelt[ing] start [of %itemtypes%]"
      ],
      "event values": [
        "event-block",
        "event-location",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "stonecutter_recipe_select",
      "name": "On Stonecutter Recipe Select",
      "description": [
        "Called when a player selects a recipe in a stonecutter."
      ],
      "examples": [
        "on stonecutting stone slabs",
        "\tcancel the event",
        "",
        "on stonecutting:",
        "\tbroadcast \"%player% is using stonecutter to craft %event-item%!\""
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "[on] stonecutting [[of] %itemtypes%]"
      ],
      "event values": [
        "event-item stack",
        "event-player",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper 1.16+"
      ]
    },
    {
      "id": "stop_using_item",
      "name": "On Stop Using Item",
      "description": [
        "Called when a player stops using an item. For example, when the player releases the interact button when holding a bow, an edible item, or a spyglass.",
        "Note that event-timespan will return the time the item was used for."
      ],
      "examples": [
        "on player stop using item:",
        "\tbroadcast \"%player% used %event-item% for %event-timespan%.\""
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "[on] [player] (stop|end) (using item|item use)"
      ],
      "event values": [
        "event-item type",
        "event-number",
        "event-player",
        "event-time span",
        "event-world"
      ],
      "cancellable": false,
      "required plugins": [
        "Paper 1.18.2+"
      ]
    },
    {
      "id": "swim_toggle",
      "name": "On Swim Toggle",
      "description": [
        "Called when an entity swims or stops swimming."
      ],
      "examples": [
        "on swim toggle:",
        "\tevent-entity does not have permission \"swim\"",
        "\tcancel event"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "[on] [entity] toggl(e|ing) swim",
        "[on] [entity] swim toggl(e|ing)"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true,
      "required plugins": [
        "1.13 or newer"
      ]
    },
    {
      "id": "system_time",
      "name": "On System Time",
      "description": [
        "Called when the local time of the system the server is running on reaches the provided real-life time."
      ],
      "examples": [
        "at 14:20 in real time:",
        "at 2:30am real time:",
        "at 6:10 pm in real time:",
        "at 5:00 am and 5:00 pm in real time:",
        "at 5:00 and 17:00 in real time:"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "[on] at %times% [in] real time"
      ],
      "cancellable": false
    },
    {
      "id": "tame",
      "name": "On Tame",
      "description": [
        "Called when a player tames a wolf or ocelot. Can be cancelled to prevent the entity from being tamed."
      ],
      "examples": [
        "on tame:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [entity] tam(e|ing)"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "target",
      "name": "On Target",
      "description": [
        "Called when a mob starts/stops following/attacking another entity, usually a player."
      ],
      "examples": [
        "on entity target:",
        "\ttarget is a player"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [entity] target",
        "[on] [entity] un[-]target"
      ],
      "event values": [
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "teleport",
      "name": "On Teleport",
      "description": [
        "This event can be used to listen to teleports from non-players or player entities respectively.",
        "When teleporting entities, the event may also be called due to a result of natural causes, such as an enderman or shulker teleporting, or wolves teleporting to players.",
        "When teleporting players, the event can be called by teleporting through a nether/end portal, or by other means (e.g. plugins)."
      ],
      "examples": [
        "on teleport:",
        "on player teleport:",
        "on creeper teleport:"
      ],
      "since": [
        "1.0, 2.9.0 (entity teleport)"
      ],
      "patterns": [
        "[on] [%entitytypes%] teleport[ing]"
      ],
      "event values": [
        "event-block",
        "event-chunk",
        "event-command sender",
        "event-entity",
        "event-location",
        "event-player",
        "event-teleport cause",
        "event-world",
        "past event-chunk",
        "past event-location"
      ],
      "cancellable": true
    },
    {
      "id": "tool_change",
      "name": "On Tool Change",
      "description": [
        "Called whenever a player changes their held item by selecting a different slot (e.g. the keys 1-9 or the mouse wheel), not by dropping or replacing the item in the current slot."
      ],
      "examples": [
        "on player's held item change:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] [player['s]] (tool|item held|held item) chang(e|ing)"
      ],
      "event values": [
        "event-player",
        "event-slot",
        "event-world",
        "past event-slot"
      ],
      "cancellable": true
    },
    {
      "id": "vehicle_collision",
      "name": "On Vehicle Collision",
      "description": [
        "Called when a vehicle collides with a block or entity."
      ],
      "examples": [
        "on vehicle collision:",
        "on vehicle collision with obsidian:",
        "on vehicle collision with a zombie:"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] vehicle collision [(with|of) [a[n]] %itemtypes/blockdatas/entitydatas%]",
        "[on] vehicle block collision [(with|of) [a[n]] %itemtypes/blockdatas%]",
        "[on] vehicle entity collision [(with|of) [a[n]] %entitydatas%]"
      ],
      "event values": [
        "event-block",
        "event-entity",
        "event-vehicle",
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "vehicle_create",
      "name": "On Vehicle Create",
      "description": [
        "Called when a new vehicle is created, e.g. when a player places a boat or minecart."
      ],
      "examples": [
        "on vehicle create:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] vehicle create",
        "[on] creat(e|ing|ion of) [a] vehicle"
      ],
      "event values": [
        "event-entity",
        "event-vehicle",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "vehicle_damage",
      "name": "On Vehicle Damage",
      "description": [
        "Called when a vehicle gets damage. Too much damage will destroy the vehicle."
      ],
      "examples": [
        "on vehicle damage:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] vehicle damage",
        "[on] damag(e|ing) [a] vehicle"
      ],
      "event values": [
        "event-entity",
        "event-vehicle",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "vehicle_destroy",
      "name": "On Vehicle Destroy",
      "description": [
        "Called when a vehicle is destroyed. Any passenger will be ejected and the vehicle might drop some item(s)."
      ],
      "examples": [
        "on vehicle destroy:",
        "\tcancel event"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] vehicle destroy",
        "[on] destr(oy[ing]|uction of) [a] vehicle"
      ],
      "event values": [
        "event-entity",
        "event-vehicle",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "vehicle_enter",
      "name": "On Vehicle Enter",
      "description": [
        "Called when an entity enters a vehicle, either deliberately (players) or by falling into them (mobs)."
      ],
      "examples": [
        "on vehicle enter:",
        "\tentity is a player",
        "\tcancel event"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] vehicle enter",
        "[on] enter[ing] [a] vehicle"
      ],
      "event values": [
        "event-entity",
        "event-vehicle",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "vehicle_exit",
      "name": "On Vehicle Exit",
      "description": [
        "Called when an entity exits a vehicle."
      ],
      "examples": [
        "on vehicle exit:",
        "\tif event-entity is a spider:",
        "\t\tkill event-entity"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] vehicle exit",
        "[on] exit[ing] [a] vehicle"
      ],
      "event values": [
        "event-entity",
        "event-living entity",
        "event-vehicle",
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "vehicle_move",
      "name": "On Vehicle Move",
      "description": [
        "Called when a vehicle moves.",
        "Please note that using this event can cause lag if there are multiple vehicle entities, i.e. Horse, Pig, Boat, Minecart"
      ],
      "examples": [
        "on vehicle move:",
        "\tbroadcast past event-location",
        "\tbroadcast event-location"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[on] vehicle move"
      ],
      "event values": [
        "event-entity",
        "event-location",
        "event-vehicle",
        "event-world",
        "past event-location"
      ],
      "cancellable": false
    },
    {
      "id": "weather_change",
      "name": "On Weather Change",
      "description": [
        "Called when a world's weather changes."
      ],
      "examples": [
        "on weather change:",
        "on weather change to sunny:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] weather change [to %weathertypes%]"
      ],
      "event values": [
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "world_border_bounds_change",
      "name": "On World Border Bounds Change",
      "description": [
        "Called when a world border changes its bounds, either over time, or instantly.",
        "This event does not get called for virtual borders."
      ],
      "examples": [
        "on worldborder bounds change:",
        "\tbroadcast \"The diameter of %event-worldborder% is changing from %past event-number% to %event-number% over the next %event-timespan%\""
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "[on] world[ ]border [bounds] chang(e|ing)"
      ],
      "event values": [
        "event-number",
        "event-time span",
        "event-world",
        "event-world border",
        "past event-number"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper 1.16+"
      ]
    },
    {
      "id": "world_border_bounds_finish_change",
      "name": "On World Border Bounds Finish Change",
      "description": [
        "Called when a moving world border has finished its move.",
        "This event does not get called for virtual borders."
      ],
      "examples": [
        "on worldborder bounds finish change:",
        "\tbroadcast \"Over the past %event-timespan%, the diameter of %event-worldborder% went from %past event-number% to %event-number%\""
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "[on] world[ ]border [bounds] finish chang(e|ing)"
      ],
      "event values": [
        "event-number",
        "event-time span",
        "event-world",
        "event-world border",
        "past event-number"
      ],
      "cancellable": false,
      "required plugins": [
        "Paper 1.16+"
      ]
    },
    {
      "id": "world_border_center_change",
      "name": "On World Border Center Change",
      "description": [
        "Called when a world border's center has changed.",
        "This event does not get called for virtual borders."
      ],
      "examples": [
        "on worldborder center change:",
        "\tbroadcast \"The center of %event-worldborder% has moved from %past event-location% to %event-location%\""
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "[on] world[ ]border center chang(e|ing)"
      ],
      "event values": [
        "event-location",
        "event-world",
        "event-world border",
        "past event-location"
      ],
      "cancellable": true,
      "required plugins": [
        "Paper 1.16+"
      ]
    },
    {
      "id": "world_init",
      "name": "On World Init",
      "description": [
        "Called when a world is initialized. As all default worlds are initialized before",
        "any scripts are loaded, this event is only called for newly created worlds.",
        "World management plugins might change the behaviour of this event though."
      ],
      "examples": [
        "on world init of \"world_the_end\":"
      ],
      "since": [
        "1.0, 2.8.0 (defining worlds)"
      ],
      "patterns": [
        "[on] world init[ialization] [of %worlds%]"
      ],
      "event values": [
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "world_load",
      "name": "On World Load",
      "description": [
        "Called when a world is loaded. As with the world init event, this event will not be called for the server's default world(s)."
      ],
      "examples": [
        "on world load of \"world_nether\":",
        "\tbroadcast \"The world %event-world% has been loaded!\""
      ],
      "since": [
        "1.0, 2.8.0 (defining worlds)"
      ],
      "patterns": [
        "[on] world load[ing] [of %worlds%]"
      ],
      "event values": [
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "world_save",
      "name": "On World Save",
      "description": [
        "Called when a world is saved to disk. Usually all worlds are saved simultaneously, but world management plugins could change this."
      ],
      "examples": [
        "on world save of \"world\":",
        "\tbroadcast \"The world %event-world% has been saved\""
      ],
      "since": [
        "1.0, 2.8.0 (defining worlds)"
      ],
      "patterns": [
        "[on] world sav(e|ing) [of %worlds%]"
      ],
      "event values": [
        "event-world"
      ],
      "cancellable": false
    },
    {
      "id": "world_unload",
      "name": "On World Unload",
      "description": [
        "Called when a world is unloaded. This event will never be called if you don't have a world management plugin."
      ],
      "examples": [
        "on world unload:",
        "\tbroadcast \"the %event-world% has been unloaded!\""
      ],
      "since": [
        "1.0, 2.8.0 (defining worlds)"
      ],
      "patterns": [
        "[on] world unload[ing] [of %worlds%]"
      ],
      "event values": [
        "event-world"
      ],
      "cancellable": true
    },
    {
      "id": "zombie_break_door",
      "name": "On Zombie Break Door",
      "description": [
        "Called when a zombie is done breaking a wooden door. Can be cancelled to prevent the zombie from breaking the door."
      ],
      "examples": [
        "on zombie breaking a wood door:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] zombie break[ing] [a] [wood[en]] door"
      ],
      "event values": [
        "event-block",
        "event-block data",
        "event-command sender",
        "event-entity",
        "event-location",
        "event-world",
        "future event-block data",
        "past event-block"
      ],
      "cancellable": true
    },
    {
      "id": "periodical",
      "name": "Periodical",
      "description": [
        "An event that is called periodically."
      ],
      "examples": [
        "every 2 seconds:",
        "every minecraft hour:",
        "every tick: # can cause lag depending on the code inside the event",
        "every minecraft days:"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] every %timespan%"
      ],
      "cancellable": false
    },
    {
      "id": "eventperiodical",
      "name": "Periodical",
      "description": [
        "An event that is called periodically."
      ],
      "examples": [
        "every 2 seconds in \"world\":",
        "every minecraft hour in \"flatworld\":",
        "every tick in \"world\": # can cause lag depending on the code inside the event",
        "every minecraft days in \"plots\":"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[on] every %timespan% in [world[s]] %worlds%"
      ],
      "event values": [
        "event-world"
      ],
      "cancellable": false
    }
  ],
  "conditions": [
    {
      "id": "CondAllayCanDuplicate",
      "name": "Allay Can Duplicate",
      "description": [
        "Checks to see if an allay is able to duplicate naturally."
      ],
      "examples": [
        "if last spawned allay can duplicate:",
        "\tdisallow last spawned to duplicate"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% can (duplicate|clone)",
        "%livingentities% (can't|cannot|can not) (duplicate|clone)"
      ]
    },
    {
      "id": "CondAlphanumeric",
      "name": "Alphanumeric",
      "description": [
        "Checks if the given string is alphanumeric."
      ],
      "examples": [
        "if the argument is not alphanumeric:",
        "\tsend \"Invalid name!\""
      ],
      "since": [
        "2.4"
      ],
      "patterns": [
        "%strings% (is|are) alphanumeric",
        "%strings% (isn't|is not|aren't|are not) alphanumeric"
      ]
    },
    {
      "id": "CondIsSedated",
      "name": "Beehive Is Sedated",
      "description": [
        "Checks if a beehive is sedated from a nearby campfire."
      ],
      "examples": [
        "if {_beehive} is sedated:"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%blocks% (is|are) sedated",
        "%blocks% (isn't|is not|aren't|are not) sedated"
      ]
    },
    {
      "id": "CondIsResonating",
      "name": "Bell Is Resonating",
      "description": [
        "Checks to see if a bell is currently resonating.",
        "A bell will start resonating five game ticks after being rung, and will continue to resonate for 40 game ticks."
      ],
      "examples": [
        "target block is resonating"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "%blocks% (is|are) resonating",
        "%blocks% (isn't|is not|aren't|are not) resonating"
      ],
      "required plugins": [
        "Spigot 1.19.4+"
      ]
    },
    {
      "id": "CondIsRinging",
      "name": "Bell Is Ringing",
      "description": [
        "Checks to see if a bell is currently ringing. A bell typically rings for 50 game ticks."
      ],
      "examples": [
        "target block is ringing"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "%blocks% (is|are) ringing",
        "%blocks% (isn't|is not|aren't|are not) ringing"
      ],
      "required plugins": [
        "Spigot 1.19.4+"
      ]
    },
    {
      "id": "CondIsDashing",
      "name": "Camel Is Dashing",
      "description": [
        "Checks whether a camel is currently using its dash ability."
      ],
      "examples": [
        "if last spawned camel is dashing:",
        "\tkill last spawned camel"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% (is|are) dashing",
        "%livingentities% (isn't|is not|aren't|are not) dashing"
      ]
    },
    {
      "id": "CondCanAge",
      "name": "Can Age",
      "description": [
        "Checks whether or not an entity will be able to age/grow up."
      ],
      "examples": [
        "on breeding:",
        "\tentity can't age",
        "\tbroadcast \"An immortal has been born!\" to player"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%livingentities% can (age|grow (up|old[er]))",
        "%livingentities% (can't|cannot|can not) (age|grow (up|old[er]))"
      ]
    },
    {
      "id": "CondCanBreed",
      "name": "Can Breed",
      "description": [
        "Checks whether or not a living entity can be bred."
      ],
      "examples": [
        "on right click on living entity:",
        "\tevent-entity can't breed",
        "\tsend \"Turns out %event-entity% is not breedable. Must be a Skript user!\" to player"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%livingentities% can (breed|be bred)",
        "%livingentities% (can't|cannot|can not) (breed|be bred)"
      ]
    },
    {
      "id": "CondEntityUnload",
      "name": "Can Despawn",
      "description": [
        "Check if an entity can despawn when the chunk they're located at is unloaded.",
        "More information on what and when entities despawn can be found at reference."
      ],
      "examples": [
        "if last spawned entity can despawn on chunk unload:",
        "\tmake last spawned entity not despawn on chunk unload"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% can despawn (on chunk unload|when far away)",
        "%livingentities% (can't|cannot|can not) despawn (on chunk unload|when far away)"
      ]
    },
    {
      "id": "CondCanFly",
      "name": "Can Fly",
      "description": [
        "Whether a player is allowed to fly."
      ],
      "examples": [
        "player can fly"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "%players% can fly",
        "%players% (can't|cannot|can not) fly"
      ]
    },
    {
      "id": "CondCanHold",
      "name": "Can Hold",
      "description": [
        "Tests whether a player or a chest can hold the given item."
      ],
      "examples": [
        "block can hold 200 cobblestone",
        "player has enough space for 64 feathers"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "%inventories% (can hold|ha(s|ve) [enough] space (for|to hold)) %itemtypes%",
        "%inventories% (can(no|')t hold|(ha(s|ve) not|ha(s|ve)n't|do[es]n't have) [enough] space (for|to hold)) %itemtypes%"
      ]
    },
    {
      "id": "CondCanPickUpItems",
      "name": "Can Pick Up Items",
      "description": [
        "Whether living entities are able to pick up items off the ground or not."
      ],
      "examples": [
        "if player can pick items up:",
        "\tsend \"You can pick up items!\" to player",
        "",
        "on drop:",
        "\tif player can't pick\tup items:",
        "\t\tsend \"Be careful, you won't be able to pick that up!\" to player"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "%livingentities% can pick([ ]up items| items up)",
        "%livingentities% (can't|cannot|can not) pick([ ]up items| items up)"
      ]
    },
    {
      "id": "CondCanSee",
      "name": "Can See",
      "description": [
        "Checks whether the given players can see the provided entities."
      ],
      "examples": [
        "if sender can't see the player-argument:",
        "\tmessage \"who dat?\"",
        "",
        "if the player can see the last spawned entity:",
        "\tmessage \"hello there!\""
      ],
      "since": [
        "2.3, 2.10 (entities)"
      ],
      "patterns": [
        "%entities% (is|are) [visible|invisible] for %players%",
        "%players% can see %entities%",
        "%entities% (is|are)(n't| not) [visible|invisible] for %players%",
        "%players% can('t| not) see %entities%"
      ],
      "required plugins": [
        "Minecraft 1.19+ (entities)"
      ]
    },
    {
      "id": "CondChatColors",
      "name": "Can See Chat Colors",
      "description": [
        "Checks whether a player can see chat colors."
      ],
      "examples": [
        "if player can see chat colors:",
        "\tsend \"Find the red word in <red>this<reset> message.\"",
        "else:",
        "\tsend \"You cannot partake in finding the colored word.\""
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%players% can see chat colo[u]r[s|ing]",
        "%players% (can't|cannot|can not) see chat colo[u]r[s|ing]"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "CondChatVisibility",
      "name": "Can See Messages",
      "description": [
        "Checks whether a player can see specific message types in chat."
      ],
      "examples": [
        "if player can see all messages:",
        "\tsend \"You can see all messages.\"",
        "if player can only see commands:",
        "\tsend \"This game doesn't work with commands-only chat.\"",
        "if player can't see any messages:",
        "\tsend action bar \"Server shutting down in 5 minutes!\""
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%player% can see all messages [in chat]",
        "%player% can only see (commands|system messages) [in chat]",
        "%player% can('t|[ ]not) see any (command[s]|message[s]) [in chat]",
        "%player% can('t|[ ]not) see all messages [in chat]",
        "%player% can('t|[ ]not) only see (commands|system messages) [in chat]"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "CondChance",
      "name": "Chance",
      "description": [
        "A condition that randomly succeeds or fails.",
        "Valid values are between 0% and 100%, or if the percent sign is omitted between 0 and 1."
      ],
      "examples": [
        "chance of 50%:",
        "\tdrop a diamond",
        "chance of {chance}% # {chance} between 0 and 100",
        "chance of {chance} # {chance} between 0 and 1"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "chance of %number%(\\%|)"
      ]
    },
    {
      "id": "CondCompare",
      "name": "Comparison",
      "description": [
        "A very general condition, it simply compares two values. Usually you can only compare for equality (e.g. block is/isn't of <type>), but some values can also be compared using greater than/less than. In that case you can also test for whether an object is between two others.",
        "Note: This is the only element where not all patterns are shown. It has actually another two sets of similar patters, but with (was|were) or will be instead of (is|are) respectively, which check different time states of the first expression."
      ],
      "examples": [
        "the clicked block is a stone slab or a double stone slab",
        "time in the player's world is greater than 8:00",
        "the creature is not an enderman or an ender dragon"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "(neither|) %objects% ((is|are)(|(n't| not| neither)) ((greater|more|higher|bigger|larger) than|above)|\\>) %objects%",
        "(neither|) %objects% ((is|are)(|(n't| not| neither)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as)|\\>=) %objects%",
        "(neither|) %objects% ((is|are)(|(n't| not| neither)) ((less|smaller|lower) than|below)|\\<) %objects%",
        "(neither|) %objects% ((is|are)(|(n't| not| neither)) (less|smaller|lower|below) [than] or (equal to|the same as)|\\<=) %objects%",
        "(neither|) %objects% ((is|are) (not|neither)|isn't|aren't|!=) [equal to] %objects%",
        "(neither|) %objects% (is|are|=) [(equal to|the same as)] %objects%",
        "(neither|) %objects% (is|are) between %objects% and %objects%",
        "(neither|) %objects% (is not|are not|isn't|aren't) between %objects% and %objects%",
        "(neither|) %objects% (was|were)(|(n't| not| neither)) ((greater|more|higher|bigger|larger) than|above) %objects%",
        "(neither|) %objects% (was|were)(|(n't| not| neither)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as) %objects%",
        "(neither|) %objects% (was|were)(|(n't| not| neither)) ((less|smaller|lower) than|below) %objects%",
        "(neither|) %objects% (was|were)(|(n't| not| neither)) (less|smaller|lower|below) [than] or (equal to|the same as) %objects%",
        "(neither|) %objects% ((was|were) (not|neither)|wasn't|weren't) [equal to] %objects%",
        "(neither|) %objects% (was|were) [(equal to|the same as)] %objects%",
        "(neither|) %objects% (was|were) between %objects% and %objects%",
        "(neither|) %objects% (was not|were not|wasn't|weren't) between %objects% and %objects%",
        "(neither|) %objects% (will be|(will (not|neither) be|won't be)) ((greater|more|higher|bigger|larger) than|above) %objects%",
        "(neither|) %objects% (will be|(will (not|neither) be|won't be)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as) %objects%",
        "(neither|) %objects% (will be|(will (not|neither) be|won't be)) ((less|smaller|lower) than|below) %objects%",
        "(neither|) %objects% (will be|(will (not|neither) be|won't be)) (less|smaller|lower|below) [than] or (equal to|the same as) %objects%",
        "(neither|) %objects% ((will (not|neither) be|won't be)|(isn't|aren't|is not|are not) (turning|changing) [in]to) [equal to] %objects%",
        "(neither|) %objects% (will be [(equal to|the same as)]|(is|are) (turning|changing) [in]to) %objects%",
        "(neither|) %objects% will be between %objects% and %objects%",
        "(neither|) %objects% (will not be|won't be) between %objects% and %objects%"
      ]
    },
    {
      "id": "CondContains",
      "name": "Contains",
      "description": [
        "Checks whether an inventory contains an item, a text contains another piece of text, a container contains something, or a list (e.g. {list variable::*} or 'drops') contains another object."
      ],
      "examples": [
        "block contains 20 cobblestone",
        "player has 4 flint and 2 iron ingots",
        "{list::*} contains 5"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "%inventories% (has|have) %itemtypes% [in [(the[ir]|his|her|its)] inventory]",
        "%inventories% (doesn't|does not|do not|don't) have %itemtypes% [in [(the[ir]|his|her|its)] inventory]",
        "%inventories/strings/objects% contain[(s)] %itemtypes/strings/objects%",
        "%inventories/strings/objects% (doesn't|does not|do not|don't) contain %itemtypes/strings/objects%"
      ]
    },
    {
      "id": "CondDamageCause",
      "name": "Damage Cause",
      "description": [
        "Tests what kind of damage caused a damage event. Refer to the Damage Cause type for a list of all possible causes."
      ],
      "examples": [
        "# make players use their potions of fire resistance whenever they take any kind of fire damage",
        "on damage:",
        "\tdamage was caused by lava, fire or burning",
        "\tvictim is a player",
        "\tvictim has a potion of fire resistance",
        "\tcancel event",
        "\tapply fire resistance to the victim for 30 seconds",
        "\tremove 1 potion of fire resistance from the victim",
        "# prevent mobs from dropping items under certain circumstances",
        "on death:",
        "\tentity is not a player",
        "\tdamage wasn't caused by a block explosion, an attack, a projectile, a potion, fire, burning, thorns or poison",
        "\tclear drops"
      ],
      "since": [
        "2.0"
      ],
      "patterns": [
        "[the] damage (was|is|has)(|n('|o)t) [been] (caused|done|made) by %damagecause%"
      ]
    },
    {
      "id": "CondAnchorWorks",
      "name": "Do Respawn Anchors Work",
      "description": [
        "Checks whether or not respawn anchors work in a world."
      ],
      "examples": [
        "respawn anchors work in world \"world_nether\""
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "respawn anchors [do[(n't| not)]] work in %worlds%"
      ],
      "required plugins": [
        "Minecraft 1.16+"
      ]
    },
    {
      "id": "CondWillHatch",
      "name": "Egg Will Hatch",
      "description": [
        "Whether the egg will hatch in a Player Egg Throw event."
      ],
      "examples": [
        "on player egg throw:",
        "\tif an entity won't hatch:",
        "\t\tsend \"Better luck next time!\" to the player"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[the] egg (will|will not|won't) hatch"
      ]
    },
    {
      "id": "CondEndermanStaredAt",
      "name": "Enderman Has Been Stared At",
      "description": [
        "Checks to see if an enderman has been stared at.",
        "This will return true as long as the entity that stared at the enderman is still alive."
      ],
      "examples": [
        "if last spawned enderman has been stared at:"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% (has|have) been stared at",
        "%livingentities% (doesn't|does not|do not|don't) have been stared at"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "CondIsSheared",
      "name": "Entity Is Sheared",
      "description": [
        "Checks whether entities are sheared. This condition only works on cows, sheep and snowmen for versions below 1.19.4."
      ],
      "examples": [
        "if targeted entity of player is sheared:",
        "\tsend \"This entity has nothing left to shear!\" to player"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "%livingentities% (is|are) (sheared|shorn)",
        "%livingentities% (isn't|is not|aren't|are not) (sheared|shorn)"
      ],
      "required plugins": [
        "MC 1.13+ (cows, sheep & snowmen), Paper 1.19.4+ (all shearable entities)"
      ]
    },
    {
      "id": "CondEntityStorageIsFull",
      "name": "Entity Storage Is Full",
      "description": [
        "Checks to see if the an entity block storage (i.e beehive) is full."
      ],
      "examples": [
        "if the entity storage of {_beehive} is full:",
        "\trelease the entity storage of {_beehive}"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "[the] entity storage of %blocks% (is|are) full",
        "%blocks%'[s] entity storage (is|are) full",
        "[the] entity storage of %blocks% (isn't|is not|aren't|are not) full",
        "%blocks%'[s] entity storage (isn't|is not|aren't|are not) full"
      ]
    },
    {
      "id": "CondEntityIsWet",
      "name": "Entity is Wet",
      "description": [
        "Checks whether an entity is wet or not (in water, rain or a bubble column)."
      ],
      "examples": [
        "if player is wet:"
      ],
      "since": [
        "2.6.1"
      ],
      "patterns": [
        "%entities% (is|are) wet",
        "%entities% (isn't|is not|aren't|are not) wet"
      ],
      "required plugins": [
        "Paper 1.16+"
      ]
    },
    {
      "id": "CondEntityIsInLiquid",
      "name": "Entity is in Liquid",
      "description": [
        "Checks whether an entity is in rain, lava, water or a bubble column."
      ],
      "examples": [
        "if player is in rain:",
        "if player is in water:",
        "player is in lava:",
        "player is in bubble column"
      ],
      "since": [
        "2.6.1"
      ],
      "patterns": [
        "%entities% (is|are) in (water|lava|[a] bubble[ ]column|rain)",
        "%entities% (isn't|is not|aren't|are not) in (water|lava|[a] bubble[ ]column|rain)"
      ],
      "required plugins": [
        "Paper (in rain, lava and bubble column)"
      ]
    },
    {
      "id": "CondCancelled",
      "name": "Event Cancelled",
      "description": [
        "Checks whether or not the event is cancelled."
      ],
      "examples": [
        "on click:",
        "\tif event is cancelled:",
        "\t\tbroadcast \"no clicks allowed!\""
      ],
      "since": [
        "2.2-dev36"
      ],
      "patterns": [
        "[the] event is cancel[l]ed",
        "[the] event (is not|isn't) cancel[l]ed"
      ]
    },
    {
      "id": "CondIsSet",
      "name": "Exists/Is Set",
      "description": [
        "Checks whether a given expression or variable is set."
      ],
      "examples": [
        "{teams::%player's uuid%::preferred-team} is not set",
        "on damage:",
        "\tprojectile exists",
        "\tbroadcast \"%attacker% used a %projectile% to attack %victim%!\""
      ],
      "since": [
        "1.2"
      ],
      "patterns": [
        "%objects% (exist[s]|(is|are) set)",
        "%objects% (do[es](n't| not) exist|(is|are)(n't| not) set)"
      ]
    },
    {
      "id": "CondFishingLure",
      "name": "Fishing Lure Applied",
      "description": [
        "Checks if the lure enchantment is applied to the current fishing event."
      ],
      "examples": [
        "on fishing line cast:",
        "\tif lure enchantment bonus is applied:",
        "\t\tcancel event"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "lure enchantment bonus is (applied|active)",
        "lure enchantment bonus is(n't| not) (applied|active)"
      ]
    },
    {
      "id": "CondGoatHasHorns",
      "name": "Goat Has Horns",
      "description": [
        "Checks to see if a goat has or does not have a left, right, or both horns."
      ],
      "examples": [
        "\tif last spawned goat does not have both horns:\n\t\tmake last spawned goat have both horns\n",
        "\tif {_goat} has a right horn:\n\t\tforce {_goat} to not have a right horn\n"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% (has|have) ((any|a) horn|[a] left horn[s]|[a] right horn[s]|both horns)",
        "%livingentities% (doesn't|does not|do not|don't) have ((any|a) horn|[a] left horn[s]|[a] right horn[s]|both horns)"
      ]
    },
    {
      "id": "CondAI",
      "name": "Has AI",
      "description": [
        "Checks whether an entity has AI."
      ],
      "examples": [
        "target entity has ai"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "%livingentities% (has|have) (ai|artificial intelligence)",
        "%livingentities% (doesn't|does not|do not|don't) have (ai|artificial intelligence)"
      ]
    },
    {
      "id": "CondChatFiltering",
      "name": "Has Chat Filtering",
      "description": [
        "Checks whether a player has chat filtering enabled."
      ],
      "examples": [
        "if player doesn't have chat filtering enabled:",
        "send \"<gray>This server may contain mature chat messages. You have been warned!\" to player"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%players% (has|have) (chat|text) filtering (on|enabled)",
        "%players% (doesn't|does not|do not|don't) have (chat|text) filtering (on|enabled)"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "CondHasClientWeather",
      "name": "Has Client Weather",
      "description": [
        "Checks whether the given players have a custom client weather"
      ],
      "examples": [
        "if the player has custom weather:",
        "\tmessage \"Your custom weather is %player's weather%\""
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "%players% (has|have) [a] (client|custom) weather [set]",
        "%players% (doesn't|does not|do not|don't) have [a] (client|custom) weather [set]"
      ]
    },
    {
      "id": "CondHasCustomModelData",
      "name": "Has Custom Model Data",
      "description": [
        "Check if an item has a custom model data tag"
      ],
      "examples": [
        "player's tool has custom model data"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "%itemtypes% (has|have) [custom] model data",
        "%itemtypes% (doesn't|does not|do not|don't) have [custom] model data"
      ],
      "required plugins": [
        "1.14+"
      ]
    },
    {
      "id": "CondGlowingText",
      "name": "Has Glowing Text",
      "description": [
        "Checks whether a sign (either a block or an item) has glowing text"
      ],
      "examples": [
        "if target block has glowing text"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "%blocks/itemtypes% (has|have) glowing text",
        "%blocks/itemtypes% (doesn't|does not|do not|don't) have glowing text"
      ]
    },
    {
      "id": "CondHasItemCooldown",
      "name": "Has Item Cooldown",
      "description": [
        "Check whether a cooldown is active on the specified material for a specific player."
      ],
      "examples": [
        "if player has player's tool on cooldown:",
        "\tsend \"You can't use this item right now. Wait %item cooldown of player's tool for player%\""
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "%players% (has|have) [([an] item|a)] cooldown (on|for) %itemtypes%",
        "%players% (has|have) %itemtypes% on [(item|a)] cooldown",
        "%players% (doesn't|does not|do not|don't) have [([an] item|a)] cooldown (on|for) %itemtypes%",
        "%players% (doesn't|does not|do not|don't) have %itemtypes% on [(item|a)] cooldown"
      ]
    },
    {
      "id": "CondTooltip",
      "name": "Has Item Tooltips",
      "description": [
        "Whether the entire or additional tooltip of an item is shown or hidden.",
        "The 'entire tooltip' is what shows to the player when they hover an item (i.e. name, lore, etc.).",
        "The 'additional tooltip' hides certain information from certain items (potions, maps, books, fireworks, and banners)."
      ],
      "examples": [
        "send true if entire tooltip of player's tool is shown",
        "if additional tooltip of {_item} is hidden:"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "[the] [entire|additional] tool[ ]tip[s] of %itemtypes% (is|are) (shown|hidden)",
        "[the] [entire|additional] tool[ ]tip[s] of %itemtypes% (isn't|is not|aren't|are not) (shown|hidden)",
        "%itemtypes%'[s] [entire|additional] tool[ ]tip[s] (is|are) (shown|hidden)",
        "%itemtypes%'[s] [entire|additional] tool[ ]tip[s] (isn't|is not|aren't|are not) (shown|hidden)"
      ],
      "required plugins": [
        "Spigot 1.20.5+"
      ]
    },
    {
      "id": "CondHasLineOfSight",
      "name": "Has Line of Sight",
      "description": [
        "Checks whether living entities have an unobstructed line of sight to other entities or locations."
      ],
      "examples": [
        "player has direct line of sight to location 5 blocks to the right of player",
        "victim has line of sight to attacker",
        "player has no line of sight to location 100 blocks in front of player"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "%livingentities% (has|have) [a] [direct] line of sight to %entities/locations%",
        "%livingentities% does(n't| not) have [a] [direct] line of sight to %entities/locations%",
        "%livingentities% (has|have) no [direct] line of sight to %entities/locations%"
      ]
    },
    {
      "id": "CondHasLootTable",
      "name": "Has Loot Table",
      "description": [
        "Checks whether an entity or block has a loot table. The loot tables of chests will be deleted when the chest is opened or broken."
      ],
      "examples": [
        "set event-block to chest",
        "if event-block has a loot table:",
        "\t# this will never happen, because it doesn't have a loot table.",
        "",
        "set loot table of event-block to \"minecraft:chests/simple_dungeon\"",
        "",
        "if event-block has a loot table:",
        "\t# this will happen, because it now has a loot table."
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%blocks/entities% (has|have) [a] loot[ ]table",
        "%blocks/entities% (doesn't|does not|do not|don't) have [a] loot[ ]table"
      ]
    },
    {
      "id": "CondHasMetadata",
      "name": "Has Metadata",
      "description": [
        "Checks whether a metadata holder has a metadata tag."
      ],
      "examples": [
        "if player has metadata value \"healer\":"
      ],
      "since": [
        "2.2-dev36"
      ],
      "patterns": [
        "%metadataholders% (has|have) metadata [(value|tag)[s]] %strings%",
        "%metadataholders% (doesn't|does not|do not|don't) have metadata [(value|tag)[s]] %strings%"
      ]
    },
    {
      "id": "CondPermission",
      "name": "Has Permission",
      "description": [
        "Test whether a player has a certain permission."
      ],
      "examples": [
        "player has permission \"skript.tree\"",
        "victim has the permission \"admin\":",
        "\tsend \"You're attacking an admin!\" to attacker"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "%commandsenders% (has|have) [the] permission[s] %strings%",
        "%commandsenders% (doesn't|does not|do not|don't) have [the] permission[s] %strings%"
      ]
    },
    {
      "id": "CondPlayedBefore",
      "name": "Has Played Before",
      "description": [
        "Checks whether a player has played on this server before. You can also use on first join if you want to make triggers for new players."
      ],
      "examples": [
        "player has played on this server before",
        "player hasn't played before"
      ],
      "since": [
        "1.4, 2.7 (multiple players)"
      ],
      "patterns": [
        "%offlineplayers% [(has|have|did)] [already] play[ed] [on (this|the) server] (before|already)",
        "%offlineplayers% (has not|hasn't|have not|haven't|did not|didn't) [(already|yet)] play[ed] [on (this|the) server] (before|already|yet)"
      ]
    },
    {
      "id": "CondHasPotion",
      "name": "Has Potion",
      "description": [
        "Checks whether the given living entities have specific potion effects."
      ],
      "examples": [
        "if player has potion speed:",
        "\tsend \"You are sonic!\"",
        "",
        "if all players have potion effects speed and haste:",
        "\tbroadcast \"You are ready to MINE!\""
      ],
      "since": [
        "2.6.1"
      ],
      "patterns": [
        "%livingentities% (has|have) potion[s] [effect[s]] %potioneffecttypes%",
        "%livingentities% (doesn't|does not|do not|don't) have potion[s] [effect[s]] %potioneffecttypes%"
      ]
    },
    {
      "id": "CondHasResourcePack",
      "name": "Has Resource Pack",
      "description": [
        "Checks whether the given players have a server resource pack loaded. Please note that this can't detect player's own resource pack, only the resource pack that sent by the server."
      ],
      "examples": [
        "if the player has a resource pack loaded:"
      ],
      "since": [
        "2.4"
      ],
      "patterns": [
        "%players% (has|have) [a] resource pack [(loaded|installed)]",
        "%players% (doesn't|does not|do not|don't) have [a] resource pack [(loaded|installed)]"
      ],
      "required plugins": [
        "Paper 1.9 or newer"
      ]
    },
    {
      "id": "CondHasScoreboardTag",
      "name": "Has Scoreboard Tag",
      "description": [
        "Checks whether the given entities has the given scoreboard tags."
      ],
      "examples": [
        "if the targeted armor stand has the scoreboard tag \"test tag\":"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "%entities% (has|have) [the] score[ ]board tag[s] %strings%",
        "%entities% (doesn't|does not|do not|don't) have [the] score[ ]board tag[s] %strings%"
      ]
    },
    {
      "id": "CondIgnitionProcess",
      "name": "Ignition Process",
      "description": [
        "Checks if a creeper is going to explode."
      ],
      "examples": [
        "if the last spawned creeper is going to explode:",
        "\tloop all players in radius 3 of the last spawned creeper",
        "\t\tsend \"RUN!!!\" to the loop-player"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "[creeper[s]] %livingentities% ((is|are)|(isn't|is not|aren't|are not)) going to explode",
        "[creeper[s]] %livingentities% ((is|are)|(isn't|is not|aren't|are not)) in the (ignition|explosion) process",
        "creeper[s] %livingentities% ((is|are)|(isn't|is not|aren't|are not)) ignited"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "CondPastFuture",
      "name": "In The Past/Future",
      "description": [
        "Checks whether a date is in the past or future.",
        "Note that using the 'now' expression will not be in the past or future when used directly in the condition."
      ],
      "examples": [
        "set {_date} to now",
        "wait 5 seconds",
        "if {_date} is in the past:",
        "\t# this will be true",
        "",
        "if now is in the future:",
        "\t# this will be false",
        "",
        "set {_dates::*} to 1 day from now, 12 days from now, and 1 year from now",
        "if {_dates::*} are in the future:",
        "\t# this will be true",
        "if {_dates::*} have passed:",
        "\t# this will be false"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%dates% (is|are)[(n't| not)] in the (past|future)",
        "%dates% ha(s|ve)[(n't| not)] passed"
      ]
    },
    {
      "id": "CondIsAdult",
      "name": "Is Adult",
      "description": [
        "Checks whether or not a living entity is an adult."
      ],
      "examples": [
        "on drink:",
        "\tevent-entity is not an adult",
        "\tkill event-entity"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%livingentities% (is|are) [an] adult",
        "%livingentities% (isn't|is not|aren't|are not) [an] adult"
      ]
    },
    {
      "id": "CondIsAlive",
      "name": "Is Alive",
      "description": [
        "Checks whether an entity is alive. Works for non-living entities too."
      ],
      "examples": [
        "if {villager-buddy::%player's uuid%} is not dead:",
        "",
        "on shoot:",
        "\twhile the projectile is alive:"
      ],
      "since": [
        "2.0, 2.4-alpha4 (non-living entity support)"
      ],
      "patterns": [
        "%entities% (is|are) (alive|dead)",
        "%entities% (isn't|is not|aren't|are not) (alive|dead)"
      ]
    },
    {
      "id": "CondIsBaby",
      "name": "Is Baby",
      "description": [
        "Checks whether or not a living entity is a baby."
      ],
      "examples": [
        "on drink:",
        "\tevent-entity is a baby",
        "\tkill event-entity"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%livingentities% (is|are) a (child|baby)",
        "%livingentities% (isn't|is not|aren't|are not) a (child|baby)"
      ]
    },
    {
      "id": "CondIsBanned",
      "name": "Is Banned",
      "description": [
        "Checks whether a player or IP is banned."
      ],
      "examples": [
        "player is banned",
        "victim is not IP-banned",
        "\"127.0.0.1\" is banned"
      ],
      "since": [
        "1.4"
      ],
      "patterns": [
        "%offlineplayers/strings% (is|are) banned",
        "%players/strings% (is|are) IP(-| |)banned",
        "%offlineplayers/strings% (isn't|is not|aren't|are not) banned",
        "%players/strings% (isn't|is not|aren't|are not) IP(-| |)banned"
      ]
    },
    {
      "id": "CondRespawnLocation",
      "name": "Is Bed/Anchor Spawn",
      "description": [
        "Checks what the respawn location of a player in the respawn event is."
      ],
      "examples": [
        "on respawn:",
        "\tthe respawn location is a bed",
        "\tbroadcast \"%player% is respawning in their bed! So cozy!\""
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "[the] respawn location (was|is)[(n'| no)t] [a] (bed|respawn anchor)"
      ],
      "required plugins": [
        "Minecraft 1.16+"
      ]
    },
    {
      "id": "CondIsBlock",
      "name": "Is Block",
      "description": [
        "Checks whether an item is a block."
      ],
      "examples": [
        "player's held item is a block",
        "{list::*} are blocks"
      ],
      "since": [
        "2.4"
      ],
      "patterns": [
        "%itemtypes% (is|are) ([a] block|blocks)",
        "%itemtypes% (isn't|is not|aren't|are not) ([a] block|blocks)"
      ]
    },
    {
      "id": "CondIsBlockRedstonePowered",
      "name": "Is Block Redstone Powered",
      "description": [
        "Checks if a block is indirectly or directly powered by redstone"
      ],
      "examples": [
        "if clicked block is redstone powered:",
        "\tsend \"This block is well-powered by redstone!\"",
        "if clicked block is indirectly redstone powered:",
        "\tsend \"This block is indirectly redstone powered.\""
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "%blocks% (is|are) redstone powered",
        "%blocks% (is|are) indirectly redstone powered",
        "%blocks% (is|are)(n't| not) redstone powered",
        "%blocks% (is|are)(n't| not) indirectly redstone powered"
      ]
    },
    {
      "id": "CondIsBlocking",
      "name": "Is Blocking",
      "description": [
        "Checks whether a player is blocking with their shield."
      ],
      "examples": [
        "on damage of player:",
        "\tvictim is blocking",
        "\tdamage attacker by 0.5 hearts"
      ],
      "since": [
        "unknown (before 2.1)"
      ],
      "patterns": [
        "%players% (is|are) (blocking|defending) [with [a] shield]",
        "%players% (isn't|is not|aren't|are not) (blocking|defending) [with [a] shield]"
      ]
    },
    {
      "id": "CondIsBurning",
      "name": "Is Burning",
      "description": [
        "Checks whether an entity is on fire, e.g. a zombie due to being in sunlight, or any entity after falling into lava."
      ],
      "examples": [
        "# increased attack against burning targets",
        "victim is burning:",
        "\tincrease damage by 2"
      ],
      "since": [
        "1.4.4"
      ],
      "patterns": [
        "%entities% (is|are) (burning|ignited|on fire)",
        "%entities% (isn't|is not|aren't|are not) (burning|ignited|on fire)"
      ]
    },
    {
      "id": "CondIsCharged",
      "name": "Is Charged",
      "description": [
        "Checks if a creeper, wither, or wither skull is charged (powered)."
      ],
      "examples": [
        "if the last spawned creeper is charged:",
        "\tbroadcast \"A charged creeper is at %location of last spawned creeper%\""
      ],
      "since": [
        "2.5, 2.10 (withers, wither skulls)"
      ],
      "patterns": [
        "%entities% (is|are) (charged|powered)",
        "%entities% (isn't|is not|aren't|are not) (charged|powered)"
      ]
    },
    {
      "id": "CondIsChargingFireball",
      "name": "Is Charging Fireball",
      "description": [
        "Check whether a ghast is charging a fireball."
      ],
      "examples": [
        "if last spawned ghast is charging fireball:",
        "\tkill last spawned ghast"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% (is|are) charging [a] fireball",
        "%livingentities% (isn't|is not|aren't|are not) charging [a] fireball"
      ]
    },
    {
      "id": "CondIsClimbing",
      "name": "Is Climbing",
      "description": [
        "Whether a living entity is climbing, such as a spider up a wall or a player on a ladder."
      ],
      "examples": [
        "spawn a spider at location of spawn",
        "wait a second",
        "if the last spawned spider is climbing:",
        "\tmessage\"The spider is now climbing!\""
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "%livingentities% (is|are) climbing",
        "%livingentities% (isn't|is not|aren't|are not) climbing"
      ],
      "required plugins": [
        "Minecraft 1.17+"
      ]
    },
    {
      "id": "CondIsCommandBlockConditional",
      "name": "Is Conditional",
      "description": [
        "Checks whether a command block is conditional or not."
      ],
      "examples": [
        "if {_block} is conditional:",
        "\tmake {_block} unconditional"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%blocks% (is|are) [un]conditional",
        "%blocks% (isn't|is not|aren't|are not) [un]conditional"
      ]
    },
    {
      "id": "CondIsCustomNameVisible",
      "name": "Is Custom Name Visible",
      "description": [
        "Checks if an entity's custom name is visible."
      ],
      "examples": [
        "send true if target's custom name is visible"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%entities%'[s] custom name[s] (is|are) visible",
        "%entities%'[s] custom name[s] (isn't|is not|are not|aren't) visible",
        "custom name of %entities% (is|are) visible",
        "custom name of %entities% (isn't|is not|are not|aren't) visible"
      ]
    },
    {
      "id": "CondIsDancing",
      "name": "Is Dancing",
      "description": [
        "Checks to see if an entity is dancing, such as allays, parrots, or piglins."
      ],
      "examples": [
        "if last spawned allay is dancing:",
        "\tbroadcast \"Dance Party!\""
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% (is|are) dancing",
        "%livingentities% (isn't|is not|aren't|are not) dancing"
      ],
      "required plugins": [
        "Paper 1.20.1+ (piglins)"
      ]
    },
    {
      "id": "CondIsEating",
      "name": "Is Eating",
      "description": [
        "Whether a panda or horse type (horse, camel, donkey, llama, mule) is eating."
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% (is|are) eating",
        "%livingentities% (isn't|is not|aren't|are not) eating"
      ],
      "required plugins": [
        "Paper (horse type)"
      ]
    },
    {
      "id": "CondIsEdible",
      "name": "Is Edible",
      "description": [
        "Checks whether an item is edible."
      ],
      "examples": [
        "steak is edible",
        "player's tool is edible"
      ],
      "since": [
        "2.2-dev36"
      ],
      "patterns": [
        "%itemtypes% (is|are) edible",
        "%itemtypes% (isn't|is not|aren't|are not) edible"
      ]
    },
    {
      "id": "CondIsEmpty",
      "name": "Is Empty",
      "description": [
        "Checks whether an inventory, an inventory slot, a queue, or a text is empty."
      ],
      "examples": [
        "player's inventory is empty"
      ],
      "since": [
        "unknown (before 2.1)"
      ],
      "patterns": [
        "%inventories/slots/strings/numbered% (is|are) empty",
        "%inventories/slots/strings/numbered% (isn't|is not|aren't|are not) empty"
      ]
    },
    {
      "id": "CondIsEnchanted",
      "name": "Is Enchanted",
      "description": [
        "Checks whether an item is enchanted."
      ],
      "examples": [
        "tool of the player is enchanted with efficiency 2",
        "helm, chestplate, leggings or boots are enchanted"
      ],
      "since": [
        "1.4.6"
      ],
      "patterns": [
        "%itemtypes% (is|are) enchanted [with %enchantmenttype%]",
        "%itemtypes% (isn't|is not|aren't|are not) enchanted [with %enchantmenttype%]"
      ]
    },
    {
      "id": "CondIsDivisibleBy",
      "name": "Is Evenly Divisible By",
      "description": [
        "Check if a number is evenly divisible by another number."
      ],
      "examples": [
        "if 5 is evenly divisible by 5:",
        "if 11 cannot be evenly divided by 10:"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%numbers% (is|are) evenly divisible by %number%",
        "%numbers% (isn't|is not|aren't|are not) evenly divisible by %number%",
        "%numbers% can be evenly divided by %number%",
        "%numbers% (can't|can[ ]not) be evenly divided by %number%"
      ]
    },
    {
      "id": "CondIsFireResistant",
      "name": "Is Fire Resistant",
      "description": [
        "Checks whether an item is fire resistant."
      ],
      "examples": [
        "if player's tool is fire resistant:",
        "if {_items::*} aren't resistant to fire:"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "%itemtypes% (is|are) (fire resistant|resistant to fire)",
        "%itemtypes% (isn't|is not|aren't|are not) (fire resistant|resistant to fire)"
      ],
      "required plugins": [
        "Spigot 1.20.5+"
      ]
    },
    {
      "id": "CondIsInOpenWater",
      "name": "Is Fish Hook in Open Water",
      "description": [
        "Checks whether the fish hook is in open water.",
        "Open water is defined by a 5x4x5 area of water, air and lily pads. If in open water, treasure items may be caught."
      ],
      "examples": [
        "on fish catch:",
        "\tif fish hook is in open water:",
        "\t\tsend \"You will catch a shark soon!\""
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%entities% (is|are) in open water[s]",
        "%entities% (isn't|is not|aren't|are not) in open water[s]"
      ]
    },
    {
      "id": "CondIsFlammable",
      "name": "Is Flammable",
      "description": [
        "Checks whether an item is flammable."
      ],
      "examples": [
        "wood is flammable",
        "player's tool is flammable"
      ],
      "since": [
        "2.2-dev36"
      ],
      "patterns": [
        "%itemtypes% (is|are) flammable",
        "%itemtypes% (isn't|is not|aren't|are not) flammable"
      ]
    },
    {
      "id": "CondIsFlying",
      "name": "Is Flying",
      "description": [
        "Checks whether a player is flying."
      ],
      "examples": [
        "player is not flying"
      ],
      "since": [
        "1.4.4"
      ],
      "patterns": [
        "%players% (is|are) flying",
        "%players% (isn't|is not|aren't|are not) flying"
      ]
    },
    {
      "id": "CondFromMobSpawner",
      "name": "Is From A Mob Spawner",
      "description": [
        "Checks if an entity was spawned from a mob spawner."
      ],
      "examples": [
        "send whether target is from a mob spawner"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%entities% (is|are) from a [mob] spawner",
        "%entities% (isn't|aren't|is not|are not) from a [mob] spawner",
        "%entities% (was|were) spawned (from|by) a [mob] spawner",
        "%entities% (wasn't|weren't|was not|were not) spawned (from|by) a [mob] spawner"
      ],
      "required plugins": [
        "PaperMC"
      ]
    },
    {
      "id": "CondIsFrozen",
      "name": "Is Frozen",
      "description": [
        "Checks whether an entity is frozen."
      ],
      "examples": [
        "if player is frozen:",
        "\tkill player"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "%entities% (is|are) frozen",
        "%entities% (isn't|is not|aren't|are not) frozen"
      ]
    },
    {
      "id": "CondIsFuel",
      "name": "Is Fuel",
      "description": [
        "Checks whether an item can be used as fuel in a furnace."
      ],
      "examples": [
        "on right click on furnace:",
        "\tif player's tool is not fuel:",
        "\t\tsend \"Please hold a valid fuel item in your hand\"",
        "\t\tcancel event"
      ],
      "since": [
        "2.5.1"
      ],
      "patterns": [
        "%itemtypes% (is|are) [furnace] fuel",
        "%itemtypes% (isn't|is not|aren't|are not) [furnace] fuel"
      ]
    },
    {
      "id": "CondIsGliding",
      "name": "Is Gliding",
      "description": [
        "Checks whether a living entity is gliding."
      ],
      "examples": [
        "if player is gliding"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "%livingentities% (is|are) gliding",
        "%livingentities% (isn't|is not|aren't|are not) gliding"
      ]
    },
    {
      "id": "CondIsHandRaised",
      "name": "Is Hand Raised",
      "description": [
        "Checks whether an entity has one or both of their hands raised.",
        "Hands are raised when an entity is using an item (eg: blocking, drawing a bow, eating)."
      ],
      "examples": [
        "on damage of player:",
        "\tif victim's main hand is raised:",
        "\t\tdrop player's tool at player",
        "\t\tset player's tool to air"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "%livingentities%'[s] [main] hand[s] (is|are) raised",
        "%livingentities%'[s] [main] hand[s] (isn't|is not|aren't|are not) raised",
        "[main] hand[s] of %livingentities% (is|are) raised",
        "[main] hand[s] of %livingentities% (isn't|is not|aren't|are not) raised",
        "%livingentities%'[s] off[ |-]hand[s] (is|are) raised",
        "%livingentities%'[s] off[ |-]hand[s] (isn't|is not|aren't|are not) raised",
        "off[ |-]hand[s] of %livingentities% (is|are) raised",
        "off[ |-]hand[s] of %livingentities% (isn't|is not|aren't|are not) raised"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "CondItemInHand",
      "name": "Is Holding",
      "description": [
        "Checks whether a player is holding a specific item. Cannot be used with endermen, use 'entity is [not] an enderman holding <item type>' instead."
      ],
      "examples": [
        "player is holding a stick",
        "victim isn't holding a sword of sharpness"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[%livingentities%] ha(s|ve) %itemtypes% in [main] hand",
        "[%livingentities%] (is|are) holding %itemtypes% [in main hand]",
        "[%livingentities%] ha(s|ve) %itemtypes% in off[(-| )]hand",
        "[%livingentities%] (is|are) holding %itemtypes% in off[(-| )]hand",
        "[%livingentities%] (ha(s|ve) not|do[es]n't have) %itemtypes% in [main] hand",
        "[%livingentities%] (is not|isn't) holding %itemtypes% [in main hand]",
        "[%livingentities%] (ha(s|ve) not|do[es]n't have) %itemtypes% in off[(-| )]hand",
        "[%livingentities%] (is not|isn't) holding %itemtypes% in off[(-| )]hand"
      ]
    },
    {
      "id": "CondIsInLove",
      "name": "Is In Love",
      "description": [
        "Checks whether or not a living entity is in love."
      ],
      "examples": [
        "on spawn of living entity:",
        "\tif entity is in love:",
        "broadcast \"That was quick!\""
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%livingentities% (is|are) in lov(e|ing) [state|mode]",
        "%livingentities% (isn't|is not|aren't|are not) in lov(e|ing) [state|mode]"
      ]
    },
    {
      "id": "CondIncendiary",
      "name": "Is Incendiary",
      "description": [
        "Checks if an entity will create fire when it explodes. This condition is also usable in an explosion prime event."
      ],
      "examples": [
        "on explosion prime:",
        "\tif the explosion is fiery:",
        "\t\tbroadcast \"A fiery explosive has been ignited!\""
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "%entities% ((is|are) incendiary|cause[s] a[n] (incendiary|fiery) explosion)",
        "%entities% ((is not|are not|isn't|aren't) incendiary|(does not|do not|doesn't|don't) cause[s] a[n] (incendiary|fiery) explosion)",
        "the [event(-| )]explosion (is|(is not|isn't)) (incendiary|fiery)"
      ]
    },
    {
      "id": "CondIsInfinite",
      "name": "Is Infinite",
      "description": [
        "Checks whether potion effects are infinite."
      ],
      "examples": [
        "all of the active potion effects of the player are infinite"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "%potioneffects% (is|are) infinite",
        "%potioneffects% (isn't|is not|aren't|are not) infinite"
      ]
    },
    {
      "id": "CondIsInteractable",
      "name": "Is Interactable",
      "description": [
        "Checks wether or not a block is interactable."
      ],
      "examples": [
        "on block break:",
        "\tif event-block is interactable:",
        "\t\tcancel event",
        "\t\tsend \"You cannot break interactable blocks!\""
      ],
      "since": [
        "2.5.2"
      ],
      "patterns": [
        "%itemtypes% (is|are) interactable",
        "%itemtypes% (isn't|is not|aren't|are not) interactable"
      ]
    },
    {
      "id": "CondIsInvisible",
      "name": "Is Invisible",
      "description": [
        "Checks whether a living entity is invisible."
      ],
      "examples": [
        "target entity is invisible"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "%livingentities% (is|are) (invisible|visible)",
        "%livingentities% (isn't|is not|aren't|are not) (invisible|visible)"
      ]
    },
    {
      "id": "CondIsInvulnerable",
      "name": "Is Invulnerable",
      "description": [
        "Checks whether an entity or a gamemode is invulnerable.\nFor gamemodes, Paper and Minecraft 1.20.6 are required"
      ],
      "examples": [
        "target entity is invulnerable",
        "",
        "loop all gamemodes:",
        "\tif loop-value is not invulnerable:",
        "\t\tbroadcast \"the gamemode %loop-value% is vulnerable!\""
      ],
      "since": [
        "2.5, 2.10 (gamemode)"
      ],
      "patterns": [
        "%entities/gamemodes% (is|are) (invulnerable|invincible)",
        "%entities/gamemodes% (isn't|is not|aren't|are not) (invulnerable|invincible)"
      ],
      "required plugins": [
        "Paper 1.20.6+ (gamemodes)"
      ]
    },
    {
      "id": "CondIsJumping",
      "name": "Is Jumping",
      "description": [
        "Checks whether a living entity is jumping. This condition does not work on players."
      ],
      "examples": [
        "on spawn of zombie:",
        "\twhile event-entity is not jumping:",
        "\t\twait 5 ticks",
        "\tpush event-entity upwards"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "%livingentities% (is|are) jumping",
        "%livingentities% (isn't|is not|aren't|are not) jumping"
      ],
      "required plugins": [
        "Paper 1.15+"
      ]
    },
    {
      "id": "CondLeashed",
      "name": "Is Leashed",
      "description": [
        "Checks to see if an entity is currently leashed."
      ],
      "examples": [
        "target entity is leashed"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "%livingentities% (is|are) leashed",
        "%livingentities% (isn't|is not|aren't|are not) leashed"
      ]
    },
    {
      "id": "CondIsLoaded",
      "name": "Is Loaded",
      "description": [
        "Checks whether a world, chunk or script is loaded.",
        "'chunk at 1, 1' uses chunk coordinates, which are location coords divided by 16."
      ],
      "examples": [
        "if chunk at {home::%player's uuid%} is loaded:",
        "if chunk 1, 10 in world \"world\" is loaded:",
        "if world(\"lobby\") is loaded:",
        "if script named \"MyScript.sk\" is loaded:"
      ],
      "since": [
        "2.3, 2.5 (revamp with chunk at location/coords), 2.10 (Scripts)"
      ],
      "patterns": [
        "chunk[s] %directions% [%locations%] (is|are)[((n't| not))] loaded",
        "chunk [at] %number%, %number% (in|of) [world] %world% is[((n't| not))] loaded",
        "%scripts/worlds% (is|are)[(n't| not)] loaded",
        "script[s] %scripts% (is|are)[(n't| not)] loaded",
        "world[s] %worlds% (is|are)[(n't| not)] loaded"
      ]
    },
    {
      "id": "CondIsLootable",
      "name": "Is Lootable",
      "description": [
        "Checks whether an entity or block is lootable. Lootables are entities or blocks that can have a loot table."
      ],
      "examples": [
        "spawn a pig at event-location",
        "set {_pig} to last spawned entity",
        "if {_pig} is lootable:",
        "\tset loot table of {_pig} to \"minecraft:entities/cow\"",
        "\t# the pig will now drop the loot of a cow when killed, because it is indeed a lootable entity.",
        "set block at event-location to chest",
        "if block at event-location is lootable:",
        "\tset loot table of block at event-location to \"minecraft:chests/simple_dungeon\"",
        "\t# the chest will now generate the loot of a simple dungeon when opened, because it is indeed a lootable block.",
        "set block at event-location to wool block",
        "if block at event-location is lootable:",
        "\t# uh oh, nothing will happen because a wool is not a lootable block."
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%blocks/entities% (is|are) lootable",
        "%blocks/entities% (isn't|is not|aren't|are not) lootable"
      ]
    },
    {
      "id": "CondIsVectorNormalized",
      "name": "Is Normalized",
      "description": [
        "Checks whether a vector is normalized i.e. length of 1"
      ],
      "examples": [
        "vector of player's location is normalized"
      ],
      "since": [
        "2.5.1"
      ],
      "patterns": [
        "%vectors% (is|are) normalized",
        "%vectors% (isn't|is not|aren't|are not) normalized"
      ]
    },
    {
      "id": "CondIsOccluding",
      "name": "Is Occluding",
      "description": [
        "Checks whether an item is a block and completely blocks vision."
      ],
      "examples": [
        "player's tool is occluding"
      ],
      "since": [
        "2.5.1"
      ],
      "patterns": [
        "%itemtypes% (is|are) occluding",
        "%itemtypes% (isn't|is not|aren't|are not) occluding"
      ]
    },
    {
      "id": "CondIsOnline",
      "name": "Is Online",
      "description": [
        "Checks whether a player is online. The 'connected' pattern will return false once this player leaves the server, even if they rejoin. Be aware that using the 'connected' pattern with a variable will not have this special behavior. Use the direct event-player or other non-variable expression for best results."
      ],
      "examples": [
        "player is online",
        "player-argument is offline",
        "while player is connected:",
        "\twait 60 seconds",
        "\tsend \"hello!\" to player",
        "",
        "# The following will act like `{_player} is online`.",
        "# Using variables with `is connected` will not behave the same as with non-variables.",
        "while {_player} is connected:",
        "\tbroadcast \"online!\"",
        "\twait 1 tick"
      ],
      "since": [
        "1.4"
      ],
      "patterns": [
        "%offlineplayers% (is|are) (online|offline|connected)",
        "%offlineplayers% (isn't|is not|aren't|are not) (online|offline|connected)"
      ],
      "required plugins": [
        "Paper 1.20+ (Connected)"
      ]
    },
    {
      "id": "CondIsOp",
      "name": "Is Operator",
      "description": [
        "Checks whether a player is a server operator."
      ],
      "examples": [
        "player is an operator"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "%offlineplayers% (is|are) [[a] server|an] op[erator][s]",
        "%offlineplayers% (isn't|is not|aren't|are not) [[a] server|an] op[erator][s]"
      ]
    },
    {
      "id": "CondIsPassable",
      "name": "Is Passable",
      "description": [
        "Checks whether a block is passable.",
        "A block is passable if it has no colliding parts that would prevent players from moving through it.",
        "Blocks like tall grass, flowers, signs, etc. are passable, but open doors, fence gates, trap doors, etc. are not because they still have parts that can be collided with."
      ],
      "examples": [
        "if player's targeted block is passable"
      ],
      "since": [
        "2.5.1"
      ],
      "patterns": [
        "%blocks% (is|are) passable",
        "%blocks% (isn't|is not|aren't|are not) passable"
      ]
    },
    {
      "id": "CondIsPathfinding",
      "name": "Is Pathfinding",
      "description": [
        "Checks whether living entities are pathfinding.",
        "Can only be a living entity that is a Mob."
      ],
      "examples": [
        "make {_entity} pathfind to {_location} at speed 2",
        "while {_entity} is pathfinding",
        "\twait a second",
        "launch flickering trailing burst firework colored red at location of {_entity}",
        "subtract 10 from {defence::tower::health}",
        "clear entity within {_entity}"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "%livingentities% (is|are) pathfinding [to[wards] %livingentity/location%]",
        "%livingentities% (isn't|is not|aren't|are not) pathfinding [to[wards] %livingentity/location%]"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "CondIsPersistent",
      "name": "Is Persistent",
      "description": [
        "Whether entities, players, or leaves are persistent.",
        "Persistence of entities is whether they are retained through server restarts.",
        "Persistence of leaves is whether they should decay when not connected to a log block within 6 meters.",
        "Persistence of players is if the player's playerdata should be saved when they leave the server. Players' persistence is reset back to 'true' when they join the server.",
        "Passengers inherit the persistence of their vehicle, meaning a persistent zombie put on a non-persistent chicken will become non-persistent. This does not apply to players.",
        "By default, all entities are persistent."
      ],
      "examples": [
        "on spawn:",
        "\tif event-entity is persistent:",
        "\t\tmake event-entity not persistent"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%entities/blocks% (is|are) persistent",
        "%entities/blocks% (isn't|is not|aren't|are not) persistent"
      ]
    },
    {
      "id": "CondIsPlayingDead",
      "name": "Is Playing Dead",
      "description": [
        "Checks to see if an axolotl is playing dead."
      ],
      "examples": [
        "if last spawned axolotl is playing dead:",
        "\tmake last spawned axolotl stop playing dead"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% (is|are) playing dead",
        "%livingentities% (isn't|is not|aren't|are not) playing dead"
      ]
    },
    {
      "id": "CondIsPluginEnabled",
      "name": "Is Plugin Enabled",
      "description": [
        "Check if a plugin is enabled/disabled on the server.",
        "Plugin names can be found in the plugin's 'plugin.yml' file or by using the '/plugins' command, they are NOT the name of the plugin's jar file.",
        "When checking if a plugin is not enabled, this will return true if the plugin is either disabled or not on the server. ",
        "When checking if a plugin is disabled, this will return true if the plugin is on the server and is disabled."
      ],
      "examples": [
        "if plugin \"Vault\" is enabled:",
        "if plugin \"WorldGuard\" is not enabled:",
        "if plugins \"Essentials\" and \"Vault\" are enabled:",
        "if plugin \"MyBrokenPlugin\" is disabled:"
      ],
      "since": [
        "2.6"
      ],
      "patterns": [
        "plugin[s] %strings% (is|are) enabled",
        "plugin[s] %strings% (is|are)(n't| not) enabled",
        "plugin[s] %strings% (is|are) disabled"
      ]
    },
    {
      "id": "CondIsPoisoned",
      "name": "Is Poisoned",
      "description": [
        "Checks whether an entity is poisoned."
      ],
      "examples": [
        "player is poisoned:",
        "\tcure the player from poison",
        "\tmessage \"You have been cured!\""
      ],
      "since": [
        "1.4.4"
      ],
      "patterns": [
        "%livingentities% (is|are) poisoned",
        "%livingentities% (isn't|is not|aren't|are not) poisoned"
      ]
    },
    {
      "id": "CondIsPreferredTool",
      "name": "Is Preferred Tool",
      "description": [
        "Checks whether an item is the preferred tool for a block. A preferred tool is one that will drop the block's item when used. For example, a wooden pickaxe is a preferred tool for grass and stone blocks, but not for iron ore."
      ],
      "examples": [
        "on left click:",
        "\tevent-block is set",
        "\tif player's tool is the preferred tool for event-block:",
        "\t\tbreak event-block naturally using player's tool",
        "\telse:",
        "\t\tcancel event"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "%itemtypes% (is|are) %blocks/blockdatas%'s preferred tool[s]",
        "%itemtypes% (is|are) [the|a] preferred tool[s] (for|of) %blocks/blockdatas%",
        "%itemtypes% (is|are)(n't| not) %blocks/blockdatas%'s preferred tool[s]",
        "%itemtypes% (is|are)(n't| not) [the|a] preferred tool[s] (for|of) %blocks/blockdatas%"
      ],
      "required plugins": [
        "1.16.5+, Paper 1.19.2+ (blockdata)"
      ]
    },
    {
      "id": "CondIsPressingKey",
      "name": "Is Pressing Key",
      "description": [
        "Checks if a player is pressing a certain input key."
      ],
      "examples": [
        "on player input:",
        "\tif player is pressing forward movement key:",
        "\t\tsend \"You are moving forward!\""
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%players% (is|are) pressing %inputkeys%",
        "%players% (isn't|is not|aren't|are not) pressing %inputkeys%",
        "%players% (was|were) pressing %inputkeys%",
        "%players% (wasn't|was not|weren't|were not) pressing %inputkeys%"
      ],
      "required plugins": [
        "Minecraft 1.21.2+"
      ],
      "keywords": [
        "press",
        "input"
      ]
    },
    {
      "id": "CondIsRiding",
      "name": "Is Riding",
      "description": [
        "Tests whether an entity is riding any entity, a specific entity type, or a specific entity."
      ],
      "examples": [
        "if player is riding:",
        "if player is riding an entity:",
        "if player is riding a saddled pig:",
        "if player is riding last spawned horse:"
      ],
      "since": [
        "2.0, 2.11 (entities)"
      ],
      "patterns": [
        "%entities% (is|are) riding [%entitydatas/entities%]",
        "%entities% (isn't|is not|aren't|are not) riding [%entitydatas/entities%]"
      ]
    },
    {
      "id": "CondIsRiptiding",
      "name": "Is Riptiding",
      "description": [
        "Checks to see if an entity is currently using the Riptide enchantment."
      ],
      "examples": [
        "target entity is riptiding"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "%livingentities% (is|are) riptiding",
        "%livingentities% (isn't|is not|aren't|are not) riptiding"
      ]
    },
    {
      "id": "CondIsSaddled",
      "name": "Is Saddled",
      "description": [
        "Checks whether a given entity (horse or steerable) is saddled.",
        "If 'properly' is used, this will only return true if the entity is wearing specifically a saddle item."
      ],
      "examples": [
        "send whether {_horse} is saddled"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%livingentities% (is|are) [properly] saddled",
        "%livingentities% (isn't|is not|aren't|are not) [properly] saddled"
      ]
    },
    {
      "id": "CondIsScreaming",
      "name": "Is Screaming",
      "description": [
        "Check whether a goat or enderman is screaming."
      ],
      "examples": [
        "\tif last spawned goat is not screaming:\n\t\tmake last spawned goat scream\n",
        "\tif {_enderman} is screaming:\n\t\tforce {_enderman} to stop screaming\n"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% (is|are) screaming",
        "%livingentities% (isn't|is not|aren't|are not) screaming"
      ],
      "required plugins": [
        "Paper (endermen)"
      ]
    },
    {
      "id": "CondScriptLoaded",
      "name": "Is Script Loaded",
      "description": [
        "Check if the current script, or another script, is currently loaded."
      ],
      "examples": [
        "script is loaded",
        "script \"example.sk\" is loaded"
      ],
      "since": [
        "2.2-dev31"
      ],
      "patterns": [
        "script[s] [%strings%] (is|are) loaded",
        "script[s] [%strings%] (isn't|is not|aren't|are not) loaded"
      ]
    },
    {
      "id": "CondIsSilent",
      "name": "Is Silent",
      "description": [
        "Checks whether an entity is silent i.e. its sounds are disabled."
      ],
      "examples": [
        "target entity is silent"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "%entities% (is|are) silent",
        "%entities% (isn't|is not|aren't|are not) silent"
      ]
    },
    {
      "id": "CondIsSleeping",
      "name": "Is Sleeping",
      "description": [
        "Checks whether an entity is sleeping."
      ],
      "examples": [
        "if player is sleeping:",
        "\tmake player wake up without spawn location update",
        "",
        "if last spawned fox is sleeping:",
        "\tmake last spawned fox stop sleeping"
      ],
      "since": [
        "1.4.4, 2.11 (living entities)"
      ],
      "patterns": [
        "%livingentities% (is|are) sleeping",
        "%livingentities% (isn't|is not|aren't|are not) sleeping"
      ]
    },
    {
      "id": "CondIsSlimeChunk",
      "name": "Is Slime Chunk",
      "description": [
        "Tests whether a chunk is a so-called slime chunk.",
        "Slimes can generally spawn in the swamp biome and in slime chunks.",
        "For more info, see the Minecraft wiki."
      ],
      "examples": [
        "command /slimey:",
        "\ttrigger:",
        "\t\tif chunk at player is a slime chunk:",
        "\t\t\tsend \"Yeah, it is!\"",
        "\t\telse:",
        "\t\t\tsend \"Nope, it isn't\""
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "%chunk% (is|are) ([a] slime chunk|slime chunks|slimey)",
        "%chunk% (isn't|is not|aren't|are not) ([a] slime chunk|slime chunks|slimey)"
      ]
    },
    {
      "id": "CondIsSneaking",
      "name": "Is Sneaking",
      "description": [
        "Checks whether a player is sneaking."
      ],
      "examples": [
        "# prevent mobs from seeing sneaking players if they are at least 4 meters apart",
        "on target:",
        "\ttarget is sneaking",
        "\tdistance of target and the entity is bigger than 4",
        "\tcancel the event"
      ],
      "since": [
        "1.4.4"
      ],
      "patterns": [
        "%players% (is|are) sneaking",
        "%players% (isn't|is not|aren't|are not) sneaking"
      ]
    },
    {
      "id": "CondIsSolid",
      "name": "Is Solid",
      "description": [
        "Checks whether an item is solid."
      ],
      "examples": [
        "grass block is solid",
        "player's tool isn't solid"
      ],
      "since": [
        "2.2-dev36"
      ],
      "patterns": [
        "%itemtypes% (is|are) solid",
        "%itemtypes% (isn't|is not|aren't|are not) solid"
      ]
    },
    {
      "id": "CondIsSprinting",
      "name": "Is Sprinting",
      "description": [
        "Checks whether a player is sprinting."
      ],
      "examples": [
        "player is not sprinting"
      ],
      "since": [
        "1.4.4"
      ],
      "patterns": [
        "%players% (is|are) sprinting",
        "%players% (isn't|is not|aren't|are not) sprinting"
      ]
    },
    {
      "id": "CondIsStackable",
      "name": "Is Stackable",
      "description": [
        "Checks whether an item is stackable."
      ],
      "examples": [
        "diamond axe is stackable",
        "birch wood is stackable",
        "torch is stackable"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "%itemstacks% (is|are) stackable",
        "%itemstacks% (isn't|is not|aren't|are not) stackable"
      ]
    },
    {
      "id": "CondIsSwimming",
      "name": "Is Swimming",
      "description": [
        "Checks whether a living entity is swimming."
      ],
      "examples": [
        "player is swimming"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "%livingentities% (is|are) swimming",
        "%livingentities% (isn't|is not|aren't|are not) swimming"
      ]
    },
    {
      "id": "CondIsTagged",
      "name": "Is Tagged",
      "description": [
        "Checks whether an item, block, entity, or entitydata is tagged with the given tag."
      ],
      "examples": [
        "if player's tool is tagged with minecraft tag \"enchantable/sharp_weapon\":",
        "\tenchant player's tool with sharpness 1",
        "",
        "if all logs are tagged with tag \"minecraft:logs\""
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%itemtypes/entities/entitydatas% (is|are) tagged (as|with) %minecrafttags%",
        "%itemtypes/entities/entitydatas% (isn't|is not|aren't|are not) tagged (as|with) %minecrafttags%"
      ],
      "keywords": [
        "blocks",
        "minecraft tag",
        "type",
        "category"
      ]
    },
    {
      "id": "CondIsTameable",
      "name": "Is Tameable",
      "description": [
        "Check if an entity is tameable."
      ],
      "examples": [
        "on damage:",
        "\tif victim is tameable:",
        "\t\tcancel event"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "%livingentities% (is|are) tameable",
        "%livingentities% (isn't|is not|aren't|are not) tameable"
      ]
    },
    {
      "id": "CondIsTamed",
      "name": "Is Tamed",
      "description": [
        "Check if a tameable entity is tamed (horse, parrot, cat, etc.)."
      ],
      "examples": [
        "send true if {_horse} is tamed",
        "tame {_horse} if {_horse} is untamed"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%entities% (is|are) (tamed|domesticated)",
        "%entities% (isn't|is not|aren't|are not) (tamed|domesticated)"
      ]
    },
    {
      "id": "CondIsTicking",
      "name": "Is Ticking",
      "description": [
        "Checks if an entity is ticking."
      ],
      "examples": [
        "send true if target is ticking"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%entities% (is|are) ticking",
        "%entities% (isn't|is not|aren't|are not) ticking"
      ],
      "required plugins": [
        "PaperMC"
      ]
    },
    {
      "id": "CondIsTransparent",
      "name": "Is Transparent",
      "description": [
        "Checks whether an item is transparent. Note that this condition may not work for all blocks, due to the transparency list used by Spigot not being completely accurate."
      ],
      "examples": [
        "player's tool is transparent."
      ],
      "since": [
        "2.2-dev36"
      ],
      "patterns": [
        "%itemtypes% (is|are) transparent",
        "%itemtypes% (isn't|is not|aren't|are not) transparent"
      ]
    },
    {
      "id": "CondIsUnbreakable",
      "name": "Is Unbreakable",
      "description": [
        "Checks whether an item is unbreakable."
      ],
      "examples": [
        "if event-item is unbreakable:",
        "\tsend \"This item is unbreakable!\" to player",
        "if tool of {_p} is breakable:",
        "\tsend \"Your tool is breakable!\" to {_p}"
      ],
      "since": [
        "2.5.1, 2.9.0 (breakable)"
      ],
      "patterns": [
        "%itemtypes% (is|are) [un]breakable",
        "%itemtypes% (isn't|is not|aren't|are not) [un]breakable"
      ]
    },
    {
      "id": "CondIsUsingFeature",
      "name": "Is Using Experimental Feature",
      "description": [
        "Checks whether a script is using an experimental feature by name."
      ],
      "examples": [
        "the script is using \"example feature\"",
        "on load:",
        "\tif the script is using \"example feature\":",
        "\t\tbroadcast \"You're using an experimental feature!\""
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "%script% is using %strings%",
        "%scripts% are using %strings%",
        "%script% is(n't| not) using %strings%",
        "%scripts% are(n't| not) using %strings%"
      ]
    },
    {
      "id": "CondIsValid",
      "name": "Is Valid",
      "description": [
        "Checks whether something (an entity, a script, a config, etc.) is valid.",
        "An invalid entity may have died or de-spawned for some other reason.",
        "An invalid script reference may have been reloaded, moved or disabled since."
      ],
      "examples": [
        "if event-entity is valid"
      ],
      "since": [
        "2.7, 2.10 (Scripts & Configs)"
      ],
      "patterns": [
        "%entities/scripts% (is|are) valid",
        "%entities/scripts% (isn't|is not|aren't|are not) valid"
      ]
    },
    {
      "id": "CondIsWearing",
      "name": "Is Wearing",
      "description": [
        "Checks whether an entity is wearing some items (usually armor)."
      ],
      "examples": [
        "player is wearing an iron chestplate and iron leggings",
        "player is wearing all diamond armour",
        "target is wearing wolf armor"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "%livingentities% (is|are) wearing %itemtypes%",
        "%livingentities% (isn't|is not|aren't|are not) wearing %itemtypes%"
      ]
    },
    {
      "id": "CondIsWhitelisted",
      "name": "Is Whitelisted",
      "description": [
        "Whether or not the server or a player is whitelisted, or the server is whitelist enforced."
      ],
      "examples": [
        "if the player is whitelisted:",
        "if the server is whitelisted:",
        "if the server whitelist is enforced:"
      ],
      "since": [
        "2.5.2, 2.9.0 (enforce, offline players)"
      ],
      "patterns": [
        "[the] server (is|(isn't|is not)) (in white[ ]list mode|white[ ]listed)",
        "%offlineplayers% (is|are|(isn't|is not|aren't|are not)) white[ ]listed",
        "[the] server white[ ]list (is|(isn't|is not)) enforced"
      ],
      "required plugins": [
        "MC 1.17+ (enforce)"
      ]
    },
    {
      "id": "CondIsWithin",
      "name": "Is Within",
      "description": [
        "Whether a location is within something else. The \"something\" can be a block, an entity, a chunk, a world, or a cuboid formed by two other locations.",
        "Note that using the is between condition will refer to a straight line between locations, while this condition will refer to the cuboid between locations."
      ],
      "examples": [
        "if player's location is within {_loc1} and {_loc2}:",
        "\tsend \"You are in a PvP zone!\" to player",
        "",
        "if player is in world(\"world\"):",
        "\tsend \"You are in the overworld!\" to player",
        "",
        "if attacker's location is inside of victim:",
        "\tcancel event",
        "\tsend \"Back up!\" to attacker and victim",
        "",
        "if player is in world \"world1\" or world \"world2\":",
        "\tkill player",
        "",
        "if player is in world \"world\" and chunk at location(0, 0, 0):",
        "\tgive player 1 diamond"
      ],
      "since": [
        "2.7, 2.11 (world borders)"
      ],
      "patterns": [
        "%locations% (is|are) within %location% and %location%",
        "%locations% (isn't|is not|aren't|are not) within %location% and %location%",
        "%locations% (is|are) (within|in[side [of]]) %entities/chunks/worlds/worldborders/blocks%",
        "%locations% (isn't|is not|aren't|are not) (within|in[side [of]]) %entities/chunks/worlds/worldborders/blocks%"
      ],
      "required plugins": [
        "MC 1.17+ (within block)"
      ]
    },
    {
      "id": "CondWithinRadius",
      "name": "Is Within Radius",
      "description": [
        "Checks whether a location is within a certain radius of another location."
      ],
      "examples": [
        "on damage:",
        "\tif attacker's location is within 10 blocks around {_spawn}:",
        "\t\tcancel event",
        "\t\tsend \"You can't PVP in spawn.\""
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "%locations% (is|are) within %number% (block|metre|meter)[s] (around|of) %locations%",
        "%locations% (isn't|is not|aren't|are not) within %number% (block|metre|meter)[s] (around|of) %locations%"
      ]
    },
    {
      "id": "CondIsSkriptCommand",
      "name": "Is a Skript command",
      "description": [
        "Checks whether a command/string is a custom Skript command."
      ],
      "examples": [
        "# Example 1",
        "on command:",
        "\tcommand is a skript command",
        "",
        "# Example 2",
        "\"sometext\" is a skript command"
      ],
      "since": [
        "2.6"
      ],
      "patterns": [
        "%string% (is|are) [a] s(k|c)ript (command|cmd)",
        "%string% (isn't|is not|aren't|are not) [a] s(k|c)ript (command|cmd)"
      ]
    },
    {
      "id": "CondIsOfType",
      "name": "Is of Type",
      "description": [
        "Checks whether an item or an entity is of the given type. This is mostly useful for variables, as you can use the general 'is' condition otherwise (e.g. 'victim is a creeper')."
      ],
      "examples": [
        "tool is of type {selected type}",
        "victim is of type {villager type}"
      ],
      "since": [
        "1.4"
      ],
      "patterns": [
        "%itemstacks/entities% (is|are) of type[s] %itemtypes/entitydatas%",
        "%itemstacks/entities% (isn't|is not|aren't|are not) of type[s] %itemtypes/entitydatas%"
      ]
    },
    {
      "id": "CondIsOnGround",
      "name": "Is on Ground",
      "description": [
        "Checks whether an entity is on ground."
      ],
      "examples": [
        "player is not on ground"
      ],
      "since": [
        "2.2-dev26"
      ],
      "patterns": [
        "%entities% (is|are) on [the] ground",
        "%entities% (isn't|is not|aren't|are not) on [the] ground"
      ]
    },
    {
      "id": "CondItemEnchantmentGlint",
      "name": "Item Has Enchantment Glint Override",
      "description": [
        "Checks whether an item has the enchantment glint overridden, or is forced to glint or not."
      ],
      "examples": [
        "if the player's tool has the enchantment glint override",
        "\tsend \"Your tool has the enchantment glint override.\" to player",
        "",
        "if {_item} is forced to glint:",
        "\tsend \"This item is forced to glint.\" to player",
        "else if {_item} is forced to not glint:",
        "\tsend \"This item is forced to not glint.\" to player",
        "else:",
        "\tsend \"This item does not have any glint override.\" to player"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%itemtypes% (has|have) enchantment glint overrid(den|e)",
        "%itemtypes% (doesn't|does not|do not|don't) have enchantment glint overrid(den|e)",
        "%itemtypes% (is|are) forced to [not] glint",
        "%itemtypes% (isn't|is not|aren't|are not) forced to [not] glint"
      ],
      "required plugins": [
        "Spigot 1.20.5+"
      ]
    },
    {
      "id": "CondLeashWillDrop",
      "name": "Leash Will Drop",
      "description": [
        "Checks whether the leash item will drop during the leash detaching in an unleash event."
      ],
      "examples": [
        "on unleash:",
        "\tif the leash will drop:",
        "\t\tprevent the leash from dropping",
        "\telse:",
        "\t\tallow the leash to drop"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[the] (lead|leash) [item] (will|(won't|will not)) (drop|be dropped)"
      ],
      "required plugins": [
        "Paper 1.16+"
      ],
      "keywords": [
        "lead"
      ]
    },
    {
      "id": "CondIsLeftHanded",
      "name": "Left Handed",
      "description": [
        "Checks if living entities or players are left or right-handed. Armor stands are neither right nor left-handed.",
        "Paper 1.17.1+ is required for non-player entities."
      ],
      "examples": [
        "on damage of player:",
        "\tif victim is left handed:",
        "\t\tcancel event"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "%livingentities% (is|are) (left|right)( |-)handed",
        "%livingentities% (isn't|is not|aren't|are not) (left|right)( |-)handed"
      ],
      "required plugins": [
        "Paper 1.17.1+ (entities)"
      ]
    },
    {
      "id": "CondLidState",
      "name": "Lid Is Open/Closed",
      "description": [
        "Check to see whether lidded blocks (chests, shulkers, etc.) are open or closed."
      ],
      "examples": [
        "if the lid of {_chest} is closed:",
        "\topen the lid of {_block}"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[the] lid[s] of %blocks% (is|are) (open[ed]|close[d])",
        "[the] lid[s] of %blocks% (isn't|is not|aren't|are not) (open[ed]|close[d])",
        "%blocks%'[s] lid[s] (is|are) (open[ed]|close[d])",
        "%blocks%'[s] lid[s] (isn't|is not|aren't|are not) (open[ed]|close[d])"
      ]
    },
    {
      "id": "CondMatches",
      "name": "Matches",
      "description": [
        "Checks whether the defined strings match the input regexes (Regular expressions)."
      ],
      "examples": [
        "on chat:",
        "\tif message partially matches \"\\d\":",
        "\t\tsend \"Message contains a digit!\"",
        "\tif message doesn't match \"[A-Za-z]+\":",
        "\t\tsend \"Message doesn't only contain letters!\""
      ],
      "since": [
        "2.5.2"
      ],
      "patterns": [
        "%strings% (match[es]|do[es](n't| not) match) %strings%",
        "%strings% (partially match[es]|do[es](n't| not) partially match) %strings%"
      ]
    },
    {
      "id": "CondPandaIsOnBack",
      "name": "Panda Is On Its Back",
      "description": [
        "Whether a panda is on its back."
      ],
      "examples": [
        "if last spawned panda is on its back:\n\tmake last spawned panda get off its back\n"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% (is|are) on (its|their) back[s]",
        "%livingentities% (isn't|is not|aren't|are not) on (its|their) back[s]"
      ]
    },
    {
      "id": "CondPandaIsRolling",
      "name": "Panda Is Rolling",
      "description": [
        "Whether a panda is rolling."
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% (is|are) rolling",
        "%livingentities% (isn't|is not|aren't|are not) rolling"
      ]
    },
    {
      "id": "CondPandaIsScared",
      "name": "Panda Is Scared",
      "description": [
        "Whether a panda is scared."
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% (is|are) scared",
        "%livingentities% (isn't|is not|aren't|are not) scared"
      ]
    },
    {
      "id": "CondPandaIsSneezing",
      "name": "Panda Is Sneezing",
      "description": [
        "Whether a panda is sneezing."
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%livingentities% (is|are) sneezing",
        "%livingentities% (isn't|is not|aren't|are not) sneezing"
      ]
    },
    {
      "id": "CondPvP",
      "name": "PvP",
      "description": [
        "Checks the PvP state of a world."
      ],
      "examples": [
        "PvP is enabled",
        "PvP is disabled in \"world\""
      ],
      "since": [
        "1.3.4"
      ],
      "patterns": [
        "(is PvP|PvP is) enabled [in %worlds%]",
        "(is PvP|PvP is) disabled [in %worlds%]"
      ]
    },
    {
      "id": "CondResourcePack",
      "name": "Resource Pack",
      "description": [
        "Checks state of the resource pack in a resource pack request response event."
      ],
      "examples": [
        "on resource pack response:",
        "\tif the resource pack wasn't accepted:",
        "\t\tkick the player due to \"You have to install the resource pack to play in this server!\""
      ],
      "since": [
        "2.4"
      ],
      "patterns": [
        "[the] resource pack (was|is|has) [been] %resourcepackstate%",
        "[the] resource pack (was|is|has)(n't| not) [been] %resourcepackstate%"
      ]
    },
    {
      "id": "CondMinecraftVersion",
      "name": "Running Minecraft",
      "description": [
        "Checks if current Minecraft version is given version or newer."
      ],
      "examples": [
        "running minecraft \"1.14\""
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "running [(below)] minecraft %string%"
      ]
    },
    {
      "id": "CondStartsEndsWith",
      "name": "Starts/Ends With",
      "description": [
        "Checks if a text starts or ends with another."
      ],
      "examples": [
        "if the argument starts with \"test\" or \"debug\":",
        "\tsend \"Stop!\""
      ],
      "since": [
        "2.2-dev36, 2.5.1 (multiple strings support)"
      ],
      "patterns": [
        "%strings% (start|end)[s] with %strings%",
        "%strings% (doesn't|does not|do not|don't) (start|end) with %strings%"
      ]
    },
    {
      "id": "CondTextDisplayHasDropShadow",
      "name": "Text Display Has Drop Shadow",
      "description": [
        "Returns whether the text of a display has drop shadow applied."
      ],
      "examples": [
        "if {_display} has drop shadow:",
        "\tremove drop shadow from the text of {_display}"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[[the] text of] %displays% (has|have) [a] (drop|text) shadow",
        "%displays%'[s] text (has|have) [a] (drop|text) shadow",
        "[[the] text of] %displays% (doesn't|does not|do not|don't) have [a] (drop|text) shadow",
        "%displays%'[s] text (doesn't|does not|do not|don't) have [a] (drop|text) shadow"
      ]
    },
    {
      "id": "CondTextDisplaySeeThroughBlocks",
      "name": "Text Display Visible Through Blocks",
      "description": [
        "Returns whether text displays can be seen through blocks or not."
      ],
      "examples": [
        "if last spawned text display is visible through walls:",
        "\tprevent last spawned text display from being visible through walls"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "%displays% (is|are) visible through (blocks|walls)",
        "%displays% (isn't|is not|aren't|are not) visible through (blocks|walls)"
      ]
    },
    {
      "id": "CondDate",
      "name": "Time",
      "description": [
        "Tests whether a given real time was more or less than some time span ago."
      ],
      "examples": [
        "command /command-with-cooldown:",
        "\ttrigger:",
        "\t\t{command::%player's uuid%::last-usage} was less than a minute ago:",
        "\t\t\tmessage \"Please wait a minute between uses of this command.\"",
        "\t\t\tstop",
        "\t\tset {command::%player's uuid%::last-usage} to now",
        "\t\t# ... actual command trigger here ..."
      ],
      "since": [
        "2.0"
      ],
      "patterns": [
        "%date% (was|were)( more|(n't| not) less) than %timespan% [ago]",
        "%date% (was|were)((n't| not) more| less) than %timespan% [ago]"
      ]
    },
    {
      "id": "CondElytraBoostConsume",
      "name": "Will Consume Boosting Firework",
      "description": [
        "Checks to see if the firework used in an 'elytra boost' event will be consumed."
      ],
      "examples": [
        "on elytra boost:",
        "\tif the used firework will be consumed:",
        "\t\tprevent the used firework from being consume"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[the] (boosting|used) firework will be consumed",
        "[the] (boosting|used) firework (will not|won't) be consumed"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "CondItemDespawn",
      "name": "Will Despawn",
      "description": [
        "Checks if the dropped item will be despawned naturally through Minecraft's timer."
      ],
      "examples": [
        "if all dropped items can despawn naturally:",
        "\tprevent all dropped items from naturally despawning"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "%itementities% will (despawn naturally|naturally despawn)",
        "%itementities% (will (not|neither)|won't) (despawn naturally|naturally despawn)",
        "%itementities% can (despawn naturally|naturally despawn)",
        "%itementities% (can't|cannot|can not) (despawn naturally|naturally despawn)"
      ]
    }
  ],
  "effects": [
    {
      "id": "EffActionBar",
      "name": "Action Bar",
      "description": [
        "Sends an action bar message to the given player(s)."
      ],
      "examples": [
        "send action bar \"Hello player!\" to player"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "send [the] action[ ]bar [with text] %string% [to %players%]"
      ]
    },
    {
      "id": "EffAllayCanDuplicate",
      "name": "Allay Duplicate",
      "description": [
        "Set whether an allay can or cannot duplicate itself.",
        "This is not the same as breeding allays."
      ],
      "examples": [
        "allow all allays to duplicate",
        "prevent all allays from duplicating"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "allow %livingentities% to (duplicate|clone)",
        "prevent %livingentities% from (duplicating|cloning)"
      ]
    },
    {
      "id": "EffDropLeash",
      "name": "Allow / Prevent Leash Drop",
      "description": [
        "Allows or prevents the leash from being dropped in an unleash event."
      ],
      "examples": [
        "on unleash:",
        "\tif player is not set:",
        "\t\tprevent the leash from dropping",
        "\telse if player is op:",
        "\t\tallow the leash to drop"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "(force|allow) [the] (lead|leash) [item] to drop",
        "(block|disallow|prevent) [the] (lead|leash) [item] from dropping"
      ],
      "keywords": [
        "lead"
      ]
    },
    {
      "id": "EffAllowAging",
      "name": "Allow Aging",
      "description": [
        "Sets whether or not living entities will be able to age."
      ],
      "examples": [
        "on spawn of animal:",
        "\tallow aging of entity"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "lock age of %livingentities%",
        "prevent aging of %livingentities%",
        "prevent %livingentities% from aging",
        "unlock age of %livingentities%",
        "allow aging of %livingentities%",
        "allow %livingentities% to age"
      ]
    },
    {
      "id": "EffApplyBoneMeal",
      "name": "Apply Bone Meal",
      "description": [
        "Applies bone meal to a crop, sapling, or composter"
      ],
      "examples": [
        "apply 3 bone meal to event-block"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "apply [%number%] bone[ ]meal[s] [to %blocks%]"
      ],
      "required plugins": [
        "MC 1.16.2+"
      ]
    },
    {
      "id": "EffFishingLure",
      "name": "Apply Fishing Lure",
      "description": [
        "Sets whether the lure enchantment should be applied, which reduces the wait time."
      ],
      "examples": [
        "on fishing line cast:",
        "\tapply lure enchantment bonus"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "apply [the] lure enchantment bonus",
        "remove [the] lure enchantment bonus"
      ]
    },
    {
      "id": "EffBan",
      "name": "Ban",
      "description": [
        "Bans or unbans a player or an IP address.",
        "If a reason is given, it will be shown to the player when they try to join the server while banned.",
        "A length of ban may also be given to apply a temporary ban. If it is absent for any reason, a permanent ban will be used instead.",
        "We recommend that you test your scripts so that no accidental permanent bans are applied.",
        "",
        "Note that banning people does not kick them from the server.",
        "You can optionally use 'and kick' or consider using the kick effect after applying a ban."
      ],
      "examples": [
        "unban player",
        "ban \"127.0.0.1\"",
        "IP-ban the player because \"he is an idiot\"",
        "ban player due to \"inappropriate language\" for 2 days",
        "ban and kick player due to \"inappropriate language\" for 2 days"
      ],
      "since": [
        "1.4, 2.1.1 (ban reason), 2.5 (timespan), 2.9.0 (kick)"
      ],
      "patterns": [
        "ban [and kick] %strings/offlineplayers% [(by reason of|because [of]|on account of|due to) %string%] [for %timespan%]",
        "unban %strings/offlineplayers%",
        "ban [and kick] %players% by IP [(by reason of|because [of]|on account of|due to) %string%] [for %timespan%]",
        "unban %players% by IP",
        "IP(-| )ban [and kick] %players% [(by reason of|because [of]|on account of|due to) %string%] [for %timespan%]",
        "(IP(-| )unban|un[-]IP[-]ban) %players%"
      ]
    },
    {
      "id": "EffBreakNaturally",
      "name": "Break Block",
      "description": [
        "Breaks the block and spawns items as if a player had mined it",
        "\nYou can add a tool, which will spawn items based on how that tool would break the block ",
        "(ie: When using a hand to break stone, it drops nothing, whereas with a pickaxe it drops cobblestone)"
      ],
      "examples": [
        "on right click:",
        "\tbreak clicked block naturally",
        "loop blocks in radius 10 around player:",
        "\tbreak loop-block using player's tool",
        "loop blocks in radius 10 around player:",
        "\tbreak loop-block naturally using diamond pickaxe"
      ],
      "since": [
        "2.4"
      ],
      "patterns": [
        "break %blocks% [naturally] [using %itemtype%]"
      ]
    },
    {
      "id": "EffBroadcast",
      "name": "Broadcast",
      "description": [
        "Broadcasts a message to the server."
      ],
      "examples": [
        "broadcast \"Welcome %player% to the server!\"",
        "broadcast \"Woah! It's a message!\""
      ],
      "since": [
        "1.0, 2.6 (broadcasting objects), 2.6.1 (using advanced formatting)"
      ],
      "patterns": [
        "broadcast %objects% [(to|in) %worlds%]"
      ]
    },
    {
      "id": "EffCancelItemUse",
      "name": "Cancel Active Item",
      "description": [
        "Interrupts the action entities may be trying to complete.",
        "For example, interrupting eating, or drawing back a bow."
      ],
      "examples": [
        "on damage of player:",
        "\tif the victim's active tool is a bow:",
        "\t\tinterrupt the usage of the player's active item"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "(cancel|interrupt) [the] us[ag]e of %livingentities%'[s] [active|current] item"
      ],
      "required plugins": [
        "Paper 1.16+"
      ]
    },
    {
      "id": "EffCancelCooldown",
      "name": "Cancel Command Cooldown",
      "description": [
        "Only usable in commands. Makes it so the current command usage isn't counted towards the cooldown."
      ],
      "examples": [
        "command /nick <text>:",
        "\texecutable by: players",
        "\tcooldown: 10 seconds",
        "\ttrigger:",
        "\t\tif length of arg-1 is more than 16:",
        "\t\t\t# Makes it so that invalid arguments don't make you wait for the cooldown again",
        "\t\t\tcancel the cooldown",
        "\t\t\tsend \"Your nickname may be at most 16 characters.\"",
        "\t\t\tstop",
        "\t\tset the player's display name to arg-1"
      ],
      "since": [
        "2.2-dev34"
      ],
      "patterns": [
        "(cancel|ignore) [the] [current] [command] cooldown",
        "un(cancel|ignore) [the] [current] [command] cooldown"
      ]
    },
    {
      "id": "EffCancelDrops",
      "name": "Cancel Drops",
      "description": [
        "Cancels drops of items or experiences in a death or block break event. Please note that this doesn't keep items or experiences of a dead player. If you want to do that, use the Keep Inventory / Experience effect."
      ],
      "examples": [
        "on death of a zombie:",
        "\tif name of the entity is \"&cSpecial\":",
        "\t\tcancel drops of items",
        "",
        "on break of a coal ore:",
        "\tcancel the experience drops"
      ],
      "since": [
        "2.4"
      ],
      "patterns": [
        "(cancel|clear|delete) [the] drops [of (items|[e]xp[erience][s])]",
        "(cancel|clear|delete) [the] (item|[e]xp[erience]) drops"
      ],
      "required plugins": [
        "1.12.2 or newer (cancelling item drops of blocks)"
      ]
    },
    {
      "id": "EffCancelEvent",
      "name": "Cancel Event",
      "description": [
        "Cancels the event (e.g. prevent blocks from being placed, or damage being taken)."
      ],
      "examples": [
        "on damage:",
        "\tvictim is a player",
        "\tvictim has the permission \"skript.god\"",
        "\tcancel the event"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "cancel [the] event",
        "uncancel [the] event"
      ]
    },
    {
      "id": "EffChange",
      "name": "Change: Set/Add/Remove/Delete/Reset",
      "description": [
        "A very general effect that can change many expressions. Many expressions can only be set and/or deleted, while some can have things added to or removed from them."
      ],
      "examples": [
        "# set:",
        "Set the player's display name to \"<red>%name of player%\"",
        "set the block above the victim to lava",
        "# add:",
        "add 2 to the player's health # preferably use 'heal' for this",
        "add argument to {blacklist::*}",
        "give a diamond pickaxe of efficiency 5 to the player",
        "increase the data value of the clicked block by 1",
        "# remove:",
        "remove 2 pickaxes from the victim",
        "subtract 2.5 from {points::%uuid of player%}",
        "# remove all:",
        "remove every iron tool from the player",
        "remove all minecarts from {entitylist::*}",
        "# delete:",
        "delete the block below the player",
        "clear drops",
        "delete {variable}",
        "# reset:",
        "reset walk speed of player",
        "reset chunk at the targeted block"
      ],
      "since": [
        "1.0 (set, add, remove, delete), 2.0 (remove all)"
      ],
      "patterns": [
        "(add|give) %objects% to %objects%",
        "increase %objects% by %objects%",
        "give %objects% %objects%",
        "set %objects% to %objects%",
        "remove (all|every) %objects% from %objects%",
        "(remove|subtract) %objects% from %objects%",
        "(reduce|decrease) %objects% by %objects%",
        "(delete|clear) %objects%",
        "reset %objects%"
      ]
    },
    {
      "id": "EffCharge",
      "name": "Charge Entity",
      "description": [
        "Charges or uncharges a creeper or wither skull. A creeper is charged when it has been struck by lightning."
      ],
      "examples": [
        "on spawn of creeper:",
        "\tcharge the event-entity"
      ],
      "since": [
        "2.5, 2.10 (wither skulls)"
      ],
      "patterns": [
        "make %entities% [(un|not |non[-| ])](charged|powered)",
        "[un](charge|power) %entities%"
      ]
    },
    {
      "id": "EffClearEntityStorage",
      "name": "Clear Entity Storage",
      "description": [
        "Clear the stored entities of an entity block storage (i.e. beehive)."
      ],
      "examples": [
        "clear the stored entities of {_beehive}"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "(clear|empty) the (stored entities|entity storage) of %blocks%"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "EffColorItems",
      "name": "Color Items",
      "description": [
        "Colors items in a given color. You can also use RGB codes if you feel limited with the 16 default colors. RGB codes are three numbers from 0 to 255 in the order (red, green, blue), where (0,0,0) is black and (255,255,255) is white. Armor is colorable for all Minecraft versions. With Minecraft 1.11 or newer you can also color potions and maps. Note that the colors might not look exactly how you'd expect."
      ],
      "examples": [
        "dye player's helmet blue",
        "color the player's tool red"
      ],
      "since": [
        "2.0, 2.2-dev26 (maps and potions)"
      ],
      "patterns": [
        "(dye|colo[u]r|paint) %itemtypes% %color%",
        "(dye|colo[u]r|paint) %itemtypes% (%number%, %number%, %number%)"
      ]
    },
    {
      "id": "EffCommand",
      "name": "Command",
      "description": [
        "Executes a command. This can be useful to use other plugins in triggers.",
        "If the command is a bungeecord side command, you can use the [bungeecord] option to execute command on the proxy."
      ],
      "examples": [
        "make player execute command \"/home\"",
        "execute console command \"/say Hello everyone!\"",
        "execute player bungeecord command \"/alert &6Testing Announcement!\""
      ],
      "since": [
        "1.0, 2.8.0 (bungeecord command)"
      ],
      "patterns": [
        "[execute] [the] [bungee[cord]] command[s] %strings% [by %commandsenders%]",
        "[execute] [the] %commandsenders% [bungee[cord]] command[s] %strings%",
        "(let|make) %commandsenders% execute [[the] [bungee[cord]] command[s]] %strings%"
      ]
    },
    {
      "id": "EffCommandBlockConditional",
      "name": "Conditional / Unconditional",
      "description": [
        "Sets whether the provided command blocks are conditional or not."
      ],
      "examples": [
        "make command block {_block} conditional",
        "make command block {_block} unconditional if {_block} is conditional"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "make command block[s] %blocks% [(un|not )]conditional"
      ]
    },
    {
      "id": "EffConnect",
      "name": "Connect",
      "description": [
        "Connect a player to a server running on your proxy, or any server supporting transfers. Read below for more information.",
        "If the server is running Minecraft 1.20.5 or above, you may specify an IP and Port to transfer a player over to that server.",
        "When transferring players using an IP, the transfer will not complete if the `accepts-transfers` option isn't enabled in `server.properties` for the server specified.",
        "If the port is not provided, it will default to `25565`."
      ],
      "examples": [
        "connect all players to proxy server \"hub\"",
        "transfer player to server \"my.server.com\"",
        "transfer player to server \"localhost\" on port 25566"
      ],
      "since": [
        "2.3, 2.10 (transfer)"
      ],
      "patterns": [
        "connect %players% to [proxy|bungeecord] [server] %string%",
        "send %players% to [proxy|bungeecord] server %string%",
        "transfer %players% to server %string% [on port %number%]"
      ]
    },
    {
      "id": "EffElytraBoostConsume",
      "name": "Consume Boosting Firework",
      "description": [
        "Prevent the firework used in an 'elytra boost' event to be consumed."
      ],
      "examples": [
        "on elytra boost:",
        "\tif the used firework will be consumed:",
        "\t\tprevent the used firework from being consume"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "(prevent|disallow) [the] (boosting|used) firework from being consumed",
        "allow [the] (boosting|used) firework to be consumed"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "EffContinue",
      "name": "Continue",
      "description": [
        "Moves the loop to the next iteration. You may also continue an outer loop from an inner one. The loops are labelled from 1 until the current loop, starting with the outermost one."
      ],
      "examples": [
        "# Broadcast online moderators",
        "loop all players:",
        "\tif loop-value does not have permission \"moderator\":",
        "\t\tcontinue # filter out non moderators",
        "\tbroadcast \"%loop-player% is a moderator!\" # Only moderators get broadcast",
        " ",
        "# Game starting counter",
        "set {_counter} to 11",
        "while {_counter} > 0:",
        "\tremove 1 from {_counter}",
        "\twait a second",
        "\tif {_counter} != 1, 2, 3, 5 or 10:",
        "\t\tcontinue # only print when counter is 1, 2, 3, 5 or 10",
        "\tbroadcast \"Game starting in %{_counter}% second(s)\""
      ],
      "since": [
        "2.2-dev37, 2.7 (while loops), 2.8.0 (outer loops)"
      ],
      "patterns": [
        "continue [this loop|[the] [current] loop]",
        "continue [the] <-?\\d+(_\\d+)*>(st|nd|rd|th) loop"
      ]
    },
    {
      "id": "EffCopy",
      "name": "Copy Into Variable",
      "description": [
        "Copies objects into a variable. When copying a list over to another list, the source list and its sublists are also copied over.",
        "Note: Copying a value into a variable/list will overwrite the existing data."
      ],
      "examples": [
        "set {_foo::bar} to 1",
        "set {_foo::sublist::foobar} to \"hey\"",
        "copy {_foo::*} to {_copy::*}",
        "broadcast indices of {_copy::*} # bar, sublist",
        "broadcast {_copy::bar} # 1",
        "broadcast {_copy::sublist::foobar} # \"hey!\""
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "copy %objects% [in]to %objects%"
      ],
      "keywords": [
        "clone",
        "variable",
        "list"
      ]
    },
    {
      "id": "EffHealth",
      "name": "Damage/Heal/Repair",
      "description": [
        "Damage, heal, or repair an entity or item.",
        "Servers running Spigot 1.20.4+ can optionally choose to specify a fake damage cause."
      ],
      "examples": [
        "damage player by 5 hearts",
        "damage player by 3 hearts with fake cause fall",
        "heal the player",
        "repair tool of player"
      ],
      "since": [
        "1.0, 2.10 (damage cause)"
      ],
      "patterns": [
        "damage %livingentities/itemtypes/slots% by %number% [heart[s]] [with [fake] [damage] cause %damagecause%]",
        "heal %livingentities% [by %number% [heart[s]]]",
        "repair %itemtypes/slots% [by %number%]"
      ],
      "required plugins": [
        "Spigot 1.20.4+ (for damage cause)"
      ]
    },
    {
      "id": "EffDancing",
      "name": "Dance",
      "description": [
        "Make an allay or piglin start or stop dancing.",
        "Providing a location only applies to allays. They will check to see if the the block at the location is a jukebox and playing music. If it isn't, they will stop dancing. If no location is provided, the allay will dance indefinitely.",
        "Providing a timespan only applies for piglins. It determines the length of time they will dance for. If no timespan is provided, they will dance indefinitely."
      ],
      "examples": [
        "if last spawned allay is not dancing:",
        "\tmake last spawned allay start dancing",
        "if block at location(0, 0, 0) is a jukebox:",
        "\tmake all allays dance at location(0, 0, 0)",
        "",
        "make last spawned piglin start dancing",
        "make all piglins dance for 5 hours"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% (start dancing|dance) [%direction% %location%] [for %timespan%]",
        "make %livingentities% (stop dancing|not dance)"
      ],
      "required plugins": [
        "Paper 1.20.1+ (piglins)"
      ]
    },
    {
      "id": "Delay",
      "name": "Delay",
      "description": [
        "Delays the script's execution by a given timespan. Please note that delays are not persistent, e.g. trying to create a tempban script with ban player → wait 7 days → unban player will not work if you restart your server anytime within these 7 days. You also have to be careful even when using small delays!"
      ],
      "examples": [
        "wait 2 minutes",
        "halt for 5 minecraft hours",
        "wait a tick"
      ],
      "since": [
        "1.4"
      ],
      "patterns": [
        "(wait|halt) [for] %timespan%"
      ]
    },
    {
      "id": "EffDetonate",
      "name": "Detonate Entities",
      "description": [
        "Immediately detonates an entity. Accepted entities are fireworks, TNT minecarts, primed TNT, wind charges and creepers."
      ],
      "examples": [
        "detonate last launched firework"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "detonate %entities%"
      ]
    },
    {
      "id": "EffDoIf",
      "name": "Do If",
      "description": [
        "Execute an effect if a condition is true."
      ],
      "examples": [
        "on join:",
        "\tgive a diamond to the player if the player has permission \"rank.vip\""
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "<.+> if <.+>"
      ]
    },
    {
      "id": "EffDrop",
      "name": "Drop",
      "description": [
        "Drops one or more items."
      ],
      "examples": [
        "on death of creeper:",
        "\tdrop 1 TNT"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "drop %itemtypes/experiences% [%directions% %locations%] [(without velocity)]"
      ]
    },
    {
      "id": "EffScriptFile",
      "name": "Enable/Disable/Unload/Reload Script",
      "description": [
        "Enables, disables, unloads, or reloads a script.\n\nDisabling a script unloads it and prepends - to its name so it will not be loaded the next time the server restarts.\nIf the script reflection experiment is enabled: unloading a script terminates it and removes it from memory, but does not alter the file."
      ],
      "examples": [
        "reload script \"test\"",
        "enable script file \"testing\"",
        "unload script file \"script.sk\"",
        "set {_script} to the script \"MyScript.sk\"",
        "reload {_script}"
      ],
      "since": [
        "2.4, 2.10 (unloading)"
      ],
      "patterns": [
        "((enable|load)|reload|disable|unload) script [file|named] %string%",
        "((enable|load)|reload|disable|unload) skript file %string%",
        "((enable|load)|reload|disable|unload) %scripts%"
      ]
    },
    {
      "id": "EffEnchant",
      "name": "Enchant/Disenchant",
      "description": [
        "Enchant or disenchant an existing item."
      ],
      "examples": [
        "enchant the player's tool with sharpness 5",
        "disenchant the player's tool"
      ],
      "since": [
        "2.0"
      ],
      "patterns": [
        "enchant %itemtypes% with %enchantmenttypes%",
        "disenchant %itemtypes%"
      ]
    },
    {
      "id": "EffEndermanTeleport",
      "name": "Enderman Teleport",
      "description": [
        "Make an enderman teleport randomly or towards an entity.",
        "Teleporting towards an entity teleports in the direction to the entity and not to them."
      ],
      "examples": [
        "make last spawned enderman teleport randomly",
        "loop 10 times:",
        "\tmake all endermen teleport towards player"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% (randomly teleport|teleport randomly)",
        "force %livingentities% to (randomly teleport|teleport randomly)",
        "make %livingentities% teleport [randomly] towards %entity%",
        "force %livingentities% to teleport [randomly] towards %entity%"
      ],
      "required plugins": [
        "Minecraft 1.20.1+"
      ]
    },
    {
      "id": "EffEnforceWhitelist",
      "name": "Enforce Whitelist",
      "description": [
        "Enforces or un-enforce a server's whitelist.",
        "All non-whitelisted players will be kicked upon enforcing the whitelist."
      ],
      "examples": [
        "enforce the whitelist",
        "unenforce the whitelist"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "[un]enforce [the] [server] white[ ]list"
      ],
      "required plugins": [
        "MC 1.17+"
      ]
    },
    {
      "id": "EffEntityUnload",
      "name": "Entity Despawn",
      "description": [
        "Make a living entity despawn when the chunk they're located at is unloaded.",
        "Setting a custom name on a living entity automatically makes it not despawnable.",
        "More information on what and when entities despawn can be found at reference."
      ],
      "examples": [
        "make all entities not despawnable on chunk unload",
        "spawn zombie at location(0, 0, 0):",
        "\tforce event-entity to not despawn when far away"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% despawn[able] (on chunk unload|when far away)",
        "force %livingentities% to despawn (on chunk unload|when far away)",
        "prevent %livingentities% from despawning [on chunk unload|when far away]"
      ]
    },
    {
      "id": "EffEntityVisibility",
      "name": "Entity Visibility",
      "description": [
        "Change visibility of the given entities for the given players.",
        "If no players are given, will hide the entities from all online players.",
        "",
        "When reveal is used in combination of the hidden players expression and the viewers are not specified, this will default it to the given player in the hidden players expression.",
        "",
        "Note: all previously hidden entities (including players) will be visible when a player leaves and rejoins."
      ],
      "examples": [
        "on spawn:",
        "\tif event-entity is a chicken:",
        "\t\thide event-entity",
        "",
        "reveal hidden players of players"
      ],
      "since": [
        "2.3, 2.10 (entities)"
      ],
      "patterns": [
        "hide %entities% [(from|for) %players%]",
        "reveal %entities% [(to|for|from) %players%]"
      ],
      "required plugins": [
        "Minecraft 1.19+ (entities)"
      ]
    },
    {
      "id": "EffEquip",
      "name": "Equip",
      "description": [
        "Equips or unequips an entity with the given itemtypes (usually armor).",
        "This effect will replace any armor that the entity is already wearing."
      ],
      "examples": [
        "equip player with diamond helmet",
        "equip player with all diamond armor",
        "unequip diamond chestplate from player",
        "unequip all armor from player",
        "unequip player's armor"
      ],
      "since": [
        "1.0, 2.7 (multiple entities, unequip), 2.10 (wolves)"
      ],
      "patterns": [
        "equip [%livingentities%] with %itemtypes%",
        "make %livingentities% wear %itemtypes%",
        "unequip %itemtypes% [from %livingentities%]",
        "unequip %livingentities%'[s] (armo[u]r|equipment)"
      ]
    },
    {
      "id": "EffExit",
      "name": "Exit",
      "description": [
        "Exits a given amount of loops and conditionals, or the entire trigger."
      ],
      "examples": [
        "if player has any ore:",
        "\tstop",
        "message \"%player% has no ores!\"",
        "loop blocks above the player:",
        "\tloop-block is not air:",
        "\t\texit 2 sections",
        "\tset loop-block to water"
      ],
      "since": [
        "unknown (before 2.1)"
      ],
      "patterns": [
        "(exit|stop) [trigger]",
        "(exit|stop) [1|a|the|this] (section|loop|conditional)",
        "(exit|stop) <-?\\d+(_\\d+)*> (section|loop|conditional)s",
        "(exit|stop) all (section|loop|conditional)s"
      ]
    },
    {
      "id": "EffWorldBorderExpand",
      "name": "Expand/Shrink World Border",
      "description": [
        "Expand or shrink the size of a world border.",
        "Using `by` adds/subtracts from the current size of the world border.",
        "Using `to` sets to the specified size."
      ],
      "examples": [
        "expand world border of player by 100 in 5 seconds",
        "shrink world border of world \"world\" to 100 in 10 seconds"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "(expand|grow) [[the] (diameter|radius) of] %worldborders% (by|to) %number% [over [a period of] %timespan%]",
        "(expand|grow) %worldborders%['s (diameter|radius)] (by|to) %number% [over [a period of] %timespan%]",
        "(contract|shrink) [[the] (diameter|radius) of] %worldborders% (by|to) %number% [over [a period of] %timespan%]",
        "(contract|shrink) %worldborders%['s (diameter|radius)] (by|to) %number% [over [a period of] %timespan%]"
      ]
    },
    {
      "id": "EffExplodeCreeper",
      "name": "Explode Creeper",
      "description": [
        "Starts the explosion process of a creeper or instantly explodes it."
      ],
      "examples": [
        "start explosion of the last spawned creeper",
        "stop ignition of the last spawned creeper"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "instantly explode [creeper[s]] %livingentities%",
        "explode [creeper[s]] %livingentities% instantly",
        "ignite creeper[s] %livingentities%",
        "start (ignition|explosion) [process] of [creeper[s]] %livingentities%",
        "stop (ignition|explosion) [process] of [creeper[s]] %livingentities%"
      ],
      "required plugins": [
        "Paper 1.13 or newer/Spigot 1.14 or newer. Ignition can be stopped on Paper 1.13 or newer."
      ]
    },
    {
      "id": "EffExplosion",
      "name": "Explosion",
      "description": [
        "Creates an explosion of a given force. The Minecraft Wiki has an article on explosions which lists the explosion forces of TNT, creepers, etc.",
        "Hint: use a force of 0 to create a fake explosion that does no damage whatsoever, or use the explosion effect introduced in Skript 2.0.",
        "Starting with Bukkit 1.4.5 and Skript 2.0 you can use safe explosions which will damage entities but won't destroy any blocks."
      ],
      "examples": [
        "create an explosion of force 10 at the player",
        "create an explosion of force 0 at the victim"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[(create|make)] [an] explosion (of|with) (force|strength|power) %number% [%directions% %locations%] [(with fire)]",
        "[(create|make)] [a] safe explosion (of|with) (force|strength|power) %number% [%directions% %locations%]",
        "[(create|make)] [a] fake explosion [%directions% %locations%]",
        "[(create|make)] [an] explosion[ ]effect [%directions% %locations%]"
      ]
    },
    {
      "id": "EffFeed",
      "name": "Feed",
      "description": [
        "Feeds the specified players."
      ],
      "examples": [
        "feed all players",
        "feed the player by 5 beefs"
      ],
      "since": [
        "2.2-dev34"
      ],
      "patterns": [
        "feed [the] %players% [by %number% [beef[s]]]"
      ]
    },
    {
      "id": "EffForceAttack",
      "name": "Force Attack",
      "description": [
        "Makes a living entity attack an entity with a melee attack."
      ],
      "examples": [
        "spawn a wolf at player's location",
        "make last spawned wolf attack player"
      ],
      "since": [
        "2.5.1"
      ],
      "patterns": [
        "make %livingentities% attack %entity%",
        "force %livingentities% to attack %entity%"
      ],
      "required plugins": [
        "Minecraft 1.15.2+"
      ]
    },
    {
      "id": "EffEating",
      "name": "Force Eating",
      "description": [
        "Make a panda or horse type (horse, camel, donkey, llama, mule) start/stop eating."
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% (start|stop) eating",
        "force %livingentities% to (start|stop) eating"
      ],
      "required plugins": [
        "Paper (horse type)"
      ]
    },
    {
      "id": "EffForceEnchantmentGlint",
      "name": "Force Enchantment Glint",
      "description": [
        "Forces the items to glint or not, or removes its existing enchantment glint enforcement."
      ],
      "examples": [
        "force {_items::*} to glint",
        "force the player's tool to stop glinting"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "(force|make) %itemtypes% [to] [start] glint[ing]",
        "(force|make) %itemtypes% [to] (not|stop) glint[ing]",
        "(clear|delete|reset) [the] enchantment glint override of %itemtypes%",
        "(clear|delete|reset) %itemtypes%'s enchantment glint override"
      ],
      "required plugins": [
        "Spigot 1.20.5+"
      ]
    },
    {
      "id": "EffPandaOnBack",
      "name": "Force Panda On Back",
      "description": [
        "Make a panda get on/off its back."
      ],
      "examples": [
        "if last spawned panda is on its back:\n\tmake last spawned panda get off its back\n"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% get (on|off) (its|their) back[s]",
        "force %livingentities% to get (on|off) (its|their) back[s]"
      ]
    },
    {
      "id": "EffRespawn",
      "name": "Force Respawn",
      "description": [
        "Forces player(s) to respawn if they are dead. If this is called without delay from death event, one tick is waited before respawn attempt."
      ],
      "examples": [
        "on death of player:",
        "\tforce event-player to respawn"
      ],
      "since": [
        "2.2-dev21"
      ],
      "patterns": [
        "force %players% to respawn"
      ]
    },
    {
      "id": "EffGenerateLoot",
      "name": "Generate Loot",
      "description": [
        "Generates the loot in the specified inventories from a loot table using a loot context. Not specifying a loot context will use a loot context with a location at the world's origin.",
        "Note that if the inventory is full, it will cause warnings in the console due to over-filling the inventory."
      ],
      "examples": [
        "generate loot of loot table \"minecraft:chests/simple_dungeon\" using loot context at player in {_inventory}",
        "generate loot using \"minecraft:chests/shipwreck_supply\" in {_inventory}"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "generate [the] loot (of|using) %loottable% [(with|using) %lootcontext%] in %inventories%"
      ]
    },
    {
      "id": "EffGoatHorns",
      "name": "Goat Horns",
      "description": [
        "Make a goat have or not have a left, right, or both horns."
      ],
      "examples": [
        "remove the left horn of last spawned goat",
        "regrow {_goat}'s horns",
        "remove both horns of all goats"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "remove [the] (left horn[s]|right horn[s]|both horns) of %livingentities%",
        "remove %livingentities%'[s] (left horn[s]|right horn[s]|horns)",
        "(regrow|replace) [the] (left horn[s]|right horn[s]|both horns) of %livingentities%",
        "(regrow|replace) %livingentities%'[s] (left horn[s]|right horn[s]|horns)"
      ]
    },
    {
      "id": "EffHandedness",
      "name": "Handedness",
      "description": [
        "Make mobs left or right-handed. This does not affect players."
      ],
      "examples": [
        "spawn skeleton at spawn of world \"world\":",
        "\tmake entity left handed",
        "",
        "make all zombies in radius 10 of player right handed"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "make %livingentities% (left|right)( |-)handed"
      ],
      "required plugins": [
        "Paper 1.17.1+"
      ]
    },
    {
      "id": "EffHidePlayerFromServerList",
      "name": "Hide Player from Server List",
      "description": [
        "Hides a player from the hover list and decreases the online players count (only if the player count wasn't changed before)."
      ],
      "examples": [
        "on server list ping:",
        "\thide {vanished::*} from the server list"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "hide %players% (in|on|from) [the] server list",
        "hide %players%'[s] info[rmation] (in|on|from) [the] server list"
      ]
    },
    {
      "id": "EffIgnite",
      "name": "Ignite/Extinguish",
      "description": [
        "Lights entities on fire or extinguishes them."
      ],
      "examples": [
        "ignite the player",
        "extinguish the player"
      ],
      "since": [
        "1.4"
      ],
      "patterns": [
        "(ignite|set fire to) %entities% [for %timespan%]",
        "(set|light) %entities% on fire [for %timespan%]",
        "extinguish %entities%"
      ]
    },
    {
      "id": "EffInsertEntityStorage",
      "name": "Insert Entity Storage",
      "description": [
        "Add an entity into the entity storage of a block (e.g. beehive).",
        "The entity must be of the right type for the block (e.g. bee for beehive).",
        "Due to unstable behavior on older versions, adding entities to an entity storage requires Minecraft version 1.21+."
      ],
      "examples": [
        "add last spawned bee into the entity storage of {_beehive}"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "(add|insert) %livingentities% [in[ ]]to [the] (stored entities|entity storage) of %block%"
      ],
      "required plugins": [
        "Minecraft 1.21+"
      ]
    },
    {
      "id": "EffItemDespawn",
      "name": "Item Despawn",
      "description": [
        "Prevent a dropped item from naturally despawning through Minecraft's timer."
      ],
      "examples": [
        "prevent all dropped items from naturally despawning",
        "allow all dropped items to naturally despawn"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "(prevent|disallow) %itementities% from (naturally despawning|despawning naturally)",
        "allow natural despawning of %itementities%",
        "allow %itementities% to (naturally despawn|despawn naturally)"
      ]
    },
    {
      "id": "EffTooltip",
      "name": "Item Tooltips",
      "description": [
        "Show or hide the tooltip of an item.",
        "If changing the 'entire' tooltip of an item, nothing will show up when a player hovers over it.",
        "If changing the 'additional' tooltip, only specific parts (which change per item) will be hidden."
      ],
      "examples": [
        "hide the entire tooltip of player's tool",
        "hide {_item}'s additional tool tip"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "(show|reveal|hide) %itemtypes%'[s] [entire|additional] tool[ ]tip",
        "(show|reveal|hide) [the] [entire|additional] tool[ ]tip of %itemtypes%"
      ],
      "required plugins": [
        "Spigot 1.20.5+"
      ]
    },
    {
      "id": "EffKeepInventory",
      "name": "Keep Inventory / Experience",
      "description": [
        "Keeps the inventory or/and experiences of the dead player in a death event."
      ],
      "examples": [
        "on death of a player:",
        "\tif the victim is an op:",
        "\t\tkeep the inventory and experiences"
      ],
      "since": [
        "2.4"
      ],
      "patterns": [
        "keep [the] (inventory|items) [(and [e]xp[erience][s] [point[s]])]",
        "keep [the] [e]xp[erience][s] [point[s]] [(and (inventory|items))]"
      ]
    },
    {
      "id": "EffKick",
      "name": "Kick",
      "description": [
        "Kicks a player from the server."
      ],
      "examples": [
        "on place of TNT, lava, or obsidian:",
        "\tkick the player due to \"You may not place %block%!\"",
        "\tcancel the event"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "kick %players% [(by reason of|because [of]|on account of|due to) %string%]"
      ]
    },
    {
      "id": "EffKill",
      "name": "Kill",
      "description": [
        "Kills an entity."
      ],
      "examples": [
        "kill the player",
        "kill all creepers in the player's world",
        "kill all endermen, witches and bats"
      ],
      "since": [
        "1.0, 2.10 (ignoring totem of undying)"
      ],
      "patterns": [
        "kill %entities%"
      ]
    },
    {
      "id": "EffKnockback",
      "name": "Knockback",
      "description": [
        "Apply the same velocity as a knockback to living entities in a direction. Mechanics such as knockback resistance will be factored in."
      ],
      "examples": [
        "knockback player north",
        "knock victim (vector from attacker to victim) with strength 10"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "(apply knockback to|knock[back]) %livingentities% [%direction%] [with (strength|force) %number%]"
      ],
      "required plugins": [
        "Paper 1.19.2+"
      ]
    },
    {
      "id": "EffFireworkLaunch",
      "name": "Launch firework",
      "description": [
        "Launch firework effects at the given location(s)."
      ],
      "examples": [
        "launch ball large colored red, purple and white fading to light green and black at player's location with duration 1"
      ],
      "since": [
        "2.4"
      ],
      "patterns": [
        "(launch|deploy) [[a] firework [with effect[s]]] %fireworkeffects% at %locations% [([with] (duration|power)|timed) %number%]"
      ]
    },
    {
      "id": "EffLeash",
      "name": "Leash entities",
      "description": [
        "Leash living entities to other entities. When trying to leash an Ender Dragon, Wither, Player, or a Bat, this effect will not work.",
        "See Spigot's Javadocs for more info."
      ],
      "examples": [
        "on right click:",
        "\tleash event-entity to player",
        "\tsend \"&aYou leashed &2%event-entity%!\" to player"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "(leash|lead) %livingentities% to %entity%",
        "make %entity% (leash|lead) %livingentities%",
        "un(leash|lead) [holder of] %livingentities%"
      ]
    },
    {
      "id": "EffLightning",
      "name": "Lightning",
      "description": [
        "Strike lightning at a given location. Can use 'lightning effect' to create a lightning that does not harm entities or start fires."
      ],
      "examples": [
        "strike lightning at the player",
        "strike lightning effect at the victim"
      ],
      "since": [
        "1.4"
      ],
      "patterns": [
        "(create|strike) lightning([ ]effect|) %directions% %locations%"
      ]
    },
    {
      "id": "EffLoadServerIcon",
      "name": "Load Server Icon",
      "description": [
        "Loads server icons from the given files. You can get the loaded icon using the",
        "last loaded server icon expression.",
        "Please note that the image must be 64x64 and the file path starts from the server folder."
      ],
      "examples": [
        "on load:",
        "\tclear {server-icons::*}",
        "\tloop 5 times:",
        "\t\tload server icon from file \"icons/%loop-number%.png\"",
        "\t\tadd the last loaded server icon to {server-icons::*}",
        "",
        "on server list ping:",
        "\tset the icon to a random server icon out of {server-icons::*}"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "load [the] server icon (from|of) [the] [image] [file] %string%"
      ],
      "required plugins": [
        "Paper 1.12.2 or newer"
      ]
    },
    {
      "id": "EffWorldLoad",
      "name": "Load World",
      "description": [
        "Load your worlds or unload your worlds",
        "The load effect will create a new world if world doesn't already exist.",
        "When attempting to load a normal vanilla world you must define it's environment i.e \"world_nether\" must be loaded with nether environment"
      ],
      "examples": [
        "load world \"world_nether\" with environment nether",
        "load the world \"myCustomWorld\"",
        "unload \"world_nether\"",
        "unload \"world_the_end\" without saving",
        "unload all worlds"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "load [[the] world[s]] %strings% [with environment %environment%]",
        "unload [[the] world[s]] %worlds% [without saving]"
      ]
    },
    {
      "id": "EffSuppressWarnings",
      "name": "Locally Suppress Warning",
      "description": [
        "Suppresses target warnings from the current script."
      ],
      "examples": [
        "locally suppress missing conjunction warnings",
        "suppress the variable save warnings"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "[local[ly]] suppress [the] (conflict|variable save|[missing] conjunction|starting [with] expression[s]|deprecated syntax|unreachable code) warning[s]"
      ]
    },
    {
      "id": "EffLog",
      "name": "Log",
      "description": [
        "Writes text into a .log file. Skript will write these files to /plugins/Skript/logs.",
        "NB: Using 'server.log' as the log file will write to the default server log. Omitting the log file altogether will log the message as '[Skript] [<script>.sk] <message>' in the server log."
      ],
      "examples": [
        "on join:",
        "\tlog \"%player% has just joined the server!\"",
        "on world change:",
        "\tlog \"Someone just went to %event-world%!\" to file \"worldlog/worlds.log\"",
        "on command:",
        "\tlog \"%player% just executed %full command%!\" to file \"server/commands.log\" with a severity of warning"
      ],
      "since": [
        "2.0, 2.9.0 (severities)"
      ],
      "patterns": [
        "log %strings% [(to|in) [file[s]] %strings%] [with [the|a] severity [of] (warning|severe)]"
      ]
    },
    {
      "id": "EffLook",
      "name": "Look At",
      "description": [
        "Forces the mob(s) or player(s) to look at an entity, vector or location. Vanilla max head pitches range from 10 to 50."
      ],
      "examples": [
        "force the player to look towards event-entity's feet",
        "",
        "on entity explosion:",
        "\tset {_player} to the nearest player",
        "\t{_player} is set",
        "\tdistance between {_player} and the event-location is less than 15",
        "\tmake {_player} look towards vector from the {_player} to location of the event-entity",
        "",
        "force {_enderman} to face the block 3 meters above {_location} at head rotation speed 100.5 and max head pitch -40"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "(force|make) %livingentities% [to] (face [towards]|look [(at|towards)]) (%entity%['s (feet|eyes)]|(feet|eyes) of %entity%) [at [head] [rotation] speed %number%] [[and] max[imum] [head] pitch %number%]",
        "(force|make) %livingentities% [to] (face [towards]|look [(at|towards)]) %vector/location% [at [head] [rotation] speed %number%] [[and] max[imum] [head] pitch %number%]"
      ],
      "required plugins": [
        "Paper 1.17+, Paper 1.19.1+ (Players & Look Anchors)"
      ]
    },
    {
      "id": "EffMakeAdultOrBaby",
      "name": "Make Adult/Baby",
      "description": [
        "Force a animal to become an adult or baby."
      ],
      "examples": [
        "on spawn of mob:",
        "\tentity is not an adult",
        "\tmake entity an adult"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "make %livingentities% [a[n]] (adult|baby)",
        "force %livingentities% to be[come] a[n] (adult|baby)"
      ]
    },
    {
      "id": "EffAllayDuplicate",
      "name": "Make Allay Duplicate",
      "description": [
        "Make an allay duplicate itself.",
        "This effect will always make an allay duplicate regardless of whether the duplicate attribute is disabled."
      ],
      "examples": [
        "make all allays duplicate"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% (duplicate|clone)"
      ]
    },
    {
      "id": "EffBreedable",
      "name": "Make Breedable",
      "description": [
        "Sets whether or not entities will be able to breed. Only works on animals."
      ],
      "examples": [
        "on spawn of animal:",
        "\tmake entity unbreedable"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "make %livingentities% breedable",
        "unsterilize %livingentities%",
        "make %livingentities% (not |non(-| )|un)breedable",
        "sterilize %livingentities%"
      ]
    },
    {
      "id": "EffWardenDisturbance",
      "name": "Make Disturbance",
      "description": [
        "Make a warden sense a disturbance at a location, causing the warden to investigate that area.",
        "The warden will not investigate if the warden is aggressive towards an entity.",
        "This effect does not add anger to the warden."
      ],
      "examples": [
        "make last spawned warden sense a disturbance at location(0, 0, 0)"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% sense [a] disturbance %direction% %location%"
      ]
    },
    {
      "id": "EffMakeEggHatch",
      "name": "Make Egg Hatch",
      "description": [
        "Makes the egg hatch in a Player Egg Throw event."
      ],
      "examples": [
        "on player egg throw:",
        "\t# EGGS FOR DAYZ!",
        "\tmake the egg hatch"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "make [the] egg [not] hatch"
      ]
    },
    {
      "id": "EffScreaming",
      "name": "Make Entity Scream",
      "description": [
        "Make a goat or enderman start or stop screaming."
      ],
      "examples": [
        "\tmake last spawned goat start screaming\n\tforce last spawned goat to stop screaming\n",
        "\tmake {_enderman} scream\n\tforce {_enderman} to stop screaming\n"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% (start screaming|scream)",
        "force %livingentities% to (start screaming|scream)",
        "make %livingentities% stop screaming",
        "force %livingentities% to stop screaming"
      ],
      "required plugins": [
        "Paper (endermen)"
      ]
    },
    {
      "id": "EffFireResistant",
      "name": "Make Fire Resistant",
      "description": [
        "Makes items fire resistant."
      ],
      "examples": [
        "make player's tool fire resistant:",
        "make {_items::*} not resistant to fire"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "make %itemtypes% [not] (fire resistant|resistant to fire)"
      ],
      "required plugins": [
        "Spigot 1.20.5+"
      ]
    },
    {
      "id": "EffMakeFly",
      "name": "Make Fly",
      "description": [
        "Forces a player to start/stop flying."
      ],
      "examples": [
        "make player fly",
        "force all players to stop flying"
      ],
      "since": [
        "2.2-dev34"
      ],
      "patterns": [
        "force %players% to [(start|stop)] fly[ing]",
        "make %players% (start|stop) flying",
        "make %players% fly"
      ]
    },
    {
      "id": "EffGoatRam",
      "name": "Make Goat Ram",
      "description": [
        "Make a goat ram an entity.",
        "Ramming does have a cooldown and currently no way to change it."
      ],
      "examples": [
        "make all goats ram player"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% ram %livingentity%",
        "force %livingentities% to ram %livingentity%"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "EffIncendiary",
      "name": "Make Incendiary",
      "description": [
        "Sets if an entity's explosion will leave behind fire. This effect is also usable in an explosion prime event."
      ],
      "examples": [
        "on explosion prime:",
        "\tmake the explosion fiery"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "make %entities% [(not)] incendiary",
        "make %entities%'[s] explosion [(not)] (incendiary|fiery)",
        "make [the] [event(-| )]explosion [(not)] (incendiary|fiery)"
      ]
    },
    {
      "id": "EffInvisible",
      "name": "Make Invisible",
      "description": [
        "Makes a living entity visible/invisible. This is not a potion and therefore does not have features such as a time limit or particles.",
        "When setting an entity to invisible while using an invisibility potion on it, the potion will be overridden and when it runs out the entity keeps its invisibility."
      ],
      "examples": [
        "make target entity invisible"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "make %livingentities% (invisible|not visible)",
        "make %livingentities% (visible|not invisible)"
      ]
    },
    {
      "id": "EffInvulnerability",
      "name": "Make Invulnerable",
      "description": [
        "Makes an entity invulnerable/not invulnerable."
      ],
      "examples": [
        "make target entity invulnerable"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "make %entities% (invulnerable|invincible)",
        "make %entities% (not (invulnerable|invincible)|vulnerable|vincible)"
      ]
    },
    {
      "id": "EffPandaRolling",
      "name": "Make Panda Roll",
      "description": [
        "Make a panda start/stop rolling."
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% ((start rolling|roll)|stop rolling)",
        "force %livingentities% to (start|stop) rolling"
      ]
    },
    {
      "id": "EffPandaSneezing",
      "name": "Make Panda Sneeze",
      "description": [
        "Make a panda start/stop sneezing."
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% ((start sneezing|sneeze)|stop sneezing)",
        "force %livingentities% to (start|stop) sneezing"
      ]
    },
    {
      "id": "EffMakeSay",
      "name": "Make Say",
      "description": [
        "Forces a player to send a message to the chat. If the message starts with a slash it will force the player to use command."
      ],
      "examples": [
        "make the player say \"Hello.\"",
        "force all players to send the message \"I love this server\""
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "make %players% (say|send [the] message[s]) %strings%",
        "force %players% to (say|send [the] message[s]) %strings%"
      ]
    },
    {
      "id": "EffGlowingText",
      "name": "Make Sign Glow",
      "description": [
        "Makes a sign (either a block or item) have glowing text or normal text"
      ],
      "examples": [
        "make target block of player have glowing text"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "make %blocks/itemtypes% have glowing text",
        "make %blocks/itemtypes% have (normal|non[-| ]glowing) text"
      ]
    },
    {
      "id": "EffMessage",
      "name": "Message",
      "description": [
        "Sends a message to the given player. Only styles written",
        "in given string or in formatted expressions will be parsed.",
        "Adding an optional sender allows the messages to be sent as if a specific player sent them.",
        "This is useful with Minecraft 1.16.4's new chat ignore system, in which players can choose to ignore other players,",
        "but for this to work, the message needs to be sent from a player."
      ],
      "examples": [
        "message \"A wild %player% appeared!\"",
        "message \"This message is a distraction. Mwahaha!\"",
        "send \"Your kill streak is %{kill streak::%uuid of player%}%.\" to player",
        "if the targeted entity exists:",
        "\tmessage \"You're currently looking at a %type of the targeted entity%!\"",
        "on chat:",
        "\tcancel event",
        "\tsend \"[%player%] >> %message%\" to all players from player"
      ],
      "since": [
        "1.0, 2.2-dev26 (advanced features), 2.5.2 (optional sender), 2.6 (sending objects)"
      ],
      "patterns": [
        "(message|send [message[s]]) %objects% [to %commandsenders%] [from %player%]"
      ],
      "required plugins": [
        "Minecraft 1.16.4+ for optional sender"
      ]
    },
    {
      "id": "EffOpenBook",
      "name": "Open Book",
      "description": [
        "Opens a written book to a player."
      ],
      "examples": [
        "open book player's tool to player"
      ],
      "since": [
        "2.5.1"
      ],
      "patterns": [
        "(open|show) book %itemtype% (to|for) %players%"
      ],
      "required plugins": [
        "Minecraft 1.14.2+"
      ]
    },
    {
      "id": "EffOpenInventory",
      "name": "Open/Close Inventory",
      "description": [
        "Opens an inventory to a player. The player can then access and modify the inventory as if it was a chest that he just opened.",
        "Please note that currently 'show' and 'open' have the same effect, but 'show' will eventually show an unmodifiable view of the inventory in the future."
      ],
      "examples": [
        "show the victim's inventory to the player",
        "open the player's inventory for the player"
      ],
      "since": [
        "2.0, 2.1.1 (closing), 2.2-Fixes-V10 (anvil), 2.4 (hopper, dropper, dispenser"
      ],
      "patterns": [
        "(open|show) (((crafting [table]|workbench)|chest|anvil|hopper|dropper|dispenser) (view|window|inventory|)|%inventory/inventorytype%) (to|for) %players%",
        "close [the] inventory [view] (to|of|for) %players%",
        "close %players%'[s] inventory [view]"
      ]
    },
    {
      "id": "EffLidState",
      "name": "Open/Close Lid",
      "description": [
        "Open or close the lid of the block(s)."
      ],
      "examples": [
        "open the lid of {_chest}",
        "close the lid of {_blocks::*}"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "(open|close) [the] lid[s] (of|for) %blocks%",
        "(open|close) %blocks%'[s] lid[s]"
      ]
    },
    {
      "id": "EffPathfind",
      "name": "Pathfind",
      "description": [
        "Make an entity pathfind towards a location or another entity. Not all entities can pathfind. If the pathfinding target is another entity, the entities may or may not continuously follow the target."
      ],
      "examples": [
        "make all creepers pathfind towards player",
        "make all cows stop pathfinding",
        "make event-entity pathfind towards player at speed 1"
      ],
      "since": [
        "2.7"
      ],
      "patterns": [
        "make %livingentities% (pathfind|move) to[wards] %livingentity/location% [at speed %number%]",
        "make %livingentities% stop (pathfinding|moving)"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "EffPersistent",
      "name": "Persistent",
      "description": [
        "Make entities, players, or leaves be persistent.",
        "Persistence of entities is whether they are retained through server restarts.",
        "Persistence of leaves is whether they should decay when not connected to a log block within 6 meters.",
        "Persistence of players is if the player's playerdata should be saved when they leave the server. Players' persistence is reset back to 'true' when they join the server.",
        "Passengers inherit the persistence of their vehicle, meaning a persistent zombie put on a non-persistent chicken will become non-persistent. This does not apply to players.",
        "By default, all entities are persistent."
      ],
      "examples": [
        "prevent all entities from persisting",
        "force {_leaves} to persist",
        "",
        "command /kickcheater <cheater: player>:",
        "\tpermission: op",
        "\ttrigger:",
        "\t\tprevent {_cheater} from persisting",
        "\t\tkick {_cheater}"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %entities/blocks% [not] persist[ent]",
        "force %entities/blocks% to [not] persist",
        "prevent %entities/blocks% from persisting"
      ]
    },
    {
      "id": "EffPlayingDead",
      "name": "Play Dead",
      "description": [
        "Make an axolotl start or stop playing dead."
      ],
      "examples": [
        "make last spawned axolotl play dead"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% (start playing|play) dead",
        "force %livingentities% to (start playing|play) dead",
        "make %livingentities% (stop playing|not play) dead",
        "force %livingentities% to (stop playing|not play) dead"
      ]
    },
    {
      "id": "EffVisualEffect",
      "name": "Play Effect",
      "description": [
        "Plays a visual effect at a given location or on a given entity.",
        "Please note that some effects can only be played on entities, e.g. wolf hearts or the hurt effect, and that these are always visible to all players."
      ],
      "examples": [
        "play wolf hearts on the clicked wolf",
        "show mob spawner flames at the targeted block to the player"
      ],
      "since": [
        "2.1"
      ],
      "patterns": [
        "(play|show) %visualeffects% (on|%directions%) %entities/locations% [(to %players%|in (radius|range) of %number%)]",
        "(play|show) %number% %visualeffects% (on|%directions%) %locations% [(to %players%|in (radius|range) of %number%)]"
      ]
    },
    {
      "id": "EffPlaySound",
      "name": "Play Sound",
      "description": [
        "Plays a sound at given location for everyone or just for given players, or plays a sound to specified players. Both Minecraft sound names and Spigot sound names are supported. Playing resource pack sounds are supported too. The sound category is 'master' by default. ",
        "",
        "When running 1.19+, playing a sound from an entity directly will result in the sound coming from said entity, even while moving.",
        "If the sound is custom, a location emitter will follow the entity. Do note that pitch and volume ",
        "are reflected based on the entity, and Minecraft may not use the values from this syntax.",
        "",
        "If using Paper 1.19.4+ or Adventure API 4.12.0+ you can utilize sound seeds. Minecraft sometimes have a set of sounds under one sound ID ",
        "that will randomly play, to counter this, you can directly state which seed to use.",
        "",
        "Please note that sound names can get changed in any Minecraft or Spigot version, or even removed from Minecraft itself."
      ],
      "examples": [
        "play sound \"block.note_block.pling\"",
        "play sound \"entity.experience_orb.pickup\" with volume 0.5 to the player",
        "play sound \"custom.music.1\" in jukebox category at {speakerBlock}",
        "play sound \"BLOCK_AMETHYST_BLOCK_RESONATE\" with seed 1 on target entity for the player #1.20.1+"
      ],
      "since": [
        "2.2-dev28, 2.4 (sound categories), 2.9 (sound seed & entity emitter)"
      ],
      "patterns": [
        "play sound[s] %strings% [[with] seed %number%] [(in|from) %soundcategory%] [(at|with) volume %number%] [(and|at|with) pitch %number%] (at|on|from) %locations/entities% [(to|for) %players%]",
        "play sound[s] %strings% [[with] seed %number%] [(in|from) %soundcategory%] [(at|with) volume %number%] [(and|at|with) pitch %number%] [(to|for) %players%] [(at|on|from) %locations/entities%]"
      ],
      "required plugins": [
        "Minecraft 1.18.1+ (entity emitters), Paper 1.19.4+ or Adventure API 4.12.0+ (sound seed)"
      ]
    },
    {
      "id": "EffPlayerInfoVisibility",
      "name": "Player Info Visibility",
      "description": [
        "Sets whether all player related information is hidden in the server list.",
        "The Vanilla Minecraft client will display ??? (dark gray) instead of player counts and will not show the",
        "hover hist when hiding player info.",
        "The version string can override the ???.",
        "Also the Online Players Count and",
        "Max Players expressions will return -1 when hiding player info."
      ],
      "examples": [
        "hide player info",
        "hide player related information in the server list",
        "reveal all player related info"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "hide [all] player [related] info[rmation] [(in|on|from) [the] server list]",
        "(show|reveal) [all] player [related] info[rmation] [(in|to|on|from) [the] server list]"
      ],
      "required plugins": [
        "Paper 1.12.2 or newer"
      ]
    },
    {
      "id": "EffPoison",
      "name": "Poison/Cure",
      "description": [
        "Poison or cure a creature."
      ],
      "examples": [
        "poison the player",
        "poison the victim for 20 seconds",
        "cure the player from poison"
      ],
      "since": [
        "1.3.2"
      ],
      "patterns": [
        "poison %livingentities% [for %timespan%]",
        "(cure|unpoison) %livingentities% [(from|of) poison]"
      ]
    },
    {
      "id": "EffPotion",
      "name": "Potion Effects",
      "description": [
        "Apply or remove potion effects to/from entities."
      ],
      "examples": [
        "apply ambient swiftness 2 to the player",
        "remove haste from the victim",
        "",
        "on join:",
        "\tapply infinite potion of strength of tier {strength::%uuid of player%} to the player",
        "\tapply potion of strength of tier {strength::%uuid of player%} to the player for 999 days # Before 1.19.4",
        "",
        "apply potion effects of player's tool to player",
        "apply haste potion of tier 3 without any particles whilst hiding the potion icon to the player # Hide potions"
      ],
      "since": [
        "2.0, 2.2-dev27 (ambient and particle-less potion effects), 2.5 (replacing existing effect), 2.5.2 (potion effects), 2.7 (icon and infinite)"
      ],
      "patterns": [
        "apply %potioneffects% to %livingentities%",
        "apply infinite [ambient] [potion of] %potioneffecttypes% [potion] [[[of] tier] %number%] [without [any] particles] [(whilst hiding [the]|without (the|a)) [potion] icon] to %livingentities% [replacing [the] existing effect]",
        "apply [ambient] [potion of] %potioneffecttypes% [potion] [[[of] tier] %number%] [without [any] particles] [(whilst hiding [the]|without (the|a)) [potion] icon] to %livingentities% [for %timespan%] [replacing [the] existing effect]"
      ]
    },
    {
      "id": "EffPullHookedEntity",
      "name": "Pull In Hooked Entity",
      "description": [
        "Pull the hooked entity to the player."
      ],
      "examples": [
        "on fishing state of caught entity:",
        "\tpull in hooked entity"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "(reel|pull) in hook[ed] entity"
      ]
    },
    {
      "id": "EffPush",
      "name": "Push",
      "description": [
        "Push entities around."
      ],
      "examples": [
        "push the player upwards",
        "push the victim downwards at speed 0.5"
      ],
      "since": [
        "1.4.6"
      ],
      "patterns": [
        "(push|thrust) %entities% %direction% [(at|with) (speed|velocity|force) %number%]"
      ]
    },
    {
      "id": "EffPvP",
      "name": "PvP",
      "description": [
        "Set the PvP state for a given world."
      ],
      "examples": [
        "enable PvP #(current world only)",
        "disable PvP in all worlds"
      ],
      "since": [
        "1.3.4"
      ],
      "patterns": [
        "enable PvP [in %worlds%]",
        "disable PVP [in %worlds%]"
      ]
    },
    {
      "id": "EffRegisterTag",
      "name": "Register Tag",
      "description": [
        "Registers a new tag containing either items or entity datas. Note that items will NOT keep any information other than their type, so adding `diamond sword named \"test\"` to a tag is the same as adding `diamond sword`",
        "Item tags should be used for contexts where the item is not placed down, while block tags should be used for contexts where the item is placed. For example, and item tag could be \"skript:edible\", while a block tag would be \"skript:needs_water_above\".",
        "All custom tags will be given the namespace \"skript\", followed by the name you give it. The name must only include the characters A to Z, 0 to 9, and '/', '.', '_', and '-'. Otherwise, the tag will not register.",
        "",
        "Please note that two tags can share a name if they are of different types. Registering a new tag of the same name and type will overwrite the existing tag. Tags will reset on server shutdown."
      ],
      "examples": [
        "register a new custom entity tag named \"fish\" using cod, salmon, tropical fish, and pufferfish",
        "register an item tag named \"skript:wasp_weapons/swords\" containing diamond sword and netherite sword",
        "register block tag named \"pokey\" containing sweet berry bush and bamboo sapling",
        "",
        "on player move:",
        "\tblock at player is tagged as tag \"skript:pokey\"",
        "\tdamage the player by 1 heart"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "register [a[n]] [custom] (item|block|entity [type]) tag named %string% (containing|using) %entitydatas/itemtypes%"
      ],
      "keywords": [
        "blocks",
        "minecraft tag",
        "type",
        "category"
      ]
    },
    {
      "id": "EffReleaseEntityStorage",
      "name": "Release From Entity Storage",
      "description": [
        "Releases the stored entities in an entity block storage (i.e. beehive).",
        "When using beehives, providing a timespan will prevent the released bees from re-entering the beehive for that amount of time.",
        "Due to unstable behaviour on older versions, this effect requires Minecraft version 1.21+."
      ],
      "examples": [
        "release the stored entities of {_beehive}",
        "release the entity storage of {_hive} for 5 seconds"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "(release|evict) [the] (stored entities|entity storage) of %blocks% [for %timespan%]"
      ],
      "required plugins": [
        "Minecraft 1.21"
      ]
    },
    {
      "id": "EffReplace",
      "name": "Replace",
      "description": [
        "Replaces all occurrences of a given text or regex with another text. Please note that you can only change variables and a few expressions, e.g. a message or a line of a sign."
      ],
      "examples": [
        "replace \"<item>\" in {_msg} with \"[%name of player's tool%]\"",
        "replace every \"&\" with \"§\" in line 1 of targeted block",
        "",
        "# Very simple chat censor",
        "on chat:",
        "\treplace all \"idiot\" and \"noob\" with \"****\" in the message",
        "\tregex replace \"\\b(idiot|noob)\\b\" with \"****\" in the message # Regex version using word boundaries for better results",
        "",
        "replace all stone and dirt in player's inventory and player's top inventory with diamond"
      ],
      "since": [
        "2.0, 2.2-dev24 (multiple strings, items in inventory), 2.5 (replace first, case sensitivity), 2.10 (regex)"
      ],
      "patterns": [
        "replace [(all|every)|[the] first] %strings% in %strings% with %string% [with case sensitivity]",
        "replace [(all|every)|[the] first] %strings% with %string% in %strings% [with case sensitivity]",
        "(replace [with|using] regex|regex replace) %strings% in %strings% with %string%",
        "(replace [with|using] regex|regex replace) %strings% with %string% in %strings%",
        "replace [all|every] %itemtypes% in %inventories% with %itemtype%",
        "replace [all|every] %itemtypes% with %itemtype% in %inventories%"
      ]
    },
    {
      "id": "EffReturn",
      "name": "Return",
      "description": [
        "Makes a trigger or a section (e.g. a function) return a value"
      ],
      "examples": [
        "function double(i: number) :: number:",
        "\treturn 2 * {_i}",
        "",
        "function divide(i: number) returns number:",
        "\treturn {_i} / 2"
      ],
      "since": [
        "2.2, 2.8.0 (returns aliases)"
      ],
      "patterns": [
        "return %objects%"
      ]
    },
    {
      "id": "EffRing",
      "name": "Ring Bell",
      "description": [
        "Causes a bell to ring.",
        "Optionally, the entity that rang the bell and the direction the bell should ring can be specified.",
        "A bell can only ring in two directions, and the direction is determined by which way the bell is facing.",
        "By default, the bell will ring in the direction it is facing."
      ],
      "examples": [
        "make player ring target-block"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "ring %blocks% [from [the]] [%direction%]",
        "(make|let) %entity% ring %blocks% [from [the]] [%direction%]"
      ],
      "required plugins": [
        "Spigot 1.19.4+"
      ]
    },
    {
      "id": "EffRotate",
      "name": "Rotate",
      "description": [
        "Rotates displays, quaternions, or vectors around an axis a set amount of degrees, or around all 3 axes at once.",
        "Vectors can only be rotated around the global X/Y/Z axes, or an arbitrary vector axis.",
        "Quaternions are more flexible, allowing rotation around the global or local X/Y/Z axes, arbitrary vectors, or all 3 local axes at once.",
        "Global axes are the ones in the Minecraft world. Local axes are relative to how the quaternion is already oriented.",
        "",
        "Rotating a display is a shortcut for rotating its left rotation. If the right rotation needs to be modified, it should be acquired, rotated, and re-set.",
        "",
        "Note that rotating a quaternion/display around a vector results in a rotation around the local vector, so results may not be what you expect. For example, rotating quaternions/displays around vector(1, 0, 0) is the same as rotating around the local X axis.",
        "The same applies to rotations by all three axes at once. In addition, rotating around all three axes of a quaternion/display at once will rotate in ZYX order, meaning the Z rotation will be applied first and the X rotation last."
      ],
      "examples": [
        "rotate {_quaternion} around x axis by 10 degrees",
        "rotate last spawned block display around y axis by 10 degrees",
        "rotate {_vector} around vector(1, 1, 1) by 45",
        "rotate {_quaternion} by x 45, y 90, z 135"
      ],
      "since": [
        "2.2-dev28, 2.10 (quaternions, displays)"
      ],
      "patterns": [
        "rotate %vectors/quaternions/displays% around [the] [global] (x|y|z)(-| )axis by %number%",
        "rotate %quaternions/displays% around [the|its|their] local (x|y|z)(-| )ax(i|e)s by %number%",
        "rotate %vectors/quaternions/displays% around [the] %vector% by %number%",
        "rotate %quaternions/displays% by x %number%, y %number%(, [and]| and) z %number%"
      ]
    },
    {
      "id": "EffRun",
      "name": "Run (Experimental)",
      "description": [
        "Executes a task (a function). Any returned result is discarded."
      ],
      "examples": [
        "set {_function} to the function named \"myFunction\"",
        "run {_function}",
        "run {_function} with arguments {_things::*}"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "run %executable% [with arg[ument]s %objects%]",
        "execute %executable% [with arg[ument]s %objects%]"
      ],
      "keywords": [
        "run",
        "execute",
        "reflection",
        "function"
      ]
    },
    {
      "id": "EffWorldSave",
      "name": "Save World",
      "description": [
        "Save all worlds or a given world manually.",
        "Note: saving many worlds at once may possibly cause the server to freeze."
      ],
      "examples": [
        "save \"world_nether\"",
        "save all worlds"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "save [[the] world[s]] %worlds%"
      ]
    },
    {
      "id": "EffSendBlockChange",
      "name": "Send Block Change",
      "description": [
        "Makes a player see a block as something it really isn't. BlockData support is only for MC 1.13+"
      ],
      "examples": [
        "make player see block at player as dirt",
        "make player see target block as campfire[facing=south]"
      ],
      "since": [
        "2.2-dev37c, 2.5.1 (block data support)"
      ],
      "patterns": [
        "make %players% see %blocks% as %itemtype/blockdata%"
      ]
    },
    {
      "id": "EffSendResourcePack",
      "name": "Send Resource Pack",
      "description": [
        "Request that the player's client download and switch resource packs. The client will download ",
        "the resource pack in the background, and will automatically switch to it once the download is complete. ",
        "The URL must be a direct download link.",
        "",
        "The hash is used for caching, the player won't have to re-download the resource pack that way. ",
        "The hash must be SHA-1, you can get SHA-1 hash of your resource pack using ",
        "this online tool.",
        "",
        "The resource pack request action can be used to check ",
        "status of the sent resource pack request."
      ],
      "examples": [
        "on join:",
        "\tsend the resource pack from \"URL\" with hash \"hash\" to the player"
      ],
      "since": [
        "2.4"
      ],
      "patterns": [
        "send [the] resource pack [from [[the] URL]] %string% to %players%",
        "send [the] resource pack [from [[the] URL]] %string% with hash %string% to %players%"
      ]
    },
    {
      "id": "EffShear",
      "name": "Shear",
      "description": [
        "Shears or un-shears a shearable entity with drops by shearing and a 'sheared' sound. Using with 'force' will force this effect despite the entity's 'shear state'.",
        "\nPlease note that..:",
        "\n- If your server is not running with Paper 1.19.4 or higher, this effect will only change its 'shear state', and the 'force' effect is unavailable",
        "\n- Force-shearing or un-shearing on a sheared mushroom cow is not possible"
      ],
      "examples": [
        "on rightclick on a sheep holding a sword:",
        "\tshear the clicked sheep",
        "\tchance of 10%",
        "\tforce shear the clicked sheep"
      ],
      "since": [
        "2.0 (cows, sheep & snowmen), 2.8.0 (all shearable entities)"
      ],
      "patterns": [
        "[force] shear %livingentities%",
        "un[-]shear %livingentities%"
      ],
      "required plugins": [
        "Paper 1.19.4+ (all shearable entities)"
      ]
    },
    {
      "id": "EffSilence",
      "name": "Silence Entity",
      "description": [
        "Controls whether or not an entity is silent."
      ],
      "examples": [
        "make target entity silent"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "silence %entities%",
        "unsilence %entities%",
        "make %entities% silent",
        "make %entities% not silent"
      ]
    },
    {
      "id": "EffSort",
      "name": "Sort",
      "description": [
        "Sorts a list variable using either the natural ordering of the contents or the results of the given expression.\nBe warned, this will overwrite the indices of the list variable.\n\nWhen using the full sort %~objects% (by|based on) <expression> pattern,\nthe input expression can be used to refer to the current item being sorted.\n(See input expression for more information.)"
      ],
      "examples": [
        "set {_words::*} to \"pineapple\", \"banana\", \"yoghurt\", and \"apple\"",
        "sort {_words::*} # alphabetical sort",
        "sort {_words::*} by length of input # shortest to longest",
        "sort {_words::*} in descending order by length of input # longest to shortest",
        "sort {_words::*} based on {tastiness::%input%} # sort based on custom value"
      ],
      "since": [
        "2.9.0, 2.10 (sort order)"
      ],
      "patterns": [
        "sort %objects% [in (descending|ascending) order] [(by|based on) <.+>]"
      ],
      "keywords": [
        "input"
      ]
    },
    {
      "id": "EffSprinting",
      "name": "Sprinting",
      "description": [
        "Make a player start or stop sprinting.",
        "If the player is not moving when this effect is used, they will be put in sprint mode for a tick and then stopped (this causes the FOV to change). Using it a second time, without the player manually sprinting in between, causes the player to stay in sprint mode, with some quirks.",
        " - Particles may not be produced under the player's feet.",
        " - The player will not exit the sprinting state if they stop moving.",
        " - Restrictions like low hunger will not prevent the player from sprinting",
        " - The player pressing shift will stop them sprinting, and pressing sprint will re-assert normal sprinting behavior",
        "Using this effect two or more consecutive times on a stationary player produces undefined behavior and should not be relied on."
      ],
      "examples": [
        "make player start sprinting",
        "force player to start sprinting"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %players% (start sprinting|sprint)",
        "force %players% to (start sprinting|sprint)",
        "make %players% (stop sprinting|not sprint)",
        "force %players% to (stop sprinting|not sprint)"
      ]
    },
    {
      "id": "EffStopServer",
      "name": "Stop Server",
      "description": [
        "Stops or restarts the server. If restart is used when the restart-script spigot.yml option isn't defined, the server will stop instead."
      ],
      "examples": [
        "stop the server",
        "restart server"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "(stop|shut[ ]down) [the] server",
        "restart [the] server"
      ]
    },
    {
      "id": "EffStopSound",
      "name": "Stop Sound",
      "description": [
        "Stops specific or all sounds from playing to a group of players. Both Minecraft sound names and Spigot sound names are supported. Resource pack sounds are supported too. The sound category is 'master' by default. A sound can't be stopped from a different category. ",
        "",
        "Please note that sound names can get changed in any Minecraft or Spigot version, or even removed from Minecraft itself."
      ],
      "examples": [
        "stop sound \"block.chest.open\" for the player",
        "stop playing sounds \"ambient.underwater.loop\" and \"ambient.underwater.loop.additions\" to the player",
        "stop all sounds for all players",
        "stop sound in the record category"
      ],
      "since": [
        "2.4, 2.7 (stop all sounds)"
      ],
      "patterns": [
        "stop (all sound[s]|sound[s] %strings%) [(in [the]|from) %soundcategory%] [(from playing to|for) %players%]",
        "stop playing sound[s] %strings% [(in [the]|from) %soundcategory%] [(to|for) %players%]"
      ],
      "required plugins": [
        "MC 1.17.1 (stop all sounds)"
      ]
    },
    {
      "id": "EffSwingHand",
      "name": "Swing Hand",
      "description": [
        "Makes an entity swing their hand. This does nothing if the entity does not have an animation for swinging their hand."
      ],
      "examples": [
        "make player swing their main hand"
      ],
      "since": [
        "2.5.1"
      ],
      "patterns": [
        "make %livingentities% swing [their] [main] hand",
        "make %livingentities% swing [their] off[ ]hand"
      ],
      "required plugins": [
        "Minecraft 1.15.2+"
      ]
    },
    {
      "id": "EffTame",
      "name": "Tame / Untame",
      "description": [
        "Tame a tameable entity (horse, parrot, cat, etc.)."
      ],
      "examples": [
        "tame {_horse}",
        "untame {_horse}"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[un](tame|domesticate) %entities%"
      ]
    },
    {
      "id": "EffTeleport",
      "name": "Teleport",
      "description": [
        "Teleport an entity to a specific location. ",
        "This effect is delayed by default on Paper, meaning certain syntax such as the return effect for functions cannot be used after this effect.",
        "The keyword 'force' indicates this effect will not be delayed, ",
        "which may cause lag spikes or server crashes when using this effect to teleport entities to unloaded chunks.",
        "Teleport flags are settings to retain during a teleport. Such as direction, passengers, x coordinate, etc."
      ],
      "examples": [
        "teleport the player to {home::%uuid of player%}",
        "teleport the attacker to the victim",
        "",
        "on dismount:",
        "\tcancel event",
        "\tteleport the player to {server::spawn} retaining vehicle and passengers"
      ],
      "since": [
        "1.0, 2.10 (flags)"
      ],
      "patterns": [
        "[force] teleport %entities% (to|%direction%) %location% [[while] retaining %teleportflags%]"
      ],
      "required plugins": [
        "Paper 1.19+ (teleport flags)"
      ]
    },
    {
      "id": "EffTextDisplayDropShadow",
      "name": "Text Display Drop Shadow",
      "description": [
        "Applies or removes drop shadow from the displayed text on a text display."
      ],
      "examples": [
        "apply drop shadow to last spawned text display",
        "if {_display} has drop shadow:",
        "\tremove drop shadow from the text of {_display}"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "(apply|add) (drop|text) shadow to [[the] text of] %displays%",
        "(apply|add) (drop|text) shadow to %displays%'[s] text",
        "(remove|clear) (drop|text) shadow from [[the] text of] %displays%",
        "(remove|clear) (drop|text) shadow from %displays%'[s] text"
      ]
    },
    {
      "id": "EffTextDisplaySeeThroughBlocks",
      "name": "Text Display See Through Blocks",
      "description": [
        "Forces a text display to either be or not be visible through blocks."
      ],
      "examples": [
        "force last spawned text display to be visible through walls",
        "prevent all text displays from being visible through walls"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "make %displays% visible through (blocks|walls)",
        "force %displays% to be visible through (blocks|walls)",
        "(prevent|block) %displays% from being (visible|seen) through (blocks|walls)"
      ]
    },
    {
      "id": "EffResetTitle",
      "name": "Title - Reset",
      "description": [
        "Resets the title of the player to the default values."
      ],
      "examples": [
        "reset the titles of all players",
        "reset the title"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "reset [the] title[s] [of %players%]",
        "reset [the] %players%'[s] title[s]"
      ]
    },
    {
      "id": "EffSendTitle",
      "name": "Title - Send",
      "description": [
        "Sends a title/subtitle to the given player(s) with optional fadein/stay/fadeout times for Minecraft versions 1.11 and above. ",
        "",
        "If you're sending only the subtitle, it will be shown only if there's a title displayed at the moment, otherwise it will be sent with the next title. To show only the subtitle, use: send title \" \" with subtitle \"yourtexthere\" to player.",
        "",
        "Note: if no input is given for the times, it will keep the ones from the last title sent, use the reset title effect to restore the default values."
      ],
      "examples": [
        "send title \"Competition Started\" with subtitle \"Have fun, Stay safe!\" to player for 5 seconds",
        "send title \"Hi %player%\" to player",
        "send title \"Loot Drop\" with subtitle \"starts in 3 minutes\" to all players",
        "send title \"Hello %player%!\" with subtitle \"Welcome to our server\" to player for 5 seconds with fadein 1 second and fade out 1 second",
        "send subtitle \"Party!\" to all players"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "send title %string% [with subtitle %string%] [to %players%] [for %timespan%] [with fade[(-| )]in %timespan%] [[and] [with] fade[(-| )]out %timespan%]",
        "send subtitle %string% [to %players%] [for %timespan%] [with fade[(-| )]in %timespan%] [[and] [with] fade[(-| )]out %timespan%]"
      ]
    },
    {
      "id": "EffToggle",
      "name": "Toggle",
      "description": [
        "Toggle the state of a block."
      ],
      "examples": [
        "# use arrows to toggle switches, doors, etc.",
        "on projectile hit:",
        "\tprojectile is arrow",
        "\ttoggle the block at the arrow"
      ],
      "since": [
        "1.4"
      ],
      "patterns": [
        "(close|turn off|de[-]activate) %blocks%",
        "(toggle|switch) [[the] state of] %blocks%",
        "(open|turn on|activate) %blocks%"
      ]
    },
    {
      "id": "EffCustomName",
      "name": "Toggle Custom Name Visibility",
      "description": [
        "Toggles the custom name visibility of an entity."
      ],
      "examples": [
        "show the custom name of event-entity",
        "hide target's display name"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "(show|hide) [the] (custom|display)[ ]name of %entities%",
        "(show|hide) %entities%'[s] (custom|display)[ ]name"
      ]
    },
    {
      "id": "EffToggleFlight",
      "name": "Toggle Flight",
      "description": [
        "Toggle the flight mode of a player."
      ],
      "examples": [
        "allow flight to event-player"
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "(allow|enable) (fly|flight) (for|to) %players%",
        "(disallow|disable) (fly|flight) (for|to) %players%"
      ]
    },
    {
      "id": "EffToggleCanPickUpItems",
      "name": "Toggle Picking Up Items",
      "description": [
        "Determines whether living entities are able to pick up items or not"
      ],
      "examples": [
        "forbid player from picking up items",
        "send \"You can no longer pick up items!\" to player",
        "",
        "on drop:",
        "\tif player can't pick\tup items:",
        "\t\tallow player to pick up items"
      ],
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "allow %livingentities% to pick([ ]up items| items up)",
        "(forbid|disallow) %livingentities% (from|to) pick([ing | ]up items|[ing] items up)"
      ]
    },
    {
      "id": "EffTransform",
      "name": "Transform List",
      "description": [
        "Transforms (or 'maps') a list's values using a given expression. This is akin to looping over the list and setting each value to a modified version of itself.",
        "Evaluates the given expression for each element in the list, replacing the original element with the expression's result.",
        "If the given expression returns a single value, the indices of the list will not change. If the expression returns multiple values, then then indices will be reset as a single index cannot contain multiple values.",
        "Only variable lists can be transformed with this effect. For other lists, see the transform expression."
      ],
      "examples": [
        "set {_a::*} to 1, 2, and 3",
        "transform {_a::*} using input * 2",
        "# {_a::*} is now 2, 4, and 6",
        "",
        "# get a list of the sizes of all clans without manually looping",
        "set {_clan-sizes::*} to indices of {clans::*}",
        "transform {_clan-sizes::*} using {clans::%input%::size}",
        "",
        "# set all existing values of a list to 0:",
        "transform {_list::*} to 0"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "(transform|map) %objects% (using|with) <.+>"
      ],
      "keywords": [
        "input"
      ]
    },
    {
      "id": "EffTree",
      "name": "Tree",
      "description": [
        "Creates a tree.",
        "This may require that there is enough space above the given location and that the block below is dirt/grass, but it is possible that the tree will just grow anyways, possibly replacing every block in its path."
      ],
      "examples": [
        "grow a tall redwood tree above the clicked block"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "(grow|create|generate) tree [of type %structuretype%] %directions% %locations%",
        "(grow|create|generate) %structuretype% %directions% %locations%"
      ]
    },
    {
      "id": "EffBlockUpdate",
      "name": "Update Block",
      "description": [
        "Updates the blocks by setting them to a selected block",
        "Using 'without physics' will not send updates to the surrounding blocks of the blocks being set.",
        "Example: Updating a block next to a sand block in the air 'without physics' will not cause the sand block to fall."
      ],
      "examples": [
        "update {_blocks::*} as gravel",
        "update {_blocks::*} to be sand without physics updates",
        "update {_blocks::*} as stone without neighbouring updates"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "update %blocks% (as|to be) %blockdata% [without [neighbo[u]r[ing]|adjacent] [physic[s]] update[s]]"
      ]
    },
    {
      "id": "EffVehicle",
      "name": "Vehicle",
      "description": [
        "Makes an entity ride another entity, e.g. a minecart, a saddled pig, an arrow, etc."
      ],
      "examples": [
        "make the player ride a saddled pig",
        "make the attacker ride the victim"
      ],
      "since": [
        "2.0"
      ],
      "patterns": [
        "(make|let|force) %entities% [to] (ride|mount) [(in|on)] %entity/entitydata%",
        "(make|let|force) %entities% [to] (dismount|(dismount|leave) (from|of|) (any|the[ir]|his|her|) vehicle[s])",
        "(eject|dismount) (any|the|) passenger[s] (of|from) %entities%"
      ]
    },
    {
      "id": "EffWakeupSleep",
      "name": "Wake And Sleep",
      "description": [
        "Make bats and foxes sleep or wake up.",
        "Make villagers sleep by providing a location of a bed.",
        "Make players sleep by providing a location of a bed. Using 'with force' will bypass \"nearby monsters\" ,the max distance, allowing players to sleep even if the bed is far away, and lets players sleep in the nether and end. Does not work if the location of the bed is not in the world the player is currently in.",
        "Using 'without spawn location update' will make players wake up without setting their spawn location to the bed."
      ],
      "examples": [
        "make {_fox} go to sleep",
        "make {_bat} stop sleeping",
        "make {_villager} start sleeping at location(0, 0, 0)",
        "make player go to sleep at location(0, 0, 0) with force",
        "make player wake up without spawn location update"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "make %livingentities% (start sleeping|[go to] sleep) [%direction% %location%]",
        "force %livingentities% to (start sleeping|[go to] sleep) [%direction% %location%]",
        "make %players% (start sleeping|[go to] sleep) %direction% %location% (with force)",
        "force %players% to (start sleeping|[go to] sleep) %direction% %location% (with force)",
        "make %livingentities% (stop sleeping|wake up)",
        "force %livingentities% to (stop sleeping|wake up)",
        "make %players% (stop sleeping|wake up) (without spawn [location] update)",
        "force %players% to (stop sleeping|wake up) (without spawn [location] update)"
      ]
    },
    {
      "id": "EffZombify",
      "name": "Zombify Villager",
      "description": [
        "Turn a villager into a zombie villager. Cure a zombie villager immediately or after specified amount of time.",
        "This effect removes the old entity and creates a new entity.",
        "Zombifying a villager stored in a variable will update the variable to the new zombie villager.",
        "Curing a zombie villager does not update the variable."
      ],
      "examples": [
        "zombify last spawned villager",
        "",
        "set {_villager} to last spawned villager",
        "zombify {_villager}",
        "if {_villager} is a zombie villager:",
        "\t# This will pass because '{_villager}' gets changed to the new zombie villager",
        "",
        "set {_villager} to last spawned villager",
        "zombify last spawned villager",
        "if {_villager} is a zombie villager:",
        "\t# This will fail because the variable was not provided when zombifying",
        "",
        "unzombify {_zombieVillager}",
        "unzombify {_zombieVillager} after 2 seconds"
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "zombify %livingentities%",
        "unzombify %livingentities% [(in|after) %timespan%]"
      ]
    },
    {
      "id": "EffOp",
      "name": "op/deop",
      "description": [
        "Grant/revoke a user operator state."
      ],
      "examples": [
        "op the player",
        "deop all players"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "[de[-]]op %offlineplayers%"
      ]
    }
  ],
  "expressions": [
    {
      "id": "ExprAbsorbedBlocks",
      "name": "Absorbed blocks",
      "description": [
        "The blocks absorbed by a sponge block."
      ],
      "examples": [
        "the absorbed blocks"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Block",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] absorbed blocks"
      ]
    },
    {
      "id": "ExprActiveItem",
      "name": "Active Item",
      "description": [
        "Returns the item the entities are currently using (ie: the food they're eating, the bow they're drawing back, etc.). This cannot be changed. If an entity is not using any item, this will return null."
      ],
      "examples": [
        "on damage of player:",
        "\tif victim's active tool is a bow:",
        "\t\tinterrupt player's active item use"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Item",
      "patterns": [
        "[the] (raised|active) (tool|item|weapon) of %livingentities%",
        "%livingentities%'[s] (raised|active) (tool|item|weapon)"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "ExprEntityItemUseTime",
      "name": "Active Item Use Time",
      "description": [
        "Returns the time that the entities have either spent using an item, or the time left for them to finish using an item.",
        "If an entity is not using any item, this will return 0 seconds."
      ],
      "examples": [
        "on right click:",
        "\tbroadcast player's remaining item use time",
        "\twait 1 second",
        "\tbroadcast player's item use time"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Timespan",
      "patterns": [
        "[the] [elapsed|remaining] (item|tool) us[ag]e time of %livingentities%",
        "%livingentities%'[s] [elapsed|remaining] (item|tool) us[ag]e time"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "ExprAffectedEntities",
      "name": "Affected Entities",
      "description": [
        "The affected entities in the area cloud effect event."
      ],
      "examples": [
        "on area cloud effect:",
        "\tloop affected entities:",
        "\t\tif loop-value is a player:",
        "\t\t\tsend \"WARNING: you've step on an area effect cloud!\" to loop-value"
      ],
      "since": [
        "2.4"
      ],
      "return type": "Living Entity",
      "changers": [
        "add",
        "delete",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] affected entities"
      ]
    },
    {
      "id": "ExprAge",
      "name": "Age of Block/Entity",
      "description": [
        "Returns the age or maximum age of blocks and age for entities (there in no maximum age for entities).",
        "For blocks, 'Age' represents the different growth stages that a crop-like block can go through. A value of 0 indicates that the crop was freshly planted, whilst a value equal to 'maximum age' indicates that the crop is ripe and ready to be harvested.",
        "For entities, 'Age' represents the time left for them to become adults and it's in minus increasing to be 0 which means they're adults, e.g. A baby cow needs 20 minutes to become an adult which equals to 24,000 ticks so their age will be -24000 once spawned."
      ],
      "examples": [
        "# Set targeted crop to fully grown crop",
        "set age of targeted block to maximum age of targeted block",
        " ",
        "# Spawn a baby cow that will only need 1 minute to become an adult",
        "spawn a baby cow at player",
        "set age of last spawned entity to -1200 # in ticks = 60 seconds"
      ],
      "since": [
        "2.7"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [max[imum]] age of %blocks/entities%",
        "%blocks/entities%'[s] [max[imum]] age"
      ]
    },
    {
      "id": "ExprAllBannedEntries",
      "name": "All Banned Players/IPs",
      "description": [
        "Obtains the list of all banned players or IP addresses."
      ],
      "examples": [
        "command /banlist:",
        "\ttrigger:",
        "\t\tsend all the banned players"
      ],
      "since": [
        "2.7"
      ],
      "return type": "Object",
      "patterns": [
        "[all [[of] the]|the] banned (players|(ips|ip addresses))"
      ]
    },
    {
      "id": "ExprOps",
      "name": "All Operators",
      "description": [
        "The list of operators on the server."
      ],
      "examples": [
        "set {_ops::*} to all operators"
      ],
      "since": [
        "2.7"
      ],
      "return type": "Offline Player",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[all [[of] the]|the] [server] [non(-| )]op[erator]s"
      ]
    },
    {
      "id": "ExprPermissions",
      "name": "All Permissions",
      "description": [
        "Returns all permissions of the defined player(s). Note that the modifications to resulting list do not actually change permissions."
      ],
      "examples": [
        "set {_permissions::*} to all permissions of the player"
      ],
      "since": [
        "2.2-dev33"
      ],
      "return type": "Text",
      "patterns": [
        "[(all [[of] the]|the)] permissions (from|of) %players%",
        "[(all [[of] the]|the)] %players%'[s] permissions"
      ]
    },
    {
      "id": "ExprScriptsOld",
      "name": "All Scripts",
      "description": [
        "Returns all of the scripts, or just the enabled or disabled ones."
      ],
      "examples": [
        "command /scripts:",
        "\ttrigger:",
        "\t\tsend \"All Scripts: %scripts%\" to player",
        "\t\tsend \"Loaded Scripts: %enabled scripts%\" to player",
        "\t\tsend \"Unloaded Scripts: %disabled scripts%\" to player"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Text",
      "patterns": [
        "[all [of the]|the] scripts [without ([subdirectory] paths|parents)]",
        "[all [of the]|the] (enabled|loaded) scripts [without ([subdirectory] paths|parents)]",
        "[all [of the]|the] (disabled|unloaded) scripts [without ([subdirectory] paths|parents)]"
      ]
    },
    {
      "id": "ExprScripts",
      "name": "All Scripts (Experimental)",
      "description": [
        "Returns all of the scripts, or just the enabled or disabled ones."
      ],
      "examples": [
        "command /scripts:",
        "\ttrigger:",
        "\t\tsend \"All Scripts: %scripts%\" to player",
        "\t\tsend \"Loaded Scripts: %enabled scripts%\" to player",
        "\t\tsend \"Unloaded Scripts: %disabled scripts%\" to player"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Script",
      "patterns": [
        "[all [[of] the]|the] scripts",
        "[all [[of] the]|the] (enabled|loaded) scripts",
        "[all [[of] the]|the] (disabled|unloaded) scripts"
      ]
    },
    {
      "id": "ExprTagsOfType",
      "name": "All Tags of a Type",
      "description": [
        "Returns all the tags.",
        "`minecraft tag` will return only the vanilla tags, `datapack tag` will return only datapack-provided tags, `paper tag` will return only Paper's custom tags (if you are running Paper), and `custom tag` will look in the \"skript\" namespace for custom tags you've registered.",
        "You can also filter by tag types using \"item\", \"block\", or \"entity\"."
      ],
      "examples": [
        "broadcast minecraft tags",
        "send paper entity tags",
        "broadcast all block tags"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Minecraft Tag",
      "patterns": [
        "[all [[of] the]|the] [minecraft|datapack|paper|(custom|skript)] [item|block|entity [type]] tags"
      ],
      "required plugins": [
        "Paper (paper tags)"
      ],
      "keywords": [
        "blocks",
        "minecraft tag",
        "type",
        "category"
      ]
    },
    {
      "id": "ExprAllCommands",
      "name": "All commands",
      "description": [
        "Returns all registered commands or all script commands."
      ],
      "examples": [
        "send \"Number of all commands: %size of all commands%\"",
        "send \"Number of all script commands: %size of all script commands%\""
      ],
      "since": [
        "2.6"
      ],
      "return type": "Text",
      "patterns": [
        "[(all|the|all [of] the)] [registered] [(script)] commands"
      ]
    },
    {
      "id": "ExprDuplicateCooldown",
      "name": "Allay Duplication Cooldown",
      "description": [
        "The cooldown time until an allay can duplicate again naturally.",
        "Resetting the cooldown time will set the cooldown time to the same amount of time after an allay has duplicated."
      ],
      "examples": [
        "set {_time} to the duplicate cooldown of last spawned allay",
        "add 5 seconds to the duplication cool down time of last spawned allay",
        "remove 3 seconds from the duplicating cooldown time of last spawned allay",
        "clear the clone cool down of last spawned allay",
        "reset the cloning cool down time of last spawned allay"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (duplicat(e|ing|ion)|clon(e|ing)) cool[ ]down [time] [of %livingentities%]",
        "%livingentities%'[s] (duplicat(e|ing|ion)|clon(e|ing)) cool[ ]down [time]"
      ]
    },
    {
      "id": "ExprAllayJukebox",
      "name": "Allay Target Jukebox",
      "description": [
        "The location of the jukebox an allay is set to."
      ],
      "examples": [
        "set {_loc} to the target jukebox of last spawned allay"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Location",
      "patterns": [
        "[the] target jukebox [of %livingentities%]",
        "%livingentities%'[s] target jukebox"
      ]
    },
    {
      "id": "ExprARGB",
      "name": "Alpha/Red/Green/Blue Color Value",
      "description": [
        "The alpha, red, green, or blue value of colors. Ranges from 0 to 255.",
        "Alpha represents opacity."
      ],
      "examples": [
        "broadcast red value of rgb(100, 0, 50) # sends '100'",
        "set {_red} to red's red value + 10"
      ],
      "since": [
        "2.10"
      ],
      "return type": "integer",
      "patterns": [
        "[the] (alpha|red|green|blue) (value|component) of %colors%",
        "%colors%'[s] (alpha|red|green|blue) (value|component)"
      ],
      "keywords": [
        "ARGB",
        "RGB",
        "color",
        "colour"
      ]
    },
    {
      "id": "ExprAlphabetList",
      "name": "Alphabetical Sort",
      "description": [
        "Sorts given strings in alphabetical order."
      ],
      "examples": [
        "set {_list::*} to alphabetically sorted {_strings::*}"
      ],
      "since": [
        "2.2-dev18b"
      ],
      "return type": "Text",
      "patterns": [
        "alphabetically sorted %strings%"
      ]
    },
    {
      "id": "ExprAltitude",
      "name": "Altitude",
      "description": [
        "Effectively an alias of 'y-coordinate of …', it represents the height of some object above bedrock."
      ],
      "examples": [
        "on damage:",
        "\taltitude of the attacker is higher than the altitude of the victim",
        "\tset damage to damage * 1.2"
      ],
      "since": [
        "1.4.3"
      ],
      "return type": "Number",
      "patterns": [
        "[the] altitude[s] of %locations%",
        "%locations%'[s] altitude[s]"
      ]
    },
    {
      "id": "ExprAmount",
      "name": "Amount",
      "description": [
        "The amount or size of something.",
        "Please note that amount of %items% will not return the number of items, but the number of stacks, e.g. 1 for a stack of 64 torches. To get the amount of items in a stack, see the item amount expression.",
        "",
        "Also, you can get the recursive size of a list, which will return the recursive size of the list with sublists included, e.g.",
        "",
        "<pre>",
        "{list::*} Structure<br>",
        "  ├──── {list::1}: 1<br>",
        "  ├──── {list::2}: 2<br>",
        "  │     ├──── {list::2::1}: 3<br>",
        "  │     │    └──── {list::2::1::1}: 4<br>",
        "  │     └──── {list::2::2}: 5<br>",
        "  └──── {list::3}: 6",
        "</pre>",
        "",
        "Where using %size of {list::*}% will only return 3 (the first layer of indices only), while %recursive size of {list::*}% will return 6 (the entire list)",
        "Please note that getting a list's recursive size can cause lag if the list is large, so only use this expression if you need to!"
      ],
      "examples": [
        "message \"There are %number of all players% players online!\""
      ],
      "since": [
        "1.0"
      ],
      "return type": "Number",
      "patterns": [
        "[the] (amount|number|size) of %numbered%",
        "[the] (amount|number|size) of %objects%",
        "[the] recursive (amount|number|size) of %objects%"
      ]
    },
    {
      "id": "ExprAmountOfItems",
      "name": "Amount of Items",
      "description": [
        "Counts how many of a particular item type are in a given inventory."
      ],
      "examples": [
        "message \"You have %number of ores in the player's inventory% ores in your inventory.\""
      ],
      "since": [
        "2.0"
      ],
      "return type": "long",
      "patterns": [
        "[the] (amount|number) of %itemtypes% (in|of) %inventories%"
      ]
    },
    {
      "id": "ExprAngle",
      "name": "Angle",
      "description": [
        "Represents the passed number value in degrees.",
        "If radians is specified, converts the passed value to degrees. This conversion may not be entirely accurate, due to floating point precision."
      ],
      "examples": [
        "set {_angle} to 90 degrees",
        "{_angle} is 90 # true",
        "180 degrees is pi # true",
        "pi radians is 180 degrees # true"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Number",
      "patterns": [
        "%number% [in] deg[ree][s]",
        "%number% [in] rad[ian][s]",
        "%numbers% in deg[ree][s]",
        "%numbers% in rad[ian][s]"
      ]
    },
    {
      "id": "ExprAnvilRepairCost",
      "name": "Anvil Repair Cost",
      "description": [
        "Returns the experience cost (in levels) to complete the current repair or the maximum experience cost (in levels) to be allowed by the current repair.",
        "The default value of max cost set by vanilla Minecraft is 40."
      ],
      "examples": [
        "on inventory click:",
        "\tif {AnvilRepairSaleActive} = true:",
        "\t\twait a tick # recommended, to avoid client bugs",
        "\t\tset anvil repair cost to anvil repair cost * 50%",
        "\t\tsend \"Anvil repair sale is ON!\" to player",
        "",
        "on inventory click:",
        "\tplayer have permission \"anvil.repair.max.bypass\"",
        "\tset max repair cost of event-inventory to 99999"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] [anvil] [item] [max[imum]] repair cost [of %inventories%]",
        "%inventories%'[s] [anvil] [item] [max[imum]] repair cost"
      ]
    },
    {
      "id": "ExprAnvilText",
      "name": "Anvil Text Input",
      "description": [
        "An expression to get the name to be applied to an item in an anvil inventory."
      ],
      "examples": [
        "on inventory click:",
        "\ttype of event-inventory is anvil inventory",
        "\tif the anvil text input of the event-inventory is \"FREE OP\":",
        "\t\tban player"
      ],
      "since": [
        "2.7"
      ],
      "return type": "Text",
      "patterns": [
        "[the] anvil [inventory] (rename|text) input of %inventories%",
        "%inventories%'[s] anvil [inventory] (rename|text) input"
      ]
    },
    {
      "id": "ExprAnyOf",
      "name": "Any Of",
      "description": [
        "Returns an 'or list' composed of the given objects. For example, `any of (1, 2, and 3)` is equivalent to `1, 2, or 3`",
        "Useful when doing comparisons with variable lists."
      ],
      "examples": [
        "if any of {_numbers::*} are 1:",
        "if any of {teamA::*} are within location(0, 0, 0) and location(10, 10, 10):"
      ],
      "return type": "Object",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "reset",
        "set"
      ],
      "patterns": [
        "(any [one]|one) of [the] %objects%"
      ]
    },
    {
      "id": "ExprAppliedEffect",
      "name": "Applied Beacon Effect",
      "description": [
        "The type of effect applied by a beacon."
      ],
      "examples": [
        "on beacon effect:",
        "\tif the applied effect is primary beacon effect:",
        "\t\tbroadcast \"Is Primary\"",
        "\telse if applied effect = secondary effect:",
        "\t\tbroadcast \"Is Secondary\""
      ],
      "since": [
        "2.10"
      ],
      "return type": "Potion Effect Type",
      "patterns": [
        "[the] applied [beacon] effect"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "ExprAppliedEnchantments",
      "name": "Applied Enchantments",
      "description": [
        "The applied enchantments in an enchant event.",
        " Deleting or removing the applied enchantments will prevent the item's enchantment."
      ],
      "examples": [
        "on enchant:",
        "\tset the applied enchantments to sharpness 10 and fire aspect 5"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Enchantment Type",
      "changers": [
        "add",
        "delete",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] applied enchant[ment]s"
      ]
    },
    {
      "id": "ExprArgument",
      "name": "Argument",
      "description": [
        "Usable in script commands and command events. Holds the value of an argument given to the command, e.g. if the command \"/tell <player> <text>\" is used like \"/tell Njol Hello Njol!\" argument 1 is the player named \"Njol\" and argument 2 is \"Hello Njol!\".",
        "One can also use the type of the argument instead of its index to address the argument, e.g. in the above example 'player-argument' is the same as 'argument 1'.",
        "Please note that specifying the argument type is only supported in script commands."
      ],
      "examples": [
        "give the item-argument to the player-argument",
        "damage the player-argument by the number-argument",
        "give a diamond pickaxe to the argument",
        "add argument 1 to argument 2",
        "heal the last argument"
      ],
      "since": [
        "1.0, 2.7 (support for command events)"
      ],
      "return type": "Object",
      "patterns": [
        "[the] last arg[ument]",
        "[the] arg[ument](-| )<(\\d+)>",
        "[the] <(\\d*1)st|(\\d*2)nd|(\\d*3)rd|(\\d*[4-90])th> arg[ument][s]",
        "[(all [[of] the]|the)] arg[ument][(s)]",
        "[the] %*classinfo%( |-)arg[ument][( |-)<\\d+>]",
        "[the] arg[ument]( |-)%*classinfo%[( |-)<\\d+>]"
      ]
    },
    {
      "id": "ExprArithmetic",
      "name": "Arithmetic",
      "description": [
        "Arithmetic expressions, e.g. 1 + 2, (health of player - 2) / 3, etc."
      ],
      "examples": [
        "set the player's health to 10 - the player's health",
        "loop (argument + 2) / 5 times:",
        "\tmessage \"Two useless numbers: %loop-num * 2 - 5%, %2^loop-num - 1%\"",
        "message \"You have %health of player * 2% half hearts of HP!\""
      ],
      "since": [
        "1.4.2"
      ],
      "return type": "Object",
      "patterns": [
        "(%object%)[ ]+[ ](%object%)",
        "(%object%)[ ]+[ ]%object%",
        "%object%[ ]+[ ](%object%)",
        "%object%[ ]+[ ]%object%",
        "(%object%)[ ]-[ ](%object%)",
        "(%object%)[ ]-[ ]%object%",
        "%object%[ ]-[ ](%object%)",
        "%object%[ ]-[ ]%object%",
        "(%object%)[ ]*[ ](%object%)",
        "(%object%)[ ]*[ ]%object%",
        "%object%[ ]*[ ](%object%)",
        "%object%[ ]*[ ]%object%",
        "(%object%)[ ]/[ ](%object%)",
        "(%object%)[ ]/[ ]%object%",
        "%object%[ ]/[ ](%object%)",
        "%object%[ ]/[ ]%object%",
        "(%object%)[ ]^[ ](%object%)",
        "(%object%)[ ]^[ ]%object%",
        "%object%[ ]^[ ](%object%)",
        "%object%[ ]^[ ]%object%"
      ]
    },
    {
      "id": "ExprArmorChangeItem",
      "name": "Armor Change Item",
      "description": [
        "Get the unequipped or equipped armor item from a 'armor change' event."
      ],
      "examples": [
        "on armor change\n\tbroadcast the old armor item\n"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Item",
      "patterns": [
        "[the] (old|unequipped) armo[u]r item",
        "[the] (new|equipped) armo[u]r item"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "ExprArmorSlot",
      "name": "Armor Slot",
      "description": [
        "Equipment of living entities, i.e. the boots, leggings, chestplate or helmet.",
        "Body armor is a special slot that can only be used for:",
        "<ul>",
        "Horses: Horse armour (doesn't work on zombie or skeleton horses)",
        "Wolves: Wolf Armor",
        "Llamas (regular or trader): Carpet",
        "</ul>"
      ],
      "examples": [
        "set chestplate of the player to a diamond chestplate",
        "helmet of player is neither a helmet nor air # player is wearing a block, e.g. from another plugin"
      ],
      "since": [
        "1.0, 2.8.0 (armor), 2.10 (body armor)"
      ],
      "return type": "Slot",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] (((boots|shoes)|leg[ging]s|chestplate[s]|helmet[s]) [(item|slot)]|armo[u]r[s]|body armo[u]r) of %livingentities%",
        "%livingentities%'[s] (((boots|shoes)|leg[ging]s|chestplate[s]|helmet[s]) [(item|slot)]|armo[u]r[s]|body armo[u]r)"
      ],
      "keywords": [
        "armor"
      ]
    },
    {
      "id": "ExprAttachedBlock",
      "name": "Arrow Attached Block",
      "description": [
        "Returns the attached block of an arrow."
      ],
      "examples": [
        "set hit block of last shot arrow to diamond block"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Block",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] (attached|hit) block of %projectiles%",
        "%projectiles%'[s] (attached|hit) block"
      ]
    },
    {
      "id": "ExprArrowKnockbackStrength",
      "name": "Arrow Knockback Strength",
      "description": [
        "An arrow's knockback strength."
      ],
      "examples": [
        "on shoot:",
        "\tevent-projectile is an arrow",
        "\tset arrow knockback strength of event-projectile to 10"
      ],
      "since": [
        "2.5.1"
      ],
      "return type": "long",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] arrow knockback strength of %projectiles%",
        "%projectiles%'[s] arrow knockback strength"
      ]
    },
    {
      "id": "ExprArrowsStuck",
      "name": "Arrows Stuck",
      "description": [
        "The number of arrows stuck in a living entity."
      ],
      "examples": [
        "set arrows stuck in player to 5"
      ],
      "since": [
        "2.5"
      ],
      "return type": "long",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[number of] arrow[s] stuck in %livingentities%"
      ]
    },
    {
      "id": "ExprAttackCooldown",
      "name": "Attack Cooldown",
      "description": [
        "Returns the current cooldown for a player's attack. This is used to calculate damage, with 1.0 representing a fully charged attack and 0.0 representing a non-charged attack.",
        "NOTE: Currently this can not be set to anything."
      ],
      "examples": [
        "on damage:",
        "\tif attack cooldown of attacker < 1:",
        "\t\tset damage to 0",
        "\t\tsend \"Your hit was too weak! wait until your weapon is fully charged next time.\" to attacker"
      ],
      "since": [
        "2.6.1"
      ],
      "return type": "float",
      "patterns": [
        "[the] attack cooldown of %players%",
        "%players%'[s] attack cooldown"
      ],
      "required plugins": [
        "Minecraft 1.15+"
      ]
    },
    {
      "id": "ExprAttacked",
      "name": "Attacked",
      "description": [
        "The victim of a damage event, e.g. when a player attacks a zombie this expression represents the zombie. When using Minecraft 1.11+, this also covers the hit entity in a projectile hit event."
      ],
      "examples": [
        "on damage:",
        "\tvictim is a creeper",
        "\tdamage the attacked by 1 heart"
      ],
      "since": [
        "1.3, 2.6.1 (projectile hit event)"
      ],
      "return type": "Entity",
      "patterns": [
        "[the] (attacked|damaged|victim) [<(.+)>]"
      ]
    },
    {
      "id": "ExprAttacker",
      "name": "Attacker",
      "description": [
        "The attacker of a damage event, e.g. when a player attacks a zombie this expression represents the player.",
        "Please note that the attacker can also be a block, e.g. a cactus or lava, but this expression will not be set in these cases."
      ],
      "examples": [
        "on damage:",
        "\tattacker is a player",
        "\thealth of attacker is less than or equal to 2",
        "\tdamage victim by 1 heart"
      ],
      "since": [
        "1.3"
      ],
      "return type": "Entity",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all"
      ],
      "patterns": [
        "[the] (attacker|damager)"
      ]
    },
    {
      "id": "ExprNewBannerPattern",
      "name": "Banner Pattern",
      "description": [
        "Creates a new banner pattern."
      ],
      "examples": [
        "set {_pattern} to a creeper banner pattern colored red",
        "add {_pattern} to banner patterns of {_banneritem}",
        "remove {_pattern} from banner patterns of {_banneritem}",
        "set the 1st banner pattern of block at location(0,0,0) to {_pattern}",
        "clear the 1st banner pattern of block at location(0,0,0)"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Banner Pattern",
      "patterns": [
        "[a] %bannerpatterntype% colo[u]red %color%"
      ]
    },
    {
      "id": "ExprBannerItem",
      "name": "Banner Pattern Item",
      "description": [
        "Gets the item from a banner pattern type.",
        "Note that not all banner pattern types have an item."
      ],
      "examples": [
        "set {_item} to creeper charged banner pattern item",
        "set {_item} to snout banner pattern item",
        "set {_item} to thing banner pattern item"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Item Type",
      "patterns": [
        "[a[n]] %*bannerpatterntypes% item[s]"
      ]
    },
    {
      "id": "ExprBannerPatterns",
      "name": "Banner Patterns",
      "description": [
        "Gets or sets the banner patterns of a banner.",
        "In order to set a specific position of a banner, there needs to be that many patterns already on the banner.",
        "This expression will add filler patterns to the banner to allow the specified position to be set.",
        "For Example, setting the 3rd banner pattern of a banner that has no patterns on it, will internally add 3 base patterns, allowing the 3rd banner pattern to be set."
      ],
      "examples": [
        "broadcast banner patterns of {_banneritem}",
        "broadcast 1st banner pattern of block at location(0,0,0)",
        "clear banner patterns of {_banneritem}"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Banner Pattern",
      "changers": [
        "add",
        "delete",
        "remove",
        "set"
      ],
      "patterns": [
        "[all [[of] the]|the] banner pattern[s] of %itemstacks/itemtypes/slots/blocks%",
        "%itemstacks/itemtypes/slots/blocks%'[s] banner pattern[s]",
        "[the] %integer%[st|nd|rd|th] [banner] pattern of %itemstacks/itemtypes/slots/blocks%",
        "%itemstacks/itemtypes/slots/blocks%'[s] %integer%[st|nd|rd|th] [banner] pattern"
      ]
    },
    {
      "id": "ExprBarterDrops",
      "name": "Barter Drops",
      "description": [
        "The items dropped by the piglin in a piglin bartering event."
      ],
      "examples": [
        "on piglin barter:",
        "\tif the bartering drops contain a jack-o-lantern:",
        "\t\tremove jack-o-lantern from bartering output",
        "\t\tbroadcast \"it's not halloween yet!\""
      ],
      "since": [
        "2.10"
      ],
      "return type": "Item Type",
      "patterns": [
        "[the] [piglin] barter[ing] drops"
      ]
    },
    {
      "id": "ExprBarterInput",
      "name": "Barter Input",
      "description": [
        "The item picked up by the piglin in a piglin bartering event."
      ],
      "examples": [
        "on piglin barter:",
        "\tif the bartering input is a gold ingot:",
        "\t\tbroadcast \"my precious...\""
      ],
      "since": [
        "2.10"
      ],
      "return type": "Item Type",
      "patterns": [
        "[the] [piglin] barter[ing] input"
      ]
    },
    {
      "id": "ExprBeaconValues",
      "name": "Beacon Effects",
      "description": [
        "The active effects of a beacon.",
        "The secondary effect can be set to anything, but the icon in the GUI will not display correctly.",
        "The secondary effect can only be set when the beacon is at max tier.",
        "The primary and secondary effect can not be the same, primary will always retain the potion type and secondary will be cleared.",
        "You can only change the range on Paper."
      ],
      "examples": [
        "broadcast tier of {_block}",
        "set primary beacon effect of {_block} to haste",
        "add 1 to range of {_block}"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Object",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "%blocks%['s] primary [beacon] effect",
        "[the] primary [beacon] effect [of %blocks%]",
        "%blocks%['s] secondary [beacon] effect",
        "[the] secondary [beacon] effect [of %blocks%]",
        "%blocks%['s] [beacon] range",
        "[the] [beacon] range [of %blocks%]",
        "%blocks%['s] [beacon] tier",
        "[the] [beacon] tier [of %blocks%]"
      ],
      "required plugins": [
        "Paper (range)"
      ]
    },
    {
      "id": "ExprBed",
      "name": "Bed",
      "description": [
        "Returns the bed location of a player, i.e. the spawn point of a player if they ever slept in a bed and the bed still exists and is unobstructed however, you can set the unsafe bed location of players and they will respawn there even if it has been obstructed or doesn't exist anymore and that's the default behavior of this expression otherwise you will need to be specific i.e. safe bed location.",
        "",
        "NOTE: Offline players can not have their bed location changed, only online players."
      ],
      "examples": [
        "if bed of player exists:",
        "\tteleport player the the player's bed",
        "else:",
        "\tteleport the player to the world's spawn point",
        "",
        "set the bed location of player to spawn location of world(\"world\") # unsafe/invalid bed location",
        "set the safe bed location of player to spawn location of world(\"world\") # safe/valid bed location"
      ],
      "since": [
        "2.0, 2.7 (offlineplayers, safe bed)"
      ],
      "return type": "Location",
      "changers": [
        "delete",
        "set"
      ],
      "patterns": [
        "[the] [((safe|valid)|(unsafe|invalid))] bed[s] [location[s]] of %offlineplayers%",
        "%offlineplayers%'[s] [((safe|valid)|(unsafe|invalid))] bed[s] [location[s]]"
      ]
    },
    {
      "id": "ExprBeehiveHoneyLevel",
      "name": "Beehive Honey Level",
      "description": [
        "The current or max honey level of a beehive.",
        "The max level is 5, which cannot be changed."
      ],
      "examples": [
        "set the honey level of {_beehive} to the max honey level of {_beehive}"
      ],
      "since": [
        "2.11"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] [max[imum]] honey level [of %blocks%]",
        "%blocks%'[s] [max[imum]] honey level"
      ]
    },
    {
      "id": "ExprBeehiveFlower",
      "name": "Beehive Target Flower",
      "description": [
        "The flower a beehive has selected to pollinate from."
      ],
      "examples": [
        "set the target flower of {_beehive} to location(0, 0, 0)",
        "clear the target flower of {_beehive}"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Location",
      "changers": [
        "delete",
        "set"
      ],
      "patterns": [
        "[the] target flower [of %blocks%]",
        "%blocks%'[s] target flower"
      ]
    },
    {
      "id": "ExprBiome",
      "name": "Biome",
      "description": [
        "The biome at a certain location. Please note that biomes are only defined for x/z-columns",
        "(i.e. the altitude (y-coordinate) doesn't matter), up until Minecraft 1.15.x.",
        "As of Minecraft 1.16, biomes are now 3D (per block vs column)."
      ],
      "examples": [
        "# damage player in deserts constantly",
        "every real minute:",
        "\tloop all players:",
        "\t\tbiome at loop-player is desert",
        "\t\tdamage the loop-player by 1"
      ],
      "since": [
        "1.4.4, 2.6.1 (3D biomes)"
      ],
      "return type": "Biome",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] biome [(of|%direction%) %locations%]",
        "%locations%'[s] biome"
      ]
    },
    {
      "id": "ExprBlock",
      "name": "Block",
      "description": [
        "The block involved in the event, e.g. the clicked block or the placed block.",
        "Can optionally include a direction as well, e.g. 'block above' or 'block in front of the player'."
      ],
      "examples": [
        "block is ore",
        "set block below to air",
        "spawn a creeper above the block",
        "loop blocks in radius 4:",
        "\tloop-block is obsidian",
        "\tset loop-block to water",
        "block is a chest:",
        "\tclear the inventory of the block"
      ],
      "since": [
        "1.0"
      ],
      "return type": "Block",
      "patterns": [
        "[the] [event-]block",
        "[the] block %direction% [%location%]"
      ]
    },
    {
      "id": "ExprBreakSpeed",
      "name": "Block Break Speed",
      "description": [
        "Gets the speed at which the given player would break this block, taking into account tools, potion effects, whether or not the player is in water, enchantments, etc. The returned value is the amount of progress made in breaking the block each tick. When the total breaking progress reaches 1.0, the block is broken. Note that the break speed can change in the course of breaking a block, e.g. if a potion effect is applied or expires, or the player jumps/enters water."
      ],
      "examples": [
        "on left click using diamond pickaxe:",
        "\tevent-block is set",
        "\tsend \"Break Speed: %break speed for player%\" to player"
      ],
      "since": [
        "2.7"
      ],
      "return type": "float",
      "patterns": [
        "[the] break speed[s] [of %blocks%] [for %players%]",
        "%block%'[s] break speed[s] [for %players%]"
      ],
      "required plugins": [
        "1.17+"
      ]
    },
    {
      "id": "ExprBlockData",
      "name": "Block Data",
      "description": [
        "Get the block data associated with a block.",
        "This data can also be used to set blocks."
      ],
      "examples": [
        "set {_data} to block data of target block",
        "set block at player to {_data}",
        "",
        "set block data of target block to oak_stairs[facing=south;waterlogged=true]"
      ],
      "since": [
        "2.5, 2.5.2 (set), 2.10 (block displays)"
      ],
      "return type": "Block Data",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] block[ ]data of %blocks/displays%",
        "%blocks/displays%'[s] block[ ]data"
      ]
    },
    {
      "id": "ExprBlockHardness",
      "name": "Block Hardness",
      "description": [
        "Obtains the block's hardness level (also known as \"strength\"). This number is used to calculate the time required to break each block."
      ],
      "examples": [
        "set {_hard} to block hardness of target block",
        "if block hardness of target block > 5:"
      ],
      "since": [
        "2.6"
      ],
      "return type": "Number",
      "patterns": [
        "[the] [block] hardness of %itemtypes%",
        "%itemtypes%'[s] [block] hardness"
      ],
      "required plugins": [
        "Minecraft 1.13+"
      ]
    },
    {
      "id": "ExprBlockSound",
      "name": "Block Sound",
      "description": [
        "Gets the sound that a given block, blockdata, or itemtype will use in a specific scenario.",
        "This will return a string in the form of \"SOUND_EXAMPLE\", which can be used in the play sound syntax.",
        "",
        "Check out this website for a list of sounds in Minecraft, or this one to go to the Sounds wiki page."
      ],
      "examples": [
        "play sound (break sound of dirt) at all players",
        "set {_sounds::*} to place sounds of dirt, grass block, blue wool and stone"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Text",
      "patterns": [
        "[the] (break|fall|hit|place|step) sound[s] of %blocks/blockdatas/itemtypes%",
        "%blocks/blockdatas/itemtypes%'[s] (break|fall|hit|place|step) sound[s]"
      ]
    },
    {
      "id": "ExprBlockSphere",
      "name": "Block Sphere",
      "description": [
        "All blocks in a sphere around a center, mostly useful for looping."
      ],
      "examples": [
        "loop blocks in radius 5 around the player:",
        "\tset loop-block to air"
      ],
      "since": [
        "1.0"
      ],
      "return type": "Block",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[(all [[of] the]|the)] blocks in radius %number% [(of|around) %location%]",
        "[(all [[of] the]|the)] blocks around %location% in radius %number%"
      ]
    },
    {
      "id": "ExprBlocks",
      "name": "Blocks",
      "description": [
        "Blocks relative to other blocks or between other blocks.",
        "Can be used to get blocks relative to other blocks or for looping.",
        "Blocks from/to and between will return a straight line whereas blocks within will return a cuboid."
      ],
      "examples": [
        "loop blocks above the player:",
        "loop blocks between the block below the player and the targeted block:",
        "set the blocks below the player, the victim and the targeted block to air",
        "set all blocks within {loc1} and {loc2} to stone",
        "set all blocks within chunk at player to air"
      ],
      "since": [
        "1.0, 2.5.1 (within/cuboid/chunk)"
      ],
      "return type": "Block",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[(all [[of] the]|the)] blocks %direction% [%locations%]",
        "[(all [[of] the]|the)] blocks from %location% [on] %direction%",
        "[(all [[of] the]|the)] blocks from %location% to %location%",
        "[(all [[of] the]|the)] blocks between %location% and %location%",
        "[(all [[of] the]|the)] blocks within %location% and %location%",
        "[(all [[of] the]|the)] blocks (in|within) %chunk%"
      ]
    },
    {
      "id": "ExprBookAuthor",
      "name": "Book Author",
      "description": [
        "The author of a book."
      ],
      "examples": [
        "on book sign:",
        "\tmessage \"Book Title: %author of event-item%\""
      ],
      "since": [
        "2.2-dev31"
      ],
      "return type": "Text",
      "changers": [
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [book] (author|writer|publisher) of %itemtypes%",
        "%itemtypes%'[s] [book] (author|writer|publisher)"
      ]
    },
    {
      "id": "ExprBookPages",
      "name": "Book Pages",
      "description": [
        "The pages of a book (Supports Skript's chat format)",
        "Note: In order to modify the pages of a new written book, you must have the title and author",
        "of the book set. Skript will do this for you, but if you want your own, please set those values."
      ],
      "examples": [
        "on book sign:",
        "\tmessage \"Book Pages: %pages of event-item%\"",
        "\tmessage \"Book Page 1: %page 1 of event-item%\"",
        "",
        "set page 1 of player's held item to \"Book writing\""
      ],
      "since": [
        "2.2-dev31, 2.7 (changers)"
      ],
      "return type": "Text",
      "changers": [
        "add",
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[all [[of] the]|the] [book] (pages|content) of %itemtypes/itemstacks%",
        "%itemtypes/itemstacks%'[s] [book] (pages|content)",
        "[book] page %number% of %itemtypes/itemstacks%",
        "%itemtypes/itemstacks%'[s] [book] page %number%"
      ]
    },
    {
      "id": "ExprBookTitle",
      "name": "Book Title",
      "description": [
        "The title of a book."
      ],
      "examples": [
        "on book sign:",
        "\tmessage \"Book Title: %title of event-item%\""
      ],
      "since": [
        "2.2-dev31"
      ],
      "return type": "Text",
      "changers": [
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] book (name|title) of %itemtypes%",
        "%itemtypes%'[s] book (name|title)"
      ]
    },
    {
      "id": "ExprBreedingFamily",
      "name": "Breeding Family",
      "description": [
        "Represents family members within a breeding event."
      ],
      "examples": [
        "on breeding:",
        "\tsend \"When a %breeding mother% and %breeding father% love each other very much, they make a %bred offspring%\" to breeder"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Living Entity",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all"
      ],
      "patterns": [
        "[the] breeding mother",
        "[the] breeding father",
        "[the] [bred] (offspring|child)",
        "[the] breeder"
      ]
    },
    {
      "id": "ExprStringCase",
      "name": "Case Text",
      "description": [
        "Copy of given text in Lowercase, Uppercase, Proper Case, camelCase, PascalCase, Snake_Case, and Kebab-Case"
      ],
      "examples": [
        "\"Oops!\" in lowercase # oops!",
        "\"oops!\" in uppercase # OOPS!",
        "\"hellO i'm steve!\" in proper case # HellO I'm Steve!",
        "\"hellO i'm steve!\" in strict proper case # Hello I'm Steve!",
        "\"spAwn neW boSs ()\" in camel case # spAwnNeWBoSs()",
        "\"spAwn neW boSs ()\" in strict camel case # spawnNewBoss()",
        "\"geneRate ranDom numBer ()\" in pascal case # GeneRateRanDomNumBer()",
        "\"geneRate ranDom numBer ()\" in strict pascal case # GenerateRandomNumber()",
        "\"Hello Player!\" in snake case # Hello_Player!",
        "\"Hello Player!\" in lower snake case # hello_player!",
        "\"Hello Player!\" in upper snake case # HELLO_PLAYER!",
        "\"What is your name?\" in kebab case # What-is-your-name?",
        "\"What is your name?\" in lower kebab case # what-is-your-name?",
        "\"What is your name?\" in upper kebab case # WHAT-IS-YOUR-NAME?"
      ],
      "since": [
        "2.2-dev16 (lowercase and uppercase), 2.5 (advanced cases)"
      ],
      "return type": "Text",
      "patterns": [
        "%strings% in (upper|lower)[ ]case",
        "(upper|lower)[ ]case %strings%",
        "capitali(s|z)ed %strings%",
        "%strings% in [(lenient|strict) ](proper|title)[ ]case",
        "[(lenient|strict) ](proper|title)[ ]case %strings%",
        "%strings% in [(lenient|strict) ]camel[ ]case",
        "[(lenient|strict) ]camel[ ]case %strings%",
        "%strings% in [(lenient|strict) ]pascal[ ]case",
        "[(lenient|strict) ]pascal[ ]case %strings%",
        "%strings% in [(lower|upper|capital|screaming)[ ]]snake[ ]case",
        "[(lower|upper|capital|screaming)[ ]]snake[ ]case %strings%",
        "%strings% in [(lower|upper|capital)[ ]]kebab[ ]case",
        "[(lower|upper|capital)[ ]]kebab[ ]case %strings%"
      ]
    },
    {
      "id": "ExprWorldBorderCenter",
      "name": "Center of World Border",
      "description": [
        "The center of a world border."
      ],
      "examples": [
        "set world border center of {_worldborder} to location(10, 0, 20)"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Location",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] world[ ]border (center|middle) [of %worldborders%]",
        "%worldborders%'[s] world[ ]border (center|middle)"
      ]
    },
    {
      "id": "ExprCodepoint",
      "name": "Character Codepoint",
      "description": [
        "Returns the Unicode codepoint of a character"
      ],
      "examples": [
        "function is_in_order(letters: strings) :: boolean:",
        "\tloop {_letters::*}:",
        "\t\tset {_codepoint} to codepoint of lowercase loop-value",
        "",
        "\t\treturn false if {_codepoint} is not set # 'loop-value is not a single character'",
        "",
        "\t\tif:",
        "\t\t\t{_previous-codepoint} is set",
        "\t\t\t# if the codepoint of the current character is not",
        "\t\t\t#  1 more than the codepoint of the previous character",
        "\t\t\t#  then the letters are not in order",
        "\t\t\t{_codepoint} - {_previous-codepoint} is not 1",
        "\t\tthen:",
        "\t\t\treturn false",
        "",
        "\t\tset {_previous-codepoint} to {_codepoint}",
        "\treturn true"
      ],
      "since": [
        "2.9.0"
      ],
      "return type": "integer",
      "patterns": [
        "[the] [unicode|character] code([ ]point| position) of %strings%",
        "%strings%'[s] [unicode|character] code([ ]point| position)"
      ]
    },
    {
      "id": "ExprCharacterFromCodepoint",
      "name": "Character from Codepoint",
      "description": [
        "Returns the character at the specified codepoint"
      ],
      "examples": [
        "function chars_between(lower: string, upper: string) :: strings:",
        "\tset {_lower} to codepoint of {_lower}",
        "\treturn {_none} if {_lower} is not set",
        "",
        "\tset {_upper} to codepoint of {_upper}",
        "\treturn {_none} if {_upper} is not set",
        "",
        "\tloop integers between {_lower} and {_upper}:",
        "\t\tadd character from codepoint loop-value to {_chars::*}",
        "\treturn {_chars::*}"
      ],
      "since": [
        "2.9.0"
      ],
      "return type": "Text",
      "patterns": [
        "character (from|at|with) code([ ]point| position) %integer%"
      ]
    },
    {
      "id": "ExprCharacters",
      "name": "Characters Between",
      "description": [
        "All characters between two given characters, useful for generating random strings. This expression uses the Unicode numerical code of a character to determine which characters are between the two given characters. The ASCII table linked here shows this ordering for the first 256 characters.",
        "If you would like only alphanumeric characters you can use the 'alphanumeric' option in the expression.",
        "If strings of more than one character are given, only the first character of each is used."
      ],
      "examples": [
        "loop characters from \"a\" to \"f\":",
        "\tbroadcast \"%loop-value%\"",
        "",
        "# 0123456789:;<=>?@ABC... ...uvwxyz",
        "send characters between \"0\" and \"z\"",
        "",
        "# 0123456789ABC... ...uvwxyz",
        "send alphanumeric characters between \"0\" and \"z\""
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Text",
      "patterns": [
        "[(all [[of] the]|the)] [alphanumeric] characters (between|from) %string% (and|to) %string%"
      ]
    },
    {
      "id": "ExprChatFormat",
      "name": "Chat Format",
      "description": [
        "Can be used to get/retrieve the chat format. The sender of a message is represented by [player] or [sender], and the message by [message] or [msg]."
      ],
      "examples": [
        "set the chat format to \"<yellow>[player]<light gray>: <green>[message]\""
      ],
      "since": [
        "2.2-dev31"
      ],
      "return type": "Text",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (message|chat) format[ting]"
      ]
    },
    {
      "id": "ExprChatRecipients",
      "name": "Chat Recipients",
      "description": [
        "Recipients of chat events where this is called."
      ],
      "examples": [
        "chat recipients"
      ],
      "since": [
        "2.2-Fixes-v7, 2.2-dev35 (clearing recipients)"
      ],
      "return type": "Player",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "reset",
        "set"
      ],
      "patterns": [
        "[chat][( |-)]recipients"
      ]
    },
    {
      "id": "ExprChunk",
      "name": "Chunk",
      "description": [
        "Returns the chunk of a block, location or entity is in, or a list of the loaded chunks of a world."
      ],
      "examples": [
        "add the chunk at the player to {protected chunks::*}",
        "set {_chunks::*} to the loaded chunks of the player's world"
      ],
      "since": [
        "2.0, 2.8.0 (loaded chunks)"
      ],
      "return type": "Chunk",
      "changers": [
        "reset"
      ],
      "patterns": [
        "[(all [[of] the]|the)] chunk[s] (of|%directions%) %locations%",
        "%locations%'[s] chunk[s]",
        "[(all [[of] the]|the)] loaded chunks (of|in) %worlds%"
      ]
    },
    {
      "id": "ExprClicked",
      "name": "Clicked Block/Entity/Inventory/Slot",
      "description": [
        "The clicked block, entity, inventory, inventory slot, inventory click type or inventory action."
      ],
      "examples": [
        "message \"You clicked on a %type of clicked entity%!\"",
        "if the clicked block is a chest:",
        "\tshow the inventory of the clicked block to the player"
      ],
      "since": [
        "1.0, 2.2-dev35 (more clickable things)"
      ],
      "return type": "Object",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] (clicked [enchant[ment]] (button|option)|clicked (block|%*itemtype/entitydata%)|clicked slot|clicked inventory|click (type|action)|inventory action)"
      ]
    },
    {
      "id": "ExprColorOf",
      "name": "Color of",
      "description": [
        "The color of an item, entity, block, firework effect, or text display.",
        "This can also be used to color chat messages with \"<%color of ...%>this text is colored!\".",
        "Do note that firework effects support setting, adding, removing, resetting, and deleting; text displays support setting and resetting; and items, entities, and blocks only support setting, and only for very few items/blocks."
      ],
      "examples": [
        "on click on wool:",
        "\tmessage \"This wool block is <%color of block%>%color of block%<reset>!\"",
        "\tset the color of the block to black"
      ],
      "since": [
        "1.2, 2.10 (displays)"
      ],
      "return type": "Color",
      "patterns": [
        "[the] colo[u]r[s] of %blocks/itemtypes/entities/fireworkeffects/displays%",
        "%blocks/itemtypes/entities/fireworkeffects/displays%'[s] colo[u]r[s]"
      ]
    },
    {
      "id": "ExprColoured",
      "name": "Colored / Uncolored",
      "description": [
        "Parses <color>s and, optionally, chat styles in a message or removes",
        "any colors and chat styles from the message. Parsing all",
        "chat styles requires this expression to be used in same line with",
        "the send effect."
      ],
      "examples": [
        "on chat:",
        "\tset message to colored message # Safe; only colors get parsed",
        "command /fade <player>:",
        "\ttrigger:",
        "\t\tset display name of the player-argument to uncolored display name of the player-argument",
        "command /format <text>:",
        "\ttrigger:",
        "\t\tmessage formatted text-argument # Safe, because we're sending to whoever used this command"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Text",
      "patterns": [
        "(colo[u]r-|colo[u]red )%strings%",
        "(format-|formatted )%strings%",
        "(un|non)[-](colo[u]r-|colo[u]red |format-|formatted )%strings%"
      ]
    },
    {
      "id": "ExprCommand",
      "name": "Command",
      "description": [
        "The command that caused an 'on command' event (excluding the leading slash and all arguments)"
      ],
      "examples": [
        "# prevent any commands except for the /exit command during some game",
        "on command:",
        "\tif {game::%player%::playing} is true:",
        "\t\tif the command is not \"exit\":",
        "\t\t\tmessage \"You're not allowed to use commands during the game\"",
        "\t\t\tcancel the event"
      ],
      "since": [
        "2.0, 2.7 (support for script commands)"
      ],
      "return type": "Text",
      "patterns": [
        "[the] (full|complete|whole) command",
        "[the] command [(label|alias)]"
      ]
    },
    {
      "id": "ExprCommandBlockCommand",
      "name": "Command Block Command",
      "description": [
        "Gets or sets the command associated with a command block or minecart with command block."
      ],
      "examples": [
        "send command of {_block}",
        "set command of {_cmdMinecart} to \"say asdf\""
      ],
      "since": [
        "2.10"
      ],
      "return type": "Text",
      "changers": [
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [command[ ]block] command of %blocks/entities%",
        "%blocks/entities%'[s] [command[ ]block] command"
      ]
    },
    {
      "id": "ExprCommandInfo",
      "name": "Command Info",
      "description": [
        "Get information about a command."
      ],
      "examples": [
        "main command label of command \"skript\"",
        "description of command \"help\"",
        "label of command \"pl\"",
        "usage of command \"help\"",
        "aliases of command \"bukkit:help\"",
        "permission of command \"/op\"",
        "command \"op\"'s permission message",
        "command \"sk\"'s plugin owner",
        "",
        "command /greet <player>:",
        "\tusage: /greet <target>",
        "\ttrigger:",
        "\t\tif arg-1 is sender:",
        "\t\t\tsend \"&cYou can't greet yourself! Usage: %the usage%\"",
        "\t\t\tstop",
        "\t\tsend \"%sender% greets you!\" to arg-1",
        "\t\tsend \"You greeted %arg-1%!\""
      ],
      "since": [
        "2.6"
      ],
      "return type": "Text",
      "patterns": [
        "[the] main command [label|name] [of [[the] command[s] %strings%]]",
        "command[s] %strings%'[s] main command [label|name]",
        "[the] description [of [[the] command[s] %strings%]]",
        "command[s] %strings%'[s] description",
        "[the] label [of [[the] command[s] %strings%]]",
        "command[s] %strings%'[s] label",
        "[the] usage [of [[the] command[s] %strings%]]",
        "command[s] %strings%'[s] usage",
        "[(all|the|all [of] the)] aliases [of [[the] command[s] %strings%]]",
        "command[s] %strings%'[s] aliases",
        "[the] permission [of [[the] command[s] %strings%]]",
        "command[s] %strings%'[s] permission",
        "[the] permission message [of [[the] command[s] %strings%]]",
        "command[s] %strings%'[s] permission message",
        "[the] plugin [owner] [of [[the] command[s] %strings%]]",
        "command[s] %strings%'[s] plugin [owner]"
      ]
    },
    {
      "id": "ExprCommandSender",
      "name": "Command Sender",
      "description": [
        "The player or the console who sent a command. Mostly useful in commands and command events.",
        "If the command sender is a command block, its location can be retrieved by using %block's location%"
      ],
      "examples": [
        "make the command sender execute \"/say hi!\"",
        "",
        "on command:",
        "\tlog \"%executor% used command /%command% %arguments%\" to \"commands.log\""
      ],
      "since": [
        "2.0"
      ],
      "return type": "Command Sender",
      "patterns": [
        "[the] [command['s]] (sender|executor)"
      ]
    },
    {
      "id": "ExprCompassTarget",
      "name": "Compass Target",
      "description": [
        "The location a player's compass is pointing at.",
        "As of Minecraft 1.21.4, the compass is controlled by the resource pack and by default will not point to this compass target when used outside of the overworld dimension."
      ],
      "examples": [
        "# make all player's compasses target a player stored in {compass::target::%player%}",
        "every 5 seconds:",
        "\tloop all players:",
        "\t\tset the loop-player's compass target to location of {compass::target::%%loop-player%}"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Location",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] compass target of %players%",
        "%players%'[s] compass target"
      ]
    },
    {
      "id": "ExprConfig",
      "name": "Config (Experimental)",
      "description": [
        "The Skript config.",
        "This can be reloaded, or navigated to retrieve options."
      ],
      "examples": [
        "set {_node} to node \"language\" in the skript config\nif text value of {_node} is \"french\":\n\tbroadcast \"Bonjour!\"\n"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Config",
      "patterns": [
        "[the] [skript] config"
      ]
    },
    {
      "id": "LitConsole",
      "name": "Console",
      "description": [
        "Represents the server's console which can receive messages and execute commands"
      ],
      "examples": [
        "execute console command \"/stop\"",
        "send \"message to console\" to the console"
      ],
      "since": [
        "1.3.1"
      ],
      "return type": "Command Sender",
      "patterns": [
        "[the] (console|server)"
      ]
    },
    {
      "id": "ExprConsumedItem",
      "name": "Consumed Item",
      "description": [
        "Represents the item consumed within an entity shoot bow and item consume event."
      ],
      "examples": [
        "on player or skeleton shoot projectile:\n\tif the consumed item is an arrow:\n\t\tcancel event\n\t\tsend \"You're now allowed to shoot your arrows.\" to shooter\n",
        "on player consume:\n\tif the consumed item is cooked porkchop:\n\t\tsend \"Well aren't you just a little piggy wiggly!\" to player\n\tif player has scoreboard tag \"vegetarian\":\n\t\tset the consumed item to a carrot\n"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Item",
      "patterns": [
        "[the] consumed item"
      ]
    },
    {
      "id": "ExprCmdCooldownInfo",
      "name": "Cooldown Time/Remaining Time/Elapsed Time/Last Usage/Bypass Permission",
      "description": [
        "Only usable in command events. Represents the cooldown time, the remaining time, the elapsed time,",
        "the last usage date, or the cooldown bypass permission."
      ],
      "examples": [
        "command /home:",
        "\tcooldown: 10 seconds",
        "\tcooldown message: You last teleported home %elapsed time% ago, you may teleport home again in %remaining time%.",
        "\ttrigger:",
        "\t\tteleport player to {home::%player%}"
      ],
      "since": [
        "2.2-dev33"
      ],
      "return type": "Object",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] remaining [time] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]",
        "[the] elapsed [time] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]",
        "[the] ((cooldown|wait) time|[wait] time of [the] (cooldown|wait) [(of|for) [the] [current] command])",
        "[the] last usage [date] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]",
        "[the] [cooldown] bypass perm[ission] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]"
      ]
    },
    {
      "id": "ExprCoordinate",
      "name": "Coordinate",
      "description": [
        "Represents a given coordinate of a location. "
      ],
      "examples": [
        "player's y-coordinate is smaller than 40:",
        "\tmessage \"Watch out for lava!\""
      ],
      "since": [
        "1.4.3"
      ],
      "return type": "Number",
      "patterns": [
        "[the] (x|y|z)(-| )(coord[inate]|pos[ition]|loc[ation])[s] of %locations%",
        "%locations%'[s] (x|y|z)(-| )(coord[inate]|pos[ition]|loc[ation])[s]"
      ]
    },
    {
      "id": "ExprSecCreateLootContext",
      "name": "Create Loot Context",
      "description": [
        "Create a loot context."
      ],
      "examples": [
        "set {_player} to player",
        "set {_context} to a loot context at player:",
        "\tset loot luck value to 10",
        "\tset looter to {_player}",
        "\tset looted entity to last spawned pig",
        "give player loot items of loot table \"minecraft:entities/iron_golem\" with loot context {_context}"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Loot Context",
      "patterns": [
        "[a] loot context %direction% %location%"
      ]
    },
    {
      "id": "ExprSecCreateWorldBorder",
      "name": "Create WorldBorder",
      "description": [
        "Create a virtual worldborder. You can make this a real border by setting a world's worldborder to a virtual border."
      ],
      "examples": [
        "set player's worldborder to a virtual worldborder",
        "",
        "on join:",
        "\tset {_border} to a worldborder:",
        "\t\tset worldborder radius to 25",
        "\t\tset worldborder warning distance of event-worldborder to 5",
        "\tset worldborder of player to {_border}"
      ],
      "since": [
        "2.11"
      ],
      "return type": "World Border",
      "patterns": [
        "a [virtual] world[ ]border"
      ]
    },
    {
      "id": "ExprEntity",
      "name": "Creature/Entity/Player/Projectile/Villager/Powered Creeper/etc.",
      "description": [
        "The entity involved in an event (an entity is a player, a creature or an inanimate object like ignited TNT, a dropped item or an arrow).",
        "You can use the specific type of the entity that's involved in the event, e.g. in a 'death of a creeper' event you can use 'the creeper' instead of 'the entity'."
      ],
      "examples": [
        "give a diamond sword of sharpness 3 to the player",
        "kill the creeper",
        "kill all powered creepers in the wolf's world",
        "projectile is an arrow"
      ],
      "since": [
        "1.0"
      ],
      "return type": "Entity",
      "patterns": [
        "[the] [event-]<.+>"
      ]
    },
    {
      "id": "ExprCursorSlot",
      "name": "Cursor Slot",
      "description": [
        "The item which the player has on their inventory cursor. This slot is always empty if player has no inventory open."
      ],
      "examples": [
        "cursor slot of player is dirt",
        "set cursor slot of player to 64 diamonds"
      ],
      "since": [
        "2.2-dev17"
      ],
      "return type": "Slot",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] cursor slot of %players%",
        "%players%'[s] cursor slot"
      ]
    },
    {
      "id": "ExprChestInventory",
      "name": "Custom Chest Inventory",
      "description": [
        "Returns a chest inventory with the given amount of rows and the name. Use the open inventory effect to open it."
      ],
      "examples": [
        "open chest inventory with 1 row named \"test\" to player",
        "",
        "set {_inventory} to a chest inventory with 1 row",
        "set slot 4 of {_inventory} to a diamond named \"example\"",
        "open {_inventory} to player",
        "",
        "open chest inventory named \"<#00ff00>hex coloured title!\" with 6 rows to player"
      ],
      "since": [
        "2.2-dev34, 2.8.0 (chat format)"
      ],
      "return type": "Inventory",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[a] [new] chest inventory (named|with name) %string% [with %number% row[s]]",
        "[a] [new] chest inventory with %number% row[s] [(named|with name) %string%]"
      ],
      "required plugins": [
        "Paper 1.16+ (chat format)"
      ]
    },
    {
      "id": "ExprCustomModelData",
      "name": "Custom Model Data",
      "description": [
        "Get/set the CustomModelData tag for an item. (Value is an integer between 0 and 99999999)"
      ],
      "examples": [
        "set custom model data of player's tool to 3",
        "set {_model} to custom model data of player's tool"
      ],
      "since": [
        "2.5"
      ],
      "return type": "long",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [custom] model data of %itemtypes%",
        "%itemtypes%'[s] [custom] model data"
      ],
      "required plugins": [
        "1.14+"
      ]
    },
    {
      "id": "ExprDamage",
      "name": "Damage",
      "description": [
        "How much damage is done in a entity/vehicle/item damage events.",
        "For entity damage events, possibly ignoring armour, criticals and/or enchantments (remember that in Skript '1' is one full heart, not half a heart).",
        "For items, it's the amount of durability damage the item will be taking."
      ],
      "examples": [
        "on item damage:",
        "\tevent-item is any tool",
        "\tclear damage # unbreakable tools as the damage will be 0",
        "on damage:",
        "\tincrease the damage by 2"
      ],
      "since": [
        "1.3.5, 2.8.0 (item damage event)"
      ],
      "return type": "Number",
      "patterns": [
        "[the] damage"
      ]
    },
    {
      "id": "ExprWorldBorderDamageAmount",
      "name": "Damage Amount of World Border",
      "description": [
        "The amount of damage a player takes per second for each block they are outside the border plus the border buffer.",
        "Players only take damage when outside of the world's world border, and the damage value cannot be less than 0."
      ],
      "examples": [
        "set world border damage amount of {_worldborder} to 1"
      ],
      "since": [
        "2.11"
      ],
      "return type": "double",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] world[ ]border damage amount [of %worldborders%]",
        "%worldborders%'[s] world[ ]border damage amount"
      ]
    },
    {
      "id": "ExprWorldBorderDamageBuffer",
      "name": "Damage Buffer of World Border",
      "description": [
        "The amount of blocks a player may safely be outside the border before taking damage.",
        "Players only take damage when outside of the world's world border, and the damage buffer distance cannot be less than 0."
      ],
      "examples": [
        "set world border damage buffer of {_worldborder} to 10"
      ],
      "since": [
        "2.11"
      ],
      "return type": "double",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] world[ ]border damage buffer [of %worldborders%]",
        "%worldborders%'[s] world[ ]border damage buffer"
      ]
    },
    {
      "id": "ExprDamageCause",
      "name": "Damage Cause",
      "description": [
        "The damage cause of a damage event. Please click on the link for more information."
      ],
      "examples": [
        "damage cause is lava, fire or burning"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Damage Cause",
      "patterns": [
        "[the] damage (cause|type)"
      ]
    },
    {
      "id": "ExprDurability",
      "name": "Damage Value/Durability",
      "description": [
        "The damage value/durability of an item."
      ],
      "examples": [
        "set damage value of player's tool to 10",
        "reset the durability of {_item}",
        "set durability of player's held item to 0"
      ],
      "since": [
        "1.2, 2.7 (durability reversed)"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (damage[s] [value[s]]|durabilit(y|ies)) of %itemtypes/itemstacks/slots%",
        "%itemtypes/itemstacks/slots%'[s] (damage[s] [value[s]]|durabilit(y|ies))"
      ]
    },
    {
      "id": "ExprDamagedItem",
      "name": "Damaged Item",
      "description": [
        "Directly damages an item. In MC versions 1.12.2 and lower, this can be used to apply data values to items/blocks"
      ],
      "examples": [
        "give player diamond sword with damage value 100",
        "set player's tool to diamond hoe damaged by 250",
        "give player diamond sword with damage 700 named \"BROKEN SWORD\"",
        "set {_item} to diamond hoe with damage value 50 named \"SAD HOE\"",
        "set target block of player to wool with data value 1",
        "set target block of player to potato plant with data value 7"
      ],
      "since": [
        "2.4"
      ],
      "return type": "Item Type",
      "patterns": [
        "%itemtype% with (damage|data) [value] %number%",
        "%itemtype% damaged by %number%"
      ]
    },
    {
      "id": "ExprDateAgoLater",
      "name": "Date Ago/Later",
      "description": [
        "A date the specified timespan before/after another date."
      ],
      "examples": [
        "set {_yesterday} to 1 day ago",
        "set {_hourAfter} to 1 hour after {someOtherDate}",
        "set {_hoursBefore} to 5 hours before {someOtherDate}"
      ],
      "since": [
        "2.2-dev33"
      ],
      "return type": "Date",
      "patterns": [
        "%timespan% (ago|in the past|before [the] [date] %date%)",
        "%timespan% (later|(from|after) [the] [date] %date%)"
      ]
    },
    {
      "id": "ExprDequeuedQueue",
      "name": "De-queue Queue (Experimental)",
      "description": [
        "Requires the using queues experimental feature flag to be enabled.\n\nUnrolls a queue into a regular list of values, which can be stored in a list variable.\nThe order of the list will be the same as the order of the elements in the queue.\nIf a list variable is set to this, it will use numerical indices.\nThe original queue will not be changed."
      ],
      "examples": [
        "set {queue} to a new queue\nadd \"hello\" and \"there\" to {queue}\nset {list::*} to dequeued {queue}"
      ],
      "since": [
        "2.10 (experimental)"
      ],
      "return type": "Object",
      "patterns": [
        "(de|un)queued %queue%",
        "unrolled %queue%"
      ]
    },
    {
      "id": "ExprDefaultValue",
      "name": "Default Value",
      "description": [
        "A shorthand expression for giving things a default value. If the first thing isn't set, the second thing will be returned."
      ],
      "examples": [
        "broadcast {score::%player's uuid%} otherwise \"%player% has no score!\""
      ],
      "since": [
        "2.2-dev36"
      ],
      "return type": "Object",
      "patterns": [
        "%objects% (otherwise|?) %objects%"
      ]
    },
    {
      "id": "ExprDifference",
      "name": "Difference",
      "description": [
        "The difference between two values",
        "Supported types include numbers, dates and times."
      ],
      "examples": [
        "if difference between {command::%player%::lastuse} and now is smaller than a minute:",
        "\tmessage \"You have to wait a minute before using this command again!\""
      ],
      "since": [
        "1.4"
      ],
      "return type": "Object",
      "patterns": [
        "difference (between|of) %object% and %object%"
      ]
    },
    {
      "id": "ExprDifficulty",
      "name": "Difficulty",
      "description": [
        "The difficulty of a world."
      ],
      "examples": [
        "set the difficulty of \"world\" to hard"
      ],
      "since": [
        "2.3"
      ],
      "return type": "Difficulty",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] difficult(y|ies) of %worlds%",
        "%worlds%'[s] difficult(y|ies)"
      ]
    },
    {
      "id": "ExprDirection",
      "name": "Direction",
      "description": [
        "A helper expression for the direction type."
      ],
      "examples": [
        "thrust the player upwards",
        "set the block behind the player to water",
        "loop blocks above the player:",
        "\tset {_rand} to a random integer between 1 and 10",
        "\tset the block {_rand} meters south east of the loop-block to stone",
        "block in horizontal facing of the clicked entity from the player is air",
        "spawn a creeper 1.5 meters horizontally behind the player",
        "spawn a TNT 5 meters above and 2 meters horizontally behind the player",
        "thrust the last spawned TNT in the horizontal direction of the player with speed 0.2",
        "push the player upwards and horizontally forward at speed 0.5",
        "push the clicked entity in in the direction of the player at speed -0.5",
        "open the inventory of the block 2 blocks below the player to the player",
        "teleport the clicked entity behind the player",
        "grow a regular tree 2 meters horizontally behind the player"
      ],
      "since": [
        "1.0 (basic), 2.0 (extended)"
      ],
      "return type": "Direction",
      "patterns": [
        "[%number% [(block|met(er|re))[s]] [to the]] (north[(-| |)(east|west)][(ward(s|ly|)|er(n|ly|))] [of]|south[(-| |)(east|west)][(ward(s|ly|)|er(n|ly|))] [of]|(east|west)[(ward(s|ly|)|er(n|ly|))] [of]|above|over|(up|down)[ward(s|ly|)]|below|under[neath]|beneath) [%direction%]",
        "[%number% [(block|met(er|re))[s]]] in [the] (direction|horizontal direction|facing|horizontal facing) of %entity/block% (of|from|)",
        "[%number% [(block|met(er|re))[s]]] in %entity/block%'[s] (direction|horizontal direction|facing|horizontal facing) (of|from|)",
        "[%number% [(block|met(er|re))[s]]] (in[ ]front [of]|forward[s]|behind|backwards|[to the] (right|left) [of])",
        "[%number% [(block|met(er|re))[s]]] horizontal[ly] (in[ ]front [of]|forward[s]|behind|backwards|to the (right|left) [of])"
      ]
    },
    {
      "id": "ExprDisplayBillboard",
      "name": "Display Billboard",
      "description": [
        "Returns or changes the billboard setting of displays.",
        "This describes the axes/points around which the display can pivot.",
        "Displays spawn with the 'fixed' billboard by default. Resetting this expression will also set it to 'fixed'."
      ],
      "examples": [
        "set billboard of the last spawned text display to center"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Display Billboard",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] bill[ |-]board[ing] [setting] [of %displays%]",
        "%displays%'[s] bill[ |-]board[ing] [setting]"
      ]
    },
    {
      "id": "ExprDisplayBrightness",
      "name": "Display Brightness",
      "description": [
        "Returns or changes the brightness override of displays.",
        "Unmodified displays will not have a brightness override value set. Resetting or deleting this value will remove the override.",
        "Use the 'block' or 'sky' options to get/change specific values or get both values as a list by using neither option.",
        "NOTE: setting only one of the sky/block light overrides of a display without an existing override will set both sky and block light to the given value. Make sure to set both block and sky levels to your desired values for the best results. Likewise, you can only clear the brightness override, you cannot clear/reset the sky/block values individually."
      ],
      "examples": [
        "set sky light override of the last spawned text display to 7",
        "subtract 3 from the block light level override of the last spawned text display",
        "if sky light level override of {_display} is 5:",
        "\tclear brightness override of {_display}"
      ],
      "since": [
        "2.10"
      ],
      "return type": "integer",
      "changers": [
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [block|sky] (light [level]|brightness) override[s] of %displays%",
        "%displays%'[s] [block|sky] (light [level]|brightness) override[s]"
      ]
    },
    {
      "id": "ExprDisplayGlowOverride",
      "name": "Display Glow Color Override",
      "description": [
        "Returns or changes the glowing color override of displays.",
        "This overrides whatever color is already set for the scoreboard team of the displays."
      ],
      "examples": [
        "set glow color override of the last spawned text display to blue"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Color",
      "changers": [
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] glow[ing] colo[u]r[s] override[s] [of %displays%]",
        "%displays%'[s] glow[ing] colo[u]r[s] override[s]"
      ]
    },
    {
      "id": "ExprDisplayHeightWidth",
      "name": "Display Height/Width",
      "description": [
        "Returns or changes the height or width of displays.",
        "The rendering culling bounding box spans horizontally width/2 from entity position, which determines the point at which the display will be frustum culled (no longer rendered because the game determines you are no longer able to see it).",
        "If set to 0, no culling will occur on both the vertical and horizontal directions. Default is 0.0."
      ],
      "examples": [
        "set display height of the last spawned text display to 2.5"
      ],
      "since": [
        "2.10"
      ],
      "return type": "float",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] display (height|width) [of %displays%]",
        "%displays%'[s] display (height|width)"
      ]
    },
    {
      "id": "ExprDisplayInterpolation",
      "name": "Display Interpolation Delay/Duration",
      "description": [
        "Returns or changes the interpolation delay/duration of displays.",
        "Interpolation duration is the amount of time a display will take to interpolate, or shift, between its current state and a new state.",
        "Interpolation delay is the amount of ticks before client-side interpolation will commence.Setting to 0 seconds will make it immediate.",
        "Resetting either value will return that value to 0."
      ],
      "examples": [
        "set interpolation delay of the last spawned text display to 2 ticks"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] interpolation (delay|duration)[s] [of %displays%]",
        "%displays%'[s] interpolation (delay|duration)[s]"
      ]
    },
    {
      "id": "ExprDisplayShadow",
      "name": "Display Shadow Radius/Strength",
      "description": [
        "Returns or changes the shadow radius/strength of displays."
      ],
      "examples": [
        "set shadow radius of the last spawned text display to 1.75"
      ],
      "since": [
        "2.10"
      ],
      "return type": "float",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] shadow (radius|strength) [of %displays%]",
        "%displays%'[s] shadow (radius|strength)"
      ]
    },
    {
      "id": "ExprDisplayTeleportDuration",
      "name": "Display Teleport Delay/Duration",
      "description": [
        "The teleport duration of displays is the amount of time it takes to get between locations.",
        "0 means that updates are applied immediately.",
        "1 means that the display entity will move from current position to the updated one over one tick.",
        "Higher values spread the movement over multiple ticks. Max of 59 ticks."
      ],
      "examples": [
        "set teleport delay of the last spawned text display to 2 ticks",
        "teleport last spawned text display to {_location}",
        "wait 2 ticks",
        "message \"display entity has arrived at %{_location}%\""
      ],
      "since": [
        "2.10"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] teleport[ation] duration[s] [of %displays%]",
        "%displays%'[s] teleport[ation] duration[s]"
      ],
      "required plugins": [
        "Spigot 1.20.4+"
      ]
    },
    {
      "id": "ExprDisplayTransformationRotation",
      "name": "Display Transformation Rotation",
      "description": [
        "Returns or changes the transformation rotation of displays.",
        "The left rotation is applied first, with the right rotation then being applied based on the rotated axis."
      ],
      "examples": [
        "set left transformation rotation of last spawned block display to quaternion(1, 0, 0, 0) # reset block display"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Quaternion",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (left|right) [transformation] rotation [of %displays%]",
        "%displays%'[s] (left|right) [transformation] rotation"
      ]
    },
    {
      "id": "ExprDisplayTransformationScaleTranslation",
      "name": "Display Transformation Scale/Translation",
      "description": [
        "Returns or changes the transformation scale or translation of displays."
      ],
      "examples": [
        "set transformation translation of display to vector from -0.5, -0.5, -0.5 # Center the display in the same position as a block"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Vector",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (display|[display] transformation) (scale|translation) of %displays%",
        "%displays%'[s] (display|[display] transformation) (scale|translation)"
      ]
    },
    {
      "id": "ExprDisplayViewRange",
      "name": "Display View Range",
      "description": [
        "Returns or changes the view range of displays.",
        "Default value is 1.0. This value is then multiplied by 64 and the player's entity view distance setting to determine the actual range.",
        "For example, a player with 150% entity view distance will see a block display with a view range of 1.2 at 1.2 * 64 * 150% = 115.2 blocks away."
      ],
      "examples": [
        "set view range of the last spawned text display to 2.9"
      ],
      "since": [
        "2.10"
      ],
      "return type": "float",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [display] view (range|radius) [of %displays%]",
        "%displays%'[s] [display] view (range|radius)"
      ]
    },
    {
      "id": "ExprDistance",
      "name": "Distance",
      "description": [
        "The distance between two points."
      ],
      "examples": [
        "if the distance between the player and {home::%uuid of player%} is smaller than 20:",
        "\tmessage \"You're very close to your home!\""
      ],
      "since": [
        "1.0"
      ],
      "return type": "Number",
      "patterns": [
        "[the] distance between %location% and %location%"
      ]
    },
    {
      "id": "ExprItemOwner",
      "name": "Dropped Item Owner",
      "description": [
        "The uuid of the owner of the dropped item.\nSetting the owner of a dropped item means only that entity or player can pick it up.\nDropping an item does not automatically make the entity or player the owner.\n"
      ],
      "since": [
        "2.11"
      ],
      "return type": "UUID",
      "changers": [
        "delete",
        "set"
      ],
      "patterns": [
        "[the] uuid of [the] [dropped] item owner [of %itementities%]",
        "[the] [dropped] item owner's uuid [of %itementities%]"
      ]
    },
    {
      "id": "ExprItemThrower",
      "name": "Dropped Item Thrower",
      "description": [
        "The uuid of the entity or player that threw/dropped the dropped item."
      ],
      "examples": [
        "set the uuid of the dropped item thrower of {_dropped item} to player\nif the uuid of the dropped item thrower of {_dropped item} is uuid of player:\n",
        "clear the item thrower of {_dropped item}"
      ],
      "since": [
        "2.11"
      ],
      "return type": "UUID",
      "changers": [
        "delete",
        "set"
      ],
      "patterns": [
        "[the] uuid of [the] [dropped] item thrower [of %itementities%]",
        "[the] [dropped] item thrower's uuid [of %itementities%]"
      ]
    },
    {
      "id": "ExprDrops",
      "name": "Drops",
      "description": [
        "Only works in death events. Holds the drops of the dying creature. Drops can be prevented by removing them with \"remove ... from drops\", e.g. \"remove all pickaxes from the drops\", or \"clear drops\" if you don't want any drops at all."
      ],
      "examples": [
        "clear drops",
        "remove 4 planks from the drops"
      ],
      "since": [
        "1.0"
      ],
      "return type": "Item Type",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] drops"
      ]
    },
    {
      "id": "ExprDropsOfBlock",
      "name": "Drops Of Block",
      "description": [
        "A list of the items that will drop when a block is broken."
      ],
      "examples": [
        "on break of block:",
        "\tgive drops of block using player's tool to player"
      ],
      "since": [
        "2.5.1"
      ],
      "return type": "Item Type",
      "patterns": [
        "[(all|the|all [of] the)] drops of %blocks% [(using|with) %itemtype% [(as %entity%)]]",
        "%blocks%'s drops [(using|with) %itemtype% [(as %entity%)]]"
      ],
      "required plugins": [
        "Minecraft 1.15+ ('as %entity%')"
      ]
    },
    {
      "id": "ExprElement",
      "name": "Elements",
      "description": [
        "The first, last, range or a random element of a set, e.g. a list variable, or a queue.",
        "Asking for elements from a queue will also remove them from the queue, see the new queue expression for more information.",
        "See also: random expression"
      ],
      "examples": [
        "broadcast the first 3 elements of {top players::*}",
        "set {_last} to last element of {top players::*}",
        "set {_random player} to random element out of all players",
        "send 2nd last element of {top players::*} to player",
        "set {page2::*} to elements from 11 to 20 of {top players::*}",
        "broadcast the 1st element in {queue}",
        "broadcast the first 3 elements in {queue}"
      ],
      "since": [
        "2.0, 2.7 (relative to last element), 2.8.0 (range of elements)"
      ],
      "return type": "Object",
      "patterns": [
        "[the] (first|last) element [out] of %objects%",
        "[the] (first|last) %integer% elements [out] of %objects%",
        "[a] random element [out] of %objects%",
        "[the] %integer%(st|nd|rd|th) [[to] last] element [out] of %objects%",
        "[the] elements (from|between) %integer% (to|and) %integer% [out] of %objects%",
        "[the] (first|next|last) element (of|in) %queue%",
        "[the] (first|last) %integer% elements (of|in) %queue%",
        "[a] random element (of|in) %queue%",
        "[the] %integer%(st|nd|rd|th) [[to] last] element (of|in) %queue%",
        "[the] elements (from|between) %integer% (to|and) %integer% (of|in) %queue%"
      ]
    },
    {
      "id": "ExprEnchantItem",
      "name": "Enchant Item",
      "description": [
        "The enchant item in an enchant prepare event or enchant event.",
        "It can be modified, but enchantments will still be applied in the enchant event."
      ],
      "examples": [
        "on enchant:",
        "\tset the enchanted item to a diamond chestplate",
        "on enchant prepare:",
        "\tset the enchant item to a wooden sword"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Item Type",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] enchant[ed] item"
      ]
    },
    {
      "id": "ExprEnchantingExpCost",
      "name": "Enchanting Experience Cost",
      "description": [
        "The cost of enchanting in an enchant event.",
        "This is number that was displayed in the enchantment table, not the actual number of levels removed."
      ],
      "examples": [
        "on enchant:",
        "\tsend \"Cost: %the displayed enchanting cost%\" to player"
      ],
      "since": [
        "2.5"
      ],
      "return type": "long",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] [displayed] ([e]xp[erience]|enchanting) cost"
      ]
    },
    {
      "id": "ExprEnchantmentBonus",
      "name": "Enchantment Bonus",
      "description": [
        "The enchantment bonus in an enchant prepare event. This represents the number of bookshelves affecting/surrounding the enchantment table."
      ],
      "examples": [
        "on enchant:",
        "\tsend \"There are %enchantment bonus% bookshelves surrounding this enchantment table!\" to player"
      ],
      "since": [
        "2.5"
      ],
      "return type": "long",
      "patterns": [
        "[the] enchantment bonus"
      ]
    },
    {
      "id": "ExprEnchantmentLevel",
      "name": "Enchantment Level",
      "description": [
        "The level of a particular enchantment on an item."
      ],
      "examples": [
        "player's tool is a sword of sharpness:",
        "\tmessage \"You have a sword of sharpness %level of sharpness of the player's tool% equipped\""
      ],
      "since": [
        "2.0"
      ],
      "return type": "long",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] [enchant[ment]] level[s] of %enchantments% (on|of) %itemtypes%",
        "[the] %enchantments% [enchant[ment]] level[s] (on|of) %itemtypes%",
        "%itemtypes%'[s] %enchantments% [enchant[ment]] level[s]",
        "%itemtypes%'[s] [enchant[ment]] level[s] of %enchantments%"
      ]
    },
    {
      "id": "ExprEnchantmentOffer",
      "name": "Enchantment Offer",
      "description": [
        "The enchantment offer in enchant prepare events."
      ],
      "examples": [
        "on enchant prepare:",
        "\tsend \"Your enchantment offers are: %the enchantment offers%\" to player"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Enchantment Offer",
      "changers": [
        "delete",
        "set"
      ],
      "patterns": [
        "[all [of]] [the] enchant[ment] offers",
        "enchant[ment] offer[s] %numbers%",
        "[the] %number%(st|nd|rd|th) enchant[ment] offer"
      ],
      "required plugins": [
        "1.11 or newer"
      ]
    },
    {
      "id": "ExprEnchantmentOfferCost",
      "name": "Enchantment Offer Cost",
      "description": [
        "The cost of an enchantment offer. This is displayed to the right of an enchantment offer.",
        "If the cost is changed, it will always be at least 1.",
        "This changes how many levels are required to enchant, but does not change the number of levels removed.",
        "To change the number of levels removed, use the enchant event."
      ],
      "examples": [
        "set cost of enchantment offer 1 to 50"
      ],
      "since": [
        "2.5"
      ],
      "return type": "long",
      "changers": [
        "add",
        "delete",
        "set"
      ],
      "patterns": [
        "[the] [enchant[ment]] cost of %enchantmentoffers%",
        "%enchantmentoffers%'[s] [enchant[ment]] cost"
      ],
      "required plugins": [
        "1.11 or newer"
      ]
    },
    {
      "id": "ExprEnderChest",
      "name": "Ender Chest",
      "description": [
        "The ender chest of a player."
      ],
      "examples": [
        "open the player's ender chest to the player"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Inventory",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] ender[ ]chest[s] of %players%",
        "%players%'[s] ender[ ]chest[s]"
      ]
    },
    {
      "id": "ExprCarryingBlockData",
      "name": "Enderman Carrying BlockData",
      "description": [
        "The block data an enderman is carrying.",
        "Custom attributes such as NBT or names do not transfer over.",
        "Blocks, blockdatas and items are acceptable objects to change the carrying block."
      ],
      "examples": [
        "broadcast the carrying blockdata of last spawned enderman",
        "set the carried block of last spawned enderman to an oak log",
        "set the carrying block data of {_enderman} to oak stairs[facing=north]",
        "set the carried blockdata of {_enderman} to {_item}",
        "clear the carried blockdata of {_enderman}"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Block Data",
      "changers": [
        "delete",
        "set"
      ],
      "patterns": [
        "[the] carr(ied|ying) block[[ ]data] of %livingentities%",
        "%livingentities%'[s] carr(ied|ying) block[[ ]data]"
      ]
    },
    {
      "id": "ExprEntities",
      "name": "Entities",
      "description": [
        "All entities in all worlds, in a specific world, in a chunk, in a radius around a certain location or within two locations. e.g. all players, all creepers in the player's world, or players in radius 100 of the player."
      ],
      "examples": [
        "kill all creepers in the player's world",
        "send \"Psst!\" to all players within 100 meters of the player",
        "give a diamond to all ops",
        "heal all tamed wolves in radius 2000 around {town center}",
        "delete all monsters in chunk at player",
        "size of all players within {_corner::1} and {_corner::2}}"
      ],
      "since": [
        "1.2.1, 2.5 (chunks), 2.10 (within)"
      ],
      "return type": "Entity",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all"
      ],
      "patterns": [
        "[(all [[of] the]|the)] %*entitydatas% [(in|of) ([world[s]] %worlds%|%chunks%)]",
        "[(all [[of] the]|the)] entities of type[s] %entitydatas% [(in|of) ([world[s]] %worlds%|%chunks%)]",
        "[(all [[of] the]|the)] %*entitydatas% (within|[with]in radius) %number% [(block[s]|met(er|re)[s])] (of|around) %location%",
        "[(all [[of] the]|the)] entities of type[s] %entitydatas% in radius %number% (of|around) %location%",
        "[(all [[of] the]|the)] %*entitydatas% within %location% and %location%",
        "[(all [[of] the]|the)] entities of type[s] %entitydatas% within %location% and %location%"
      ]
    },
    {
      "id": "ExprAI",
      "name": "Entity AI",
      "description": [
        "Returns whether an entity has AI."
      ],
      "examples": [
        "set artificial intelligence of target entity to false"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Boolean",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] (ai|artificial intelligence) of %livingentities%",
        "%livingentities%'[s] (ai|artificial intelligence)"
      ]
    },
    {
      "id": "ExprEntityAttribute",
      "name": "Entity Attribute",
      "description": [
        "The numerical value of an entity's particular attribute.",
        "Note that the movement speed attribute cannot be reliably used for players. For that purpose, use the speed expression instead.",
        "Resetting an entity's attribute is only available in Minecraft 1.11 and above."
      ],
      "examples": [
        "on damage of player:",
        "\tsend \"You are wounded!\" to victim",
        "\tset victim's attack speed attribute to 2"
      ],
      "since": [
        "2.5, 2.6.1 (final attribute value)"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] %attributetype% [((total|final|modified))] attribute [value] of %entities%",
        "%entities%'[s] %attributetype% [((total|final|modified))] attribute [value]"
      ]
    },
    {
      "id": "ExprFireTicks",
      "name": "Entity Fire Burn Duration",
      "description": [
        "How much time an entity will be burning for."
      ],
      "examples": [
        "send \"You will stop burning in %fire time of player%\"",
        "send the max burn time of target"
      ],
      "since": [
        "2.7, 2.10 (maximum)"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [max[imum]] (burn[ing]|fire) (time|duration) of %entities%",
        "%entities%'[s] [max[imum]] (burn[ing]|fire) (time|duration)"
      ]
    },
    {
      "id": "ExprEntityOwner",
      "name": "Entity Owner",
      "description": [
        "The owner of a tameable entity (i.e. horse or wolf)."
      ],
      "since": [
        "2.5"
      ],
      "return type": "Offline Player",
      "changers": [
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (owner|tamer) of %livingentities%",
        "%livingentities%'[s] (owner|tamer)"
      ]
    },
    {
      "id": "ExprEntitySize",
      "name": "Entity Size",
      "description": [
        "Changes the entity size of slimes and phantoms. This is not the same as changing the scale attribute of an entity.",
        "When changing the size of a slime, its health is fully resorted and will have changes done to its max health, movement speed and attack damage.",
        "The default minecraft size of a slime is anywhere between 0 and 2, with a maximum of 126.",
        "The default minecraft size of a phantom is 0 with a maximum size of 64."
      ],
      "since": [
        "2.11"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] entity size of %livingentities%",
        "%livingentities%'[s] entity size"
      ]
    },
    {
      "id": "ExprEntitySnapshot",
      "name": "Entity Snapshot",
      "description": [
        "Returns the entity snapshot of a provided entity, which includes all the data associated with it (name, health, attributes, etc.) at the time this expression is used.",
        "Individual attributes of a snapshot cannot be modified or retrieved."
      ],
      "examples": [
        "spawn a pig at location(0, 0, 0):",
        "\tset the max health of entity to 20",
        "\tset the health of entity to 20",
        "\tset {_snapshot} to the entity snapshot of entity",
        "\tclear entity",
        "spawn {_snapshot} at location(0, 0, 0)"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Entity Snapshot",
      "patterns": [
        "[the] entity snapshot of %entities/entitydatas%",
        "%entities/entitydatas%'[s] entity snapshot"
      ],
      "required plugins": [
        "Minecraft 1.20.2+"
      ]
    },
    {
      "id": "ExprEntitySound",
      "name": "Entity Sound",
      "description": [
        "Gets the sound that a given entity will make in a specific scenario."
      ],
      "examples": [
        "play sound (hurt sound of player) at player",
        "set {_sounds::*} to death sounds of (all mobs in radius 10 of player)"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Text",
      "patterns": [
        "[the] (damage|hurt) sound[s] of %livingentities%",
        "%livingentities%'[s] (damage|hurt) sound[s]",
        "[the] death sound[s] of %livingentities%",
        "%livingentities%'[s] death sound[s]",
        "[the] [(tall|high)|(low|normal)] fall damage sound[s] [from [[a] height [of]] %number%] of %livingentities%",
        "%livingentities%'[s] [(tall|high)|(low|normal)] fall [damage] sound[s] [from [[a] height [of]] %number%]",
        "[the] swim[ming] sound[s] of %livingentities%",
        "%livingentities%'[s] swim[ming] sound[s]",
        "[the] [(fast|speedy)] splash sound[s] of %livingentities%",
        "%livingentities%'[s] [(fast|speedy)] splash sound[s]",
        "[the] eat[ing] sound[s] of %livingentities% [(with|using|[while] eating [a]) %itemtype%]",
        "%livingentities%'[s] eat[ing] sound[s]",
        "[the] drink[ing] sound[s] of %livingentities% [(with|using|[while] drinking [a]) %itemtype%]",
        "%livingentities%'[s] drink[ing] sound[s]",
        "[the] ambient sound[s] of %livingentities%",
        "%livingentities%'[s] ambient sound[s]"
      ],
      "required plugins": [
        "Spigot 1.19.2+"
      ]
    },
    {
      "id": "ExprEntityStorageEntityCount",
      "name": "Entity Storage Entity Count",
      "description": [
        "The current number of entities stored inside an entity block storage (i.e. beehive).",
        "The maximum amount of entities an entity block storage can hold."
      ],
      "examples": [
        "broadcast the stored entity count of {_beehive}",
        "set the maximum entity count of {_beehive} to 20"
      ],
      "since": [
        "2.11"
      ],
      "return type": "integer",
      "patterns": [
        "[the] [max[imum]] [stored] entity count [of %blocks%]",
        "%blocks%'[s] [max[imum]] [stored] entity count"
      ]
    },
    {
      "id": "ExprFromUUID",
      "name": "Entity/Player/World from UUID",
      "description": [
        "Get an entity, player, offline player or world from a UUID.",
        "Unloaded entities or players that are offline (when using 'player from %uuid%') will return nothing."
      ],
      "examples": [
        "set {_player} to player from \"a0789aeb-7b46-43f6-86fb-cb671fed5775\" parsed as uuid",
        "set {_offline player} to offline player from {_some uuid}",
        "set {_entity} to entity from {_some uuid}",
        "set {_world} to world from {_some uuid}"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Object",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all"
      ],
      "patterns": [
        "[offline[ ]]player[s] from %uuids%",
        "entit(y|ies) from %uuids%",
        "world[s] from %uuids%"
      ]
    },
    {
      "id": "ExprExhaustion",
      "name": "Exhaustion",
      "description": [
        "The exhaustion of a player. This is mainly used to determine the rate of hunger depletion."
      ],
      "examples": [
        "set exhaustion of all players to 1"
      ],
      "since": [
        "2.2-dev35"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] exhaustion of %players%",
        "%players%'[s] exhaustion"
      ]
    },
    {
      "id": "ExprExperience",
      "name": "Experience",
      "description": [
        "How much experience was spawned in an experience spawn or block break event. Can be changed."
      ],
      "examples": [
        "on experience spawn:",
        "\tadd 5 to the spawned experience",
        "",
        "on break of coal ore:",
        "\tclear dropped experience",
        "",
        "on break of diamond ore:",
        "\tif tool of player = diamond pickaxe:",
        "\t\tadd 100 to dropped experience",
        "",
        "on breed:",
        "\tbreeding father is a cow",
        "\tset dropped experience to 10",
        "",
        "on fish catch:",
        "\tadd 70 to dropped experience"
      ],
      "since": [
        "2.1, 2.5.3 (block break event), 2.7 (experience change event), 2.10 (breeding, fishing)"
      ],
      "return type": "Experience",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (spawned|dropped|) [e]xp[erience] [orb[s]]"
      ]
    },
    {
      "id": "ExprExperienceCooldownChangeReason",
      "name": "Experience Cooldown Change Reason",
      "description": [
        "The experience change reason within an experience cooldown change event."
      ],
      "examples": [
        "on player experience cooldown change:",
        "\tif xp cooldown change reason is plugin:",
        "\t\t#Changed by a plugin",
        "\telse if xp cooldown change reason is orb pickup:",
        "\t\t#Changed by picking up xp orb"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Experience Cooldown Change Reason",
      "patterns": [
        "[the] (experience|[e]xp) cooldown change (reason|cause|type)"
      ]
    },
    {
      "id": "ExprExperienceCooldown",
      "name": "Experience Pickup Cooldown",
      "description": [
        "The experience cooldown of a player.",
        "Experience cooldown is how long until a player can pick up another orb of experience.",
        "The cooldown of a player must be 0 to pick up another orb of experience."
      ],
      "examples": [
        "send experience cooldown of player",
        "set the xp pickup cooldown of player to 1 hour",
        "if exp collection cooldown of player >= 10 minutes:",
        "\tclear the experience pickup cooldown of player"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (experience|[e]xp) [pickup|collection] cooldown of %players%",
        "%players%'[s] (experience|[e]xp) [pickup|collection] cooldown"
      ]
    },
    {
      "id": "ExprExplodedBlocks",
      "name": "Exploded Blocks",
      "description": [
        "Get all the blocks that were destroyed in an explode event. Supports add/remove/set/clear/delete blocks."
      ],
      "examples": [
        "on explode:",
        "\tloop exploded blocks:",
        "\t\tadd loop-block to {exploded::blocks::*}",
        "",
        "on explode:",
        "\tloop exploded blocks:",
        "\t\tif loop-block is grass:",
        "\t\t\tremove loop-block from exploded blocks",
        "",
        "on explode:",
        "\tclear exploded blocks",
        "",
        "on explode:",
        "\tset exploded blocks to blocks in radius 10 around event-entity",
        "",
        "on explode:",
        "\tadd blocks above event-entity to exploded blocks"
      ],
      "since": [
        "2.5, 2.8.6 (modify blocks)"
      ],
      "return type": "Block",
      "changers": [
        "add",
        "delete",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] exploded blocks"
      ]
    },
    {
      "id": "ExprExplosionBlockYield",
      "name": "Explosion Block Yield",
      "description": [
        "The percentage of exploded blocks dropped in an explosion event.",
        "When changing the yield, a value greater than 1 will function the same as using 1.",
        "Attempting to change the yield to a value less than 0 will have no effect."
      ],
      "examples": [
        "on explode:",
        "set the explosion's block yield to 10%"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "delete",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] [explosion['s]] block (yield|amount)",
        "[the] percentage of blocks dropped"
      ]
    },
    {
      "id": "ExprExplosionYield",
      "name": "Explosion Yield",
      "description": [
        "The yield of the explosion in an explosion prime event. This is how big the explosion is.",
        " When changing the yield, values less than 0 will be ignored.",
        " Read this wiki page for more information"
      ],
      "examples": [
        "on explosion prime:",
        "\tset the yield of the explosion to 10"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "delete",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] explosion (yield|radius|size)",
        "[the] (yield|radius|size) of [the] explosion"
      ]
    },
    {
      "id": "ExprExplosiveYield",
      "name": "Explosive Yield",
      "description": [
        "The yield of an explosive (creeper, ghast, primed tnt, fireball, etc.). This is how big of an explosion is caused by the entity.",
        "Read this wiki page for more information.",
        "The yield of ghasts can only be set to between 0 and 127."
      ],
      "examples": [
        "on spawn of a creeper:",
        "\tset the explosive yield of the event-entity to 10"
      ],
      "since": [
        "2.5, 2.11 (ghasts)"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "delete",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] explosive (yield|radius|size|power) of %entities%",
        "%entities%'[s] explosive (yield|radius|size|power)"
      ],
      "required plugins": [
        "Paper (ghasts)"
      ]
    },
    {
      "id": "ExprFacing",
      "name": "Facing",
      "description": [
        "The facing of an entity or block, i.e. exactly north, south, east, west, up or down (unlike direction which is the exact direction, e.g. '0.5 south and 0.7 east')"
      ],
      "examples": [
        "# makes a bridge",
        "loop blocks from the block below the player in the horizontal facing of the player:",
        "\tset loop-block to cobblestone"
      ],
      "since": [
        "1.4"
      ],
      "return type": "Direction",
      "patterns": [
        "[the] (horizontal|) facing of %livingentities/blocks%",
        "%livingentities/blocks%'[s] (horizontal|) facing"
      ]
    },
    {
      "id": "ExprFallDistance",
      "name": "Fall Distance",
      "description": [
        "The distance an entity has fallen for."
      ],
      "examples": [
        "set all entities' fall distance to 10",
        "on damage:",
        "\tsend \"%victim's fall distance%\" to victim"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] fall[en] (distance|height) of %entities%",
        "%entities%'[s] fall[en] (distance|height)"
      ]
    },
    {
      "id": "ExprFertilizedBlocks",
      "name": "Fertilized Blocks",
      "description": [
        "The blocks fertilized in block fertilize events."
      ],
      "examples": [
        "the fertilized blocks"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Block",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[all] [the] fertilized blocks"
      ],
      "required plugins": [
        "Minecraft 1.13 or newer"
      ]
    },
    {
      "id": "ExprFilter",
      "name": "Filter",
      "description": [
        "Filters a list based on a condition. ",
        "For example, if you ran 'broadcast \"something\" and \"something else\" where [string input is \"something\"]', ",
        "only \"something\" would be broadcast as it is the only string that matched the condition."
      ],
      "examples": [
        "send \"congrats on being staff!\" to all players where [player input has permission \"staff\"]",
        "loop (all blocks in radius 5 of player) where [block input is not air]:"
      ],
      "since": [
        "2.2-dev36, 2.10 (parenthesis pattern)"
      ],
      "return type": "Object",
      "patterns": [
        "%objects% (where|that match) \\[<.+>\\]",
        "%objects% (where|that match) (<.+>)"
      ]
    },
    {
      "id": "ExprFinalDamage",
      "name": "Final Damage",
      "description": [
        "How much damage is done in a damage event, considering all types of damage reduction. Can NOT be changed."
      ],
      "examples": [
        "send \"%final damage%\" to victim"
      ],
      "since": [
        "2.2-dev19"
      ],
      "return type": "Number",
      "patterns": [
        "[the] final damage"
      ]
    },
    {
      "id": "ExprFireworkEffect",
      "name": "Firework Effect",
      "description": [
        "Represents a 'firework effect' which can be used in the launch firework effect."
      ],
      "examples": [
        "launch flickering trailing burst firework colored blue and green at player",
        "launch trailing flickering star colored purple, yellow, blue, green and red fading to pink at target entity",
        "launch ball large colored red, purple and white fading to light green and black at player's location with duration 1"
      ],
      "since": [
        "2.4"
      ],
      "return type": "Firework Effect",
      "patterns": [
        "(|flickering|trailing|flickering trailing|trailing flickering) %fireworktype% [firework [effect]] colo[u]red %colors%",
        "(|flickering|trailing|flickering trailing|trailing flickering) %fireworktype% [firework [effect]] colo[u]red %colors% fad(e|ing) [to] %colors%"
      ]
    },
    {
      "id": "ExprFishingApproachAngle",
      "name": "Fishing Approach Angle",
      "description": [
        "Returns the angle at which the fish will approach the fishing hook, after the wait time.",
        "The angle is in degrees, with 0 being positive Z, 90 being negative X, 180 being negative Z, and 270 being positive X.",
        "By default, returns a value between 0 and 360 degrees."
      ],
      "examples": [
        "on fish approach:",
        "\tif any:",
        "\t\tmaximum fishing approach angle is bigger than 300.5 degrees",
        "\t\tmin fishing approach angle is smaller than 59.5 degrees",
        "\tthen:",
        "\t\tcancel event"
      ],
      "since": [
        "2.10"
      ],
      "return type": "float",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "(min[imum]|max[imum]) fish[ing] approach[ing] angle"
      ]
    },
    {
      "id": "ExprFishingBiteTime",
      "name": "Fishing Bite Time",
      "description": [
        "Returns the time it takes a fish to bite the fishing hook, after it started approaching the hook.",
        "May return a timespan of 0 seconds. If modifying the value, it should be at least 1 tick."
      ],
      "examples": [
        "on fish approach:",
        "\tset fishing bite time to 5 seconds"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "fish[ing] bit(e|ing) [wait] time"
      ],
      "required plugins": [
        "Paper 1.20.6"
      ]
    },
    {
      "id": "ExprFishingHook",
      "name": "Fishing Hook",
      "description": [
        "The fishing hook in a fishing event."
      ],
      "examples": [
        "on fish line cast:",
        "\twait a second",
        "\tteleport player to fishing hook"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Entity",
      "changers": [
        "delete"
      ],
      "patterns": [
        "[the] fish[ing] (hook|bobber)"
      ]
    },
    {
      "id": "ExprFishingHookEntity",
      "name": "Fishing Hooked Entity",
      "description": [
        "Returns the hooked entity in the hooked event."
      ],
      "examples": [
        "on entity hooked:",
        "\tif hooked entity is a player:",
        "\t\tteleport hooked entity to player"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Entity",
      "changers": [
        "delete",
        "set"
      ],
      "patterns": [
        "hook[ed] entity"
      ]
    },
    {
      "id": "ExprFishingWaitTime",
      "name": "Fishing Wait Time",
      "description": [
        "Returns the minimum and/or maximum waiting time of the fishing hook. ",
        "Default minimum value is 5 seconds and maximum is 30 seconds, before lure is applied."
      ],
      "examples": [
        "on fishing line cast:",
        "\tset min fish waiting time to 10 seconds",
        "\tset max fishing waiting time to 20 seconds"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "(min[imum]|max[imum]) fish[ing] wait[ing] time"
      ]
    },
    {
      "id": "ExprFlightMode",
      "name": "Flight Mode",
      "description": [
        "Whether the player(s) are allowed to fly. Use Make Fly effect to force player(s) to fly."
      ],
      "examples": [
        "set flight mode of player to true",
        "send \"%flying state of all players%\""
      ],
      "since": [
        "2.2-dev34"
      ],
      "return type": "Boolean",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] fl(y[ing]|ight) (mode|state) of %players%",
        "%players%'[s] fl(y[ing]|ight) (mode|state)"
      ]
    },
    {
      "id": "ExprFoodLevel",
      "name": "Food Level",
      "description": [
        "The food level of a player from 0 to 10. Has several aliases: food/hunger level/meter/bar. "
      ],
      "examples": [
        "set the player's food level to 10"
      ],
      "since": [
        "1.0"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (food|hunger)[[ ](level|met(er|re)|bar)] [of %players%]",
        "%players%'[s] (food|hunger)[[ ](level|met(er|re)|bar)]"
      ]
    },
    {
      "id": "ExprFormatDate",
      "name": "Formatted Date",
      "description": [
        "Converts date to human-readable text format. By default, 'yyyy-MM-dd HH:mm:ss z' (e.g. '2018-03-30 16:03:12 +01') will be used. For reference, see this Wikipedia article."
      ],
      "examples": [
        "command /date:",
        "\ttrigger:",
        "\t\tsend \"Full date: %now formatted human-readable%\" to sender",
        "\t\tsend \"Short date: %now formatted as \"yyyy-MM-dd\"%\" to sender"
      ],
      "since": [
        "2.2-dev31, 2.7 (support variables in format)"
      ],
      "return type": "Text",
      "patterns": [
        "%dates% formatted [human-readable] [(with|as) %string%]",
        "[human-readable] formatted %dates% [(with|as) %string%]"
      ]
    },
    {
      "id": "ExprTimeState",
      "name": "Former/Future State",
      "description": [
        "Represents the value of an expression before an event happened or the value it will have directly after the event, e.g. the old or new level respectively in a level change event.",
        "Note: The past, future and present states of an expression are sometimes called 'time states' of an expression.",
        "Note 2: If you don't specify whether to use the past or future state of an expression that has different values, its default value will be used which is usually the value after the event."
      ],
      "examples": [
        "on teleport:",
        "\tformer world was \"world_nether\" # or 'world was'",
        "\tworld will be \"world\" # or 'world after the event is'",
        "on tool change:",
        "\tpast tool is an axe",
        "\tthe tool after the event will be air",
        "on weather change:",
        "\tset {weather::%world%::old} to past weather",
        "\tset {weather::%world%::current} to the new weather"
      ],
      "since": [
        "1.1"
      ],
      "return type": "Object",
      "patterns": [
        "[the] (former|past|old) [state] [of] %objects%",
        "%objects% before [the event]",
        "[the] (future|to-be|new) [state] [of] %objects%",
        "%objects%(-to-be| after[(wards| the event)])"
      ]
    },
    {
      "id": "ExprMemory",
      "name": "Free / Max / Total Memory",
      "description": [
        "The free, max or total memory of the server in Megabytes."
      ],
      "examples": [
        "while player is online:",
        "\tsend action bar \"Memory left: %free memory%/%max memory%MB\" to player",
        "\twait 5 ticks"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "double",
      "patterns": [
        "[the] [server] (free|max[imum]|total) (memory|ram)"
      ]
    },
    {
      "id": "ExprFreezeTicks",
      "name": "Freeze Time",
      "description": [
        "How much time an entity has been in powdered snow for."
      ],
      "examples": [
        "player's freeze time is less than 3 seconds:",
        "\tsend \"you're about to freeze!\" to the player"
      ],
      "since": [
        "2.7"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] freeze time of %entities%",
        "%entities%'[s] freeze time"
      ]
    },
    {
      "id": "ExprFunction",
      "name": "Function (Experimental)",
      "description": [
        "Obtain a function by name, which can be executed."
      ],
      "examples": [
        "set {_function} to the function named \"myFunction\"",
        "run {_function} with arguments 13 and true"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Function",
      "patterns": [
        "[the|a] function [named] %string% [(in|from) %script%]",
        "[the] functions [named] %strings% [(in|from) %script%]",
        "[all [[of] the]|the] functions (in|from) %script%"
      ]
    },
    {
      "id": "ExprFurnaceEventItems",
      "name": "Furnace Event Items",
      "description": [
        "Represents the different items in furnace events.",
        "Only 'smelting item' can be changed."
      ],
      "examples": [
        "on furnace smelt:",
        "\tbroadcast smelted item",
        "\t# Or 'result'",
        "on furnace extract:",
        "\tbroadcast extracted item",
        "on fuel burn:",
        "\tbroadcast burned fuel",
        "on smelting start:",
        "\tbroadcast smelting item",
        "\tclear smelting item"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Item",
      "patterns": [
        "[the] (smelted item|result[ item])",
        "[the] extracted item[s]",
        "[the] smelting item",
        "[the] burned (fuel|item)"
      ]
    },
    {
      "id": "ExprFurnaceSlot",
      "name": "Furnace Slot",
      "description": [
        "A slot of a furnace, i.e. either the ore, fuel or result slot."
      ],
      "examples": [
        "set the fuel slot of the clicked block to a lava bucket",
        "set the block's ore slot to 64 iron ore",
        "clear the result slot of the block",
        "on smelt:",
        "\tif the fuel slot is charcoal:",
        "\t\tadd 5 seconds to the burn time"
      ],
      "since": [
        "1.0, 2.8.0 (syntax rework)"
      ],
      "return type": "Slot",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] (ore|input) slot[s] [of %blocks%]",
        "%blocks%'[s] (ore|input) slot[s]",
        "[the] fuel slot[s] [of %blocks%]",
        "%blocks%'[s] fuel slot[s]",
        "[the] (result|output) slot[s] [of %blocks%]",
        "%blocks%'[s] (result|output) slot[s]"
      ]
    },
    {
      "id": "ExprFurnaceTime",
      "name": "Furnace Times",
      "description": [
        "The cook time, total cook time, and burn time of a furnace. Can be changed.",
        "<ul>",
        "cook time: The amount of time an item has been smelting for.",
        "total cook time: The amount of time required to finish smelting an item.",
        "burn time: The amount of time left for the current fuel until consumption of another fuel item.",
        "</ul>"
      ],
      "examples": [
        "set the cooking time of {_block} to 10",
        "set the total cooking time of {_block} to 50",
        "set the fuel burning time of {_block} to 100",
        "on smelt:",
        "\tif the fuel slot is charcoal:",
        "\t\tadd 5 seconds to the fuel burn time"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "delete",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] [furnace] cook[ing] time [of %blocks%]",
        "%blocks%'[s]cook[ing] time",
        "[the] [furnace] total cook[ing] time [of %blocks%]",
        "%blocks%'[s]total cook[ing] time",
        "[the] [furnace] fuel burn[ing] time [of %blocks%]",
        "%blocks%'[s]fuel burn[ing] time"
      ]
    },
    {
      "id": "ExprGameMode",
      "name": "Game Mode",
      "description": [
        "The gamemode of a player. (Gamemodes)"
      ],
      "examples": [
        "player's gamemode is survival",
        "set the player's gamemode to creative"
      ],
      "since": [
        "1.0"
      ],
      "return type": "Game Mode",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] game[ ]mode of %players%",
        "%players%'[s] game[ ]mode"
      ]
    },
    {
      "id": "ExprGameRule",
      "name": "Gamerule Value",
      "description": [
        "The gamerule value of a world."
      ],
      "examples": [
        "set the gamerule commandBlockOutput of world \"world\" to false"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Gamerule Value",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] gamerule %gamerule% of %worlds%"
      ],
      "required plugins": [
        "Minecraft 1.13+"
      ]
    },
    {
      "id": "ExprGlidingState",
      "name": "Gliding State",
      "description": [
        "Sets of gets gliding state of player. It allows you to set gliding state of entity even if they do not have an Elytra equipped."
      ],
      "examples": [
        "set gliding of player to off"
      ],
      "since": [
        "2.2-dev21"
      ],
      "return type": "Boolean",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (gliding|glider) [state] of %livingentities%",
        "%livingentities%'[s] (gliding|glider) [state]"
      ]
    },
    {
      "id": "ExprGlowing",
      "name": "Glowing",
      "description": [
        "Indicates if targeted entity is glowing (new 1.9 effect) or not. Glowing entities can be seen through walls."
      ],
      "examples": [
        "set glowing of player to true"
      ],
      "since": [
        "2.2-dev18"
      ],
      "return type": "Boolean",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] glowing of %entities%",
        "%entities%'[s] glowing"
      ]
    },
    {
      "id": "ExprGravity",
      "name": "Gravity",
      "description": [
        "If entity is affected by gravity or not, i.e. if it has Minecraft 1.10+ NoGravity flag."
      ],
      "examples": [
        "set gravity of player off"
      ],
      "since": [
        "2.2-dev21"
      ],
      "return type": "Boolean",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] gravity of %entities%",
        "%entities%'[s] gravity"
      ]
    },
    {
      "id": "ExprHanging",
      "name": "Hanging Entity/Remover",
      "description": [
        "Returns the hanging entity or remover in hanging break and place events."
      ],
      "examples": [
        "on break of item frame:",
        "\tif item of hanging entity is diamond pickaxe:",
        "\t\tcancel event",
        "\t\tif hanging remover is a player:",
        "\t\t\tsend \"You can't break that item frame!\" to hanging remover"
      ],
      "since": [
        "2.6.2"
      ],
      "return type": "Entity",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all"
      ],
      "patterns": [
        "[the] hanging (entity|remover)"
      ]
    },
    {
      "id": "ExprHash",
      "name": "Hash",
      "description": [
        "Hashes the given text using the MD5 or SHA-256 algorithms. Each algorithm is suitable for different use cases.<p>",
        "MD5 is provided mostly for backwards compatibility, as it is outdated and not secure. ",
        "SHA-256 is more secure, and can used to hash somewhat confidental data like IP addresses and even passwords. ",
        "It is not that secure out of the box, so please consider using salt when dealing with passwords! ",
        "When hashing data, you must specify algorithms that will be used for security reasons! ",
        "<p>Please note that a hash cannot be reversed under normal circumstanses. You will not be able to get original value from a hash with Skript."
      ],
      "examples": [
        "command /setpass <text>:",
        "\ttrigger:",
        "\t\tset {password::%uuid of player%} to text-argument hashed with SHA-256",
        "command /login <text>:",
        "\ttrigger:",
        "\t\tif text-argument hashed with SHA-256 is {password::%uuid of player%}:",
        "\t\t\tmessage \"Login successful.\"",
        "\t\telse:",
        "\t\t\tmessage \"Wrong password!\""
      ],
      "since": [
        "2.0, 2.2-dev32 (SHA-256 algorithm)"
      ],
      "return type": "Text",
      "patterns": [
        "%strings% hash[ed] with (MD5|SHA-256)"
      ]
    },
    {
      "id": "ExprHatchingType",
      "name": "Hatching Entity Type",
      "description": [
        "The type of the entity that will be hatched in a Player Egg Throw event."
      ],
      "examples": [
        "on player egg throw:",
        "\tset the hatching entity type to a primed tnt"
      ],
      "since": [
        "2.7"
      ],
      "return type": "Entity Type",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] hatching entity [type]"
      ]
    },
    {
      "id": "ExprHatchingNumber",
      "name": "Hatching Number",
      "description": [
        "The number of entities that will be hatched in a Player Egg Throw event.",
        "Please note that no more than 127 entities can be hatched at once."
      ],
      "examples": [
        "on player egg throw:",
        "\tset the hatching number to 10"
      ],
      "since": [
        "2.7"
      ],
      "return type": "byte",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] hatching number"
      ]
    },
    {
      "id": "ExprEyeLocation",
      "name": "Head location",
      "description": [
        "The location of an entity's head, mostly useful for players and e.g. looping blocks in the player's line of sight.",
        "Please note that this location is only accurate for entities whose head is exactly above their center, i.e. players, endermen, zombies, skeletons, etc., but not sheep, pigs or cows."
      ],
      "examples": [
        "set the block at the player's head to air",
        "set the block in front of the player's eyes to glass",
        "loop blocks in front of the player's head:"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Location",
      "patterns": [
        "[the] (head|eye[s]) [location[s]] of %livingentities%",
        "%livingentities%'[s] (head|eye[s]) [location[s]]"
      ]
    },
    {
      "id": "ExprHealAmount",
      "name": "Heal Amount",
      "description": [
        "The amount of health healed in a heal event."
      ],
      "examples": [
        "on player healing:",
        "\tincrease the heal amount by 2",
        "\tremove 0.5 from the healing amount"
      ],
      "since": [
        "2.5.1"
      ],
      "return type": "double",
      "patterns": [
        "[the] heal[ing] amount"
      ]
    },
    {
      "id": "ExprHealReason",
      "name": "Heal Reason",
      "description": [
        "The heal reason of a heal event."
      ],
      "examples": [
        "on heal:",
        "\theal reason is satiated",
        "\tsend \"You ate enough food and gained full health back!\""
      ],
      "since": [
        "2.5"
      ],
      "return type": "Heal Reason",
      "patterns": [
        "[the] (regen|health regain|heal[ing]) (reason|cause)"
      ]
    },
    {
      "id": "ExprHealth",
      "name": "Health",
      "description": [
        "The health of a creature, e.g. a player, mob, villager, etc. The minimum value is 0, and the maximum is the creature's max health (e.g. 10 for players)."
      ],
      "examples": [
        "message \"You have %health% HP left.\""
      ],
      "since": [
        "1.0"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] health of %livingentities%",
        "%livingentities%'[s] health"
      ]
    },
    {
      "id": "ExprHiddenPlayers",
      "name": "Hidden Players",
      "description": [
        "The players hidden from a player that were hidden using the entity visibility effect."
      ],
      "examples": [
        "message \"<light red>You are currently hiding: <light gray>%hidden players of the player%\""
      ],
      "since": [
        "2.3"
      ],
      "return type": "Player",
      "changers": [
        "add",
        "remove",
        "remove all"
      ],
      "patterns": [
        "[(all [[of] the]|the)] hidden players (of|for) %players%",
        "[(all [[of] the]|the)] players hidden (from|for|by) %players%"
      ]
    },
    {
      "id": "ExprDomestication",
      "name": "Horse Domestication",
      "description": [
        "Gets and/or sets the (max) domestication of a horse.",
        "The domestication of a horse is how close a horse is to becoming tame - the higher the domestication, the closer they are to becoming tame (must be between 1 and the max domestication level of the horse).",
        "The max domestication of a horse is how long it will take for a horse to become tame (must be greater than 0)."
      ],
      "examples": [
        "function domesticateAndTame(horse: entity, p: offline player, i: int = 10):",
        "\tadd {_i} to domestication level of {_horse}",
        "\tif domestication level of {_horse} >= max domestication level of {_horse}:",
        "\t\ttame {_horse}",
        "\t\tset tamer of {_horse} to {_p}"
      ],
      "since": [
        "2.10"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [max[imum]] domestication level of %livingentities%",
        "%livingentities%'[s] [max[imum]] domestication level"
      ]
    },
    {
      "id": "ExprHostname",
      "name": "Hostname",
      "description": [
        "The hostname used by the connecting player to connect to the server in a connect event."
      ],
      "examples": [
        "on connect:",
        "\thostname is \"testers.example.com\"",
        "\tsend \"Welcome back tester!\""
      ],
      "since": [
        "2.6.1"
      ],
      "return type": "Text",
      "patterns": [
        "[the] (host|domain)[ ][name]"
      ]
    },
    {
      "id": "ExprHotbarButton",
      "name": "Hotbar Button",
      "description": [
        "The hotbar button clicked in an inventory click event."
      ],
      "examples": [
        "on inventory click:",
        "\tsend \"You clicked the hotbar button %hotbar button%!\""
      ],
      "since": [
        "2.5"
      ],
      "return type": "long",
      "patterns": [
        "[the] hotbar button"
      ]
    },
    {
      "id": "ExprHotbarSlot",
      "name": "Hotbar Slot",
      "description": [
        "The currently selected hotbar slot.",
        "To retrieve its number use Slot Index expression.",
        "Use future and past tense to grab the previous slot in an item change event, see example."
      ],
      "examples": [
        "message \"%player's current hotbar slot%\"",
        "set player's selected hotbar slot to slot 4 of player",
        "",
        "send \"index of player's current hotbar slot = 1\" # second slot from the left",
        "",
        "on item held change:",
        "\tif the selected hotbar slot was a diamond:",
        "\t\tset the currently selected hotbar slot to slot 5 of player"
      ],
      "since": [
        "2.2-dev36"
      ],
      "return type": "Slot",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] [([currently] selected|current)] hotbar slot[s] [of %players%]",
        "%players%'[s] [([currently] selected|current)] hotbar slot[s]"
      ]
    },
    {
      "id": "ExprHoverList",
      "name": "Hover List",
      "description": [
        "The list when you hover on the player counts of the server in the server list.",
        "This can be changed using texts or players in a server list ping event only. Adding players to the list means adding the name of the players.",
        "And note that, for example if there are 5 online players (includes fake online count) in the server and the hover list is set to 3 values, Minecraft will show \"... and 2 more ...\" at end of the list."
      ],
      "examples": [
        "on server list ping:",
        "\tclear the hover list",
        "\tadd \"&aWelcome to the &6Minecraft &aserver!\" to the hover list",
        "\tadd \"\" to the hover list # A blank line",
        "\tadd \"&cThere are &6%online players count% &conline players!\" to the hover list"
      ],
      "since": [
        "2.3"
      ],
      "return type": "Text",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [custom] [player|server] (hover|sample) ([message] list|message)",
        "[the] [custom] player [hover|sample] list"
      ],
      "required plugins": [
        "Paper 1.12.2 or newer"
      ]
    },
    {
      "id": "ExprHumidity",
      "name": "Humidity",
      "description": [
        "Humidity of given blocks."
      ],
      "examples": [
        "set {_humidity} to event-block's humidity"
      ],
      "since": [
        "2.2-dev35"
      ],
      "return type": "Number",
      "patterns": [
        "[the] humidit(y|ies) of %blocks%",
        "%blocks%'[s] humidit(y|ies)"
      ]
    },
    {
      "id": "ExprIP",
      "name": "IP",
      "description": [
        "The IP address of a player, or the connected player in a connect event, or the pinger in a server list ping event."
      ],
      "examples": [
        "ban the IP address of the player",
        "broadcast \"Banned the IP %IP of player%\"",
        "",
        "on connect:",
        "\tlog \"[%now%] %player% (%ip%) is connected to the server.\"",
        "",
        "on server list ping:",
        "\tsend \"%IP-address%\" to the console"
      ],
      "since": [
        "1.4, 2.2-dev26 (when used in connect event), 2.3 (when used in server list ping event)"
      ],
      "return type": "Text",
      "patterns": [
        "IP[s][( |-)address[es]] of %players%",
        "%players%'[s] IP[s][( |-)address[es]]",
        "IP[( |-)address]"
      ]
    },
    {
      "id": "ExprIndexOf",
      "name": "Index Of",
      "description": [
        "The first or last index of a character (or text) in a text, or -1 if it doesn't occur in the text. Indices range from 1 to the length of the text."
      ],
      "examples": [
        "set {_first} to the first index of \"@\" in the text argument",
        "if {_s} contains \"abc\":",
        "\tset {_s} to the first (index of \"abc\" in {_s} + 3) characters of {_s} # removes everything after the first \"abc\" from {_s}"
      ],
      "since": [
        "2.1"
      ],
      "return type": "long",
      "patterns": [
        "[the] (|first|last) index of %string% in %string%"
      ]
    },
    {
      "id": "ExprIndices",
      "name": "Indices of List",
      "description": [
        "Returns all the indices of a list variable, optionally sorted by their values.",
        "To sort the indices, all objects in the list must be comparable;",
        "Otherwise, this expression will just return the unsorted indices."
      ],
      "examples": [
        "set {l::*} to \"some\", \"cool\" and \"values\"",
        "broadcast \"%indices of {l::*}%\" # result is 1, 2 and 3",
        "",
        "set {_leader-board::first} to 17",
        "set {_leader-board::third} to 30",
        "set {_leader-board::second} to 25",
        "set {_leader-board::fourth} to 42",
        "set {_ascending-indices::*} to sorted indices of {_leader-board::*} in ascending order",
        "broadcast \"%{_ascending-indices::*}%\" #result is first, second, third, fourth",
        "set {_descending-indices::*} to sorted indices of {_leader-board::*} in descending order",
        "broadcast \"%{_descending-indices::*}%\" #result is fourth, third, second, first"
      ],
      "since": [
        "2.4 (indices), 2.6.1 (sorting)"
      ],
      "return type": "Text",
      "patterns": [
        "[(the|all [[of] the])] (indexes|indices) of %objects%",
        "%objects%'[s] (indexes|indices)",
        "[sorted] (indices|indexes) of %objects% in (ascending|descending) order",
        "[sorted] %objects%'[s] (indices|indexes) in (ascending|descending) order"
      ]
    },
    {
      "id": "ExprEvtInitiator",
      "name": "Initiator Inventory",
      "description": [
        "Returns the initiator inventory in an on inventory item move event."
      ],
      "examples": [
        "on inventory item move:",
        "\tholder of event-initiator-inventory is a chest",
        "\tbroadcast \"Item transport happening at %location at holder of event-initiator-inventory%!\""
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Inventory",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] [event-]initiator[( |-)inventory]"
      ]
    },
    {
      "id": "ExprInput",
      "name": "Input",
      "description": [
        "Represents the input in a filter expression or sort effect.",
        "For example, if you ran 'broadcast \"something\" and \"something else\" where [input is \"something\"]",
        "the condition would be checked twice, using \"something\" and \"something else\" as the inputs.",
        "The 'input index' pattern can be used when acting on a variable to access the index of the input."
      ],
      "examples": [
        "send \"congrats on being staff!\" to all players where [input has permission \"staff\"]",
        "sort {_list::*} based on length of input index"
      ],
      "since": [
        "2.2-dev36, 2.9.0 (input index)"
      ],
      "return type": "Object",
      "patterns": [
        "input",
        "%*classinfo% input",
        "input index"
      ]
    },
    {
      "id": "ExprInventory",
      "name": "Inventory",
      "description": [
        "The inventory of a block or player. You can usually omit this expression and can directly add or remove items to/from blocks or players."
      ],
      "examples": [
        "add a plank to the player's inventory",
        "clear the player's inventory",
        "remove 5 wool from the inventory of the clicked block"
      ],
      "since": [
        "1.0"
      ],
      "return type": "Object",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] inventor(y|ies) of %inventoryholders/itemtypes%",
        "%inventoryholders/itemtypes%'[s] inventor(y|ies)"
      ]
    },
    {
      "id": "ExprInventoryAction",
      "name": "Inventory Action",
      "description": [
        "The inventory action of an inventory event. Please click on the link for more information."
      ],
      "examples": [
        "inventory action is pickup all"
      ],
      "since": [
        "2.2-dev16"
      ],
      "return type": "Inventory Action",
      "patterns": [
        "[the] inventory action"
      ]
    },
    {
      "id": "ExprInventoryCloseReason",
      "name": "Inventory Close Reason",
      "description": [
        "The inventory close reason of an inventory close event."
      ],
      "examples": [
        "on inventory close:",
        "\tinventory close reason is teleport",
        "\tsend \"Your inventory closed due to teleporting!\" to player"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Inventory Close Reasons",
      "patterns": [
        "[the] inventory clos(e|ing) (reason|cause)"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "ExprInventoryInfo",
      "name": "Inventory Holder/Viewers/Rows/Slots",
      "description": [
        "Gets the amount of rows/slots, viewers and holder of an inventory.",
        "",
        "NOTE: 'Viewers' expression returns a list of players viewing the inventory. Note that a player is considered to be viewing their own inventory and internal crafting screen even when said inventory is not open."
      ],
      "examples": [
        "event-inventory's amount of rows",
        "holder of player's top inventory",
        "{_inventory}'s viewers"
      ],
      "since": [
        "2.2-dev34, 2.5 (slots)"
      ],
      "return type": "Object",
      "changers": [
        "add",
        "remove",
        "remove all"
      ],
      "patterns": [
        "(holder[s]|viewers|[amount of] rows|[amount of] slots) of %inventories%",
        "%inventories%'[s] (holder[s]|viewers|[amount of] rows|[amount of] slots)"
      ]
    },
    {
      "id": "ExprInventorySlot",
      "name": "Inventory Slot",
      "description": [
        "Represents a slot in an inventory. It can be used to change the item in an inventory too."
      ],
      "examples": [
        "if slot 0 of player is air:",
        "\tset slot 0 of player to 2 stones",
        "\tremove 1 stone from slot 0 of player",
        "\tadd 2 stones to slot 0 of player",
        "\tclear slot 1 of player"
      ],
      "since": [
        "2.2-dev24"
      ],
      "return type": "Slot",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] slot[s] %numbers% of %inventory%",
        "%inventory%'[s] slot[s] %numbers%"
      ]
    },
    {
      "id": "ExprItem",
      "name": "Item",
      "description": [
        "The item involved in an event, e.g. in a drop, dispense, pickup or craft event."
      ],
      "examples": [
        "on dispense:",
        "\titem is a clock",
        "\tset the time to 6:00"
      ],
      "since": [
        "unknown (before 2.1)"
      ],
      "return type": "Item",
      "patterns": [
        "[the] item"
      ]
    },
    {
      "id": "ExprItemAmount",
      "name": "Item Amount",
      "description": [
        "The amount of an item stack."
      ],
      "examples": [
        "send \"You have got %item amount of player's tool% %player's tool% in your hand!\" to player"
      ],
      "since": [
        "2.2-dev24"
      ],
      "return type": "long",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] item[[ ]stack] (amount|size|number) of %slots/itemtypes/itemstacks%",
        "%slots/itemtypes/itemstacks%'[s] item[[ ]stack] (amount|size|number)"
      ]
    },
    {
      "id": "ExprItemCooldown",
      "name": "Item Cooldown",
      "description": [
        "Change the cooldown of a specific material to a certain amount of Timespan."
      ],
      "examples": [
        "on right click using stick:",
        "\tset item cooldown of player's tool for player to 1 minute",
        "\tset item cooldown of stone and grass for all players to 20 seconds",
        "\treset item cooldown of cobblestone and dirt for all players"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [item] cooldown of %itemtypes% for %players%",
        "%players%'[s] [item] cooldown for %itemtypes%"
      ]
    },
    {
      "id": "ExprItemDisplayTransform",
      "name": "Item Display Transform",
      "description": [
        "Returns or changes the item display transform of item displays."
      ],
      "examples": [
        "set the item transform of the last spawned item display to first person left handed",
        "set the item transform of the last spawned item display to no transform # Reset to default"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Item Display Transforms",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] item [display] transform [of %displays%]",
        "%displays%'[s] item [display] transform"
      ]
    },
    {
      "id": "ExprEnchantments",
      "name": "Item Enchantments",
      "description": [
        "All the enchantments an item type has."
      ],
      "examples": [
        "clear enchantments of event-item"
      ],
      "since": [
        "2.2-dev36"
      ],
      "return type": "Enchantment Type",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] enchantments of %itemtypes%",
        "%itemtypes%'[s] enchantments"
      ]
    },
    {
      "id": "ExprItemFlags",
      "name": "Item Flags",
      "description": [
        "The item flags of an item. Can be modified."
      ],
      "examples": [
        "set item flags of player's tool to hide enchants and hide attributes",
        "add hide potion effects to item flags of player's held item",
        "remove hide enchants from item flags of {legendary sword}"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Item Flag",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] item flags of %itemtypes%",
        "%itemtypes%'[s] item flags"
      ]
    },
    {
      "id": "ExprItemOfEntity",
      "name": "Item of an Entity",
      "description": [
        "An item associated with an entity. For dropped item entities, it gets the item that was dropped.",
        "For item frames, the item inside the frame is returned.",
        "For throwable projectiles (snowballs, enderpearls etc.) or item displays, it gets the displayed item.",
        "Other entities do not have items associated with them."
      ],
      "examples": [
        "item of event-entity",
        "",
        "set the item inside of event-entity to a diamond sword named \"Example\""
      ],
      "since": [
        "2.2-dev35, 2.2-dev36 (improved), 2.5.2 (throwable projectiles), 2.10 (item displays)"
      ],
      "return type": "Slot",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] item [inside] of %entities%",
        "%entities%'[s] item [inside]"
      ]
    },
    {
      "id": "ExprItemWithCustomModelData",
      "name": "Item with CustomModelData",
      "description": [
        "Get an item with a CustomModelData tag. (Value is an integer between 0 and 99999999)"
      ],
      "examples": [
        "give player a diamond sword with custom model data 2",
        "set slot 1 of inventory of player to wooden hoe with custom model data 357"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Item Type",
      "patterns": [
        "%itemtype% with [custom] model data %number%"
      ],
      "required plugins": [
        "1.14+"
      ]
    },
    {
      "id": "ExprItemWithEnchantmentGlint",
      "name": "Item with Enchantment Glint",
      "description": [
        "Get an item with or without enchantment glint."
      ],
      "examples": [
        "set {_item with glint} to diamond with enchantment glint",
        "set {_item without glint} to diamond without enchantment glint"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Item Type",
      "patterns": [
        "%itemtypes% with[out] [enchant[ment]] glint"
      ],
      "required plugins": [
        "Spigot 1.20.5+"
      ]
    },
    {
      "id": "ExprWithItemFlags",
      "name": "Item with Item Flags",
      "description": [
        "Creates a new item with the specified item flags."
      ],
      "examples": [
        "give player diamond sword with item flags hide enchants and hide attributes",
        "set {_item} to player's tool with item flag hide additional tooltip",
        "give player torch with hide placed on item flag",
        "set {_item} to diamond sword with all item flags"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Item Type",
      "patterns": [
        "%itemtypes% with [the] item flag[s] %itemflags%",
        "%itemtypes% with [the] %itemflags% item flag[s]",
        "%itemtypes% with all [the] item flags"
      ]
    },
    {
      "id": "ExprItemWithLore",
      "name": "Item with Lore",
      "description": [
        "Returns the given item type with the specified lore added to it.",
        "If multiple strings are passed, each of them will be a separate line in the lore."
      ],
      "examples": [
        "set {_test} to stone with lore \"line 1\" and \"line 2\"",
        "give {_test} to player"
      ],
      "since": [
        "2.3"
      ],
      "return type": "Item Type",
      "patterns": [
        "%itemtype% with [(a|the)] lore %strings%"
      ]
    },
    {
      "id": "ExprItemWithTooltip",
      "name": "Item with Tooltip",
      "description": [
        "Get an item with or without entire/additional tooltip.",
        "If changing the 'entire' tooltip of an item, nothing will show up when a player hovers over it.",
        "If changing the 'additional' tooltip, only specific parts (which change per item) will be hidden."
      ],
      "examples": [
        "set {_item with additional tooltip} to diamond with additional tooltip",
        "set {_item without entire tooltip} to diamond without entire tooltip"
      ],
      "since": [
        "INSERT VERSION"
      ],
      "return type": "Item Type",
      "patterns": [
        "%itemtypes% with[out] [entire|additional] tool[ ]tip[s]"
      ],
      "required plugins": [
        "Minecraft 1.20.5+"
      ]
    },
    {
      "id": "ExprItems",
      "name": "Items",
      "description": [
        "Items or blocks of a specific type, useful for looping."
      ],
      "examples": [
        "loop items of type ore and log:",
        "\tblock contains loop-item",
        "\tmessage \"Theres at least one %loop-item% in this block\"",
        "drop all blocks at the player # drops one of every block at the player"
      ],
      "since": [
        "1.0 pre-5"
      ],
      "return type": "Item Type",
      "patterns": [
        "[all [[of] the]|the] block[[ ]type]s",
        "every block[[ ]type]",
        "[all [[of] the]|the|every] block[s] of type[s] %itemtypes%",
        "[all [[of] the]|the|every] item[s] of type[s] %itemtypes%"
      ]
    },
    {
      "id": "ExprItemsIn",
      "name": "Items In",
      "description": [
        "All items or specific type(s) of items in an inventory. Useful for looping or storing in a list variable.",
        "Please note that the positions of the items in the inventory are not saved, only their order is preserved."
      ],
      "examples": [
        "loop all items in the player's inventory:",
        "\tloop-item is enchanted",
        "\tremove loop-item from the player",
        "set {inventory::%uuid of player%::*} to items in the player's inventory"
      ],
      "since": [
        "2.0, 2.8.0 (specific types of items)"
      ],
      "return type": "Slot",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[all [[of] the]] items ([with]in|of|contained in|out of) [inventor(y|ies)] %inventories%",
        "all [[of] the] %itemtypes% ([with]in|of|contained in|out of) [inventor(y|ies)] %inventories%"
      ]
    },
    {
      "id": "ExprJoinSplit",
      "name": "Join & Split",
      "description": [
        "Joins several texts with a common delimiter (e.g. \", \"), or splits a text into multiple texts at a given delimiter."
      ],
      "examples": [
        "message \"Online players: %join all players' names with \"\" | \"\"%\" # %all players% would use the default \"x, y, and z\"",
        "set {_s::*} to the string argument split at \",\""
      ],
      "since": [
        "2.1, 2.5.2 (regex support), 2.7 (case sensitivity), 2.10 (without trailing string)"
      ],
      "return type": "Text",
      "patterns": [
        "(concat[enate]|join) %strings% [(with|using|by) [[the] delimiter] %string%]",
        "split %string% (at|using|by) [[the] delimiter] %string% [with case sensitivity] [without [the] trailing [empty] (string|text)]",
        "%string% split (at|using|by) [[the] delimiter] %string% [with case sensitivity] [without [the] trailing [empty] (string|text)]",
        "regex split %string% (at|using|by) [[the] delimiter] %string% [without [the] trailing [empty] (string|text)]",
        "regex %string% split (at|using|by) [[the] delimiter] %string% [without [the] trailing [empty] (string|text)]"
      ]
    },
    {
      "id": "ExprLanguage",
      "name": "Language",
      "description": [
        "Currently selected game language of a player. The value of the language is not defined properly.",
        "The vanilla Minecraft client will use lowercase language / country pairs separated by an underscore, but custom resource packs may use any format they wish."
      ],
      "examples": [
        "message player's current language"
      ],
      "since": [
        "2.3"
      ],
      "return type": "Text",
      "patterns": [
        "[the] [([currently] selected|current)] [game] (language|locale) [setting] of %players%",
        "%players%'[s] [([currently] selected|current)] [game] (language|locale) [setting]"
      ]
    },
    {
      "id": "ExprLastAttacker",
      "name": "Last Attacker",
      "description": [
        "The last block or entity that attacked an entity."
      ],
      "examples": [
        "send \"%last attacker of event-entity%\""
      ],
      "since": [
        "2.5.1"
      ],
      "return type": "Object",
      "patterns": [
        "[the] last attacker of %entity%",
        "%entity%'[s] last attacker"
      ]
    },
    {
      "id": "ExprLastDamage",
      "name": "Last Damage",
      "description": [
        "The last damage that was done to an entity. Note that changing it doesn't deal more/less damage."
      ],
      "examples": [
        "set last damage of event-entity to 2"
      ],
      "since": [
        "2.5.1"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] last damage of %livingentities%",
        "%livingentities%'[s] last damage"
      ]
    },
    {
      "id": "ExprLastDamageCause",
      "name": "Last Damage Cause",
      "description": [
        "Cause of last damage done to an entity"
      ],
      "examples": [
        "set last damage cause of event-entity to fire tick"
      ],
      "since": [
        "2.2-Fixes-V10"
      ],
      "return type": "Damage Cause",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] last damage (cause|reason|type) of %livingentities%",
        "%livingentities%'[s] last damage (cause|reason|type)"
      ]
    },
    {
      "id": "ExprLastDeathLocation",
      "name": "Last Death Location",
      "description": [
        "Gets the last death location of a player, or offline player, if available.",
        "Can also be set, reset, and deleted if the player is online."
      ],
      "examples": [
        "set {_loc} to the last death location of player",
        "teleport player to last death location of (random element out of all players)"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Location",
      "changers": [
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [last] death location[s] of %offlineplayers%",
        "%offlineplayers%'[s] [last] death location[s]"
      ]
    },
    {
      "id": "ExprLastLoadedServerIcon",
      "name": "Last Loaded Server Icon",
      "description": [
        "Returns the last loaded server icon with the load server icon effect."
      ],
      "examples": [
        "set {server-icon} to the last loaded server icon"
      ],
      "since": [
        "2.3"
      ],
      "return type": "Server Icon",
      "patterns": [
        "[the] [last[ly]] loaded server icon"
      ],
      "required plugins": [
        "Paper 1.12.2 or newer"
      ]
    },
    {
      "id": "ExprLastResourcePackResponse",
      "name": "Last Resource Pack Response",
      "description": [
        "Returns the last resource pack response received from a player."
      ],
      "examples": [
        "if player's last resource pack response is deny or download fail:"
      ],
      "since": [
        "2.4"
      ],
      "return type": "Resource Pack State",
      "patterns": [
        "[the] [last] resource pack response[s] of %players%",
        "%players%'[s] [last] resource pack response[s]"
      ],
      "required plugins": [
        "Paper 1.9 or newer"
      ]
    },
    {
      "id": "ExprLastSpawnedEntity",
      "name": "Last Spawned Entity",
      "description": [
        "Holds the entity that was spawned most recently with the spawn effect (section), dropped with the drop effect, shot with the shoot effect or created with the lightning effect. Please note that even though you can spawn multiple mobs simultaneously (e.g. with 'spawn 5 creepers'), only the last spawned mob is saved and can be used. If you spawn an entity, shoot a projectile and drop an item you can however access all them together."
      ],
      "examples": [
        "spawn a priest",
        "set {healer::%spawned priest%} to true",
        "shoot an arrow from the last spawned entity",
        "ignite the shot projectile",
        "drop a diamond sword",
        "push last dropped item upwards",
        "teleport player to last struck lightning",
        "delete last launched firework"
      ],
      "since": [
        "1.3 (spawned entity), 2.0 (shot entity), 2.2-dev26 (dropped item), 2.7 (struck lightning, firework)"
      ],
      "return type": "Entity",
      "patterns": [
        "[the] [last[ly]] (spawned|shot) %*entitydata%",
        "[the] [last[ly]] dropped (item)",
        "[the] [last[ly]] (created|struck) (lightning)",
        "[the] [last[ly]] (launched|deployed) (firework)"
      ]
    },
    {
      "id": "ExprLastLoginTime",
      "name": "Last/First Login Time",
      "description": [
        "When a player last/first logged in the server. 'last login' requires paper to get the last login, otherwise it will get the last time they were seen on the server."
      ],
      "examples": [
        "command /onlinefor:",
        "\ttrigger:",
        "\t\tsend \"You have been online for %difference between player's last login and now%.\"",
        "\t\tsend \"You first joined the server %difference between player's first login and now% ago.\""
      ],
      "since": [
        "2.5"
      ],
      "return type": "Date",
      "patterns": [
        "[the] (last|first) login of %offlineplayers%",
        "%offlineplayers%'[s] (last|first) login"
      ]
    },
    {
      "id": "ExprLeashHolder",
      "name": "Leash Holder",
      "description": [
        "The leash holder of a living entity."
      ],
      "examples": [
        "set {_example} to the leash holder of the target mob"
      ],
      "since": [
        "2.3"
      ],
      "return type": "Entity",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all"
      ],
      "patterns": [
        "[the] leash holder[s] of %livingentities%",
        "%livingentities%'[s] leash holder[s]"
      ]
    },
    {
      "id": "ExprLength",
      "name": "Length",
      "description": [
        "The length of a text, in number of characters."
      ],
      "examples": [
        "set {_l} to length of the string argument"
      ],
      "since": [
        "2.1"
      ],
      "return type": "long",
      "patterns": [
        "[the] length of %strings%",
        "%strings%'[s] length"
      ]
    },
    {
      "id": "ExprLevel",
      "name": "Level",
      "description": [
        "The level of a player."
      ],
      "examples": [
        "reduce the victim's level by 1",
        "set the player's level to 0"
      ],
      "since": [
        "unknown (before 2.1)"
      ],
      "return type": "long",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] level of %players%",
        "%players%'[s] level"
      ]
    },
    {
      "id": "ExprLevelProgress",
      "name": "Level Progress",
      "description": [
        "The player's progress in reaching the next level, this represents the experience bar in the game. Please note that this value is between 0 and 1 (e.g. 0.5 = half experience bar).",
        "Changing this value can cause the player's level to change if the resulting level progess is negative or larger than 1, e.g. increase the player's level progress by 0.5 will make the player gain a level if their progress was more than 50%."
      ],
      "examples": [
        "# use the exp bar as mana",
        "on rightclick with a blaze rod:",
        "\tplayer's level progress is larger than 0.2",
        "\tshoot a fireball from the player",
        "\treduce the player's level progress by 0.2",
        "every 2 seconds:",
        "\tloop all players:",
        "\t\tlevel progress of loop-player is smaller than 0.9:",
        "\t\t\tincrease level progress of the loop-player by 0.1",
        "\t\telse:",
        "\t\t\tset level progress of the loop-player to 0.99",
        "on xp spawn:",
        "\tcancel event"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] level progress of %players%",
        "%players%'[s] level progress"
      ]
    },
    {
      "id": "ExprLightLevel",
      "name": "Light Level",
      "description": [
        "Gets the light level at a certain location which ranges from 0 to 15.",
        "It can be separated into sunlight (15 = direct sunlight, 1-14 = indirect) and block light (torches, glowstone, etc.). The total light level of a block is the maximum of the two different light types."
      ],
      "examples": [
        "# set vampire players standing in bright sunlight on fire",
        "every 5 seconds:",
        "\tloop all players:",
        "\t\t{vampire::%uuid of loop-player%} is true",
        "\t\tsunlight level at the loop-player is greater than 10",
        "\t\tignite the loop-player for 5 seconds"
      ],
      "since": [
        "1.3.4"
      ],
      "return type": "byte",
      "patterns": [
        "[(sky|sun|block)[ ]]light[ ]level [(of|%direction%) %location%]"
      ]
    },
    {
      "id": "ExprPlugins",
      "name": "Loaded Plugins",
      "description": [
        "An expression to obtain a list of the names of the server's loaded plugins."
      ],
      "examples": [
        "if the loaded plugins contains \"Vault\":",
        "\tbroadcast \"This server uses Vault plugin!\"",
        "",
        "send \"Plugins (%size of loaded plugins%): %plugins%\" to player"
      ],
      "since": [
        "2.7"
      ],
      "return type": "Text",
      "patterns": [
        "[(all [[of] the]|the)] [loaded] plugins"
      ]
    },
    {
      "id": "ExprLocationOf",
      "name": "Location",
      "description": [
        "The location of a block or entity. This not only represents the x, y and z coordinates of the location but also includes the world and the direction an entity is looking (e.g. teleporting to a saved location will make the teleported entity face the same saved direction every time).",
        "Please note that the location of an entity is at it's feet, use head location to get the location of the head."
      ],
      "examples": [
        "set {home::%uuid of player%} to the location of the player",
        "message \"You home was set to %player's location% in %player's world%.\""
      ],
      "return type": "Location",
      "patterns": [
        "(location|position) of %location%",
        "%location%'[s] (location|position)"
      ]
    },
    {
      "id": "ExprLocation",
      "name": "Location",
      "description": [
        "The location where an event happened (e.g. at an entity or block), or a location relative to another (e.g. 1 meter above another location)."
      ],
      "examples": [
        "drop 5 apples at the event-location # exactly the same as writing 'drop 5 apples'",
        "set {_loc} to the location 1 meter above the player"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Location",
      "patterns": [
        "[the] [event-](location|position)",
        "[the] (location|position) %directions% [%location%]"
      ]
    },
    {
      "id": "ExprLocationAt",
      "name": "Location At",
      "description": [
        "Allows to create a location from three coordinates and a world."
      ],
      "examples": [
        "set {_loc} to the location at arg-1, arg-2, arg-3 of the world arg-4",
        "distance between the player and the location (0, 0, 0) is less than 200"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Location",
      "patterns": [
        "[the] (location|position) [at] [(][x[ ][=[ ]]]%number%, [y[ ][=[ ]]]%number%, [and] [z[ ][=[ ]]]%number%[)] [[(in|of) [[the] world]] %world%]"
      ]
    },
    {
      "id": "ExprLoopIteration",
      "name": "Loop Iteration",
      "description": [
        "Returns the loop's current iteration count (for both normal and while loops)."
      ],
      "examples": [
        "while player is online:",
        "\tgive player 1 stone",
        "\twait 5 ticks",
        "\tif loop-counter > 30:",
        "\t\tstop loop",
        "",
        "loop {top-balances::*}:",
        "\tif loop-iteration <= 10:",
        "\t\tbroadcast \"#%loop-iteration% %loop-index% has $%loop-value%\""
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "long",
      "patterns": [
        "[the] loop(-| )(counter|iteration)[-%*number%]"
      ]
    },
    {
      "id": "ExprLoopValue",
      "name": "Loop value",
      "description": [
        "Returns the previous, current, or next looped value."
      ],
      "examples": [
        "# Countdown",
        "loop 10 times:",
        "\tmessage \"%11 - loop-number%\"",
        "\twait a second",
        "",
        "# Generate a 10x10 floor made of randomly colored wool below the player",
        "loop blocks from the block below the player to the block 10 east of the block below the player:",
        "\tloop blocks from the loop-block to the block 10 north of the loop-block:",
        "\t\tset loop-block-2 to any wool",
        "",
        "loop {top-balances::*}:",
        "\tloop-iteration <= 10",
        "\tsend \"#%loop-iteration% %loop-index% has $%loop-value%\"",
        "",
        "loop shuffled (integers between 0 and 8):",
        "\tif all:",
        "\t\tprevious loop-value = 1",
        "\t\tloop-value = 4",
        "\t\tnext loop-value = 8",
        "\tthen:",
        "\t\t kill all players"
      ],
      "since": [
        "1.0, 2.8.0 (loop-counter), 2.10 (previous, next)"
      ],
      "return type": "Object",
      "patterns": [
        "[the] [current] loop-<.+>",
        "[the] next loop-<.+>",
        "[the] previous loop-<.+>"
      ]
    },
    {
      "id": "ExprLoot",
      "name": "Loot",
      "description": [
        "The loot that will be generated in a 'loot generate' event."
      ],
      "examples": [
        "on loot generate:",
        "\tchance of %10",
        "\tadd 64 diamonds to loot",
        "\tsend \"You hit the jackpot!!\""
      ],
      "since": [
        "2.7"
      ],
      "return type": "Item",
      "changers": [
        "add",
        "delete",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] loot"
      ],
      "required plugins": [
        "MC 1.16+"
      ]
    },
    {
      "id": "ExprLootContext",
      "name": "Loot Context",
      "description": [
        "The loot context involved in the context create section."
      ],
      "examples": [
        "set {_context} to a new loot context at {_location}:",
        "\tbroadcast loot context"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Loot Context",
      "patterns": [
        "[the] loot[ ]context"
      ]
    },
    {
      "id": "ExprLootContextLocation",
      "name": "Loot Location of Loot Context",
      "description": [
        "Returns the loot location of a loot context."
      ],
      "examples": [
        "set {_player} to player",
        "set {_context} to a loot context at player:",
        "\tif {_player} is in \"world_nether\":",
        "\t\tset loot location to location of last spawned pig",
        "send loot location of {_context} to player"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Location",
      "patterns": [
        "[the] loot[ing] [context] location [of %lootcontexts%]",
        "%lootcontexts%'[s] loot[ing] [context] location"
      ]
    },
    {
      "id": "ExprLootTable",
      "name": "Loot Table",
      "description": [
        "Returns the loot table of an entity or block.",
        "Setting the loot table of a block will update the block state, and once opened will generate loot of the specified loot table. Please note that doing so may cause warnings in the console due to over-filling the chest.",
        "Please note that resetting/deleting the loot table of an ENTITY will reset the entity's loot table to its default."
      ],
      "examples": [
        "set loot table of event-entity to \"minecraft:entities/ghast\"",
        "# this will set the loot table of the entity to a ghast's loot table, thus dropping ghast tears and gunpowder",
        "",
        "set loot table of event-block to \"minecraft:chests/simple_dungeon\""
      ],
      "since": [
        "2.10"
      ],
      "return type": "Loot Table",
      "changers": [
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] loot[ ]table[s] of %entities/blocks%",
        "%entities/blocks%'[s] loot[ ]table[s]"
      ]
    },
    {
      "id": "ExprLootTableFromString",
      "name": "Loot Table from Key",
      "description": [
        "Returns the loot table from a namespaced key."
      ],
      "examples": [
        "set {_table} to loot table \"minecraft:chests/simple_dungeon\""
      ],
      "since": [
        "2.10"
      ],
      "return type": "Loot Table",
      "patterns": [
        "[the] loot[ ]table[s] %strings%"
      ]
    },
    {
      "id": "ExprLootItems",
      "name": "Loot of Loot Table",
      "description": [
        "Returns the items of a loot table using a loot context. Not specifying a loot context will use a loot context with a location at the world's origin."
      ],
      "examples": [
        "set {_items::*} to loot items of the loot table \"minecraft:chests/simple_dungeon\" with loot context {_context}",
        "# this will set {_items::*} to the items that would be dropped from the simple dungeon loot table with the given loot context",
        "",
        "give player loot items of entity's loot table with loot context {_context}",
        "# this will give the player the items that the entity would drop with the given loot context"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Item",
      "patterns": [
        "[the] loot of %loottables% [(with|using) %lootcontext%]",
        "%loottables%'[s] loot [(with|using) %lootcontext%]"
      ]
    },
    {
      "id": "ExprLootContextEntity",
      "name": "Looted Entity of Loot Context",
      "description": [
        "Returns the looted entity of a loot context."
      ],
      "examples": [
        "set {_entity} to looted entity of {_context}",
        "",
        "set {_context} to a loot context at player:",
        "\tset loot luck value to 10",
        "\tset looter to player",
        "\tset looted entity to last spawned pig"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Entity",
      "patterns": [
        "[the] looted entity [of %lootcontexts%]",
        "%lootcontexts%'[s] looted entity"
      ]
    },
    {
      "id": "ExprLootContextLooter",
      "name": "Looter of Loot Context",
      "description": [
        "Returns the looter of a loot context. Note that setting the looter will read the looter's tool enchantments (e.g. looting) when generating loot."
      ],
      "examples": [
        "set {_killer} to looter of {_context}",
        "",
        "set {_context} to a loot context at player:",
        "\tset loot luck value to 10",
        "\tset looter to player",
        "\tset looted entity to last spawned pig"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Player",
      "patterns": [
        "[the] (looter|looting player) [of %lootcontexts%]",
        "%lootcontexts%'[s] (looter|looting player)"
      ]
    },
    {
      "id": "ExprLore",
      "name": "Lore",
      "description": [
        "An item's lore."
      ],
      "examples": [
        "set the 1st line of the item's lore to \"<orange>Excalibur 2.0\""
      ],
      "since": [
        "2.1"
      ],
      "return type": "Text",
      "patterns": [
        "[the] lore of %itemstack/itemtype%",
        "%itemstack/itemtype%'[s] lore",
        "[the] line %number% of [the] lore of %itemstack/itemtype%",
        "[the] line %number% of %itemstack/itemtype%'[s] lore",
        "[the] %number%(st|nd|rd|th) line of [the] lore of %itemstack/itemtype%",
        "[the] %number%(st|nd|rd|th) line of %itemstack/itemtype%'[s] lore"
      ]
    },
    {
      "id": "ExprLoveTime",
      "name": "Love Time",
      "description": [
        "The amount of time the animals have been in love for. Using a value of 30 seconds is equivalent to using an item to breed them.",
        "Only works on animals that can be bred and returns '0 seconds' for animals that can't be bred."
      ],
      "examples": [
        "on right click:",
        "\tsend \"%event-entity% has been in love for %love time of event-entity% more than you!\" to player"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] love[d] time of %livingentities%",
        "%livingentities%'[s] love[d] time"
      ]
    },
    {
      "id": "ExprLowestHighestSolidBlock",
      "name": "Lowest/Highest Solid Block",
      "description": [
        "An expression to obtain the lowest or highest solid (impassable) block at a location.",
        "Note that the y-coordinate of the location is not taken into account for this expression."
      ],
      "examples": [
        "teleport the player to the block above the highest block at the player",
        "set the highest solid block at the player's location to the lowest solid block at the player's location"
      ],
      "since": [
        "2.2-dev34, 2.9.0 (lowest solid block, 'non-air' option removed, additional syntax option)"
      ],
      "return type": "Block",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] (highest|lowest) [solid] block (at|of) %locations%",
        "%locations%'[s] (highest|lowest) [solid] block"
      ]
    },
    {
      "id": "ExprLootContextLuck",
      "name": "Luck of Loot Context",
      "description": [
        "Returns the luck of a loot context as a float. This represents the luck potion effect that an entity can have."
      ],
      "examples": [
        "set {_luck} to loot luck value of {_context}",
        "",
        "set {_context} to a loot context at player:",
        "\tset loot luck value to 10",
        "\tset looter to player",
        "\tset looted entity to last spawned pig"
      ],
      "since": [
        "2.10"
      ],
      "return type": "float",
      "patterns": [
        "[the] loot[ing] [context] luck [value|factor] [of %lootcontexts%]",
        "%lootcontexts%'[s] loot[ing] [context] luck [value|factor]"
      ]
    },
    {
      "id": "ExprMOTD",
      "name": "MOTD",
      "description": [
        "The message of the day in the server list. This can be changed in a server list ping event only.",
        "'default MOTD' returns the default MOTD always and can't be changed."
      ],
      "examples": [
        "on server list ping:",
        "\tset the motd to \"Join now!\""
      ],
      "since": [
        "2.3"
      ],
      "return type": "Text",
      "changers": [
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [(default)|(shown|displayed)] (MOTD|message of [the] day)"
      ]
    },
    {
      "id": "ExprMaxDurability",
      "name": "Max Durability",
      "description": [
        "The maximum durability of an item. Changing requires Minecraft 1.20.5+",
        "Note: 'delete' will remove the max durability from the item (making it a non-damageable item). Delete requires Paper 1.21+"
      ],
      "examples": [
        "maximum durability of diamond sword",
        "if max durability of player's tool is not 0: # Item is damageable",
        "set max durability of player's tool to 5000",
        "add 5 to max durability of player's tool",
        "reset max durability of player's tool",
        "delete max durability of player's tool"
      ],
      "since": [
        "2.5, 2.9.0 (change)"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] max[imum] (durabilit(y|ies)|damage) of %itemtypes/itemstacks/slots%",
        "%itemtypes/itemstacks/slots%'[s] max[imum] (durabilit(y|ies)|damage)"
      ],
      "required plugins": [
        "Minecraft 1.20.5+ (custom amount)"
      ]
    },
    {
      "id": "ExprMaxHealth",
      "name": "Max Health",
      "description": [
        "The maximum health of an entity, e.g. 10 for a player."
      ],
      "examples": [
        "on join:",
        "\tset the maximum health of the player to 100",
        "spawn a giant",
        "set the last spawned entity's max health to 1000"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] max[imum] health of %livingentities%",
        "%livingentities%'[s] max[imum] health"
      ]
    },
    {
      "id": "ExprMaxItemUseTime",
      "name": "Max Item Use Time",
      "description": [
        "Returns the max duration an item can be used for before the action completes. E.g. it takes 1.6 seconds to drink a potion, or 1.4 seconds to load an unenchanted crossbow.",
        "Some items, like bows and shields, do not have a limit to their use. They will return 1 hour."
      ],
      "examples": [
        "on right click:",
        "\tbroadcast max usage duration of player's tool"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Timespan",
      "patterns": [
        "[the] max[imum] [item] us(e|age) (time|duration) of %itemstacks%",
        "%itemstacks%'[s] max[imum] [item] us(e|age) (time|duration)"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "ExprMaxMinecartSpeed",
      "name": "Max Minecart Speed",
      "description": [
        "The maximum speed of a minecart."
      ],
      "examples": [
        "on right click on minecart:",
        "\tset max minecart speed of event-entity to 1"
      ],
      "since": [
        "2.5.1"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] max[imum] minecart (speed|velocity) of %entities%",
        "%entities%'[s] max[imum] minecart (speed|velocity)"
      ]
    },
    {
      "id": "ExprMaxPlayers",
      "name": "Max Players",
      "description": [
        "The count of max players. This can be changed in a server list ping event only.",
        "'real max players' returns the real count of max players of the server and can be modified on Paper 1.16 or later."
      ],
      "examples": [
        "on server list ping:",
        "\tset the max players count to (online players count + 1)"
      ],
      "since": [
        "2.3, 2.7 (modify max real players)"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [(real|default)|(fake|shown|displayed)] max[imum] player[s] [count|amount|number|size]",
        "[the] [(real|default)|(fake|shown|displayed)] max[imum] (count|amount|number|size) of players"
      ],
      "required plugins": [
        "Paper 1.16+ (modify max real players)"
      ]
    },
    {
      "id": "ExprMaxFreezeTicks",
      "name": "Maximum Freeze Time",
      "description": [
        "The maximum amount of time an entity can spend in powdered snow before taking damage."
      ],
      "examples": [
        "difference between player's freeze time and player's max freeze time is less than 1 second:",
        "\tsend \"you're about to freeze!\" to the player"
      ],
      "since": [
        "2.7"
      ],
      "return type": "Timespan",
      "patterns": [
        "[the] max[imum] freeze time of %entities%",
        "%entities%'[s] max[imum] freeze time"
      ]
    },
    {
      "id": "ExprMaxStack",
      "name": "Maximum Stack Size",
      "description": [
        "The maximum stack size of an item (e.g. 64 for torches, 16 for buckets, 1 for swords, etc.) or inventory.",
        "In 1.20.5+, the maximum stack size of items can be changed to any integer from 1 to 99, and stacked up to the maximum stack size of the inventory they're in."
      ],
      "examples": [
        "send \"You can hold %max stack size of player's tool% of %type of player's tool% in a slot.\" to player",
        "set the maximum stack size of inventory of all players to 16",
        "add 8 to the maximum stack size of player's tool",
        "reset the maximum stack size of {_gui}"
      ],
      "since": [
        "2.1, 2.10 (changeable, inventories)"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] max[imum] stack[[ ]size] of %itemtypes/inventories%",
        "%itemtypes/inventories%'[s] max[imum] stack[[ ]size]"
      ],
      "required plugins": [
        "Spigot 1.20.5+ (changeable)"
      ]
    },
    {
      "id": "ExprMe",
      "name": "Me",
      "description": [
        "A 'me' expression that can be used in players' effect commands only."
      ],
      "examples": [
        "!heal me",
        "!kick myself",
        "!give a diamond axe to me"
      ],
      "since": [
        "2.1.1"
      ],
      "return type": "Player",
      "changers": [
        "add",
        "remove",
        "remove all"
      ],
      "patterns": [
        "me",
        "my[self]"
      ]
    },
    {
      "id": "ExprMendingRepairAmount",
      "name": "Mending Repair Amount",
      "description": [
        "The number of durability points an item is to be repaired in a mending event.",
        " Modifying the repair amount will affect how much experience is given to the player after mending."
      ],
      "examples": [
        "on item mend:",
        "\tset the mending repair amount to 100"
      ],
      "since": [
        "2.5.1"
      ],
      "return type": "long",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [mending] repair amount"
      ]
    },
    {
      "id": "ExprMessage",
      "name": "Message",
      "description": [
        "The (chat) message of a chat event, the join message of a join event, the quit message of a quit event, the death message of a death event or the broadcasted message in a broadcast event. This expression is mostly useful for being changed."
      ],
      "examples": [
        "on chat:",
        "\tplayer has permission \"admin\"",
        "\tset message to \"&c%message%\"",
        "",
        "on first join:",
        "\tset join message to \"Welcome %player% to our awesome server!\"",
        "",
        "on join:",
        "\tplayer has played before",
        "\tset join message to \"Welcome back, %player%!\"",
        "",
        "on quit:",
        "\tif {vanish::%player's uuid%} is set:",
        "\t\tclear quit message",
        "\telse:",
        "\t\tset quit message to \"%player% left this awesome server!\"",
        "",
        "on death:",
        "\tset the death message to \"%player% died!\"",
        "",
        "on broadcast:",
        "\tset broadcast message to \"&a[BROADCAST] %broadcast message%\""
      ],
      "since": [
        "1.4.6 (chat message), 1.4.9 (join & quit messages), 2.0 (death message), 2.9.0 (clear message), 2.10 (broadcasted message)"
      ],
      "return type": "Text",
      "changers": [
        "delete",
        "set"
      ],
      "patterns": [
        "[the] [chat( |-)]message",
        "[the] (join|log[ ]in)( |-)message",
        "[the] (quit|leave|log[ ]out|kick)( |-)message",
        "[the] death( |-)message",
        "[the] broadcast(-|[ed] )message"
      ]
    },
    {
      "id": "ExprMetadata",
      "name": "Metadata",
      "description": [
        "Metadata is a way to store temporary data on entities, blocks and more that disappears after a server restart."
      ],
      "examples": [
        "set metadata value \"healer\" of player to true",
        "broadcast \"%metadata value \"\"healer\"\" of player%\"",
        "clear metadata value \"healer\" of player"
      ],
      "since": [
        "2.2-dev36, 2.10 (add, remove)"
      ],
      "return type": "Object",
      "changers": [
        "add",
        "delete",
        "remove",
        "set"
      ],
      "patterns": [
        "metadata [(value|tag)[s]] %strings% of %metadataholders%",
        "%metadataholders%'[s] metadata [(value|tag)[s]] %string%"
      ]
    },
    {
      "id": "ExprMiddleOfLocation",
      "name": "Middle of Location",
      "description": [
        "Returns the middle/center of a location. In other words, returns the middle of the X, Z coordinates and the floor value of the Y coordinate of a location."
      ],
      "examples": [
        "command /stuck:",
        "\texecutable by: players",
        "\ttrigger:",
        "\t\tteleport player to the center of player's location",
        "\t\tsend \"You're no longer stuck.\""
      ],
      "since": [
        "2.6.1"
      ],
      "return type": "Location",
      "patterns": [
        "[the] (middle|center) [point] of %location%",
        "%location%'[s] (middle|center) [point]"
      ]
    },
    {
      "id": "ExprMinecartDerailedFlyingVelocity",
      "name": "Minecart Derailed / Flying Velocity",
      "description": [
        "The velocity of a minecart as soon as it has been derailed or as soon as it starts flying."
      ],
      "examples": [
        "on right click on minecart:",
        "\tset derailed velocity of event-entity to vector 2, 10, 2"
      ],
      "since": [
        "2.5.1"
      ],
      "return type": "Vector",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] [minecart] (derailed|flying) velocity of %entities%",
        "%entities%'[s] [minecart] (derailed|flying) velocity"
      ]
    },
    {
      "id": "ExprMoonPhase",
      "name": "Moon Phase",
      "description": [
        "The current moon phase of a world."
      ],
      "examples": [
        "if moon phase of player's world is full moon:",
        "\tsend \"Watch for the wolves!\""
      ],
      "since": [
        "2.7"
      ],
      "return type": "Moon Phase",
      "patterns": [
        "[the] (lunar|moon) phase[s] of %worlds%",
        "%worlds%'[s] (lunar|moon) phase[s]"
      ],
      "required plugins": [
        "Paper 1.16+"
      ]
    },
    {
      "id": "ExprPushedBlocks",
      "name": "Moved blocks",
      "description": [
        "Blocks which are moved in a piston event. Cannot be used outside of piston events."
      ],
      "examples": [
        "the moved blocks"
      ],
      "since": [
        "2.2-dev27"
      ],
      "return type": "Block",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] moved blocks"
      ]
    },
    {
      "id": "ExprName",
      "name": "Name / Display Name / Tab List Name",
      "description": [
        "Represents the Minecraft account, display or tab list name of a player, or the custom name of an item, entity, block, inventory, gamerule, world, script or function.",
        "",
        "Players:",
        "\tName: The Minecraft account name of the player. Can't be changed, but 'display name' can be changed.",
        "\tDisplay Name: The name of the player that is displayed in messages. This name can be changed freely and can include color codes, and is shared among all plugins (e.g. chat plugins will use the display name).",
        "",
        "Entities:",
        "\tName: The custom name of the entity. Can be changed. But for living entities, the players will have to target the entity to see its name tag. For non-living entities, the name will not be visible at all. To prevent this, use 'display name'.",
        "\tDisplay Name: The custom name of the entity. Can be changed, which will also enable custom name visibility of the entity so name tag of the entity will be visible always.",
        "",
        "Items:",
        "\tName and Display Name: The custom name of the item (not the Minecraft locale name). Can be changed.",
        "",
        "Inventories:",
        "\tName and Display Name: The name/title of the inventory. Changing name of an inventory means opening the same inventory with the same contents but with a different name to its current viewers.",
        "",
        "Gamerules:",
        "\tName: The name of the gamerule. Cannot be changed.",
        "",
        "Worlds:",
        "\tName: The name of the world. Cannot be changed.",
        "",
        "Scripts:",
        "\tName: The name of a script, excluding its file extension."
      ],
      "examples": [
        "on join:",
        "\tplayer has permission \"name.red\"",
        "\tset the player's display name to \"<red>[admin] <gold>%name of player%\"",
        "\tset the player's tab list name to \"<green>%player's name%\"",
        "set the name of the player's tool to \"Legendary Sword of Awesomeness\""
      ],
      "since": [
        "before 2.1",
        "2.2-dev20 (inventory name)",
        "2.4 (non-living entity support, changeable inventory name)",
        "2.7 (worlds)"
      ],
      "return type": "Text",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] name[s] of %offlineplayers/entities/nameds/inventories%",
        "%offlineplayers/entities/nameds/inventories%'[s] name[s]",
        "[the] (display|nick|chat|custom)[ ]name[s] of %offlineplayers/entities/nameds/inventories%",
        "%offlineplayers/entities/nameds/inventories%'[s] (display|nick|chat|custom)[ ]name[s]",
        "[the] (player|tab)[ ]list name[s] of %players%",
        "%players%'[s] (player|tab)[ ]list name[s]"
      ]
    },
    {
      "id": "ExprNamed",
      "name": "Named Item/Inventory",
      "description": [
        "Directly names an item/inventory, useful for defining a named item/inventory in a script. If you want to (re)name existing items/inventories you can either use this expression or use set <a href='#ExprName'>name of <item/inventory> to <text></code>."
      ],
      "examples": [
        "give a diamond sword of sharpness 100 named \"<gold>Excalibur\" to the player",
        "set tool of player to the player's tool named \"<gold>Wand\"",
        "set the name of the player's tool to \"<gold>Wand\"",
        "open hopper inventory named \"Magic Hopper\" to player"
      ],
      "since": [
        "2.0, 2.2-dev34 (inventories)"
      ],
      "return type": "Object",
      "patterns": [
        "%itemtype/inventorytype% (named|with name[s]) %string%"
      ]
    },
    {
      "id": "ExprNearestEntity",
      "name": "Nearest Entity",
      "description": [
        "Gets the entity nearest to a location or another entity."
      ],
      "examples": [
        "kill the nearest pig and cow relative to player",
        "teleport player to the nearest cow relative to player",
        "teleport player to the nearest entity relative to player",
        "",
        "on click:",
        "\tkill nearest pig"
      ],
      "since": [
        "2.7"
      ],
      "return type": "Entity",
      "patterns": [
        "[the] nearest %*entitydatas% [[relative] to %entity/location%]",
        "[the] %*entitydatas% nearest [to %entity/location%]"
      ]
    },
    {
      "id": "LitNewLine",
      "name": "New Line",
      "description": [
        "Returns a line break separator."
      ],
      "examples": [
        "send \"Hello%nl%Goodbye!\" to player"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Text",
      "patterns": [
        "nl",
        "new[ ]line",
        "line[ ]break"
      ]
    },
    {
      "id": "ExprNoDamageTicks",
      "name": "No Damage Ticks",
      "description": [
        "The number of ticks that an entity is invulnerable to damage for."
      ],
      "examples": [
        "on damage:",
        "\tset victim's invulnerability ticks to 20 #Victim will not take damage for the next second"
      ],
      "since": [
        "2.5, 2.11 (deprecated)"
      ],
      "return type": "long",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (invulnerability|invincibility|no damage) tick[s] [of %livingentities%]",
        "%livingentities%'[s] (invulnerability|invincibility|no damage) tick[s]"
      ]
    },
    {
      "id": "ExprNoDamageTime",
      "name": "No Damage Time",
      "description": [
        "The amount of time an entity is invulnerable to any damage."
      ],
      "examples": [
        "on damage:",
        "\tset victim's invulnerability time to 20 ticks #Victim will not take damage for the next second",
        "",
        "if the no damage timespan of {_entity} is 0 seconds:",
        "\tset the invincibility time span of {_entity} to 1 minute"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (invulnerability|invincibility|no damage) time[[ ]span] [of %livingentities%]",
        "%livingentities%'[s] (invulnerability|invincibility|no damage) time[[ ]span]"
      ]
    },
    {
      "id": "ExprNode",
      "name": "Node (Experimental)",
      "description": [
        "Returns a node inside a config (or another section-node).",
        "Nodes in Skript configs are written in the format `key: value`.",
        "Section nodes can contain other nodes."
      ],
      "examples": [
        "set {_node} to node \"language\" in the skript config\nif text value of {_node} is \"french\":\n\tbroadcast \"Bonjour!\"\n",
        "set {_script} to the current script\nloop nodes of the current script:\n\tbroadcast name of loop-value"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Node",
      "patterns": [
        "[the] node %string% (of|in) %node%",
        "%node%'[s] node %string%",
        "[the] nodes (of|in) %nodes%",
        "%node%'[s] nodes"
      ]
    },
    {
      "id": "ExprNow",
      "name": "Now",
      "description": [
        "The current system time of the server. Use time to get the Minecraft time of a world."
      ],
      "examples": [
        "broadcast \"Current server time: %now%\""
      ],
      "since": [
        "1.4"
      ],
      "return type": "Date",
      "patterns": [
        "now"
      ]
    },
    {
      "id": "ExprNumberOfCharacters",
      "name": "Number of Characters",
      "description": [
        "The number of uppercase, lowercase, or digit characters in a string."
      ],
      "examples": [
        "#Simple Chat Filter",
        "on chat:",
        "\tif number of uppercase chars in message / length of message > 0.5",
        "\t\tcancel event",
        "\t\tsend \"<red>Your message has to many caps!\" to player"
      ],
      "since": [
        "2.5"
      ],
      "return type": "long",
      "patterns": [
        "number of upper[ ]case char(acters|s) in %string%",
        "number of lower[ ]case char(acters|s) in %string%",
        "number of digit char(acters|s) in %string%"
      ]
    },
    {
      "id": "ExprNumbers",
      "name": "Numbers",
      "description": [
        "All numbers between two given numbers, useful for looping.",
        "Use 'numbers' if your start is not an integer and you want to keep the fractional part of the start number constant, or use 'integers' if you only want to loop integers.",
        "You may also use 'decimals' if you want to use the decimal precision of the start number.",
        "You may want to use the 'times' expression instead, for instance 'loop 5 times:'"
      ],
      "examples": [
        "loop numbers from 2.5 to 5.5: # loops 2.5, 3.5, 4.5, 5.5",
        "loop integers from 2.9 to 5.1: # same as '3 to 5', i.e. loops 3, 4, 5",
        "loop decimals from 3.94 to 4: # loops 3.94, 3.95, 3.96, 3.97, 3.98, 3.99, 4"
      ],
      "since": [
        "1.4.6 (integers & numbers), 2.5.1 (decimals)"
      ],
      "return type": "Number",
      "patterns": [
        "[(all [[of] the]|the)] (numbers|integers|decimals) (between|from) %number% (and|to) %number%"
      ]
    },
    {
      "id": "ExprOfflinePlayers",
      "name": "Offline players",
      "description": [
        "All players that have ever joined the server. This includes the players currently online."
      ],
      "examples": [
        "send \"Size of all players who have joined the server: %size of all offline players%\""
      ],
      "since": [
        "2.2-dev35"
      ],
      "return type": "Offline Player",
      "patterns": [
        "[(all [[of] the]|the)] offline[ ]players"
      ]
    },
    {
      "id": "ExprOnlinePlayersCount",
      "name": "Online Player Count",
      "description": [
        "The amount of online players. This can be changed in a server list ping event only to show fake online player amount.",
        "real online player count always return the real count of online players and can't be changed."
      ],
      "examples": [
        "on server list ping:",
        "\t# This will make the max players count 5 if there are 4 players online.",
        "\tset the fake max players count to (online player count + 1)"
      ],
      "since": [
        "2.3"
      ],
      "return type": "long",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [((real|default)|(fake|shown|displayed))] [online] player (count|amount|number)",
        "[the] [((real|default)|(fake|shown|displayed))] (count|amount|number|size) of online players"
      ],
      "required plugins": [
        "Paper (fake count)"
      ]
    },
    {
      "id": "ExprOpenedInventory",
      "name": "Opened Inventory",
      "description": [
        "Return the currently opened inventory of a player.",
        "If no inventory is open, it returns the own player's crafting inventory."
      ],
      "examples": [
        "set slot 1 of player's current inventory to diamond sword"
      ],
      "since": [
        "2.2-dev24, 2.2-dev35 (Just 'current inventory' works in player events)"
      ],
      "return type": "Inventory",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] (current|open|top) inventory [of %players%]",
        "%players%'[s] (current|open|top) inventory"
      ]
    },
    {
      "id": "ExprPandaGene",
      "name": "Panda Gene",
      "description": [
        "The main or hidden gene of a panda."
      ],
      "since": [
        "2.11"
      ],
      "return type": "Gene",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] (main|hidden) gene[s] of %livingentities%",
        "%livingentities%'[s] (main|hidden) gene[s]"
      ]
    },
    {
      "id": "ExprParse",
      "name": "Parse",
      "description": [
        "Parses text as a given type, or as a given pattern.",
        "This expression can be used in two different ways: One which parses the entire text as a single instance of a type, e.g. as a number, and one that parses the text according to a pattern.",
        "If the given text could not be parsed, this expression will return nothing and the parse error will be set if some information is available.",
        "Some notes about parsing with a pattern:",
        "- The pattern must be a Skript pattern, e.g. percent signs are used to define where to parse which types, e.g. put a %number% or %items% in the pattern if you expect a number or some items there.",
        "- You have to save the expression's value in a list variable, e.g. set {parsed::*} to message parsed as \"...\".",
        "- The list variable will contain the parsed values from all %types% in the pattern in order. If a type was plural, e.g. %items%, the variable's value at the respective index will be a list variable, e.g. the values will be stored in {parsed::1::*}, not {parsed::1}."
      ],
      "examples": [
        "set {var} to line 1 parsed as number",
        "on chat:",
        "\tset {var::*} to message parsed as \"buying %items% for %money%\"",
        "\tif parse error is set:",
        "\t\tmessage \"%parse error%\"",
        "\telse if {var::*} is set:",
        "\t\tcancel event",
        "\t\tremove {var::2} from the player's balance",
        "\t\tgive {var::1::*} to the player"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Object",
      "patterns": [
        "%string% parsed as (%*classinfo%|\"<.*>\")"
      ]
    },
    {
      "id": "ExprParseError",
      "name": "Parse Error",
      "description": [
        "The error which caused the last parse operation to fail, which might not be set if a pattern was used and the pattern didn't match the provided text at all."
      ],
      "examples": [
        "set {var} to line 1 parsed as integer",
        "if {var} is not set:",
        "\tparse error is set:",
        "\t\tmessage \"<red>Line 1 is invalid: %last parse error%\"",
        "\telse:",
        "\t\tmessage \"<red>Please put an integer on line 1!\""
      ],
      "since": [
        "2.0"
      ],
      "return type": "Text",
      "patterns": [
        "[the] [last] [parse] error"
      ]
    },
    {
      "id": "ExprPassenger",
      "name": "Passenger",
      "description": [
        "The passenger of a vehicle, or the rider of a mob.",
        "For 1.11.2 and above, it returns a list of passengers and you can use all changers in it.",
        "See also: vehicle"
      ],
      "examples": [
        "#for 1.11 and lower",
        "passenger of the minecart is a creeper or a cow",
        "the saddled pig's passenger is a player",
        "#for 1.11.2+",
        "passengers of the minecart contains a creeper or a cow",
        "the boat's passenger contains a pig",
        "add a cow and a zombie to passengers of last spawned boat",
        "set passengers of player's vehicle to a pig and a horse",
        "remove all pigs from player's vehicle",
        "clear passengers of boat"
      ],
      "since": [
        "2.0, 2.2-dev26 (Multiple passengers for 1.11.2+)"
      ],
      "return type": "Entity",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] passenger[s] of %entities%",
        "%entities%'[s] passenger[s]"
      ]
    },
    {
      "id": "ExprPercent",
      "name": "Percent of",
      "description": [
        "Returns a percentage of one or more numbers."
      ],
      "examples": [
        "set damage to 10% of victim's health",
        "set damage to 125 percent of damage",
        "set {_result} to {_percent} percent of 999",
        "set {_result::*} to 10% of {_numbers::*}",
        "set experience to 50% of player's total experience"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Number",
      "patterns": [
        "%number%(\\%| percent) of %numbers%"
      ]
    },
    {
      "id": "LitPi",
      "name": "Pi",
      "description": [
        "Returns the mathematical constant pi. (approx. 3.1415926535)"
      ],
      "examples": [
        "set {_tau} to pi * 2"
      ],
      "since": [
        "2.7"
      ],
      "return type": "double",
      "patterns": [
        "(pi|π)"
      ]
    },
    {
      "id": "ExprPickupDelay",
      "name": "Pickup Delay",
      "description": [
        "The amount of time before a dropped item can be picked up by an entity."
      ],
      "examples": [
        "drop diamond sword at {_location} without velocity",
        "set pickup delay of last dropped item to 5 seconds"
      ],
      "since": [
        "2.7"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] pick[ ]up delay of %entities%",
        "%entities%'[s] pick[ ]up delay"
      ]
    },
    {
      "id": "ExprPing",
      "name": "Ping",
      "description": [
        "Pings of players, as Minecraft server knows them. Note that they will almost certainly be different from the ones you'd get from using ICMP echo requests. This expression is only supported on some server software (PaperSpigot)."
      ],
      "examples": [
        "command /ping <player=%player%>:",
        "\ttrigger:",
        "\t\tsend \"%arg-1%'s ping is %arg-1's ping%\""
      ],
      "since": [
        "2.2-dev36"
      ],
      "return type": "long",
      "patterns": [
        "[the] ping of %players%",
        "%players%'[s] ping"
      ]
    },
    {
      "id": "ExprPlain",
      "name": "Plain Item",
      "description": [
        "A plain item is an item with no modifications. It can be used to convert items to their default state or to match with other default items."
      ],
      "examples": [
        "if the player's tool is a plain diamond: # check if player's tool has no modifications",
        "\tsend \"You are holding a plain diamond!\""
      ],
      "since": [
        "2.6"
      ],
      "return type": "Item Type",
      "patterns": [
        "[a[n]] (plain|unmodified) %itemtype%"
      ]
    },
    {
      "id": "ExprPlayerChatCompletions",
      "name": "Player Chat Completions",
      "description": [
        "The custom chat completion suggestions. You can add, set, remove, and clear them. Removing the names of online players with this expression is ineffective.",
        "This expression will not return anything due to Bukkit limitations."
      ],
      "examples": [
        "add \"Skript\" and \"Njol\" to chat completions of all players",
        "remove \"text\" from {_p}'s chat completions",
        "clear player's chat completions"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Text",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [custom] chat completion[s] of %players%",
        "%players%'[s] [custom] chat completion[s]"
      ],
      "required plugins": [
        "Spigot 1.19+"
      ]
    },
    {
      "id": "ExprCurrentInputKeys",
      "name": "Player Input Keys",
      "description": [
        "Get the current input keys of a player."
      ],
      "examples": [
        "broadcast \"%player% is pressing %current input keys of player%\""
      ],
      "since": [
        "2.10"
      ],
      "return type": "Input Key",
      "patterns": [
        "[the] [current] (inputs|input keys) of %players%",
        "%players%'[s] [current] (inputs|input keys)"
      ],
      "required plugins": [
        "Minecraft 1.21.2+"
      ]
    },
    {
      "id": "ExprPlayerlistHeaderFooter",
      "name": "Player List Header and Footer",
      "description": [
        "The message above and below the player list in the tab menu."
      ],
      "examples": [
        "set all players' tab list header to \"Welcome to the Server!\"",
        "send \"%the player's tab list header%\" to player",
        "reset all players' tab list header"
      ],
      "since": [
        "2.4"
      ],
      "return type": "Text",
      "changers": [
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (player|tab)[ ]list (header|footer) [(text|message)] of %players%",
        "%players%'[s] (player|tab)[ ]list (header|footer) [(text|message)]"
      ],
      "required plugins": [
        "Minecraft 1.13 or newer"
      ]
    },
    {
      "id": "ExprPlayerProtocolVersion",
      "name": "Player Protocol Version",
      "description": [
        "Player's protocol version. For more information and list of protocol versions visit wiki.vg."
      ],
      "examples": [
        "command /protocolversion &ltplayer&gt:",
        "\ttrigger:",
        "\t\tsend \"Protocol version of %arg-1%: %protocol version of arg-1%\""
      ],
      "since": [
        "2.6.2"
      ],
      "return type": "integer",
      "patterns": [
        "[the] protocol version of %players%",
        "%players%'[s] protocol version"
      ],
      "required plugins": [
        "Paper 1.12.2 or newer"
      ]
    },
    {
      "id": "ExprSkull",
      "name": "Player Skull",
      "description": [
        "Gets a skull item representing a player. Skulls for other entities are provided by the aliases."
      ],
      "examples": [
        "give the victim's skull to the attacker",
        "set the block at the entity to the entity's skull"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Item Type",
      "patterns": [
        "[the] (head|skull) of %offlineplayers%",
        "%offlineplayers%'[s] (head|skull)"
      ]
    },
    {
      "id": "ExprPortal",
      "name": "Portal",
      "description": [
        "The blocks associated with a portal in the portal creation event."
      ],
      "examples": [
        "on portal creation:",
        "\tloop portal blocks:",
        "\t\tbroadcast \"%loop-block% is part of a portal!\""
      ],
      "since": [
        "2.4"
      ],
      "return type": "Block",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] portal['s] blocks",
        "[the] blocks of [the] portal"
      ]
    },
    {
      "id": "ExprPortalCooldown",
      "name": "Portal Cooldown",
      "description": [
        "The amount of time before an entity can use a portal. By default, it is 15 seconds after exiting a nether portal or end gateway.",
        "Players in survival/adventure get a cooldown of 0.5 seconds, while those in creative get no cooldown.",
        "Resetting will set the cooldown back to the default 15 seconds for non-player entities and 0.5 seconds for players."
      ],
      "examples": [
        "on portal:",
        "\twait 1 tick",
        "\tset portal cooldown of event-entity to 5 seconds"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] portal cooldown of %entities%",
        "%entities%'[s] portal cooldown"
      ]
    },
    {
      "id": "ExprPotionEffect",
      "name": "Potion Effect",
      "description": [
        "Create a new potion effect to apply to an entity or item type. Do note that when applying potion effects ",
        "to tipped arrows/lingering potions, Minecraft reduces the timespan."
      ],
      "examples": [
        "set {_p} to potion effect of speed of tier 1 without particles for 10 minutes",
        "add {_p} to potion effects of player's tool",
        "add {_p} to potion effects of target entity",
        "add potion effect of speed 1 to potion effects of player"
      ],
      "since": [
        "2.5.2"
      ],
      "return type": "Potion Effect",
      "patterns": [
        "[new] potion effect of %potioneffecttype% [potion] [[[of] tier] %number%] [(without particles)] [for %timespan%]",
        "[new] ambient potion effect of %potioneffecttype% [potion] [[[of] tier] %number%] [(without particles)] [for %timespan%]"
      ]
    },
    {
      "id": "ExprPotionEffectTier",
      "name": "Potion Effect Tier",
      "description": [
        "An expression to obtain the amplifier of a potion effect applied to an entity."
      ],
      "examples": [
        "if the amplifier of haste of player >= 3:"
      ],
      "since": [
        "2.7"
      ],
      "return type": "integer",
      "patterns": [
        "[the] [potion] (tier|amplifier|level) of %potioneffecttypes% (of|for|on) %livingentities%"
      ]
    },
    {
      "id": "ExprPotionEffects",
      "name": "Potion Effects",
      "description": [
        "Represents the active potion effects of entities and itemtypes.",
        "You can clear all potion effects of an entity/itemtype and add/remove a potion effect/type to/from an entity/itemtype.",
        "Do note you will not be able to clear the base potion effects of a potion item. In that case, just set the item to a water bottle.",
        "When adding a potion effect type (rather than a potion effect), it will default to 15 seconds with tier 1."
      ],
      "examples": [
        "set {_p::*} to active potion effects of player",
        "clear all the potion effects of player",
        "clear all the potion effects of player's tool",
        "add potion effects of player to potion effects of player's tool",
        "add speed to potion effects of target entity",
        "remove speed and night vision from potion effects of player"
      ],
      "since": [
        "2.5.2"
      ],
      "return type": "Potion Effect",
      "changers": [
        "add",
        "delete",
        "remove"
      ],
      "patterns": [
        "[the] [(all [[of] the]|the)] [active] potion effects of %livingentities/itemtypes%",
        "%livingentities/itemtypes%'[s] [(all [[of] the]|the)] [active] potion effects"
      ]
    },
    {
      "id": "ExprProjectileCriticalState",
      "name": "Projectile Critical State",
      "description": [
        "A projectile's critical state. The only currently accepted projectiles are arrows and tridents."
      ],
      "examples": [
        "on shoot:",
        "\tevent-projectile is an arrow",
        "\tset projectile critical mode of event-projectile to true"
      ],
      "since": [
        "2.5.1"
      ],
      "return type": "Boolean",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] (projectile|arrow) critical (state|ability|mode) of %projectiles%",
        "%projectiles%'[s] (projectile|arrow) critical (state|ability|mode)"
      ]
    },
    {
      "id": "ExprProjectileForce",
      "name": "Projectile Force",
      "description": [
        "Returns the force at which a projectile was shot within an entity shoot bow event."
      ],
      "since": [
        "2.11"
      ],
      "return type": "float",
      "patterns": [
        "[the] projectile force"
      ]
    },
    {
      "id": "ExprProtocolVersion",
      "name": "Protocol Version",
      "description": [
        "The protocol version that will be sent as the protocol version of the server in a server list ping event. For more information and list of protocol versions visit wiki.vg.",
        "If this protocol version doesn't match with the protocol version of the client, the client will see the version string.",
        "But please note that, this expression has no visual effect over the version string. For example if the server uses PaperSpigot 1.12.2, and you make the protocol version 107 (1.9),",
        "the version string will not be \"Paper 1.9\", it will still be \"Paper 1.12.2\".",
        "But then you can customize the version string as you wish.",
        "Also if the protocol version of the player is higher than protocol version of the server, it will say",
        "\"Server out of date!\", and if vice-versa \"Client out of date!\" when you hover on the ping bars.",
        "",
        "This can be set in a server list ping event only",
        "(increase and decrease effects cannot be used because that wouldn't make sense)."
      ],
      "examples": [
        "on server list ping:",
        "\tset the version string to \"<light green>Version: <orange>%minecraft version%\"",
        "\tset the protocol version to 0 # 13w41a (1.7) - so the player will see the custom version string almost always"
      ],
      "since": [
        "2.3"
      ],
      "return type": "long",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] [server] [(sent|required|fake)] protocol version [number]"
      ],
      "required plugins": [
        "Paper 1.12.2 or newer"
      ]
    },
    {
      "id": "ExprQueue",
      "name": "Queue (Experimental)",
      "description": [
        "Requires the using queues experimental feature flag to be enabled.\n\nCreates a new queue.\nA queue is a set of elements that can have things removed from the start and added to the end.\n\nAny value can be added to a queue. Adding a non-existent value (e.g. `{variable that isn't set}`) will have no effect.\nThis means that removing an element from the queue will always return a value unless the queue is empty.\n\nRequesting an element from a queue (e.g. `the 1st element of {queue}`) also removes it from the queue."
      ],
      "examples": [
        "set {queue} to a new queue\nadd \"hello\" and \"there\" to {queue}\nbroadcast the first element of {queue} # hello\nbroadcast the first element of {queue} # there\n# queue is now empty",
        "set {queue} to a new queue of \"hello\" and \"there\"\nbroadcast the last element of {queue} # removes 'there'\nadd \"world\" to {queue}\nbroadcast the first 2 elements of {queue} # removes 'hello', 'world'"
      ],
      "since": [
        "2.10 (experimental)"
      ],
      "return type": "Queue",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset"
      ],
      "patterns": [
        "[a] [new] queue [(of|with) %objects%]"
      ]
    },
    {
      "id": "ExprQueueStartEnd",
      "name": "Queue Start/End (Experimental)",
      "description": [
        "Requires the using queues experimental feature flag to be enabled.\n\nThe first or last element in a queue. Asking for this does not remove the element from the queue.\n\nThis is designed for use with the add changer: to add or remove elements from the start or the end of the queue.\n"
      ],
      "examples": [
        "set {queue} to a new queue\nadd \"hello\" to {queue}\nadd \"foo\" to the start of {queue}\nbroadcast the first element of {queue} # foo\nbroadcast the first element of {queue} # hello\n# queue is now empty"
      ],
      "since": [
        "2.10 (experimental)"
      ],
      "return type": "Object",
      "changers": [
        "add",
        "delete",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] (start|end) of %queue%",
        "%queue%'[s] (start|end)"
      ]
    },
    {
      "id": "ExprQuitReason",
      "name": "Quit Reason",
      "description": [
        "The quit reason as to why a player disconnected in a quit event."
      ],
      "examples": [
        "on quit:",
        "\tquit reason was kicked",
        "\tplayer is banned",
        "\tclear {server::player::%uuid of player%::*}"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Quit Reason",
      "patterns": [
        "[the] (quit|disconnect) (cause|reason)"
      ],
      "required plugins": [
        "Paper 1.16.5+"
      ]
    },
    {
      "id": "ExprRandom",
      "name": "Random",
      "description": [
        "Gets a random item out of a set, e.g. a random player out of all players online."
      ],
      "examples": [
        "give a diamond to a random player out of all players",
        "give a random item out of all items to the player"
      ],
      "since": [
        "1.4.9"
      ],
      "return type": "Object",
      "patterns": [
        "[a] random %*classinfo% [out] of %objects%"
      ]
    },
    {
      "id": "ExprRandomCharacter",
      "name": "Random Character",
      "description": [
        "One or more random characters between two given characters. Use 'alphanumeric' if you want only alphanumeric characters.",
        "This expression uses the Unicode numerical code of a character to determine which characters are between the two given characters.",
        "If strings of more than one character are given, only the first character of each is used."
      ],
      "examples": [
        "set {_captcha} to join (5 random characters between \"a\" and \"z\") with \"\"",
        "send 3 random alphanumeric characters between \"0\" and \"z\""
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Text",
      "patterns": [
        "[a|%integer%] random [alphanumeric] character[s] (from|between) %string% (to|and) %string%"
      ]
    },
    {
      "id": "ExprRandomNumber",
      "name": "Random Numbers",
      "description": [
        "A given amount of random numbers or integers between two given numbers. Use 'number' if you want any number with decimal parts, or use use 'integer' if you only want whole numbers.",
        "Please note that the order of the numbers doesn't matter, i.e. random number between 2 and 1 will work as well as random number between 1 and 2."
      ],
      "examples": [
        "set the player's health to a random number between 5 and 10",
        "send \"You rolled a %random integer from 1 to 6%!\" to the player",
        "set {_chances::*} to 5 random integers between 5 and 96",
        "set {_decimals::*} to 3 random numbers between 2.7 and -1.5"
      ],
      "since": [
        "1.4, 2.10 (Multiple random numbers)"
      ],
      "return type": "Number",
      "patterns": [
        "[a|%integer%] random (integer|number)[s] (from|between) %number% (to|and) %number%"
      ]
    },
    {
      "id": "ExprRandomUUID",
      "name": "Random UUID",
      "description": [
        "Returns a random UUID."
      ],
      "examples": [
        "set {_uuid} to random uuid"
      ],
      "since": [
        "2.5.1, 2.11 (return UUIDs)"
      ],
      "return type": "UUID",
      "patterns": [
        "[a] random uuid"
      ]
    },
    {
      "id": "ExprRawName",
      "name": "Raw Name",
      "description": [
        "The raw Minecraft material name of the given item. Note that this is not guaranteed to give same results on all servers."
      ],
      "examples": [
        "raw name of tool of player"
      ],
      "since": [
        "unknown (2.2)"
      ],
      "return type": "Text",
      "patterns": [
        "(raw|minecraft|vanilla) name[s] of %itemtypes%"
      ]
    },
    {
      "id": "ExprRawString",
      "name": "Raw String",
      "description": [
        "Returns the string without formatting (colors etc.) and without stripping them from it, e.g. raw \"&aHello There!\" would output &aHello There!"
      ],
      "examples": [
        "send raw \"&aThis text is unformatted!\" to all players"
      ],
      "since": [
        "2.7"
      ],
      "return type": "Text",
      "patterns": [
        "raw %strings%"
      ]
    },
    {
      "id": "ExprReadiedArrow",
      "name": "Readied Arrow/Bow",
      "description": [
        "The bow or arrow in a Ready Arrow event."
      ],
      "examples": [
        "on player ready arrow:",
        "\tselected bow's name is \"Spectral Bow\"",
        "\tif selected arrow is not a spectral arrow:",
        "\t\tcancel event"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Item",
      "patterns": [
        "[the] (readied|selected|drawn) (arrow|bow)"
      ]
    },
    {
      "id": "ExprRedstoneBlockPower",
      "name": "Redstone Block Power",
      "description": [
        "Power of a redstone block"
      ],
      "examples": [
        "if redstone power of targeted block is 15:",
        "\tsend \"This block is very powerful!\""
      ],
      "since": [
        "2.5"
      ],
      "return type": "long",
      "patterns": [
        "[the] redstone power of %blocks%",
        "%blocks%'[s] redstone power"
      ]
    },
    {
      "id": "ExprRemainingAir",
      "name": "Remaining Air",
      "description": [
        "How much time a player has left underwater before starting to drown."
      ],
      "examples": [
        "if the player's remaining air is less than 3 seconds:",
        "\tsend \"hurry, get to the surface!\" to the player"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] remaining air of %livingentities%",
        "%livingentities%'[s] remaining air"
      ]
    },
    {
      "id": "ExprRepeat",
      "name": "Repeat String",
      "description": [
        "Repeats inputted strings a given amount of times."
      ],
      "examples": [
        "broadcast nl and nl repeated 200 times",
        "broadcast \"Hello World \" repeated 5 times",
        "if \"aa\" repeated 2 times is \"aaaa\":",
        "\tbroadcast \"Ahhhh\" repeated 100 times"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Text",
      "patterns": [
        "%strings% repeated %integer% time[s]"
      ]
    },
    {
      "id": "ExprResonatingTime",
      "name": "Resonating Time",
      "description": [
        "Returns the resonating time of a bell.",
        "A bell will start resonating five game ticks after being rung, and will continue to resonate for 40 game ticks."
      ],
      "examples": [
        "broadcast \"The bell has been resonating for %resonating time of target block%\""
      ],
      "since": [
        "2.9.0"
      ],
      "return type": "Timespan",
      "patterns": [
        "[the] resonat(e|ing) time of %block%",
        "%block%'[s] resonat(e|ing) time"
      ],
      "required plugins": [
        "Spigot 1.19.4+"
      ]
    },
    {
      "id": "ExprCharges",
      "name": "Respawn Anchor Charges",
      "description": [
        "The charges of a respawn anchor."
      ],
      "examples": [
        "set the charges of event-block to 3"
      ],
      "since": [
        "2.7"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [max[imum]] charge[s] of %blocks%",
        "%blocks%'[s] [max[imum]] charge[s]"
      ],
      "required plugins": [
        "Minecraft 1.16+"
      ]
    },
    {
      "id": "ExprRespawnLocation",
      "name": "Respawn location",
      "description": [
        "The location that a player should respawn at. This is used within the respawn event."
      ],
      "examples": [
        "on respawn:",
        "\tset respawn location to {example::spawn}"
      ],
      "since": [
        "2.2-dev35"
      ],
      "return type": "Location",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] respawn location"
      ]
    },
    {
      "id": "ExprResult",
      "name": "Result (Experimental)",
      "description": [
        "Runs something (like a function) and returns its result.",
        "If the thing is expected to return multiple values, use 'results' instead of 'result'."
      ],
      "examples": [
        "set {_function} to the function named \"myFunction\"",
        "set {_result} to the result of {_function}",
        "set {_list::*} to the results of {_function}",
        "set {_result} to the result of {_function} with arguments 13 and true"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Object",
      "patterns": [
        "[the] result[s] of [running|executing] %executable% [with arg[ument]s %objects%]"
      ],
      "keywords": [
        "run",
        "result",
        "execute",
        "function",
        "reflection"
      ]
    },
    {
      "id": "ExprReversedList",
      "name": "Reversed List",
      "description": [
        "Reverses given list."
      ],
      "examples": [
        "set {_list::*} to reversed {_list::*}"
      ],
      "since": [
        "2.4"
      ],
      "return type": "Object",
      "patterns": [
        "reversed %objects%"
      ]
    },
    {
      "id": "ExprRingingTime",
      "name": "Ringing Time",
      "description": [
        "Returns the ringing time of a bell.",
        "A bell typically rings for 50 game ticks."
      ],
      "examples": [
        "broadcast \"The bell has been ringing for %ringing time of target block%\""
      ],
      "since": [
        "2.9.0"
      ],
      "return type": "Timespan",
      "patterns": [
        "[the] ring[ing] time of %block%",
        "%block%'[s] ring[ing] time"
      ],
      "required plugins": [
        "Spigot 1.19.4+"
      ]
    },
    {
      "id": "ExprRotate",
      "name": "Rotated Quaternion/Vector",
      "description": [
        "Rotates a quaternion or vector around an axis a set amount of degrees, or around all 3 axes at once.",
        "Vectors can only be rotated around the global X/Y/Z axes, or an arbitrary vector axis.",
        "Quaternions are more flexible, allowing rotation around the global or local X/Y/Z axes, arbitrary vectors, or all 3 local axes at once.",
        "Global axes are the ones in the Minecraft world. Local axes are relative to how the quaternion is already oriented.",
        "",
        "Note that rotating a quaternion around a vector results in a rotation around the local vector, so results may not be what you expect. For example, rotating around vector(1, 0, 0) is the same as rotating around the local X axis.",
        "The same applies to rotations by all three axes at once. In addition, rotating around all three axes of a quaternion/display at once will rotate in ZYX order, meaning the Z rotation will be applied first and the X rotation last."
      ],
      "examples": [
        "set {_new} to {_quaternion} rotated around x axis by 10 degrees",
        "set {_new} to {_vector} rotated around vector(1, 1, 1) by 45",
        "set {_new} to {_quaternion} rotated by x 45, y 90, z 135"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Object",
      "patterns": [
        "%quaternions/vectors% rotated around [the] [global] (x|y|z)(-| )axis by %number%",
        "%quaternions% rotated around [the|its|their] local (x|y|z)(-| )ax(i|e)s by %number%",
        "%quaternions/vectors% rotated around [the] %vector% by %number%",
        "%quaternions% rotated by x %number%, y %number%(, [and]| and) z %number%"
      ]
    },
    {
      "id": "ExprQuaternionAxisAngle",
      "name": "Rotation Axis/Angle",
      "description": [
        "Returns the axis or angle that a quaternion will rotate by/around.",
        "All quaternions can be represented by a rotation of some amount around some axis, so this expression provides the ability to get that angle/axis."
      ],
      "examples": [
        "set {_quaternion} to axisAngle(45, vector(1, 2, 3))",
        "send rotation axis of {_quaternion} # 1, 2, 3",
        "send rotation angle of {_quaternion} # 45",
        "set rotation angle of {_quaternion} to 135",
        "set rotation axis of {_quaternion} to vector(0, 1, 0)"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Object",
      "patterns": [
        "[the] rotation (angle|axis) of %quaternions%",
        "%quaternions%'[s] rotation (angle|axis)"
      ]
    },
    {
      "id": "ExprRound",
      "name": "Rounding",
      "description": [
        "Rounds numbers normally, up (ceiling) or down (floor) respectively."
      ],
      "examples": [
        "set {var} to rounded health of player",
        "set line 1 of the block to rounded \"%(1.5 * player's level)%\"",
        "add rounded down argument to the player's health"
      ],
      "since": [
        "2.0"
      ],
      "return type": "long",
      "patterns": [
        "[a|the] (round[ed] down|floored) %numbers%",
        "%numbers% (round[ed] down|floored)",
        "[a|the] round[ed] %numbers%",
        "%numbers% round[ed]",
        "[a|the] (round[ed] up|ceil[ing]ed) %numbers%",
        "%numbers% (round[ed] up|ceil[ing]ed)"
      ]
    },
    {
      "id": "ExprSaturation",
      "name": "Saturation",
      "description": [
        "The saturation of a player. If used in a player event, it can be omitted and will default to event-player."
      ],
      "examples": [
        "set saturation of player to 20"
      ],
      "since": [
        "2.2-Fixes-v10, 2.2-dev35 (fully modifiable), 2.6.2 (syntax pattern changed)"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] saturation of %players%",
        "%players%'[s] saturation"
      ]
    },
    {
      "id": "ExprScoreboardTags",
      "name": "Scoreboard Tags",
      "description": [
        "Scoreboard tags are simple list of texts stored directly in the data of an entity.",
        "So this is a Minecraft related thing, not Bukkit, so the tags will not get removed when the server stops. You can visit visit Minecraft Wiki for more info.",
        "This is changeable and valid for any type of entity. Also you can use use the Has Scoreboard Tag condition to check whether an entity has the given tags.",
        "",
        "Requires Minecraft 1.11+ (actually added in 1.9 to the game, but added in 1.11 to Spigot)."
      ],
      "examples": [
        "on spawn of a monster:",
        "\tif the spawn reason is mob spawner:",
        "\t\tadd \"spawned by a spawner\" to the scoreboard tags of event-entity",
        "",
        "on death of a monster:",
        "\tif the attacker is a player:",
        "\t\tif the victim doesn't have the scoreboard tag \"spawned by a spawner\":",
        "\t\t\tadd 1$ to attacker's balance"
      ],
      "since": [
        "2.3"
      ],
      "return type": "Text",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[(all [[of] the]|the)] scoreboard tags of %entities%",
        "%entities%'[s] scoreboard tags"
      ]
    },
    {
      "id": "ExprScript",
      "name": "Script",
      "description": [
        "The current script, or a script from its (file) name.",
        "If the script is enabled or disabled (or reloaded) this reference will become invalid.",
        "Therefore, it is recommended to obtain a script reference when needed."
      ],
      "examples": [
        "on script load:",
        "\tbroadcast \"Loaded %the current script%\"",
        "on script load:",
        "\tset {running::%script%} to true",
        "on script unload:",
        "\tset {running::%script%} to false",
        "set {script} to the script named \"weather.sk\"",
        "loop the scripts in directory \"quests/\":",
        "\tenable loop-value"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Script",
      "patterns": [
        "[the] [current] script",
        "[the] script[s] [named] %strings%",
        "[the] scripts in [directory|folder] %string%"
      ]
    },
    {
      "id": "ExprSeaLevel",
      "name": "Sea Level",
      "description": [
        "Gets the sea level of a world."
      ],
      "examples": [
        "send \"The sea level in your world is %sea level in player's world%\""
      ],
      "since": [
        "2.5.1"
      ],
      "return type": "long",
      "patterns": [
        "[the] sea level of %worlds%",
        "%worlds%'[s] sea level"
      ]
    },
    {
      "id": "ExprSeaPickles",
      "name": "Sea Pickles",
      "description": [
        "An expression to obtain or modify data relating to the pickles of a sea pickle block."
      ],
      "examples": [
        "on block break:",
        "\ttype of block is sea pickle",
        "\tsend \"Wow! This stack of sea pickles contained %event-block's sea pickle count% pickles!\"",
        "\tsend \"It could've contained a maximum of %event-block's maximum sea pickle count% pickles!\"",
        "\tsend \"It had to have contained at least %event-block's minimum sea pickle count% pickles!\"",
        "\tcancel event",
        "\tset event-block's sea pickle count to event-block's maximum sea pickle count",
        "\tsend \"This bad boy is going to hold so many pickles now!!\""
      ],
      "since": [
        "2.7"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [(min|max)[imum]] [sea] pickle(s| (count|amount)) of %blocks%",
        "%blocks%'[s] [(min|max)[imum]] [sea] pickle(s| (count|amount))"
      ]
    },
    {
      "id": "ExprLootTableSeed",
      "name": "Seed of Loot Table",
      "description": [
        "Returns the seed of a loot table. Setting the seed of a block or entity that does not have a loot table will not do anything."
      ],
      "examples": [
        "set {_seed} loot table seed of block",
        "set loot table seed of entity to 123456789"
      ],
      "since": [
        "2.10"
      ],
      "return type": "long",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] loot[[ ]table] seed[s] of %entities/blocks%",
        "%entities/blocks%'[s] loot[[ ]table] seed[s]"
      ]
    },
    {
      "id": "ExprSentCommands",
      "name": "Sent Command List",
      "description": [
        "The commands that will be sent to the player in a send commands to player event.",
        "Modifications will affect what commands show up for the player to tab complete. They will not affect what commands the player can actually run.",
        "Adding new commands to the list is illegal behavior and will be ignored."
      ],
      "examples": [
        "on send command list:",
        "\tset command list to command list where [input does not contain \":\"]",
        "\tremove \"help\" from command list"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Text",
      "changers": [
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [sent] [server] command[s] list"
      ]
    },
    {
      "id": "ExprServerIcon",
      "name": "Server Icon",
      "description": [
        "Icon of the server in the server list. Can be set to an icon that loaded using the",
        "load server icon effect,",
        "or can be reset to the default icon in a server list ping.",
        "'default server icon' returns the default server icon (server-icon.png) always and cannot be changed."
      ],
      "examples": [
        "on script load:",
        "\tset {server-icons::default} to the default server icon"
      ],
      "since": [
        "2.3"
      ],
      "return type": "Server Icon",
      "patterns": [
        "[the] [((default)|(shown|sent))] [server] icon"
      ],
      "required plugins": [
        "Paper 1.12.2 or newer"
      ]
    },
    {
      "id": "ExprSets",
      "name": "Sets",
      "description": [
        "Returns a list of all the values of a type. Useful for looping."
      ],
      "examples": [
        "loop all attribute types:",
        "\tset loop-value attribute of player to 10",
        "\tmessage \"Set attribute %loop-value% to 10!\""
      ],
      "since": [
        "1.0 pre-5, 2.7 (classinfo)"
      ],
      "return type": "Object",
      "patterns": [
        "[all [[of] the]|the|every] %*classinfo%"
      ]
    },
    {
      "id": "ExprShooter",
      "name": "Shooter",
      "description": [
        "The shooter of a projectile."
      ],
      "since": [
        "1.3.7, 2.11 (entity shoot bow event)"
      ],
      "return type": "Living Entity",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] shooter [of %projectile%]"
      ]
    },
    {
      "id": "ExprShuffledList",
      "name": "Shuffled List",
      "description": [
        "Shuffles given list randomly. This is done by replacing indices by random numbers in resulting list."
      ],
      "examples": [
        "set {_list::*} to shuffled {_list::*}"
      ],
      "since": [
        "2.2-dev32"
      ],
      "return type": "Object",
      "patterns": [
        "shuffled %objects%"
      ]
    },
    {
      "id": "ExprSignText",
      "name": "Sign Text",
      "description": [
        "A line of text on a sign. Can be changed, but remember that there is a 16 character limit per line (including color codes that use 2 characters each)."
      ],
      "examples": [
        "on rightclick on sign:",
        "\tline 2 of the clicked block is \"[Heal]\":",
        "\t\theal the player",
        "\tset line 3 to \"%player%\""
      ],
      "since": [
        "1.3"
      ],
      "return type": "Text",
      "changers": [
        "delete",
        "set"
      ],
      "patterns": [
        "[the] line %number% [of %block%]",
        "[the] (1st|first|2nd|second|3rd|third|4th|fourth) line [of %block%]"
      ]
    },
    {
      "id": "ExprSimulationDistance",
      "name": "Simulation Distance",
      "description": [
        "The simulation distance of a world or a player.",
        "Simulation distance is the minimum distance in chunks for entities to tick.",
        "Simulation distance is capped to the current view distance of the world or player.",
        "The view distance is capped between 2 and 32 chunks.",
        "Paper is required to change the simulation distance for both worlds and players."
      ],
      "examples": [
        "set simulation distance of player to 10",
        "add 50 to the simulation distance of world \"world\"",
        "reset the simulation distance of player",
        "clear the simulation distance of world \"world\""
      ],
      "since": [
        "2.11"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] simulation distance[s] of %worlds/players%",
        "%worlds/players%'[s] simulation distance[s]"
      ],
      "required plugins": [
        "Paper (change for players), Paper 1.21+ (change for worlds)"
      ]
    },
    {
      "id": "ExprWorldBorderSize",
      "name": "Size of World Border",
      "description": [
        "The size of a world border.",
        "The size can not be smaller than 1."
      ],
      "examples": [
        "set world border radius of {_worldborder} to 10"
      ],
      "since": [
        "2.11"
      ],
      "return type": "double",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] world[ ]border (size|diameter|radius) [of %worldborders%]",
        "%worldborders%'[s] world[ ]border (size|diameter|radius)"
      ]
    },
    {
      "id": "ExprSkullOwner",
      "name": "Skull Owner",
      "description": [
        "The skull owner of a player skull."
      ],
      "examples": [
        "set {_owner} to the skull owner of event-block",
        "set skull owner of {_block} to \"Njol\" parsed as offlineplayer",
        "set head owner of player's tool to {_player}"
      ],
      "since": [
        "2.9.0, 2.10 (of items)"
      ],
      "return type": "Offline Player",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] (head|skull) owner of %slots/itemtypes/itemstacks/blocks%",
        "%slots/itemtypes/itemstacks/blocks%'[s] (head|skull) owner"
      ]
    },
    {
      "id": "ExprSlotIndex",
      "name": "Slot Index",
      "description": [
        "Index of an an inventory slot. Other types of slots may or may not have indices. Note that comparing slots with numbers is also possible; if index of slot is same as the number, comparisonsucceeds. This expression is mainly for the cases where you must for some reason save the slot numbers.",
        "",
        "Raw index of slot is unique for the view, see Minecraft Wiki"
      ],
      "examples": [
        "if index of event-slot is 10:",
        "\tsend \"You bought a pie!\"",
        "",
        "if display name of player's top inventory is \"Custom Menu\": # 3 rows inventory",
        "\tif raw index of event-slot > 27: # outside custom inventory",
        "\t\tcancel event"
      ],
      "since": [
        "2.2-dev35, 2.8.0 (raw index)"
      ],
      "return type": "long",
      "patterns": [
        "[the] [(raw|unique)] index of %slots%",
        "%slots%'[s] [(raw|unique)] index"
      ]
    },
    {
      "id": "ExprSortedList",
      "name": "Sorted List",
      "description": [
        "Sorts given list in natural order. All objects in list must be comparable; if they're not, this expression will return nothing."
      ],
      "examples": [
        "set {_sorted::*} to sorted {_players::*}"
      ],
      "since": [
        "2.2-dev19"
      ],
      "return type": "Object",
      "patterns": [
        "sorted %objects%"
      ]
    },
    {
      "id": "ExprSourceBlock",
      "name": "Source Block",
      "description": [
        "The source block in a spread event."
      ],
      "examples": [
        "on spread:",
        "\tif the source block is a grass block:",
        "\t\tset the source block to dirt"
      ],
      "since": [
        "2.7"
      ],
      "return type": "Block",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] source block"
      ]
    },
    {
      "id": "ExprSpawn",
      "name": "Spawn",
      "description": [
        "The spawn point of a world."
      ],
      "examples": [
        "teleport all players to spawn",
        "set the spawn point of \"world\" to the player's location"
      ],
      "since": [
        "1.4.2"
      ],
      "return type": "Location",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] spawn[s] [(point|location)[s]] [of %worlds%]",
        "%worlds%'[s] spawn[s] [(point|location)[s]]"
      ]
    },
    {
      "id": "ExprSpawnEggEntity",
      "name": "Spawn Egg Entity",
      "description": [
        "Gets or sets the entity snapshot that the provided spawn eggs will spawn when used."
      ],
      "examples": [
        "set {_item} to a zombie spawn egg",
        "broadcast the spawn egg entity of {_item}",
        "",
        "spawn a pig at location(0,0,0):",
        "\tset the max health of entity to 20",
        "\tset the health of entity to 20",
        "\tset {_snapshot} to the entity snapshot of entity",
        "\tclear entity",
        "set the spawn egg entity of {_item} to {_snapshot}",
        "if the spawn egg entity of {_item} is {_snapshot}: # Minecraft 1.20.5+",
        "",
        "set the spawn egg entity of {_item} to (random element out of all entities)",
        "",
        "set the spawn egg entity of {_item} to a zombie"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Entity Snapshot",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] spawn egg entity of %itemstacks/itemtypes/slots%",
        "%itemstacks/itemtypes/slots%'[s] spawn egg entity"
      ],
      "required plugins": [
        "Minecraft 1.20.2+, Minecraft 1.20.5+ (comparisons)"
      ]
    },
    {
      "id": "ExprSpawnReason",
      "name": "Spawn Reason",
      "description": [
        "The spawn reason in a spawn event."
      ],
      "examples": [
        "on spawn:",
        "\tspawn reason is reinforcements or breeding",
        "\tcancel event"
      ],
      "since": [
        "2.3"
      ],
      "return type": "Spawn Reason",
      "patterns": [
        "[the] spawn[ing] reason"
      ]
    },
    {
      "id": "ExprSpawnerType",
      "name": "Spawner Type",
      "description": [
        "Retrieves, sets, or resets the spawner's entity type"
      ],
      "examples": [
        "on right click:",
        "\tif event-block is spawner:",
        "\t\tsend \"Spawner's type is %target block's entity type%\""
      ],
      "since": [
        "2.4, 2.9.2 (trial spawner)"
      ],
      "return type": "Entity Type",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (spawner|entity|creature) type[s] of %blocks%",
        "%blocks%'[s] (spawner|entity|creature) type[s]"
      ]
    },
    {
      "id": "ExprSpecialNumber",
      "name": "Special Number",
      "description": [
        "Special number values, namely NaN, Infinity and -Infinity"
      ],
      "examples": [
        "if {_number} is infinity value:"
      ],
      "since": [
        "2.2-dev32d"
      ],
      "return type": "Number",
      "patterns": [
        "(NaN|[(-|minus)](infinity|∞)) value",
        "value of (NaN|[(-|minus)](infinity|∞))"
      ]
    },
    {
      "id": "ExprSpectatorTarget",
      "name": "Spectator Target",
      "description": [
        "Grabs the spectator target entity of the players."
      ],
      "examples": [
        "on player start spectating of player:",
        "\tmessage \"&c%spectator target% currently has %{game::kills::%spectator target%}% kills!\" to the player",
        "",
        "on player stop spectating:",
        "\tpast spectator target was a zombie",
        "\tset spectator target to the nearest skeleton"
      ],
      "since": [
        "2.4-alpha4, 2.7 (Paper Spectator Event)"
      ],
      "return type": "Entity",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all"
      ],
      "patterns": [
        "spectator target [of %players%]",
        "%players%'[s] spectator target"
      ],
      "required plugins": [
        "Paper"
      ]
    },
    {
      "id": "ExprSpeed",
      "name": "Speed",
      "description": [
        "A player's walking or flying speed. Both can be changed, but values must be between -1 and 1 (excessive values will be changed to -1 or 1 respectively). Negative values reverse directions.",
        "Please note that changing a player's speed will change their FOV just like potions do."
      ],
      "examples": [
        "set the player's walk speed to 1",
        "increase the argument's fly speed by 0.1"
      ],
      "since": [
        "unknown (before 2.1)"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] (walk[ing]|fl(y[ing]|ight))[( |-)]speed of %players%",
        "%players%'[s] (walk[ing]|fl(y[ing]|ight))[( |-)]speed"
      ]
    },
    {
      "id": "ExprStringColor",
      "name": "String Colors",
      "description": [
        "Retrieve the first, the last, or all of the color objects or color codes of a string.",
        "The retrieved color codes of the string will be formatted with the color symbol."
      ],
      "examples": [
        "set {_colors::*} to the string colors of \"<red>hey<blue>yo\"",
        "",
        "set {_color} to the first string color code of \"&aGoodbye!\"",
        "send \"%{_color}%Howdy!\" to all players"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Object",
      "patterns": [
        "[all [of the|the]|the] string colo[u]r[s] [code[s]] of %strings%",
        "[the] first string colo[u]r[s] [code[s]] of %strings%",
        "[the] last string colo[u]r[s] [code[s]] of %strings%"
      ]
    },
    {
      "id": "ExprSubstring",
      "name": "Substring",
      "description": [
        "Extracts part of a text. You can either get the first <x> characters, the last <x> characters, the character at index <x>, or the characters between indices <x> and <y>. The indices <x> and <y> should be between 1 and the length of the text (other values will be fit into this range)."
      ],
      "examples": [
        "set {_s} to the first 5 characters of the text argument",
        "message \"%subtext of {_s} from characters 2 to (the length of {_s} - 1)%\" # removes the first and last character from {_s} and sends it to the player or console",
        "set {_characters::*} to characters at 1, 2 and 7 in player's display name",
        "send the last character of all players' names"
      ],
      "since": [
        "2.1, 2.5.2 (character at, multiple strings support)"
      ],
      "return type": "Text",
      "patterns": [
        "[the] (part|sub[ ](text|string)) of %strings% (between|from) (ind(ex|ices)|character[s]|) %number% (and|to) (index|character|) %number%",
        "[the] (first|last) [%number%] character[s] of %strings%",
        "[the] %number% (first|last) characters of %strings%",
        "[the] character[s] at [(index|position|indexes|indices|positions)] %numbers% (in|of) %strings%"
      ],
      "keywords": [
        "substring",
        "subtext"
      ]
    },
    {
      "id": "ExprTPS",
      "name": "TPS (ticks per second)",
      "description": [
        "Returns the 3 most recent TPS readings, like the /tps command. This expression is only supported on some server software (PaperSpigot)."
      ],
      "examples": [
        "broadcast \"%tps%\""
      ],
      "since": [
        "2.2-dev36"
      ],
      "return type": "Number",
      "patterns": [
        "tps from [the] last ([1] minute|1[ ]m[inute])",
        "tps from [the] last 5[ ]m[inutes]",
        "tps from [the] last 15[ ]m[inutes]",
        "[the] tps"
      ]
    },
    {
      "id": "ExprTag",
      "name": "Tag",
      "description": [
        "Represents a tag which can be used to classify items, blocks, or entities.",
        "Tags are composed of a value and an optional namespace: \"minecraft:oak_logs\".",
        "If you omit the namespace, one will be provided for you, depending on what kind of tag you're using. For example, `tag \"doors\"` will be the tag \"minecraft:doors\", while `paper tag \"doors\"` will be \"paper:doors\".",
        "`minecraft tag` will search through the vanilla tags, `datapack tag` will search for datapack-provided tags (a namespace is required here!), `paper tag` will search for Paper's custom tags if you are running Paper, and `custom tag` will look in the \"skript\" namespace for custom tags you've registered.",
        "You can also filter by tag types using \"item\", \"block\", or \"entity\"."
      ],
      "examples": [
        "minecraft tag \"dirt\" # minecraft:dirt",
        "paper tag \"doors\" # paper:doors",
        "tag \"skript:custom_dirt\" # skript:custom_dirt",
        "custom tag \"dirt\" # skript:dirt",
        "datapack block tag \"dirt\" # minecraft:dirt",
        "datapack tag \"my_pack:custom_dirt\" # my_pack:custom_dirt",
        "tag \"minecraft:mineable/pickaxe\" # minecraft:mineable/pickaxe",
        "custom item tag \"blood_magic_sk/can_sacrifice_with\" # skript:blood_magic_sk/can_sacrifice_with"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Minecraft Tag",
      "patterns": [
        "[minecraft|datapack|paper|(custom|skript)] [item|block|entity [type]] tag %strings%"
      ],
      "required plugins": [
        "Paper (paper tags)"
      ],
      "keywords": [
        "blocks",
        "minecraft tag",
        "type",
        "category"
      ]
    },
    {
      "id": "ExprTagKey",
      "name": "Tag Namespaced Key",
      "description": [
        "The namespaced key of a minecraft tag. This takes the form of \"namespace:key\", e.g. \"minecraft:dirt\"."
      ],
      "examples": [
        "broadcast namespaced keys of the tags of player's tool",
        "if the key of {_my-tag} is \"minecraft:stone\":",
        "\treturn true"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Text",
      "patterns": [
        "[the] [namespace[d]] key[s] of %minecrafttags%",
        "%minecrafttags%'[s] [namespace[d]] key[s]"
      ],
      "keywords": [
        "minecraft tag",
        "type",
        "key",
        "namespace"
      ]
    },
    {
      "id": "ExprTagContents",
      "name": "Tags Contents",
      "description": [
        "Returns all the values that a tag contains.",
        "For item and block tags, this will return items. For entity tags, it will return entity datas (a creeper, a zombie)."
      ],
      "examples": [
        "broadcast tag values of minecraft tag \"dirt\"",
        "broadcast (first element of player's tool's block tags)'s tag contents"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Object",
      "patterns": [
        "[the] tag (contents|values) of %minecrafttag%",
        "%minecrafttag%'[s] tag (contents|values)"
      ],
      "keywords": [
        "blocks",
        "minecraft tag",
        "type",
        "category"
      ]
    },
    {
      "id": "ExprTagsOf",
      "name": "Tags of X",
      "description": [
        "Returns all the tags of an item, block, or entity.",
        "`minecraft tag` will return only the vanilla tags, `datapack tag` will return only datapack-provided tags, `paper tag` will return only Paper's custom tags (if you are running Paper), and `custom tag` will look in the \"skript\" namespace for custom tags you've registered.",
        "You can also filter by tag types using \"item\", \"block\", or \"entity\"."
      ],
      "examples": [
        "broadcast minecraft tags of dirt",
        "send true if paper item tags of target block contains paper tag \"doors\"",
        "broadcast the block tags of player's tool"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Minecraft Tag",
      "patterns": [
        "[all [[of] the]|the] [minecraft|datapack|paper|(custom|skript)] [item|block|entity [type]] tags of %itemtype/entity/entitydata%",
        "%itemtype/entity/entitydata%'[s] [minecraft|datapack|paper|(custom|skript)] [item|block|entity [type]] tags"
      ],
      "required plugins": [
        "Paper (paper tags)"
      ],
      "keywords": [
        "blocks",
        "minecraft tag",
        "type",
        "category"
      ]
    },
    {
      "id": "ExprTamer",
      "name": "Tamer",
      "description": [
        "The tamer of an entity. Can only be used in entity tame events. You can use 'event-entity' to refer tamed entity itself."
      ],
      "examples": [
        "on tame:",
        "\tif the tamer is a player:",
        "\t\tsend \"someone tamed something!\" to console"
      ],
      "since": [
        "2.2-dev25"
      ],
      "return type": "Player",
      "changers": [
        "add",
        "remove",
        "remove all"
      ],
      "patterns": [
        "[the] tamer"
      ]
    },
    {
      "id": "ExprTarget",
      "name": "Target",
      "description": [
        "For players this is the entity at the crosshair.",
        "For mobs and experience orbs this is the entity they are attacking/following (if any).",
        "Display entities have a hit box of 0, so you should use 'target display' to collect Display entities",
        "May grab entities in unloaded chunks."
      ],
      "examples": [
        "on entity target:",
        "\tif entity's target is a player:",
        "\t\tsend \"You're being followed by an %entity%!\" to target of entity",
        "",
        "reset target of entity # Makes the entity target-less",
        "delete targeted entity of player # for players it will delete the target",
        "delete target of last spawned zombie # for entities it will make them target-less"
      ],
      "since": [
        "1.4.2, 2.7 (Reset), 2.8.0 (ignore blocks)"
      ],
      "return type": "Entity",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] target[[ed] %*entitydata%] [of %livingentities%] [ignoring blocks] [[with|at] ray[ ]size %number%]",
        "%livingentities%'[s] target[[ed] %*entitydata%] [ignoring blocks] [[with|at] ray[ ]size %number%]"
      ]
    },
    {
      "id": "ExprTargetedBlock",
      "name": "Targeted Block",
      "description": [
        "The block at the crosshair. This regards all blocks that are not air as fully solid, e.g. torches will be like a solid stone block for this expression.",
        "The actual target block will regard the actual hit box of the block."
      ],
      "examples": [
        "set target block of player to stone",
        "set target block of player to oak_stairs[waterlogged=true]",
        "break target block of player using player's tool",
        "give player 1 of type of target block",
        "teleport player to location above target block",
        "kill all entities in radius 3 around target block of player",
        "set {_block} to actual target block of player",
        "break actual target block of player"
      ],
      "since": [
        "1.0, 2.9.0 (actual/exact)"
      ],
      "return type": "Block",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] [(actual[ly]|exact)] target[ed] block[s] [of %livingentities%]",
        "%livingentities%'[s] [(actual[ly]|exact)] target[ed] block[s]"
      ]
    },
    {
      "id": "ExprTeleportCause",
      "name": "Teleport Cause",
      "description": [
        "The teleport cause within a player teleport event."
      ],
      "examples": [
        "on teleport:",
        "\tteleport cause is nether portal, end portal or end gateway",
        "\tcancel event"
      ],
      "since": [
        "2.2-dev35"
      ],
      "return type": "Teleport Cause",
      "patterns": [
        "[the] teleport (cause|reason|type)"
      ]
    },
    {
      "id": "ExprTemperature",
      "name": "Temperature",
      "description": [
        "Temperature at given block."
      ],
      "examples": [
        "message \"%temperature of the targeted block%\""
      ],
      "since": [
        "2.2-dev35"
      ],
      "return type": "Number",
      "patterns": [
        "[the] temperature[s] of %blocks%",
        "%blocks%'[s] temperature[s]"
      ]
    },
    {
      "id": "ExprTernary",
      "name": "Ternary",
      "description": [
        "A shorthand expression for returning something based on a condition."
      ],
      "examples": [
        "set {points} to 500 if {admin::%player's uuid%} is set else 100"
      ],
      "since": [
        "2.2-dev36"
      ],
      "return type": "Object",
      "patterns": [
        "%objects% if <.+>[,] (otherwise|else) %objects%"
      ]
    },
    {
      "id": "ExprTextDisplayAlignment",
      "name": "Text Display Alignment",
      "description": [
        "Returns or changes the alignment setting of text displays."
      ],
      "examples": [
        "set text alignment of the last spawned text display to left aligned"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Display Text Alignment",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] text alignment[s] [of %displays%]",
        "%displays%'[s] text alignment[s]"
      ]
    },
    {
      "id": "ExprTextDisplayLineWidth",
      "name": "Text Display Line Width",
      "description": [
        "Returns or changes the line width of text displays. Default is 200."
      ],
      "examples": [
        "set the line width of the last spawned text display to 300"
      ],
      "since": [
        "2.10"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] line width [of %displays%]",
        "%displays%'[s] line width"
      ]
    },
    {
      "id": "ExprTextDisplayOpacity",
      "name": "Text Display Opacity",
      "description": [
        "Returns or changes the opacity of text displays.",
        "Values are between -127 and 127. The value of 127 represents it being completely opaque."
      ],
      "examples": [
        "set the opacity of the last spawned text display to -1 # Reset"
      ],
      "since": [
        "2.10"
      ],
      "return type": "byte",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [display] opacity [of %displays%]",
        "%displays%'[s] [display] opacity"
      ]
    },
    {
      "id": "ExprTextOf",
      "name": "Text Of",
      "description": [
        "Returns or changes the text/string of displays.",
        "Note that currently you can only use Skript chat codes when running Paper."
      ],
      "examples": [
        "set text of the last spawned text display to \"example\""
      ],
      "since": [
        "2.10"
      ],
      "return type": "Text",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] text[s] of %displays%",
        "%displays%'[s] text[s]"
      ]
    },
    {
      "id": "ExprEgg",
      "name": "The Egg",
      "description": [
        "The egg thrown in a Player Egg Throw event."
      ],
      "examples": [
        "spawn an egg at the egg"
      ],
      "since": [
        "2.7"
      ],
      "return type": "Projectile",
      "changers": [
        "delete"
      ],
      "patterns": [
        "[the] [thrown] egg"
      ]
    },
    {
      "id": "ExprTime",
      "name": "Time",
      "description": [
        "The time of a world.",
        "Use the \"minecraft timespan\" syntax to change the time according to Minecraft's time intervals.",
        "Since Minecraft uses discrete intervals for time (ticks), changing the time by real-world minutes or real-world seconds only changes it approximately.",
        "Removing an amount of time from a world's time will move the clock forward a day."
      ],
      "examples": [
        "set time of world \"world\" to 2:00",
        "add 2 minecraft hours to time of world \"world\"",
        "add 54 real seconds to time of world \"world\" # approximately 1 minecraft hour"
      ],
      "since": [
        "1.0"
      ],
      "return type": "Time",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] time[s] [([with]in|of) %worlds%]",
        "%worlds%'[s] time[s]"
      ]
    },
    {
      "id": "ExprTimePlayed",
      "name": "Time Played",
      "description": [
        "The amount of time a player has played for on the server. This info is stored in the player's statistics in the main world's data folder. Changing this will also change the player's stats which can be views in the client's statistics menu.",
        "Using this expression on offline players on Minecraft 1.14 and below will return nothing <none>."
      ],
      "examples": [
        "set {_t} to time played of player",
        "if player's time played is greater than 10 minutes:",
        "\tgive player a diamond sword",
        "",
        "set player's time played to 0 seconds"
      ],
      "since": [
        "2.5, 2.7 (offline players)"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] time played of %offlineplayers%",
        "%offlineplayers%'[s] time played"
      ],
      "required plugins": [
        "MC 1.15+ (offline players)"
      ]
    },
    {
      "id": "ExprTimeSince",
      "name": "Time Since/Until",
      "description": [
        "The time since a date has passed or the time until a date will pass.",
        "This expression will return 0 seconds if the time since or time until would be negative, e.g. if one tries to get the time since a future date."
      ],
      "examples": [
        "send \"%time since 5 minecraft days ago% has passed since 5 minecraft days ago!\" to player",
        "send \"%time until {countdown::end}% until the game begins!\" to player"
      ],
      "since": [
        "2.5, 2.10 (time until)"
      ],
      "return type": "Timespan",
      "patterns": [
        "[the] time since %dates%",
        "[the] (time [remaining]|remaining time) until %dates%"
      ]
    },
    {
      "id": "ExprTimespanDetails",
      "name": "Timespan Details",
      "description": [
        "Retrieve specific information of a timespan such as hours/minutes/etc."
      ],
      "examples": [
        "set {_t} to difference between now and {Payouts::players::%uuid of player%::last-date}",
        "send \"It has been %days of {_t}% day(s) since last payout.\""
      ],
      "since": [
        "2.9.0"
      ],
      "return type": "long",
      "patterns": [
        "[the] ((tick|second|minute|hour|day|week|month|year))s of %timespans%",
        "%timespans%'[s] ((tick|second|minute|hour|day|week|month|year))s"
      ]
    },
    {
      "id": "ExprTool",
      "name": "Tool",
      "description": [
        "The item an entity is holding in their main or off hand."
      ],
      "examples": [
        "player's tool is a pickaxe",
        "player's off hand tool is a shield",
        "set tool of all players to a diamond sword",
        "set offhand tool of target entity to a bow"
      ],
      "since": [
        "1.0"
      ],
      "return type": "Slot",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] ((tool|held item|weapon)|(off[ ]hand (tool|item))) [of %livingentities%]",
        "%livingentities%'[s] ((tool|held item|weapon)|(off[ ]hand (tool|item)))"
      ]
    },
    {
      "id": "ExprTotalExperience",
      "name": "Total Experience",
      "description": [
        "The total experience, in points, of players or experience orbs.",
        "Adding to a player's experience will trigger Mending, but setting their experience will not."
      ],
      "examples": [
        "set total experience of player to 100",
        "",
        "add 100 to player's experience",
        "",
        "if player's total experience is greater than 100:",
        "\tset player's total experience to 0",
        "\tgive player 1 diamond"
      ],
      "since": [
        "2.7"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] [total] experience of %entities%",
        "%entities%'[s] [total] experience"
      ]
    },
    {
      "id": "ExprTransformReason",
      "name": "Transform Reason",
      "description": [
        "The transform reason within an entity entity transform event."
      ],
      "examples": [
        "on entity transform:",
        "\ttransform reason is infection, drowned or frozen"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Transform Reason",
      "patterns": [
        "[the] transform[ing] (cause|reason|type)"
      ]
    },
    {
      "id": "ExprTransform",
      "name": "Transformed List",
      "description": [
        "Transforms (or 'maps') a list's values using a given expression. This is akin to looping over the list and getting a modified version of each value.",
        "Indices cannot be retained with this expression. To retain indices, see the transform effect."
      ],
      "examples": [
        "set {_a::*} to (1, 2, and 3) transformed using (input * 2 - 1, input * 2)",
        "# {_a::*} is now 1, 2, 3, 4, 5, and 6",
        "",
        "# get a list of the sizes of all clans without manually looping",
        "set {_clan-sizes::*} to indices of {clans::*} transformed using [{clans::%input%::size}]"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Object",
      "patterns": [
        "%objects% (transformed|mapped) (using|with) \\[<.+>\\]",
        "%objects% (transformed|mapped) (using|with) (<.+>)"
      ],
      "keywords": [
        "input"
      ]
    },
    {
      "id": "ExprTypeOf",
      "name": "Type of",
      "description": [
        "Type of a block, item, entity, inventory, potion effect or enchantment type.",
        "Types of items, blocks and block datas are item types similar to them but have amounts",
        "of one, no display names and, on Minecraft 1.13 and newer versions, are undamaged.",
        "Types of entities and inventories are entity types and inventory types known to Skript.",
        "Types of potion effects are potion effect types.",
        "Types of enchantment types are enchantments."
      ],
      "examples": [
        "on rightclick on an entity:",
        "\tmessage \"This is a %type of clicked entity%!\""
      ],
      "since": [
        "1.4, 2.5.2 (potion effect), 2.7 (block datas), 2.10 (enchantment type)"
      ],
      "return type": "Object",
      "patterns": [
        "[the] type of %entitydatas/itemtypes/inventories/potioneffects/blockdatas/enchantmenttypes%",
        "%entitydatas/itemtypes/inventories/potioneffects/blockdatas/enchantmenttypes%'[s] type"
      ]
    },
    {
      "id": "ExprUUID",
      "name": "UUID",
      "description": [
        "The UUID of a player, entity or world."
      ],
      "examples": [
        "# prevents people from joining the server if they use the name of a player",
        "# who has played on this server at least once since this script has been added",
        "on login:",
        "\tif {uuid::%name of player%} exists:",
        "\t\t{uuid::%name of player%} is not uuid of player",
        "\t\tkick player due to \"Someone with your name has played on this server before\"",
        "\telse:",
        "\t\tset {uuid::%name of player%} to uuid of player",
        "",
        "command /what-is-my-uuid:",
        "\ttrigger:",
        "\t\tset {_uuid} to uuid of player",
        "\t\tsend \"Your UUID is '%string within {_uuid}%'\""
      ],
      "since": [
        "2.1.2, 2.2 (offline players' uuids), 2.2-dev24 (other entities' uuids)"
      ],
      "return type": "UUID",
      "patterns": [
        "[the] UUID of %offlineplayers/worlds/entities%",
        "%offlineplayers/worlds/entities%'[s] UUID"
      ]
    },
    {
      "id": "ExprUnbreakable",
      "name": "Unbreakable Items",
      "description": [
        "Creates breakable or unbreakable copies of given items."
      ],
      "examples": [
        "set {_item} to unbreakable iron sword",
        "give breakable {_weapon} to all players"
      ],
      "since": [
        "2.2-dev13b, 2.9.0 (breakable)"
      ],
      "return type": "Item Type",
      "patterns": [
        "[un]breakable %itemtypes%"
      ]
    },
    {
      "id": "ExprUnixDate",
      "name": "Unix Date",
      "description": [
        "Converts given Unix timestamp to a date. The Unix timespan represents the number of seconds elapsed since 1 January 1970."
      ],
      "examples": [
        "unix date of 946684800 #1 January 2000 12:00 AM (UTC Time)"
      ],
      "since": [
        "2.5"
      ],
      "return type": "Date",
      "patterns": [
        "[the] unix date of %numbers%",
        "%numbers%'[s] unix date"
      ]
    },
    {
      "id": "ExprUnixTicks",
      "name": "Unix Timestamp",
      "description": [
        "Converts given date to Unix timestamp. This is roughly how many seconds have elapsed since 1 January 1970."
      ],
      "examples": [
        "unix timestamp of now"
      ],
      "since": [
        "2.2-dev31"
      ],
      "return type": "Number",
      "patterns": [
        "[the] unix timestamp of %dates%",
        "%dates%'[s] unix timestamp"
      ]
    },
    {
      "id": "ExprUnleashReason",
      "name": "Unleash Reason",
      "description": [
        "The unleash reason in an unleash event."
      ],
      "examples": [
        "if the unleash reason is distance:",
        "\tbroadcast \"The leash was snapped in half.\""
      ],
      "since": [
        "2.10"
      ],
      "return type": "Unleash Reason",
      "patterns": [
        "[the] unleash[ing] reason"
      ]
    },
    {
      "id": "ExprValue",
      "name": "Value",
      "description": [
        "Returns the value of something that has a value, e.g. a node in a config.",
        "The value is automatically converted to the specified type (e.g. text, number) where possible."
      ],
      "examples": [
        "set {_node} to node \"language\" in the skript config\nbroadcast the text value of {_node}",
        "set {_node} to node \"update check interval\" in the skript config\n\nbroadcast text value of {_node}\n# text value of {_node} = \"12 hours\" (text)\n\nwait for {_node}'s timespan value\n# timespan value of {_node} = 12 hours (duration)"
      ],
      "since": [
        "2.10 (Nodes), 2.10 (Any)"
      ],
      "return type": "Object",
      "changers": [
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] %*classinfo% value [at] %string% (from|in) %node%",
        "[the] %*classinfo% value of %valued%",
        "[the] %*classinfo% values of %valueds%",
        "%valued%'s %*classinfo% value",
        "%valueds%'[s] %*classinfo% values"
      ]
    },
    {
      "id": "ExprValueWithin",
      "name": "Value Within",
      "description": [
        "Gets the value within objects. Usually used with variables to get the value they store rather than the variable itself, or with lists to get the values of a type."
      ],
      "examples": [
        "set {_entity} to a random entity out of all entities",
        "delete entity within {_entity} # This deletes the entity itself and not the value stored in the variable",
        "",
        "set {_list::*} to \"something\", 10, \"test\" and a zombie",
        "broadcast the strings within {_list::*} # \"something\", \"test\""
      ],
      "since": [
        "2.7"
      ],
      "return type": "Object",
      "patterns": [
        "[the] (%*classinfo%|value[s]) (within|in) %objects%"
      ]
    },
    {
      "id": "ExprXYZComponent",
      "name": "Vector/Quaternion - WXYZ Component",
      "description": [
        "Gets or changes the W, X, Y or Z component of vectors/quaternions.",
        "You cannot use the W component with vectors; it is for quaternions only."
      ],
      "examples": [
        "set {_v} to vector 1, 2, 3",
        "send \"%x of {_v}%, %y of {_v}%, %z of {_v}%\"",
        "add 1 to x of {_v}",
        "add 2 to y of {_v}",
        "add 3 to z of {_v}",
        "send \"%x of {_v}%, %y of {_v}%, %z of {_v}%\"",
        "set x component of {_v} to 1",
        "set y component of {_v} to 2",
        "set z component of {_v} to 3",
        "send \"%x component of {_v}%, %y component of {_v}%, %z component of {_v}%\""
      ],
      "since": [
        "2.2-dev28, 2.10 (quaternions)"
      ],
      "return type": "Number",
      "patterns": [
        "[the] [vector|quaternion] (w|x|y|z) [component[s]] of %vectors/quaternions%",
        "%vectors/quaternions%'[s] [vector|quaternion] (w|x|y|z) [component[s]]"
      ]
    },
    {
      "id": "ExprVectorAngleBetween",
      "name": "Vectors - Angle Between",
      "description": [
        "Gets the angle between two vectors."
      ],
      "examples": [
        "send \"%the angle between vector 1, 0, 0 and vector 0, 1, 1%\""
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Number",
      "patterns": [
        "[the] angle between [[the] vectors] %vector% and %vector%"
      ]
    },
    {
      "id": "ExprLocationFromVector",
      "name": "Vectors - Create Location from Vector",
      "description": [
        "Creates a location from a vector in a world."
      ],
      "examples": [
        "set {_loc} to {_v} to location in world \"world\"",
        "set {_loc} to {_v} to location in world \"world\" with yaw 45 and pitch 90",
        "set {_loc} to location of {_v} in \"world\" with yaw 45 and pitch 90"
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Location",
      "patterns": [
        "%vector% to location in %world%",
        "location (from|of) %vector% in %world%",
        "%vector% [to location] in %world% with yaw %number% and pitch %number%",
        "location (from|of) %vector% in %world% with yaw %number% and pitch %number%"
      ]
    },
    {
      "id": "ExprVectorFromDirection",
      "name": "Vectors - Create from Direction",
      "description": [
        "Creates vectors from given directions.",
        "Relative directions are relative to the origin, (0, 0, 0). Therefore, the vector from the direction 'forwards' is (0, 0, 1)."
      ],
      "examples": [
        "set {_v} to vector from direction upwards",
        "set {_v} to vector in direction of player",
        "set {_v} to vector in horizontal direction of player",
        "set {_v} to vector from facing of player",
        "set {_v::*} to vectors from north, south, east, and west"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Vector",
      "patterns": [
        "vector[s] [from] %directions%",
        "%directions% vector[s]"
      ]
    },
    {
      "id": "ExprVectorFromXYZ",
      "name": "Vectors - Create from XYZ",
      "description": [
        "Creates a vector from x, y and z values."
      ],
      "examples": [
        "set {_v} to vector 0, 1, 0"
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Vector",
      "patterns": [
        "[a] [new] vector [(from|at|to)] %number%,[ ]%number%(,[ ]| and )%number%"
      ]
    },
    {
      "id": "ExprVectorCrossProduct",
      "name": "Vectors - Cross Product",
      "description": [
        "Gets the cross product between two vectors."
      ],
      "examples": [
        "send \"%vector 1, 0, 0 cross vector 0, 1, 0%\""
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Vector",
      "patterns": [
        "%vector% cross %vector%"
      ]
    },
    {
      "id": "ExprVectorCylindrical",
      "name": "Vectors - Cylindrical Shape",
      "description": [
        "Forms a 'cylindrical shaped' vector using yaw to manipulate the current point."
      ],
      "examples": [
        "loop 360 times:",
        "\tset {_v} to cylindrical vector radius 1, yaw loop-value, height 2",
        "set {_v} to cylindrical vector radius 1, yaw 90, height 2"
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Vector",
      "patterns": [
        "[a] [new] cylindrical vector [from|with] [radius] %number%, [yaw] %number%(,[ and]| and) [height] %number%"
      ]
    },
    {
      "id": "ExprVectorDotProduct",
      "name": "Vectors - Dot Product",
      "description": [
        "Gets the dot product between two vectors."
      ],
      "examples": [
        "set {_dot} to {_v1} dot {_v2}"
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Number",
      "patterns": [
        "%vector% dot %vector%"
      ]
    },
    {
      "id": "ExprVectorLength",
      "name": "Vectors - Length",
      "description": [
        "Gets or sets the length of a vector."
      ],
      "examples": [
        "send \"%standard length of vector 1, 2, 3%\"",
        "set {_v} to vector 1, 2, 3",
        "set standard length of {_v} to 2",
        "send \"%standard length of {_v}%\""
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] (vector|standard|normal) length[s] of %vectors%",
        "%vectors%'[s] (vector|standard|normal) length[s]"
      ]
    },
    {
      "id": "ExprLocationVectorOffset",
      "name": "Vectors - Location Vector Offset",
      "description": [
        "Returns the location offset by vectors."
      ],
      "examples": [
        "set {_loc} to {_loc} ~ {_v}"
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Location",
      "patterns": [
        "%location% offset by [[the] vectors] %vectors%",
        "%location%[ ]~[~][ ]%vectors%"
      ]
    },
    {
      "id": "ExprVectorNormalize",
      "name": "Vectors - Normalized",
      "description": [
        "Returns the same vector but with length 1."
      ],
      "examples": [
        "set {_v} to normalized {_v}"
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Vector",
      "patterns": [
        "normalize[d] %vector%",
        "%vector% normalized"
      ]
    },
    {
      "id": "ExprVectorRandom",
      "name": "Vectors - Random Vector",
      "description": [
        "Creates a random unit vector."
      ],
      "examples": [
        "set {_v} to a random vector"
      ],
      "since": [
        "2.2-dev28, 2.7 (signed components)"
      ],
      "return type": "Vector",
      "patterns": [
        "[a] random vector"
      ]
    },
    {
      "id": "ExprVectorSpherical",
      "name": "Vectors - Spherical Shape",
      "description": [
        "Forms a 'spherical shaped' vector using yaw and pitch to manipulate the current point."
      ],
      "examples": [
        "loop 360 times:",
        "\tset {_v} to spherical vector radius 1, yaw loop-value, pitch loop-value",
        "set {_v} to spherical vector radius 1, yaw 45, pitch 90"
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Vector",
      "patterns": [
        "[a] [new] spherical vector [(from|with)] [radius] %number%, [yaw] %number%(,[ and]| and) [pitch] %number%"
      ]
    },
    {
      "id": "ExprVectorSquaredLength",
      "name": "Vectors - Squared Length",
      "description": [
        "Gets the squared length of a vector."
      ],
      "examples": [
        "send \"%squared length of vector 1, 2, 3%\""
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Number",
      "patterns": [
        "[the] squared length[s] of %vectors%",
        "%vectors%'[s] squared length[s]"
      ]
    },
    {
      "id": "ExprVectorBetweenLocations",
      "name": "Vectors - Vector Between Locations",
      "description": [
        "Creates a vector between two locations."
      ],
      "examples": [
        "set {_v} to vector between {_loc1} and {_loc2}"
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Vector",
      "patterns": [
        "[the] vector (from|between) %location% (to|and) %location%"
      ]
    },
    {
      "id": "ExprVectorProjection",
      "name": "Vectors - Vector Projection",
      "description": [
        "An expression to get the vector projection of two vectors."
      ],
      "examples": [
        "set {_projection} to vector projection of vector(1, 2, 3) onto vector(4, 4, 4)"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Vector",
      "patterns": [
        "[vector] projection [of] %vector% on[to] %vector%"
      ]
    },
    {
      "id": "ExprVectorOfLocation",
      "name": "Vectors - Vector from Location",
      "description": [
        "Creates a vector from a location."
      ],
      "examples": [
        "set {_v} to vector of {_loc}"
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Vector",
      "patterns": [
        "[the] vector (of|from|to) %location%",
        "%location%'s vector"
      ]
    },
    {
      "id": "ExprVectorFromYawAndPitch",
      "name": "Vectors - Vector from Yaw and Pitch",
      "description": [
        "Creates a vector from a yaw and pitch value."
      ],
      "examples": [
        "set {_v} to vector from yaw 45 and pitch 45"
      ],
      "since": [
        "2.2-dev28"
      ],
      "return type": "Vector",
      "patterns": [
        "[a] [new] vector (from|with) yaw %number% and pitch %number%",
        "[a] [new] vector (from|with) pitch %number% and yaw %number%"
      ]
    },
    {
      "id": "ExprVelocity",
      "name": "Vectors - Velocity",
      "description": [
        "Gets or changes velocity of an entity."
      ],
      "examples": [
        "set player's velocity to {_v}"
      ],
      "since": [
        "2.2-dev31"
      ],
      "return type": "Vector",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] velocit(y|ies) of %entities%",
        "%entities%'[s] velocit(y|ies)"
      ]
    },
    {
      "id": "ExprVehicle",
      "name": "Vehicle",
      "description": [
        "The vehicle an entity is in, if any. This can actually be any entity, e.g. spider jockeys are skeletons that ride on a spider, so the spider is the 'vehicle' of the skeleton.",
        "See also: passenger"
      ],
      "examples": [
        "vehicle of the player is a minecart"
      ],
      "since": [
        "2.0"
      ],
      "return type": "Entity",
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[the] vehicle[s] of %entities%",
        "%entities%'[s] vehicle[s]"
      ]
    },
    {
      "id": "ExprVersion",
      "name": "Version",
      "description": [
        "The version of Bukkit, Minecraft or Skript respectively."
      ],
      "examples": [
        "message \"This server is running Minecraft %minecraft version% on Bukkit %bukkit version%\"",
        "message \"This server is powered by Skript %skript version%\""
      ],
      "since": [
        "2.0"
      ],
      "return type": "Text",
      "patterns": [
        "([craft]bukkit|minecraft|skript)( |-)version"
      ]
    },
    {
      "id": "ExprVersionString",
      "name": "Version String",
      "description": [
        "The text to show if the protocol version of the server doesn't match with protocol version of the client. You can check the protocol version expression for more information about this.",
        "This can only be set in a server list ping event."
      ],
      "examples": [
        "on server list ping:",
        "\tset the protocol version to 0 # 13w41a (1.7), so it will show the version string always",
        "\tset the version string to \"<light green>Version: <orange>%minecraft version%\""
      ],
      "since": [
        "2.3"
      ],
      "return type": "Text",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] [shown|custom] version [string|text]"
      ],
      "required plugins": [
        "Paper 1.12.2+"
      ]
    },
    {
      "id": "ExprViewDistance",
      "name": "View Distance",
      "description": [
        "The view distance of a world or a player.",
        "The view distance of a player is the distance in chunks sent by the server to the player. This has nothing to do with client side view distance settings.",
        "View distance is capped between 2 to 32 chunks.",
        "Paper is required to change the view distance for both worlds and players."
      ],
      "examples": [
        "set view distance of player to 10",
        "add 50 to the view distance of world \"world\"",
        "reset the view distance of player",
        "clear the view distance of world \"world\""
      ],
      "since": [
        "2.4, 2.11 (worlds)"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] view distance[s] of %players/worlds%",
        "%players/worlds%'[s] view distance[s]"
      ],
      "required plugins": [
        "Paper (change for players), Paper 1.21+ (change for worlds)"
      ]
    },
    {
      "id": "ExprClientViewDistance",
      "name": "View Distance of Client",
      "description": [
        "The view distance of the client. Can not be changed. This differs from the server side view distance of player as this will retrieve the view distance the player has set on their client."
      ],
      "examples": [
        "set {_clientView} to the client view distance of player",
        "set view distance of player to client view distance of player"
      ],
      "since": [
        "2.5"
      ],
      "return type": "long",
      "patterns": [
        "[the] client view distance[s] of %players%",
        "%players%'[s] client view distance[s]"
      ],
      "required plugins": [
        "1.13.2+"
      ]
    },
    {
      "id": "ExprVillagerLevel",
      "name": "Villager Level/Experience",
      "description": [
        "Represents the level/experience of a villager.",
        "The level will determine which trades are available to players (value between 1 and 5, defaults to 1).",
        "When a villager's level is 1, they may lose their profession if they don't have a workstation.",
        "Experience works along with the leveling system, determining which level the villager will move to.",
        "Experience must be greater than or equal to 0.",
        "Learn more about villager levels on Minecraft Wiki"
      ],
      "examples": [
        "set {_level} to villager level of {_villager}",
        "set villager level of last spawned villager to 2",
        "add 1 to villager level of target entity",
        "remove 1 from villager level of event-entity",
        "reset villager level of event-entity",
        "set villager experience of last spawned entity to 100"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Number",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] villager (level|experience) of %livingentities%",
        "%livingentities%'[s] villager (level|experience)"
      ]
    },
    {
      "id": "ExprVillagerProfession",
      "name": "Villager Profession",
      "description": [
        "Represents the profession of a villager/zombie villager."
      ],
      "examples": [
        "set {_p} to villager profession of event-entity",
        "villager profession of event-entity = nitwit profession",
        "set villager profession of {_villager} to librarian profession",
        "delete villager profession of event-entity"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Villager Profession",
      "changers": [
        "delete",
        "set"
      ],
      "patterns": [
        "[the] villager profession of %livingentities%",
        "%livingentities%'[s] villager profession"
      ]
    },
    {
      "id": "ExprVillagerType",
      "name": "Villager Type",
      "description": [
        "Represents the type of a villager/zombie villager. This usually represents the biome the villager is from."
      ],
      "examples": [
        "set {_type} to villager type of {_villager}",
        "villager type of {_villager} = plains",
        "set villager type of event-entity to plains"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Villager Type",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] villager type of %livingentities%",
        "%livingentities%'[s] villager type"
      ]
    },
    {
      "id": "ExprWardenEntityAnger",
      "name": "Warden Anger Level",
      "description": [
        "The anger level a warden feels towards an entity.",
        "A warden can be angry towards multiple entities with different anger levels.",
        "If an entity reaches an anger level of 80+, the warden will pursue it.",
        "Anger level maxes out at 150."
      ],
      "examples": [
        "set the anger level of last spawned warden towards player to 20",
        "clear the last spawned warden's anger level towards player"
      ],
      "since": [
        "2.11"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "delete",
        "remove",
        "set"
      ],
      "patterns": [
        "[the] anger level [of] %livingentities% towards %livingentities%",
        "%livingentities%'[s] anger level towards %livingentities%"
      ]
    },
    {
      "id": "ExprWardenAngryAt",
      "name": "Warden Most Angered At",
      "description": [
        "The entity a warden is most angry at.",
        "A warden can be angry towards multiple entities with different anger levels."
      ],
      "examples": [
        "if the most angered entity of last spawned warden is not player:",
        "\tset the most angered entity of last spawned warden to player"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Living Entity",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] most angered entity of %livingentities%",
        "%livingentities%'[s] most angered entity"
      ]
    },
    {
      "id": "ExprWorldBorderWarningDistance",
      "name": "Warning Distance of World Border",
      "description": [
        "The warning distance of a world border. The player's screen will be tinted red when they are within this distance of the border.",
        "Players only see a red tint when approaching a world's worldborder and the warning distance has to be an integer greater than or equal to 0."
      ],
      "examples": [
        "set world border warning distance of {_worldborder} to 1"
      ],
      "since": [
        "2.11"
      ],
      "return type": "integer",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] world[ ]border warning distance [of %worldborders%]",
        "%worldborders%'[s] world[ ]border warning distance"
      ]
    },
    {
      "id": "ExprWorldBorderWarningTime",
      "name": "Warning Time of World Border",
      "description": [
        "The warning time of a world border. If the border is shrinking, the player's screen will be tinted red once the border will catch the player within this time period."
      ],
      "examples": [
        "set world border warning time of {_worldborder} to 1 second"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Timespan",
      "changers": [
        "add",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] world[ ]border warning time [of %worldborders%]",
        "%worldborders%'[s] world[ ]border warning time"
      ]
    },
    {
      "id": "ExprWeather",
      "name": "Weather",
      "description": [
        "The weather of a world or player.",
        "Clearing or resetting the weather of a player will make the player's weather match the weather of the world.",
        "Clearing or resetting the weather of a world will make the weather clear."
      ],
      "examples": [
        "set weather to clear",
        "weather in \"world\" is rainy",
        "reset custom weather of player",
        "set weather of player to clear"
      ],
      "since": [
        "1.0"
      ],
      "return type": "Weather Type",
      "changers": [
        "delete",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] weather [(in|of) %players/worlds%]",
        "[the] (custom|client) weather [of %players%]",
        "%players/worlds%'[s] weather",
        "%players%'[s] (custom|client) weather"
      ]
    },
    {
      "id": "ExprWhether",
      "name": "Whether",
      "description": [
        "A shorthand for returning the result of a condition (true or false). This is functionally identical to using `true if <condition> else false`."
      ],
      "examples": [
        "set {fly} to whether player can fly",
        "broadcast \"Flying: %whether player is flying%\""
      ],
      "since": [
        "2.9.0"
      ],
      "return type": "Boolean",
      "patterns": [
        "whether <.+>"
      ]
    },
    {
      "id": "ExprWhitelist",
      "name": "Whitelist",
      "description": [
        "An expression for obtaining and modifying the server's whitelist.",
        "Players may be added and removed from the whitelist.",
        "The whitelist can be enabled or disabled by setting the whitelist to true or false respectively."
      ],
      "examples": [
        "set the whitelist to false",
        "add all players to whitelist",
        "reset the whitelist"
      ],
      "since": [
        "2.5.2, 2.9.0 (delete)"
      ],
      "return type": "Offline Player",
      "changers": [
        "add",
        "delete",
        "remove",
        "reset",
        "set"
      ],
      "patterns": [
        "[the] white[ ]list"
      ]
    },
    {
      "id": "ExprWithFireResistance",
      "name": "With Fire Resistance",
      "description": [
        "Creates a copy of an item with (or without) fire resistance."
      ],
      "examples": [
        "set {_x} to diamond sword with fire resistance",
        "equip player with netherite helmet without fire resistance",
        "drop fire resistant stone at player"
      ],
      "since": [
        "2.9.0"
      ],
      "return type": "Item Type",
      "patterns": [
        "%itemtype% with[out] fire[ ]resistance",
        "fire resistant %itemtype%"
      ],
      "required plugins": [
        "Spigot 1.20.5+"
      ]
    },
    {
      "id": "ExprWorld",
      "name": "World",
      "description": [
        "The world the event occurred in."
      ],
      "examples": [
        "world is \"world_nether\"",
        "teleport the player to the world's spawn",
        "set the weather in the player's world to rain",
        "set {_world} to world of event-chunk"
      ],
      "since": [
        "1.0"
      ],
      "return type": "World",
      "changers": [
        "set"
      ],
      "patterns": [
        "[the] world [of %locations/entities/chunk%]",
        "%locations/entities/chunk%'[s] world"
      ]
    },
    {
      "id": "ExprWorldBorder",
      "name": "World Border",
      "description": [
        "Get the border of a world or a player.",
        "A player's world border is not persistent. Restarts, quitting, death or changing worlds will reset the border."
      ],
      "examples": [
        "set {_border} to world border of player's world"
      ],
      "since": [
        "2.11"
      ],
      "return type": "World Border",
      "changers": [
        "reset",
        "set"
      ],
      "patterns": [
        "[the] world[ ]border [of %worlds/players%]",
        "%worlds/players%'[s] world[ ]border"
      ]
    },
    {
      "id": "ExprWorldEnvironment",
      "name": "World Environment",
      "description": [
        "The environment of a world"
      ],
      "examples": [
        "if environment of player's world is nether:",
        "\tapply fire resistance to player for 10 minutes"
      ],
      "since": [
        "2.7"
      ],
      "return type": "World Environment",
      "patterns": [
        "[the] [world] environment of %worlds%",
        "%worlds%'[s] [world] environment"
      ]
    },
    {
      "id": "ExprSeed",
      "name": "World Seed",
      "description": [
        "The seed of given world. Note that it will be returned as Minecraft internally treats seeds, not as you specified it in world configuration."
      ],
      "examples": [
        "broadcast \"Seed: %seed of player's world%\""
      ],
      "since": [
        "2.2-dev35"
      ],
      "return type": "long",
      "patterns": [
        "[the] seed[s] (from|of) %worlds%",
        "%worlds%'[s] seed[s]"
      ]
    },
    {
      "id": "ExprWorldFromName",
      "name": "World from Name",
      "description": [
        "Returns the world from a string."
      ],
      "examples": [
        "world named {game::world-name}",
        "the world \"world\""
      ],
      "since": [
        "2.6.1"
      ],
      "return type": "World",
      "patterns": [
        "[the] world [(named|with name)] %string%"
      ]
    },
    {
      "id": "ExprWorlds",
      "name": "Worlds",
      "description": [
        "All worlds of the server, useful for looping."
      ],
      "examples": [
        "loop all worlds:",
        "\tbroadcast \"You're in %loop-world%\" to loop-world"
      ],
      "since": [
        "1.0"
      ],
      "return type": "World",
      "patterns": [
        "[(all [[of] the]|the)] worlds"
      ]
    },
    {
      "id": "ExprTimes",
      "name": "X Times",
      "description": [
        "Integers between 1 and X, used in loops to loop X times."
      ],
      "examples": [
        "loop 20 times:",
        "\tbroadcast \"%21 - loop-number% seconds left..\"",
        "\twait 1 second"
      ],
      "since": [
        "1.4.6"
      ],
      "return type": "long",
      "patterns": [
        "%number% time[s]",
        "once",
        "twice",
        "thrice"
      ]
    },
    {
      "id": "ExprXOf",
      "name": "X of Item",
      "description": [
        "An expression to be able to use a certain amount of items where the amount can be any expression. Please note that this expression is not stable and might be replaced in the future."
      ],
      "examples": [
        "give level of player of pickaxes to the player"
      ],
      "since": [
        "1.2"
      ],
      "return type": "Object",
      "patterns": [
        "%number% of %itemstacks/itemtypes/entitytype%"
      ]
    },
    {
      "id": "ExprYawPitch",
      "name": "Yaw / Pitch",
      "description": [
        "The yaw or pitch of a location or vector.",
        "A yaw of 0 or 360 represents the positive z direction. Adding a positive number to the yaw of a player will rotate it clockwise.",
        "A pitch of 90 represents the negative y direction, or downward facing. A pitch of -90 represents upward facing. Adding a positive number to the pitch will rotate the direction downwards.",
        "Only Paper 1.19+ users may directly change the yaw/pitch of players."
      ],
      "examples": [
        "log \"%player%: %location of player%, %player's yaw%, %player's pitch%\" to \"playerlocs.log\"",
        "set {_yaw} to yaw of player",
        "set {_p} to pitch of target entity",
        "set pitch of player to -90 # Makes the player look upwards, Paper 1.19+ only",
        "add 180 to yaw of target of player # Makes the target look behind themselves"
      ],
      "since": [
        "2.0, 2.2-dev28 (vector yaw/pitch), 2.9.0 (entity changers)"
      ],
      "return type": "float",
      "patterns": [
        "[the] (yaw|pitch) of %entities/locations/vectors%",
        "%entities/locations/vectors%'[s] (yaw|pitch)"
      ],
      "required plugins": [
        "Paper 1.19+ (player changers)"
      ]
    }
  ],
  "types": [
    {
      "id": "AdvancementProgress",
      "name": "Advancement Progress",
      "description": [
        "Represents the advancement progress of a player.",
        "You will see `%advancementpro%` in the docs, this is due to a silly issue with Skript",
        "where I couldn't use `progress` in expressions."
      ],
      "since": [
        "1.17.0"
      ],
      "patterns": [
        "advancement[ ]progress[es]"
      ]
    },
    {
      "id": "AnyNamed",
      "name": "Any Named Thing",
      "description": [
        "Something that has a name (e.g. an item)."
      ],
      "examples": [
        "{thing}'s name"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[any ]named (thing|object)[s]"
      ]
    },
    {
      "id": "AnyAmount",
      "name": "Any Numbered/Sized Thing",
      "description": [
        "Something that has an amount or size."
      ],
      "examples": [
        "the size of {thing}",
        "the amount of {thing}"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[any ]numbered (thing|object)[s]"
      ]
    },
    {
      "id": "AnyValued",
      "name": "Any Valued Thing",
      "description": [
        "Something that has a value."
      ],
      "examples": [
        "the text of {node}"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[any ]valued (thing|object)[s]"
      ]
    },
    {
      "id": "AnyContains",
      "name": "Anything with Contents",
      "description": [
        "Something that contains other things."
      ],
      "examples": [
        "{a} contains {b}"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "[any ]containing (thing|object)[s]",
        "any container"
      ]
    },
    {
      "id": "Attribute",
      "name": "Attribute Type",
      "description": [
        "Represents the type of an attribute. Note that this type does not contain any numerical values.See attribute types for more info.",
        "NOTE: Minecraft namespaces are supported, ex: 'minecraft:generic.attack_damage'."
      ],
      "usage": "armor, armor toughness, armour, armour toughness, attack damage, attack knockback, attack speed, block break speed, block interaction range, burning time, entity interaction range, explosion knockback resistance, fall damage multiplier, flying speed, follow range, generic armor, generic armor toughness, generic armour, generic armour toughness, generic attack damage, generic attack knockback, generic attack speed, generic burning time, generic explosion knockback resistance, generic fall damage multiplier, generic flying speed, generic follow range, generic gravity, generic jump strength, generic knockback resistance, generic luck, generic max absorption, generic max health, generic movement efficiency, generic movement speed, generic oxygen bonus, generic safe fall distance, generic scale, generic step height, generic tempt range, generic water movement efficiency, gravity, horse jump strength, jump strength, knockback resistance, luck, max absorption, max health, mining efficiency, movement efficiency, movement speed, oxygen bonus, player block break speed, player block interaction range, player entity interaction range, player mining efficiency, player sneaking speed, player submerged mining speed, player sweeping damage ratio, safe fall distance, scale, sneaking speed, spawn reinforcements, step height, submerged mining speed, sweeping damage ratio, tempt range, water movement efficiency, zombie spawn reinforcements",
      "since": [
        "2.5"
      ],
      "patterns": [
        "attribute[ ]type[s]"
      ]
    },
    {
      "id": "Pattern",
      "name": "Banner Pattern",
      "description": [
        "Represents a banner pattern."
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "banner[ ]pattern[s]"
      ]
    },
    {
      "id": "PatternType",
      "name": "Banner Pattern Type",
      "description": [
        "Represents the various banner patterns that can be applied to a banner."
      ],
      "usage": "base, base banner pattern, border, border banner pattern, bordure banner pattern, bordure indented banner pattern, bottom left square banner pattern, bottom right square banner pattern, bottom stripe banner pattern, bottom triangle banner pattern, bricks, bricks banner pattern, center stripe banner pattern, circle, circle banner pattern, creeper, creeper banner pattern, creeper charged banner pattern, cross, cross banner pattern, curly border, curly border banner pattern, diagonal left, diagonal right, diagonal up left, diagonal up left banner pattern, diagonal up right, diagonal up right banner pattern, down left stripe banner pattern, down right stripe banner pattern, field masoned banner pattern, flow, flow banner pattern, flower, flower banner pattern, globe, globe banner pattern, gradient, gradient banner pattern, gradient up, gradient up banner pattern, guster, guster banner pattern, half horizontal, half horizontal bottom, half vertical, half vertical right, horizontal bottom half banner pattern, horizontal half banner pattern, left diagonal banner pattern, left stripe banner pattern, middle stripe banner pattern, mojang, mojang banner pattern, piglin, piglin banner pattern, rhombus, rhombus banner pattern, right diagonal banner pattern, right stripe banner pattern, right vertical half banner pattern, skull, skull banner pattern, small stripes, small stripes banner pattern, snout banner pattern, square bottom left, square bottom right, square top left, square top right, straight cross, straight cross banner pattern, stripe bottom, stripe center, stripe downleft, stripe downright, stripe left, stripe middle, stripe right, stripe top, tbottom triangles banner pattern, thing banner pattern, top left square banner pattern, top right square banner pattern, top stripe banner pattern, top triangle banner pattern, top triangles banner pattern, triangle bottom, triangle top, triangles bottom, triangles top, vertical half banner pattern",
      "since": [
        "2.10"
      ],
      "patterns": [
        "banner[ ]pattern[ ]type[s]"
      ]
    },
    {
      "id": "Biome",
      "name": "Biome",
      "description": [
        "All possible biomes Minecraft uses to generate a world.",
        "NOTE: Minecraft namespaces are supported, ex: 'minecraft:basalt_deltas'."
      ],
      "examples": [
        "biome at the player is desert"
      ],
      "usage": "badlands, badlands forest, bamboo jungle, basalt deltas, beach, birch forest, black forest, cherry grove, cold beach, cold ocean, cold taiga, crimson forest, dark forest, deep cold ocean, deep dark, deep frozen ocean, deep lukewarm ocean, deep ocean, desert, dripstone caves, end barrens, end highlands, end midlands, eroded badlands, eroded mesa, flower forest, forest, frozen ocean, frozen peaks, frozen river, giant spruce taiga, giant tree taiga, gravelly mountains, grove, hell, ice plains spikes, ice plains with spikes, ice spikes, jagged peaks, jungle, jungle edge, lukewarm ocean, lush caves, mangrove swamp, marsh, meadow, mesa, mesa forest, mountains, mushroom fields, mushroom island, nether, nether wastes, ocean, old growth birch forest, old growth pine taiga, old growth spruce taiga, pale garden, plains, river, roofed forest, savanna, savanna plateau, sea, shattered savanna, sky, small end islands, snowy beach, snowy plains, snowy slopes, snowy taiga, snowy tundra, soul sand valley, sparse jungle, spiked ice plains, stone shore, stony peaks, stony shore, sunflower plains, swamp, swampland, taiga, tall birch forest, the end, the void, void, warm ocean, warped forest, windswept forest, windswept gravelly hills, windswept hills, windswept savanna, wooded badlands, wooded mesa, wooded mountains",
      "since": [
        "1.4.4"
      ],
      "patterns": [
        "biome[s]"
      ]
    },
    {
      "id": "Block",
      "name": "Block",
      "description": [
        "A block in a world. It has a location and a type, and can also have a direction (mostly a facing), an inventory, or other special properties."
      ],
      "since": [
        "1.0"
      ],
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "block[s]"
      ]
    },
    {
      "id": "BlockData",
      "name": "Block Data",
      "description": [
        "Block data is the detailed information about a block, referred to in Minecraft as BlockStates, allowing for the manipulation of different aspects of the block, including shape, waterlogging, direction the block is facing, and so much more. Information regarding each block's optional data can be found on Minecraft's Wiki. Find the block you're looking for and scroll down to 'Block States'. Different states must be separated by a semicolon (see examples). The 'minecraft:' namespace is optional, as well as are underscores."
      ],
      "examples": [
        "set block at player to campfire[lit=false]",
        "set target block of player to oak stairs[facing=north;waterlogged=true]",
        "set block at player to grass_block[snowy=true]",
        "set loop-block to minecraft:chest[facing=north]",
        "set block above player to oak_log[axis=y]",
        "set target block of player to minecraft:oak_leaves[distance=2;persistent=false]"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "block[ ]data[s]"
      ]
    },
    {
      "id": "Boolean",
      "name": "Boolean",
      "description": [
        "A boolean is a value that is either true or false. Other accepted names are 'on' and 'yes' for true, and 'off' and 'no' for false."
      ],
      "examples": [
        "set {config.%player%.use mod} to false"
      ],
      "usage": "true/yes/on or false/no/off",
      "since": [
        "1.0"
      ],
      "patterns": [
        "boolean[s]"
      ]
    },
    {
      "id": "CatType",
      "name": "Cat Type",
      "description": [
        "Represents the race/type of a cat entity.",
        "NOTE: Minecraft namespaces are supported, ex: 'minecraft:british_shorthair'."
      ],
      "usage": "all black, black, british shorthair, calico, jellie, persian, ragdoll, red, siamese, tabby, white",
      "since": [
        "2.4"
      ],
      "patterns": [
        "cat[ ](type|race)[s]"
      ]
    },
    {
      "id": "Chunk",
      "name": "Chunk",
      "description": [
        "A chunk is a cuboid of 16×16×128 (x×z×y) blocks. Chunks are spread on a fixed rectangular grid in their world."
      ],
      "since": [
        "2.0"
      ],
      "patterns": [
        "chunk[s]"
      ]
    },
    {
      "id": "ClickType",
      "name": "Click Type",
      "description": [
        "Click type, mostly for inventory events. Tells exactly which keys/buttons player pressed, assuming that default keybindings are used in client side."
      ],
      "usage": "lmb, number key, mmb, rmb, drop item, drop key, window border using left mouse button, unknown, window border using right mouse, shift+rmb, unsupported, shift+lmb, ctrl+q, swap shield, left mouse button, left mouse with shift, left mouse, 0-9, double click, double click using mouse, border using rmb, right mouse button, right mouse button with shift, border using lmb, middle mouse, drop key with control, window border using right mouse button, swap offhand, custom, q, right mouse with shift, middle mouse button, drop stack, left mouse button with shift, right mouse, creative action",
      "since": [
        "2.2-dev16b, 2.2-dev35 (renamed to click type)"
      ],
      "patterns": [
        "click[ ]type[s]"
      ]
    },
    {
      "id": "Color",
      "name": "Color",
      "description": [
        "Wool, dye and chat colors."
      ],
      "examples": [
        "color of the sheep is red or black",
        "set the color of the block to green",
        "message \"You're holding a <%color of tool%>%color of tool%<reset> wool block\""
      ],
      "usage": "black, dark grey/dark gray, grey/light grey/gray/light gray/silver, white, blue/dark blue, cyan/aqua/dark cyan/dark aqua, light blue/light cyan/light aqua, green/dark green, light green/lime/lime green, yellow/light yellow, orange/gold/dark yellow, red/dark red, pink/light red, purple/dark purple, magenta/light purple, brown/indigo",
      "patterns": [
        "colo[u]r[s]"
      ]
    },
    {
      "id": "CommandSender",
      "name": "Command Sender",
      "description": [
        "A player or the console."
      ],
      "examples": [
        "command /push [<player>]:",
        "\ttrigger:",
        "\t\tif arg-1 is not set:",
        "\t\t\tif command sender is console:",
        "\t\t\t\tsend \"You can't push yourself as a console :\\\" to sender",
        "\t\t\t\tstop",
        "\t\t\tpush sender upwards with force 2",
        "\t\t\tsend \"Yay!\"",
        "\t\telse:",
        "\t\t\tpush arg-1 upwards with force 2",
        "\t\t\tsend \"Yay!\" to sender and arg-1"
      ],
      "usage": "use the console for the console\nsee player for players.",
      "since": [
        "1.0"
      ],
      "patterns": [
        "[(command[s]][ ][)](sender|executor)[s]"
      ]
    },
    {
      "id": "Config",
      "name": "Config",
      "description": [
        "A configuration (or code) loaded by Skript, such as the config.sk or aliases.",
        "Configs can be reloaded or navigated to find options."
      ],
      "examples": [
        "the skript config"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "config[s]"
      ]
    },
    {
      "id": "DamageCause",
      "name": "Damage Cause",
      "description": [
        "The cause/type of a damage event, e.g. lava, fall, fire, drowning, explosion, poison, etc.",
        "Please note that support for this type is very rudimentary, e.g. lava, fire and burning, as well as projectile and attack are considered different types."
      ],
      "usage": "sweep attack, thorns, the void, magma, a lightning, drowning, dragonfire, an attack, drown, an entity attack, melt, freeze, falling block, contact, fire, campfire, an entity explosion, lightning, a fall, entity explosion, void, a lightning strike, suffocation, suicide, wither effect, a plugin, lightning strike, entity attack, a potion, a wither, sweeping, melting, a falling block, unknown, starvation, lava, fall, hot floor, attack, a block explosion, dryout, burn, hitting wall while flying, potion, world border, flying into a wall, cramming, poison, sonic boom, suffocate, custom, kill, killed, a fire, burning, a projectile, plugin, wither potion effect, block explosion, projectile, wither, dragon's breath",
      "since": [
        "2.0"
      ],
      "patterns": [
        "damage[ ]cause[s]"
      ]
    },
    {
      "id": "Date",
      "name": "Date",
      "description": [
        "A date is a certain point in the real world's time which can be obtained with now expression, unix date expression and date function.",
        "See time and timespan for the other time types of Skript."
      ],
      "examples": [
        "set {_yesterday} to now",
        "subtract a day from {_yesterday}",
        "# now {_yesterday} represents the date 24 hours before now"
      ],
      "since": [
        "1.4"
      ],
      "patterns": [
        "date[s]"
      ]
    },
    {
      "id": "Difficulty",
      "name": "Difficulty",
      "description": [
        "The difficulty of a world."
      ],
      "usage": "normal, medium, hard, easy, peaceful",
      "since": [
        "2.3"
      ],
      "patterns": [
        "difficult(y|ies)"
      ]
    },
    {
      "id": "Direction",
      "name": "Direction",
      "description": [
        "A direction, e.g. north, east, behind, 5 south east, 1.3 meters to the right, etc.",
        "Locations and some blocks also have a direction, but without a length.",
        "Please note that directions have changed extensively in the betas and might not work perfectly. They can also not be used as command arguments."
      ],
      "examples": [
        "set the block below the victim to a chest",
        "loop blocks from the block infront of the player to the block 10 below the player:",
        "\tset the block behind the loop-block to water"
      ],
      "usage": "see direction (expression)",
      "since": [
        "2.0"
      ],
      "patterns": [
        "direction[s]"
      ]
    },
    {
      "id": "Billboard",
      "name": "Display Billboard",
      "description": [
        "Represents the billboard setting of a display."
      ],
      "usage": "vertical pivot, horizontal, middle, horizontal pivot, center pivot, center, fixed, vertical",
      "since": [
        "2.10"
      ],
      "patterns": [
        "billboard[s]"
      ]
    },
    {
      "id": "Display",
      "name": "Display Entity",
      "description": [
        "A text, block or item display entity."
      ],
      "since": [
        "2.10"
      ],
      "changers": [
        "delete"
      ],
      "patterns": [
        "display[s]"
      ]
    },
    {
      "id": "TextAlignment",
      "name": "Display Text Alignment",
      "description": [
        "Represents the text alignment setting of a text display."
      ],
      "usage": "middle aligned, centered, right aligned, center aligned, left aligned",
      "since": [
        "2.10"
      ],
      "patterns": [
        "text[ ]alignment[s]"
      ]
    },
    {
      "id": "Enchantment",
      "name": "Enchantment",
      "description": [
        "An enchantment, e.g. 'sharpness' or 'fortune'. Unlike enchantment type this type has no level, but you usually don't need to use this type anyway.",
        "NOTE: Minecraft namespaces are supported, ex: 'minecraft:basalt_deltas'.",
        "As of Minecraft 1.21 this will also support custom enchantments using namespaces, ex: 'myenchants:explosive'."
      ],
      "usage": "aqua affinity, bane of arthropods, binding curse, blast protection, breach, channeling, channelling, curse of binding, curse of vanishing, density, depth strider, efficiency, feather falling, fire aspect, fire protection, flame, fortune, frost walker, impaling, infinity, knockback, looting, loyalty, luck of the sea, lure, mending, multi-shot, multishot, piercing, power, projectile protection, protection, punch, quick charge, respiration, riptide, sharpness, silk touch, smite, soul speed, sweeping edge, swift sneak, thorns, unbreaking, vanishing curse, wind burst",
      "since": [
        "1.4.6"
      ],
      "patterns": [
        "enchantment[s]"
      ]
    },
    {
      "id": "EnchantmentOffer",
      "name": "Enchantment Offer",
      "description": [
        "The enchantmentoffer in an enchant prepare event."
      ],
      "examples": [
        "on enchant prepare:",
        "\tset enchant offer 1 to sharpness 1",
        "\tset the cost of enchant offer 1 to 10 levels"
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "enchant[ment][ ]offer[s]"
      ]
    },
    {
      "id": "EnchantmentType",
      "name": "Enchantment Type",
      "description": [
        "An enchantment with an optional level, e.g. 'sharpness 2' or 'fortune'."
      ],
      "examples": [
        "enchant the player's tool with sharpness 5",
        "helmet is enchanted with waterbreathing"
      ],
      "usage": "<enchantment> [<level>]",
      "since": [
        "1.4.6"
      ],
      "patterns": [
        "enchant(ing|ment) type[s]"
      ]
    },
    {
      "id": "Entity",
      "name": "Entity",
      "description": [
        "An entity is something in a world that's not a block, e.g. a player, a skeleton, or a zombie, but also projectiles like arrows, fireballs or thrown potions, or special entities like dropped items, falling blocks or paintings."
      ],
      "examples": [
        "entity is a zombie or creeper",
        "player is an op",
        "projectile is an arrow",
        "shoot a fireball from the player"
      ],
      "usage": "player, op, wolf, tamed ocelot, powered creeper, zombie, unsaddled pig, fireball, arrow, dropped item, item frame, etc.",
      "since": [
        "1.0"
      ],
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all"
      ],
      "patterns": [
        "entit(y|ies)"
      ]
    },
    {
      "id": "Cause",
      "name": "Entity Potion Cause",
      "description": [
        "Represents the cause of the action of a potion effect on an entity, e.g. arrow, command"
      ],
      "usage": "patrol captain, axolotl, death, removal by resurrection, beacon effect, potion drunk, illusion, unknown, drinking potion, expired, pillager captain, attack, villager trade, spawned spider, wither rose infliction, conversion, enter area effect cloud, conduit effect, command, food, drinking milk, plugin, converted, spider spawn, splash potion, warden, expiration, potion splash, dolphin boost, arrow infliction, turtle helmet effect",
      "since": [
        "2.10"
      ],
      "patterns": [
        "[entity ]potion[ ]effect[ ]cause"
      ]
    },
    {
      "id": "EntitySnapshot",
      "name": "Entity Snapshot",
      "description": [
        "Represents a snapshot of an entity's data.",
        "This includes all of the data associated with an entity (its name, health, attributes, etc.), at the time this expression is used. Essentially, these are a way to create templates for entities.",
        "Individual attributes of a snapshot cannot be modified or retrieved."
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "entity[ ]snapshot[s]"
      ]
    },
    {
      "id": "EntityData",
      "name": "Entity Type",
      "description": [
        "The type of an entity, e.g. player, wolf, powered creeper, etc."
      ],
      "examples": [
        "victim is a cow",
        "spawn a creeper"
      ],
      "usage": "Detailed usage will be added eventually",
      "since": [
        "1.3"
      ],
      "patterns": [
        "entity[ ]type[s]"
      ]
    },
    {
      "id": "EntityType",
      "name": "Entity Type with Amount",
      "description": [
        "An entity type with an amount, e.g. '2 zombies'. I might remove this type in the future and make a more general 'type' type, i.e. a type that has a number and a type."
      ],
      "examples": [
        "spawn 5 creepers behind the player"
      ],
      "usage": "<number> <entity type>",
      "since": [
        "1.3"
      ],
      "patterns": [
        "entitytype"
      ]
    },
    {
      "id": "EquipmentSlot",
      "name": "Equipment Slot",
      "description": [
        "Represents an equipment slot of an entity."
      ],
      "usage": "off hand, chestplate slot, head slot, hand slot, main hand slot, boots slot, feet slot, body slot, body armour slot, leggings slot, helmet slot, off hand slot, chestplate, legs slot, helmet, boots, tool slot, main hand, body armor slot, leggings, chest slot",
      "since": [
        "2.11"
      ],
      "patterns": [
        "equipment[ ]slot[s]"
      ]
    },
    {
      "id": "Executable",
      "name": "Executable",
      "description": [
        "Something that can be executed (run) and may accept arguments, e.g. a function.",
        "This may also return a result."
      ],
      "examples": [
        "run {_function} with arguments 1 and true"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "executable[s]"
      ]
    },
    {
      "id": "Experience",
      "name": "Experience",
      "description": [
        "Experience points. Please note that Bukkit only allows to give XP, but not remove XP from players. You can however change a player's level and level progress freely."
      ],
      "examples": [
        "give 10 xp to the player"
      ],
      "usage": "[<number>] ([e]xp|experience [point[s]])",
      "since": [
        "2.0"
      ],
      "patterns": [
        "experience[ ][point[s]]"
      ]
    },
    {
      "id": "ChangeReason",
      "name": "Experience Cooldown Change Reason",
      "description": [
        "Represents a change reason of an experience cooldown change event."
      ],
      "usage": "plugin, pickup orb, orb pickup",
      "since": [
        "2.10"
      ],
      "patterns": [
        "(experience|[e]xp) cooldown change (reason|cause)[s]"
      ]
    },
    {
      "id": "FireworkEffect",
      "name": "Firework Effect",
      "description": [
        "A configuration of effects that defines the firework when exploded",
        "which can be used in the launch firework effect.",
        "See the firework effect expression for detailed patterns."
      ],
      "examples": [
        "launch flickering trailing burst firework colored blue and green at player",
        "launch trailing flickering star colored purple, yellow, blue, green and red fading to pink at target entity",
        "launch ball large colored red, purple and white fading to light green and black at player's location with duration 1"
      ],
      "usage": "See Firework Types",
      "since": [
        "2.4"
      ],
      "patterns": [
        "firework[ ]effect[s]"
      ]
    },
    {
      "id": "FireworkType",
      "name": "Firework Type",
      "description": [
        "The type of a fireworkeffect."
      ],
      "usage": "small, ball, star shaped, large, star, creeper face, small ball, large ball, burst, ball large, creeper",
      "since": [
        "2.4"
      ],
      "patterns": [
        "firework[ ]type[s]"
      ]
    },
    {
      "id": "State",
      "name": "Fishing State",
      "description": [
        "Represents the different states of a fishing event."
      ],
      "usage": "lured, bobber in ground, fish escaped, entity caught, fishing, fish lured, fishing rod cast, reel in, caught fish, caught entity, fishing line cast, fish escape, fish bite, bite, rod cast, in ground, failed attempt, fish caught",
      "since": [
        "2.11"
      ],
      "patterns": [
        "fishing[ ]state[s]"
      ]
    },
    {
      "id": "DynamicFunctionReference",
      "name": "Function",
      "description": [
        "A function loaded by Skript.",
        "This can be executed (with arguments) and may return a result."
      ],
      "examples": [
        "run {_function} with arguments 1 and true",
        "set {_result} to the result of {_function}"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "function[s]"
      ]
    },
    {
      "id": "GameMode",
      "name": "Game Mode",
      "description": [
        "The game modes survival, creative, adventure and spectator."
      ],
      "examples": [
        "player's gamemode is survival",
        "set the player argument's game mode to creative"
      ],
      "usage": "adventure, survival, spectator, creative",
      "since": [
        "1.0"
      ],
      "patterns": [
        "game[ ]mode[s]"
      ]
    },
    {
      "id": "GameRule",
      "name": "Gamerule",
      "description": [
        "A gamerule"
      ],
      "usage": "tntExplosionDropDecay, globalSoundEvents, enderPearlsVanishOnDeath, doFireTick, maxCommandChainLength, doVinesSpread, disableElytraMovementCheck, lavaSourceConversion, commandBlockOutput, forgiveDeadPlayers, playersNetherPortalCreativeDelay, doMobSpawning, maxEntityCramming, universalAnger, playersSleepingPercentage, snowAccumulationHeight, doImmediateRespawn, blockExplosionDropDecay, naturalRegeneration, doMobLoot, fallDamage, doEntityDrops, randomTickSpeed, playersNetherPortalDefaultDelay, spawnRadius, freezeDamage, sendCommandFeedback, doWardenSpawning, fireDamage, reducedDebugInfo, waterSourceConversion, projectilesCanBreakBlocks, announceAdvancements, drowningDamage, spawnChunkRadius, disableRaids, doWeatherCycle, mobExplosionDropDecay, doDaylightCycle, showDeathMessages, doTileDrops, doInsomnia, keepInventory, disablePlayerMovementCheck, doLimitedCrafting, mobGriefing, doTraderSpawning, commandModificationBlockLimit, logAdminCommands, minecartMaxSpeed, spectatorsGenerateChunks, doPatrolSpawning, maxCommandForkCount",
      "since": [
        "2.5"
      ],
      "patterns": [
        "gamerule[s]"
      ]
    },
    {
      "id": "GameruleValue",
      "name": "Gamerule Value",
      "description": [
        "A wrapper for the value of a gamerule for a world."
      ],
      "since": [
        "2.5"
      ],
      "patterns": [
        "gamerule value[s]"
      ]
    },
    {
      "id": "Gene",
      "name": "Gene",
      "description": [
        "Represents a Panda's main or hidden gene. See genetics for more info."
      ],
      "usage": "normal, lazy, happy, worried, worrisome, aggressive, brown, brownish, savage, playful, wild, weak",
      "since": [
        "2.4"
      ],
      "patterns": [
        "[panda ]gene[s]"
      ]
    },
    {
      "id": "RegainReason",
      "name": "Heal Reason",
      "description": [
        "The health regain reason in a heal event."
      ],
      "usage": "an ender crystal, magic, a magic regeneration, magic regeneration, fed, sated, a magic regen, regen potion, a wither spawn, peaceful, unknown, a regeneration potion, consuming, a wither effect, peaceful regeneration, wither summoning, healing potion, wither potion, an end crystal, satiated, regeneration potion, potion, satisfied, ingesting, withered, custom, a wither spawning, end crystal, eating, wither spawning, a wither summoning, wither effect, a plugin, a regen potion, plugin, withering, a potion, wither spawn, a healing potion, ender crystal, magic regen, wither, peaceful regen",
      "since": [
        "2.5"
      ],
      "patterns": [
        "(regen|heal) (reason|cause)"
      ]
    },
    {
      "id": "InputKey",
      "name": "Input Key",
      "description": [
        "Represents a movement input key that is pressed by a player."
      ],
      "usage": "left movement key, forward movement key, right movement key, backward key, left key, sprint key, forward key, right key, jumping key, sneaking key, jump key, sneak key, sprinting key, backward movement key",
      "since": [
        "2.10"
      ],
      "patterns": [
        "input[ ]key[s]"
      ]
    },
    {
      "id": "Inventory",
      "name": "Inventory",
      "description": [
        "An inventory of a player or block. Inventories have many effects and conditions regarding the items contained.",
        "An inventory has a fixed amount of slots which represent a specific place in the inventory, e.g. the helmet slot for players (Please note that slot support is still very limited but will be improved eventually)."
      ],
      "since": [
        "1.0"
      ],
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "inventor(y|ies)"
      ]
    },
    {
      "id": "InventoryAction",
      "name": "Inventory Action",
      "description": [
        "What player just did in inventory event. Note that when in creative game mode, most actions do not work correctly."
      ],
      "usage": "drop stack from slot, swap items with hotbar, swap cursor stack, pickup single item, pickup some, drop all from cursor, move to other inventory, pickup from bundle inventory actions, drop cursor stack, place all into bundle inventory actions, pickup all, swap with hotbar, pickup all into bundle inventory actions, nothing, drop all from slot, swap cursor, drop cursor, pickup all items, drop slot item, place from bundle inventory actions, place all, drop cursor item, drop slot stack, drop single item from slot, swap with cursor, place some, pickup one item, drop single item from cursor, collect items to cursor, unknown, clone stack, drop stack from cursor, drop one item from slot, drop one item from cursor, unsupported, do nothing, drop one from cursor, pickup half, drop items from slot, swap stack with cursor, place some into bundle inventory actions, place all items, collect to cursor, pickup some items, drop slot, drop items from cursor, hotbar move and readd, shift move, custom, pickup single, place one item, hotbar swap items, drop one from slot, place some items, place one, pickup half stack, instant move, hotbar swap, pickup some into bundle inventory actions",
      "since": [
        "2.2-dev16"
      ],
      "patterns": [
        "inventory[ ]action[s]"
      ]
    },
    {
      "id": "Reason",
      "name": "Inventory Close Reasons",
      "description": [
        "The inventory close reason in an inventory close event."
      ],
      "usage": "disconnect, death, teleport, cannot use, new opened, unknown, can't use, unloaded, disconnected, plugin, can not use, open new, player",
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "inventory[ ]close[ ]reason[s]"
      ]
    },
    {
      "id": "InventoryType",
      "name": "Inventory Type",
      "description": [
        "Minecraft has several different inventory types with their own use cases."
      ],
      "usage": "barrel inventory, a loom inventory, a blast furnace inventory, workbench inventory, ender chest inventory, loom inventory, bookshelf inventory, a workbench inventory, hopper inventory, decorated pot inventory, a merchant inventory, a hopper inventory, an ender chest inventory, new smithing table, a jukebox, beacon inventory, shulker box inventory, a barrel inventory, a shulker box inventory, lectern inventory, chest inventory, a villager inventory, a smoker inventory, a brewing stand inventory, a smithing inventory, chiseled bookshelf inventory, grindstone inventory, a crafter inventory, a crafting table inventory, a player inventory, furnace inventory, a creative inventory, blast furnace inventory, upgrade gear, a composter inventory, an enchanting table inventory, jukebox, a dropper inventory, a cartography table inventory, a upgrade gear, smoker inventory, composter inventory, a chest inventory, upgrade gear table, a upgrade gear table, dispenser inventory, player inventory, stonecutter inventory, a stonecutter inventory, a lectern inventory, merchant inventory, cartography table inventory, a new smithing table, a chiseled bookshelf inventory, a furnace inventory, anvil inventory, a bookshelf inventory, a dispenser inventory, a grindstone inventory, a decorated pot inventory, smithing inventory, dropper inventory, brewing stand inventory, villager inventory, enchanting table inventory, a beacon inventory, crafter inventory, creative inventory, crafting table inventory, an anvil inventory",
      "since": [
        "2.2-dev32"
      ],
      "patterns": [
        "inventory[ ]type[s]"
      ]
    },
    {
      "id": "ItemStack",
      "name": "Item",
      "description": [
        "An item, e.g. a stack of torches, a furnace, or a wooden sword of sharpness 2. Unlike item type an item can only represent exactly one item (e.g. an upside-down cobblestone stair facing west), while an item type can represent a whole range of items (e.g. any cobble stone stairs regardless of direction).",
        "You don't usually need this type except when you want to make a command that only accepts an exact item.",
        "Please note that currently 'material' is exactly the same as 'item', i.e. can have an amount & enchantments."
      ],
      "examples": [
        "set {_item} to type of the targeted block",
        "{_item} is a torch"
      ],
      "usage": "[<number> [of]] <alias> [of <enchantment> <level>], Where <alias> must be an alias that represents exactly one item (i.e cannot be a general alias like 'sword' or 'plant')",
      "since": [
        "1.0"
      ],
      "patterns": [
        "item[s]",
        "item[ ]stack[s]"
      ]
    },
    {
      "id": "ItemDisplayTransform",
      "name": "Item Display Transforms",
      "description": [
        "Represents the transform setting of an item display."
      ],
      "usage": "first person left handed, left handed in first person, right handed in third person, first person left hand, no transform, the ground, third person right hand, third person right handed, right handed in first person, menu, head, third person left hand, first person right handed, first person right hand, fixed position, left handed in third person, gui, ground, fixed, third person left handed",
      "since": [
        "2.10"
      ],
      "patterns": [
        "item[ ]display[ ]transform[s]"
      ]
    },
    {
      "id": "ItemFlag",
      "name": "Item Flag",
      "description": [
        "Represents flags that may be applied to hide certain attributes of an item."
      ],
      "usage": "hide unbreakable, hide unbreakable status, hide destroys, hide additional tooltip, destroys hidden, hide enchants, stored enchantments hidden, hidden destroys, hidden stored enchants, dye hidden, stored enchants hidden, hidden enchants, hidden unbreakable status, hide armour trim, hidden stored enchantments, hide stored enchants, hide stored enchantments, hide attributes, hidden additional tooltip, hidden armor trim, hidden placed on, additional tooltip hidden, enchants hidden, enchantments hidden, attributes hidden, unbreakable status hidden, hidden dye color, hidden armour trim, unbreakable hidden, dye color hidden, hide enchantments, armour trim hidden, hidden unbreakable, hide dye color, hidden attributes, armor trim hidden, hide destroyable blocks, hide placed on, hidden dye, hide armor trim, hide breakable blocks, placed on hidden, hide dye",
      "since": [
        "2.10"
      ],
      "patterns": [
        "item[ ]flag[s]"
      ]
    },
    {
      "id": "ItemType",
      "name": "Item Type",
      "description": [
        "An item type is an alias, e.g. 'a pickaxe', 'all plants', etc., and can result in different items when added to an inventory, and unlike items they are well suited for checking whether an inventory contains a certain item or whether a certain item is of a certain type.",
        "An item type can also have one or more enchantments with or without a specific level defined, and can optionally start with 'all' or 'every' to make this item type represent all types that the alias represents, including data ranges."
      ],
      "examples": [
        "give 4 torches to the player",
        "add all slabs to the inventory of the block",
        "player's tool is a diamond sword of sharpness",
        "remove a pickaxes of fortune 4 from {stored items::*}",
        "set {_item} to 10 of every upside-down stair",
        "block is dirt or farmland"
      ],
      "usage": "[<number> [of]] [all/every] <alias> [of <enchantment> [<level>] [,/and <more enchantments...>]]",
      "since": [
        "1.0"
      ],
      "patterns": [
        "item[ ]type[s]",
        "material[s]"
      ]
    },
    {
      "id": "LivingEntity",
      "name": "Living Entity",
      "description": [
        "A living entity, i.e. a mob or player, not inanimate entities like projectiles or dropped items."
      ],
      "examples": [
        "spawn 5 powered creepers",
        "shoot a zombie from the creeper"
      ],
      "usage": "see entity, but ignore inanimate objects",
      "since": [
        "1.0"
      ],
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all"
      ],
      "patterns": [
        "living[ ]entit(y|ies)"
      ]
    },
    {
      "id": "Location",
      "name": "Location",
      "description": [
        "A location in a world. Locations are world-specific and even store a direction, e.g. if you save a location and later teleport to it you will face the exact same direction you did when you saved the location."
      ],
      "examples": [
        "teleport player to location at 0, 69, 0",
        "set {home::%uuid of player%} to location of the player"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "location[s]"
      ]
    },
    {
      "id": "LootContext",
      "name": "Loot Context",
      "description": [
        "Represents additional information a loot table can use to modify its generated loot.",
        "",
        "Some loot tables will require some values (i.e. looter, location, looted entity) in a loot context when generating loot whereas others may not.",
        "For example, the loot table of a simple dungeon chest will only require a location, whereas the loot table of a cow will require a looting player, looted entity, and location.",
        "You can find more information about this in https://minecraft.wiki/w/Loot_context"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "loot[ ]context[s]"
      ]
    },
    {
      "id": "LootTable",
      "name": "Loot Table",
      "description": [
        "Loot tables represent what items should be in naturally generated containers, what items should be dropped when killing a mob, or what items can be fished.",
        "You can find more information about this in https://minecraft.wiki/w/Loot_table"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "loot[ ]table[s]"
      ]
    },
    {
      "id": "Metadatable",
      "name": "Metadata Holder",
      "description": [
        "Something that can hold metadata (e.g. an entity or block)"
      ],
      "examples": [
        "set metadata value \"super cool\" of player to true"
      ],
      "since": [
        "2.2-dev36"
      ],
      "patterns": [
        "metadata[ ]holder[s]"
      ]
    },
    {
      "id": "Tag",
      "name": "Minecraft Tag",
      "description": [
        "A tag that classifies a material, or entity."
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "minecraft[ ]tag[s]"
      ]
    },
    {
      "id": "MoonPhase",
      "name": "Moon Phase",
      "description": [
        "Represents the phase of a moon."
      ],
      "usage": "last quarter, waning crescent, waxing gibbous, full moon, waning gibbous, waxing crescent, new moon, first quarter",
      "since": [
        "2.7"
      ],
      "patterns": [
        "(lunar|moon)[ ]phase[s]"
      ]
    },
    {
      "id": "Node",
      "name": "Node",
      "description": [
        "A node (entry) from a script config file.",
        "This may have navigable children."
      ],
      "examples": [
        "the current script"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "node[s]"
      ]
    },
    {
      "id": "Number",
      "name": "Number",
      "description": [
        "A number, e.g. 2.5, 3, -9812454, 30 degrees or 3.14 radians.",
        "Please note that many expressions only need integers, i.e. will discard any fractional parts of any numbers without producing an error.",
        "Radians will be converted to degrees."
      ],
      "examples": [
        "set the player's health to 5.5",
        "set {_temp} to 2*{_temp} - 2.5",
        "set {_angle} to 3.14 in radians # will be converted to degrees"
      ],
      "usage": "[-]###[.###] [[in ](rad[ian][s]|deg[ree][s])]</code> (any amount of digits; very large numbers will be truncated though)",
      "since": [
        "1.0"
      ],
      "patterns": [
        "num[ber][s]"
      ]
    },
    {
      "id": "Object",
      "name": "Object",
      "description": [
        "The supertype of all types, meaning that if %object% is used in e.g. a condition it will accept all kinds of expressions."
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "object[s]"
      ]
    },
    {
      "id": "OfflinePlayer",
      "name": "Offline Player",
      "description": [
        "A player that is possibly offline. See player for more information. Please note that while all effects and conditions that require a player can be used with an offline player as well, they will not work if the player is not actually online."
      ],
      "examples": [
        "set {_p} to \"Notch\" parsed as an offlineplayer # returns Notch even if they're offline"
      ],
      "usage": "Parsing an offline player as a player (online) will return nothing (none), for that case you would need to parse as offlineplayer which only returns nothing (none) if player doesn't exist in Minecraft databases (name not taken) otherwise it will return the player regardless of their online status.",
      "since": [
        "2.0 beta 8"
      ],
      "patterns": [
        "offline[ ]player[s]"
      ]
    },
    {
      "id": "Player",
      "name": "Player",
      "description": [
        "A player. Depending on whether a player is online or offline several actions can be performed with them, though you won't get any errors when using effects that only work if the player is online (e.g. changing their inventory) on an offline player.",
        "You have two possibilities to use players as command arguments: <player> and <offline player>. The first requires that the player is online and also accepts only part of the name, while the latter doesn't require that the player is online, but the player's name has to be entered exactly."
      ],
      "examples": [
        "set {_p} to \"Notch\" parsed as a player # returns <none> unless Notch is actually online or starts with Notch like Notchan",
        "set {_p} to \"N\" parsed as a player # returns Notch if Notch is online because their name starts with 'N' (case insensitive) however, it would return nothing if no player whose name starts with 'N' is online."
      ],
      "usage": "Parsing an offline player as a player (online) will return nothing (none), for that case you would need to parse as offlineplayer which only returns nothing (none) if player doesn't exist in Minecraft databases (name not taken) otherwise it will return the player regardless of their online status.",
      "since": [
        "1.0"
      ],
      "changers": [
        "add",
        "remove",
        "remove all"
      ],
      "patterns": [
        "player[s]"
      ]
    },
    {
      "id": "PotionEffect",
      "name": "Potion Effect",
      "description": [
        "A potion effect, including the potion effect type, tier and duration."
      ],
      "usage": "speed of tier 1 for 10 seconds",
      "since": [
        "2.5.2"
      ],
      "patterns": [
        "potion[ ]effect[s]"
      ]
    },
    {
      "id": "PotionEffectType",
      "name": "Potion Effect Type",
      "description": [
        "A potion effect type, e.g. 'strength' or 'swiftness'."
      ],
      "examples": [
        "apply swiftness 5 to the player",
        "apply potion of speed 2 to the player for 60 seconds",
        "remove invisibility from the victim"
      ],
      "usage": "absorption, bad luck, bad omen, blindness, conduit power, confusion, damage, damage resistance, darkness, dolphin's grace, dolphins grace, fast digging, fast mining, fire immunity, fire resistance, floating, glowing, haste, health, health boost, hero of the village, hunger, increase damage, increased damage, infested, instant damage, instant health, invisibility, jump, jump boost, levitation, luck, max health boost, maximum health boost, mining fatigue, nausea, night vision, oozing, poison, raid omen, reduce damage, reduced damage, regeneration, resistance, saturation, slow, slow digging, slow fall, slow falling, slow mining, slowness, speed, strength, swiftness, trial omen, unluck, water breathing, weakness, weaving, wind charged, wither, wither effect, wither potion effect",
      "patterns": [
        "potion[ ]effect[ ]type[s]"
      ]
    },
    {
      "id": "Projectile",
      "name": "Projectile",
      "description": [
        "A projectile, e.g. an arrow, snowball or thrown potion."
      ],
      "examples": [
        "projectile is a snowball",
        "shoot an arrow at speed 5 from the player"
      ],
      "usage": "arrow, fireball, snowball, thrown potion, etc.",
      "since": [
        "1.0"
      ],
      "changers": [
        "delete"
      ],
      "patterns": [
        "projectile[s]"
      ]
    },
    {
      "id": "Quaternionf",
      "name": "Quaternion",
      "description": [
        "Quaternions are four dimensional vectors, often used for representing rotations."
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "quaternion[f][s]"
      ]
    },
    {
      "id": "SkriptQueue",
      "name": "Queue",
      "description": [
        "A queued list of values. Entries are removed from a queue when they are queried."
      ],
      "examples": [
        "set {queue} to a new queue",
        "add \"hello\" to {queue}",
        "broadcast the 1st element of {queue}"
      ],
      "since": [
        "2.10"
      ],
      "changers": [
        "add",
        "delete",
        "remove",
        "reset"
      ],
      "patterns": [
        "queue[s]"
      ]
    },
    {
      "id": "QuitReason",
      "name": "Quit Reason",
      "description": [
        "Represents a quit reason from a player quit server event."
      ],
      "usage": "disconnected, erroneous state, kicked, quit, timed out, erroneous",
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "(quit|disconnect)[ ](reason|cause)[s]"
      ]
    },
    {
      "id": "Status",
      "name": "Resource Pack State",
      "description": [
        "The state in a resource pack request response event."
      ],
      "usage": "discarded, refused, rejected, failed reload, accepted, failed, failed to reload, failed to download, downloaded, successfully loaded, accept, fail, successfully load, refuse, declined, successfully install, success, reject, decline, successfully installed, download fail, invalid url",
      "since": [
        "2.4"
      ],
      "patterns": [
        "resource[ ]pack[ ]state[s]"
      ]
    },
    {
      "id": "Script",
      "name": "Script",
      "description": [
        "A script loaded by Skript.",
        "Disabled scripts will report as being empty since their content has not been loaded."
      ],
      "examples": [
        "the current script"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "script[s]"
      ]
    },
    {
      "id": "CachedServerIcon",
      "name": "Server Icon",
      "description": [
        "A server icon that was loaded using the load server icon effect."
      ],
      "since": [
        "2.3"
      ],
      "patterns": [
        "server[ ]icon[s]"
      ]
    },
    {
      "id": "Slot",
      "name": "Slot",
      "description": [
        "Represents a single slot of an inventory. Notable slots are the armour slots and furnace slots. ",
        "The most important property that distinguishes a slot from an item is its ability to be changed, e.g. it can be set, deleted, enchanted, etc. (Some item expressions can be changed as well, e.g. items stored in variables. For that matter: slots are never saved to variables, only the items they represent at the time when the variable is set).",
        "Please note that tool can be regarded a slot, but it can actually change it's position, i.e. doesn't represent always the same slot."
      ],
      "examples": [
        "set tool of player to dirt",
        "delete helmet of the victim",
        "set the color of the player's tool to green",
        "enchant the player's chestplate with projectile protection 5"
      ],
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all",
        "set"
      ],
      "patterns": [
        "[inventory ]slot[s]"
      ]
    },
    {
      "id": "SoundCategory",
      "name": "Sound Category",
      "description": [
        "The category of a sound, they are used for sound options of Minecraft. See the play sound and stop sound effects."
      ],
      "usage": "hostile creatures category, speech category, records category, friendly creature category, noteblock category, hostile creature category, note block category, voice category, ambient category, noteblocks category, note blocks category, weather category, block category, friendly mob category, jukebox category, hostile mob category, master category, master volume category, hostile category, record category, blocks category, environment category, jukeboxes category, player category, players category, hostile mobs category, friendly mobs category, music category, friendly creatures category, neutral category",
      "since": [
        "2.4"
      ],
      "patterns": [
        "sound[ ]categor(y|ies)"
      ]
    },
    {
      "id": "SpawnReason",
      "name": "Spawn Reason",
      "description": [
        "The spawn reason in a spawn event."
      ],
      "usage": "dispense egg, egg, village defense, ocelot baby, silverfish trap, village invading, trap, dispensing egg, shoulder, drowned, metamorphosis, bucket spawn reasons, lightning, silverfish reveal, spell, built iron golem, natural, trial mob spawner, village invasion, frozen, mount, build wither, built wither, iron golem defense, ender pearl, creature spawner, reinforcements, build snowman, build iron golem, breeding, raid, ominous item spawner, infection, customized, potion effect, spawn egg, jockey, beehive, default, golem defense, patrol, slime split, infected, sheared, mob spawner, nether portal, trial spawner, shear, perching, custom, built snowman, chunk generation, breed, command, duplication, explosion, spawner, cured, enchantment, trial creature spawner, customised, piglin zombification",
      "since": [
        "2.3"
      ],
      "patterns": [
        "spawn[ing][ ]reason[s]"
      ]
    },
    {
      "id": "TeleportCause",
      "name": "Teleport Cause",
      "description": [
        "The teleport cause in a teleport event."
      ],
      "usage": "bed exit, nether portal, ender gateway, exiting bed, chorus fruit, ender portal, command, unknown, plugin, dismounted, ender pearl, spectator, spectate, end gateway, chorus, exit bed, gateway, dismount, end portal",
      "since": [
        "2.2-dev35"
      ],
      "patterns": [
        "teleport[ ](cause|reason|type)[s]"
      ]
    },
    {
      "id": "SkriptTeleportFlag",
      "name": "Teleport Flag",
      "description": [
        "Teleport Flags are settings to retain during a teleport."
      ],
      "usage": "passengers, xyz velocity, z velocity, yaw velocity, inventory, pitch velocity, vehicle, opened inventory, open inventory, x velocity, passenger, pitch and yaw velocity, yaw and pitch velocity, directional velocity, y velocity",
      "since": [
        "2.10"
      ],
      "patterns": [
        "teleport[ ]flag[s]"
      ]
    },
    {
      "id": "String",
      "name": "Text",
      "description": [
        "Text is simply text, i.e. a sequence of characters, which can optionally contain expressions which will be replaced with a meaningful representation (e.g. %player% will be replaced with the player's name).",
        "Because scripts are also text, you have to put text into double quotes to tell Skript which part of the line is an effect/expression and which part is the text.",
        "Please read the article on Texts and Variable Names to learn more."
      ],
      "examples": [
        "broadcast \"Hello World!\"",
        "message \"Hello %player%\"",
        "message \"The id of \"\"%type of tool%\"\" is %id of tool%.\""
      ],
      "usage": "simple: \"...\"\nquotes: \"...\"\"...\"\nexpressions: \"...%expression%...\"\npercent signs: \"...%%...\"",
      "since": [
        "1.0"
      ],
      "patterns": [
        "(text|string)[s]"
      ]
    },
    {
      "id": "Time",
      "name": "Time",
      "description": [
        "A time is a point in a minecraft day's time (i.e. ranges from 0:00 to 23:59), which can vary per world.",
        "See date and timespan for the other time types of Skript."
      ],
      "examples": [
        "at 20:00:",
        "\ttime is 8 pm",
        "\tbroadcast \"It's %time%\""
      ],
      "usage": "##:##\n##[:##][ ]am/pm",
      "since": [
        "1.0"
      ],
      "patterns": [
        "time[s]"
      ]
    },
    {
      "id": "Timeperiod",
      "name": "Timeperiod",
      "description": [
        "A period of time between two times. Mostly useful since you can use this to test for whether it's day, night, dusk or dawn in a specific world.",
        "This type might be removed in the future as you can use 'time of world is between x and y' as a replacement."
      ],
      "examples": [
        "time in world is night"
      ],
      "usage": "##:## - ##:##\ndusk/day/dawn/night",
      "since": [
        "1.0"
      ],
      "patterns": [
        "time[ ]period[s]",
        "duration[s]"
      ]
    },
    {
      "id": "Timespan",
      "name": "Timespan",
      "description": [
        "A timespan is a difference of two different dates or times, e.g '10 minutes'. Timespans are always displayed as real life time, but can be defined as minecraft time, e.g. '5 minecraft days and 12 hours'.",
        "NOTE: Months always have the value of 30 days, and years of 365 days.",
        "See date and time for the other time types of Skript."
      ],
      "examples": [
        "every 5 minecraft days:",
        "\twait a minecraft second and 5 ticks",
        "every 10 mc days and 12 hours:",
        "\thalt for 12.7 irl minutes, 12 hours and 120.5 seconds"
      ],
      "usage": "<number> [minecraft/mc/real/rl/irl] ticks/seconds/minutes/hours/days/weeks/months/years [[,/and] <more...>]\n[###:]##:##[.####] ([hours:]minutes:seconds[.milliseconds])",
      "since": [
        "1.0, 2.6.1 (weeks, months, years)"
      ],
      "patterns": [
        "time[ ]span[s]"
      ]
    },
    {
      "id": "TransformReason",
      "name": "Transform Reason",
      "description": [
        "Represents a transform reason of an entity transform event."
      ],
      "usage": "infection, magma slime split, villager infection, tadpole metamorphosis, drowning, creeper super charge, unknown, split, tadpole converting, metamorphosis, skeleton converting to stray, lightning, slime split, entity drowning, slime splitting, zombie drowning, zombie curing, skeleton freeze, entity freezing, zombie converting to drowned, curing, entity freeze, skeleton freezing, mooshroom shear, zombie cure, tadpole converting to frog, mooshroom shearing, magma slime splitting, piglin zombification",
      "since": [
        "2.8.0"
      ],
      "patterns": [
        "[entity][ ]transform[ ](reason|cause)[s]"
      ]
    },
    {
      "id": "StructureType",
      "name": "Tree Type",
      "description": [
        "A tree type represents a tree species or a huge mushroom species. These can be generated in a world with the generate tree effect."
      ],
      "examples": [
        "grow any regular tree at the block",
        "grow a huge red mushroom above the block"
      ],
      "usage": "[any] <general tree/mushroom type>, e.g. tree/any jungle tree/etc.\n<specific tree/mushroom species>, e.g. red mushroom/small jungle tree/big regular tree/etc.",
      "patterns": [
        "tree[ ]type[s]",
        "tree[s]"
      ]
    },
    {
      "id": "ClassInfo",
      "name": "Type",
      "description": [
        "Represents a type, e.g. number, object, item type, location, block, world, entity type, etc.",
        "This is mostly used for expressions like 'event-<type>', '<type>-argument', 'loop-<type>', etc., e.g. event-world, number-argument and loop-player."
      ],
      "examples": [
        "{variable} is a number # check whether the variable contains a number, e.g. -1 or 5.5",
        "{variable} is a type # check whether the variable contains a type, e.g. number or player",
        "{variable} is an object # will always succeed if the variable is set as everything is an object, even types.",
        "disable PvP in the event-world",
        "kill the loop-entity"
      ],
      "usage": "See the type name patterns of all types - including this one",
      "since": [
        "2.0"
      ],
      "patterns": [
        "type[s]"
      ]
    },
    {
      "id": "UUID",
      "name": "UUID",
      "description": [
        "UUIDs are unique identifiers that ensure things can be reliably distinguished from each other. They are generated in a way that makes it practically impossible for duplicates to occur.",
        "Read more about UUIDs and how they are used in Minecraft in the wiki entry about UUIDs."
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "uuid[s]"
      ]
    },
    {
      "id": "UnleashReason",
      "name": "Unleash Reason",
      "description": [
        "Represents an unleash reason of an unleash event."
      ],
      "usage": "player unleashed, distance, unleashed by player, player unleash, holder (gone|disappeared), unknown",
      "since": [
        "2.10"
      ],
      "patterns": [
        "unleash[ ](reason|cause)[s]"
      ]
    },
    {
      "id": "Vector",
      "name": "Vector",
      "description": [
        "Vector is a collection of numbers. In Minecraft, 3D vectors are used to express velocities of entities."
      ],
      "usage": "vector(x, y, z)",
      "since": [
        "2.2-dev23"
      ],
      "patterns": [
        "vector[s]"
      ]
    },
    {
      "id": "Vehicle",
      "name": "Vehicle",
      "description": [
        "Represents a vehicle."
      ],
      "since": [
        "2.10.2"
      ],
      "changers": [
        "add",
        "delete",
        "remove",
        "remove all"
      ],
      "patterns": [
        "vehicle[s]"
      ]
    },
    {
      "id": "Profession",
      "name": "Villager Profession",
      "description": [
        "Represents the different professions of villagers."
      ],
      "usage": "armorer, armorer profession, armourer, armourer profession, butcher, butcher profession, cartographer, cartographer profession, cleric, cleric profession, farmer, farmer profession, fisherman, fisherman profession, fletcher, fletcher profession, leatherworker, leatherworker profession, librarian, librarian profession, mason, mason profession, nitwit, nitwit profession, no profession, none, none profession, shepherd, shepherd profession, toolsmith, toolsmith profession, unemployed, weaponsmith, weaponsmith profession",
      "since": [
        "2.10"
      ],
      "patterns": [
        "villager[ ]profession[s]"
      ]
    },
    {
      "id": "TypeVillagerType",
      "name": "Villager Type",
      "description": [
        "Represents the different types of villagers. These are usually the biomes a villager can be from."
      ],
      "usage": "desert, jungle, plains, savanna, snow, swamp, taiga",
      "since": [
        "2.10"
      ],
      "patterns": [
        "villager[ ]type[s]"
      ]
    },
    {
      "id": "VisualEffect",
      "name": "Visual Effect",
      "description": [
        "A visible effect, e.g. particles."
      ],
      "examples": [
        "show wolf hearts on the clicked wolf",
        "play mob spawner flames at the targeted block to the player"
      ],
      "usage": "smoke, potion break, ender signal, mobspawner flames, arrow particles, jumping rabbit, hurt, wolf smoke, wolf hearts, wolf shaking, sheep eating, iron golem offering rose, witch magic, zombie turning to a villager, firework explosion, love hearts, squid rotation reset, entity poof, guardian target, block with shield, shield break, armor stand hit, hurt by thorns, iron golem sheathing rose, resurrection by totem, hurt by drowning, hurt by explosion, poof, large explosion, explosion emitter, firework, bubble, splash, water wake, underwater, critical hit, enchanted hit, smoke, large smoke, effect, instant effect, entity effect, witch, dripping water, dripping lava, angry villager, happy villager, mycelium, note, portal, enchant, flame, lava pop, cloud, dust, snowball, slime, heart, item, block, rain, elder guardian, dragon breath, end rod, damage indicator, sweep attack, falling dust, totem of undying, spit, squid ink, bubble pop, current down, bubble column up, nautilus, dolphin, sneeze, campfire cosy smoke, campfire signal smoke, composter, flash, falling lava, landing lava, falling water, dripping honey, falling honey, landing honey, falling nectar, soul fire flame, ash, crimson spore, warped spore, soul, dripping obsidian tear, falling obsidian tear, landing obsidian tear, reverse portal, white ash, dust color transition, vibration, falling spore blossom, spore blossom air, small flame, snowflake, dripping dripstone lava, falling dripstone lava, dripping dripstone water, falling dripstone water, glow squid ink, glow, wax on, wax off, electric spark, scrape, sonic boom, sculk soul, sculk charge, sculk charge pop, shriek, cherry leaves, egg crack, dust plume, white smoke, gust, small gust, large gust emitter, small gust emitter, trial spawner detection, ominous trial spawner detection, vault connection, infested, cobweb, dust pillar, ominous spawning, raid omen, block marker",
      "since": [
        "2.1"
      ],
      "patterns": [
        "(visual|particle) effect[s]"
      ]
    },
    {
      "id": "WeatherType",
      "name": "Weather Type",
      "description": [
        "The weather types sunny, rainy, and thundering."
      ],
      "examples": [
        "is raining",
        "is sunny in the player's world",
        "message \"It is %weather in the argument's world% in %world of the argument%\""
      ],
      "usage": "clear/sun/sunny, rain/rainy/raining, and thunder/thundering/thunderstorm",
      "since": [
        "1.0"
      ],
      "patterns": [
        "weather[ ]type[s]",
        "weather condition[s]",
        "weather[s]"
      ]
    },
    {
      "id": "WolfVariant",
      "name": "Wolf Variant",
      "description": [
        "Represents the variant of a wolf entity.",
        "NOTE: Minecraft namespaces are supported, ex: 'minecraft:ashen'."
      ],
      "usage": "ashen, black, chestnut, pale, rusty, snowy, spotted, striped, woods",
      "since": [
        "@VERSION"
      ],
      "patterns": [
        "wolf[ ]variant[s]"
      ]
    },
    {
      "id": "World",
      "name": "World",
      "description": [
        "One of the server's worlds. Worlds can be put into scripts by surrounding their name with double quotes, e.g. \"world_nether\", but this might not work reliably as text uses the same syntax."
      ],
      "examples": [
        "broadcast \"Hello!\" to the world \"world_nether\""
      ],
      "usage": "\"world_name\", e.g. \"world\"",
      "since": [
        "1.0, 2.2 (alternate syntax)"
      ],
      "patterns": [
        "world[s]"
      ]
    },
    {
      "id": "WorldBorder",
      "name": "World Border",
      "description": [
        "Represents the border of a world or player."
      ],
      "since": [
        "2.11"
      ],
      "patterns": [
        "world[ ]border[s]"
      ]
    },
    {
      "id": "Environment",
      "name": "World Environment",
      "description": [
        "Represents the environment of a world."
      ],
      "usage": "normal, nether, the end, the overworld, custom, the nether, end, overworld",
      "since": [
        "2.7"
      ],
      "patterns": [
        "[world[ ]]environment[s]"
      ]
    }
  ],
  "functions": [
    {
      "id": "function_abs",
      "name": "abs",
      "description": [
        "Returns the absolute value of the argument, i.e. makes the argument positive."
      ],
      "examples": [
        "abs(3) = 3",
        "abs(-2) = 2"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "abs(n: number)"
      ]
    },
    {
      "id": "function_acos",
      "name": "acos",
      "description": [
        "The inverse of the cosine, also called arccos. Returns result in degrees, not radians. Only returns values from 0 to 180."
      ],
      "examples": [
        "acos(0) = 90",
        "acos(1) = 0",
        "acos(0.5) = 30"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "acos(n: number)"
      ]
    },
    {
      "id": "function_asin",
      "name": "asin",
      "description": [
        "The inverse of the sine, also called arcsin. Returns result in degrees, not radians. Only returns values from -90 to 90."
      ],
      "examples": [
        "asin(0) = 0",
        "asin(1) = 90",
        "asin(0.5) = 30"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "asin(n: number)"
      ]
    },
    {
      "id": "function_atan",
      "name": "atan",
      "description": [
        "The inverse of the tangent, also called arctan. Returns result in degrees, not radians. Only returns values from -90 to 90."
      ],
      "examples": [
        "atan(0) = 0",
        "atan(1) = 45",
        "atan(10000) = 89.9943"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "atan(n: number)"
      ]
    },
    {
      "id": "function_atan2",
      "name": "atan2",
      "description": [
        "Similar to atan, but requires two coordinates and returns values from -180 to 180.",
        "The returned angle is measured counterclockwise in a standard mathematical coordinate system (x to the right, y to the top)."
      ],
      "examples": [
        "atan2(0, 1) = 0",
        "atan2(10, 0) = 90",
        "atan2(-10, 5) = -63.4349"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "atan2(x: number, y: number)"
      ]
    },
    {
      "id": "function_axisAngle",
      "name": "axisAngle",
      "description": [
        "Returns a quaternion from the given angle (in degrees) and axis (as a vector). This represents a rotation around the given axis by the given angle."
      ],
      "examples": [
        "axisangle(90, (vector from player's facing))"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Quaternion",
      "patterns": [
        "axisAngle(angle: number, axis: vector)"
      ]
    },
    {
      "id": "function_calcExperience",
      "name": "calcExperience",
      "description": [
        "Calculates the total amount of experience needed to achieve given level from scratch in Minecraft."
      ],
      "since": [
        "2.2-dev32"
      ],
      "return type": "long",
      "patterns": [
        "calcExperience(level: long)"
      ]
    },
    {
      "id": "function_ceil",
      "name": "ceil",
      "description": [
        "Rounds a number up, i.e. returns the closest integer larger than or equal to the argument."
      ],
      "examples": [
        "ceil(2.34) = 3",
        "ceil(2) = 2",
        "ceil(2.99) = 3"
      ],
      "since": [
        "2.2"
      ],
      "return type": "long",
      "patterns": [
        "ceil(n: number)"
      ]
    },
    {
      "id": "function_ceiling",
      "name": "ceiling",
      "description": [
        "Alias of ceil."
      ],
      "examples": [
        "ceiling(2.34) = 3",
        "ceiling(2) = 2",
        "ceiling(2.99) = 3"
      ],
      "since": [
        "2.2"
      ],
      "return type": "long",
      "patterns": [
        "ceiling(n: number)"
      ]
    },
    {
      "id": "function_clamp",
      "name": "clamp",
      "description": [
        "Clamps one or more values between two numbers."
      ],
      "examples": [
        "clamp(5, 0, 10) = 5",
        "clamp(5.5, 0, 5) = 5",
        "clamp(0.25, 0, 0.5) = 0.25",
        "clamp(5, 7, 10) = 7",
        "clamp((5, 0, 10, 9, 13), 7, 10) = (7, 7, 10, 9, 10)",
        "set {_clamped::*} to clamp({_values::*}, 0, 10)"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Number",
      "patterns": [
        "clamp(values: numbers, min: number, max: number)"
      ]
    },
    {
      "id": "function_combinations",
      "name": "combinations",
      "description": [
        "Get the number of possible sets from 1 to 'options' with each set having a size equal to 'selected'",
        "For example, a combination with 3 options and a set size of 1, returns 3: (1), (2), (3)",
        "A combination of 3 options with a set size of 2 returns 3: (1, 2), (1, 3), (2, 3)",
        "Note that the bigger the 'options' and lower the 'selected' may result in approximations or even infinity values.",
        "Combinations differ from permutations in that combinations focus on unique sets, ignoring the order of elements, whereas permutations account for the arrangement of elements within the set.",
        "Example: (1, 2) and (2, 1) represent a single combination since order doesn't matter in combinations, but they are two distinct permutations because permutations consider the order."
      ],
      "examples": [
        "combinations(10, 8) = 45",
        "combinations(5, 3) = 10",
        "combinations(size of {some list::*}, 2)"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Number",
      "patterns": [
        "combinations(options: number, selected: number)"
      ]
    },
    {
      "id": "function_concat",
      "name": "concat",
      "description": [
        "Joins the provided texts (and other things) into a single text."
      ],
      "examples": [
        "concat(\"hello \", \"there\") # hello there",
        "concat(\"foo \", 100, \" bar\") # foo 100 bar"
      ],
      "since": [
        "2.9.0"
      ],
      "return type": "Text",
      "patterns": [
        "concat(texts: objects)"
      ]
    },
    {
      "id": "function_cos",
      "name": "cos",
      "description": [
        "The cosine function. This is basically the sine shifted by 90°, i.e. cos(a) = sin(a + 90°), for any number a. Uses degrees, not radians."
      ],
      "examples": [
        "cos(0) = 1",
        "cos(90) = 0"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "cos(n: number)"
      ]
    },
    {
      "id": "function_date",
      "name": "date",
      "description": [
        "Creates a date from a year, month, and day, and optionally also from hour, minute, second and millisecond.",
        "A time zone and DST offset can be specified as well (in minutes), if they are left out the server's time zone and DST offset are used (the created date will not retain this information)."
      ],
      "examples": [
        "date(2014, 10, 1) # 0:00, 1st October 2014",
        "date(1990, 3, 5, 14, 30) # 14:30, 5th May 1990",
        "date(1999, 12, 31, 23, 59, 59, 999, -3*60, 0) # almost year 2000 in parts of Brazil (-3 hours offset, no DST)"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Date",
      "patterns": [
        "date(year: number, month: number, day: number, hour: number = 0, minute: number = 0, second: number = 0, millisecond: number = 0, zone_offset: number = NaN, dst_offset: number = NaN)"
      ]
    },
    {
      "id": "function_exp",
      "name": "exp",
      "description": [
        "The exponential function. You probably don't need this if you don't know what this is."
      ],
      "examples": [
        "exp(0) = 1",
        "exp(1) = 2.7183"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "exp(n: number)"
      ]
    },
    {
      "id": "function_factorial",
      "name": "factorial",
      "description": [
        "Get the factorial of a number.",
        "Getting the factorial of any number above 21 will return an approximation, not an exact value.",
        "Any number after 170 will always return Infinity.",
        "Should not be used to calculate permutations or combinations manually."
      ],
      "examples": [
        "factorial(0) = 1",
        "factorial(3) = 3*2*1 = 6",
        "factorial(5) = 5*4*3*2*1 = 120",
        "factorial(171) = Infinity"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Number",
      "patterns": [
        "factorial(number: number)"
      ]
    },
    {
      "id": "function_floor",
      "name": "floor",
      "description": [
        "Rounds a number down, i.e. returns the closest integer smaller than or equal to the argument."
      ],
      "examples": [
        "floor(2.34) = 2",
        "floor(2) = 2",
        "floor(2.99) = 2"
      ],
      "since": [
        "2.2"
      ],
      "return type": "long",
      "patterns": [
        "floor(n: number)"
      ]
    },
    {
      "id": "function_formatNumber",
      "name": "formatNumber",
      "description": [
        "Converts numbers to human-readable format. By default, '###,###' (e.g. '123,456,789') will be used for whole numbers and '###,###.##' (e.g. '123,456,789.00) will be used for decimal numbers. A hashtag '#' represents a digit, a comma ',' is used to separate numbers, and a period '.' is used for decimals. ",
        "Will return none if the format is invalid.",
        "For further reference, see this article."
      ],
      "examples": [
        "command /balance:",
        "\taliases: bal",
        "\texecutable by: players",
        "\ttrigger:",
        "\t\tset {_money} to formatNumber({money::%sender's uuid%})",
        "\t\tsend \"Your balance: %{_money}%\" to sender"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Text",
      "patterns": [
        "formatNumber(number: number, format: string = )"
      ]
    },
    {
      "id": "function_isNaN",
      "name": "isNaN",
      "description": [
        "Returns true if the input is NaN (not a number)."
      ],
      "examples": [
        "isNaN(0) # false",
        "isNaN(0/0) # true",
        "isNaN(sqrt(-1)) # true"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Boolean",
      "patterns": [
        "isNaN(n: number)"
      ]
    },
    {
      "id": "function_ln",
      "name": "ln",
      "description": [
        "The natural logarithm. You probably don't need this if you don't know what this is.",
        "Returns NaN (not a number) if the argument is negative."
      ],
      "examples": [
        "ln(1) = 0",
        "ln(exp(5)) = 5",
        "ln(2) = 0.6931"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "ln(n: number)"
      ]
    },
    {
      "id": "function_location",
      "name": "location",
      "description": [
        "Creates a location from a world and 3 coordinates, with an optional yaw and pitch.",
        "If for whatever reason the world is not found, it will fallback to the server's main world."
      ],
      "examples": [
        "# TELEPORTING",
        "teleport player to location(1,1,1, world \"world\")",
        "teleport player to location(1,1,1, world \"world\", 100, 0)",
        "teleport player to location(1,1,1, world \"world\", yaw of player, pitch of player)",
        "teleport player to location(1,1,1, world of player)",
        "teleport player to location(1,1,1, world(\"world\"))",
        "teleport player to location({_x}, {_y}, {_z}, {_w}, {_yaw}, {_pitch})",
        "# SETTING BLOCKS",
        "set block at location(1,1,1, world \"world\") to stone",
        "set block at location(1,1,1, world \"world\", 100, 0) to stone",
        "set block at location(1,1,1, world of player) to stone",
        "set block at location(1,1,1, world(\"world\")) to stone",
        "set block at location({_x}, {_y}, {_z}, {_w}) to stone",
        "# USING VARIABLES",
        "set {_l1} to location(1,1,1)",
        "set {_l2} to location(10,10,10)",
        "set blocks within {_l1} and {_l2} to stone",
        "if player is within {_l1} and {_l2}:",
        "# OTHER",
        "kill all entities in radius 50 around location(1,65,1, world \"world\")",
        "delete all entities in radius 25 around location(50,50,50, world \"world_nether\")",
        "ignite all entities in radius 25 around location(1,1,1, world of player)"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Location",
      "patterns": [
        "location(x: number, y: number, z: number, world: world = event-world, yaw: number = 0, pitch: number = 0)"
      ]
    },
    {
      "id": "function_log",
      "name": "log",
      "description": [
        "A logarithm, with base 10 if none is specified. This is the inverse operation to exponentiation (for positive bases only), i.e. log(base ^ exponent, base) = exponent for any positive number 'base' and any number 'exponent'.",
        "Another useful equation is base ^ log(a, base) = a for any numbers 'base' and 'a'.",
        "Please note that due to how numbers are represented in computers, these equations do not hold for all numbers, as the computed values may slightly differ from the correct value.",
        "Returns NaN (not a number) if any of the arguments are negative."
      ],
      "examples": [
        "log(100) = 2 # 10^2 = 100",
        "log(16, 2) = 4 # 2^4 = 16"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "log(n: number, base: number = 10)"
      ]
    },
    {
      "id": "function_max",
      "name": "max",
      "description": [
        "Returns the maximum number from a list of numbers."
      ],
      "examples": [
        "max(1) = 1",
        "max(1, 2, 3, 4) = 4",
        "max({some list variable::*})"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "max(ns: numbers)"
      ]
    },
    {
      "id": "function_mean",
      "name": "mean",
      "description": [
        "Get the mean (average) of a list of numbers.",
        "You cannot get the mean of a set of numbers that includes infinity or NaN."
      ],
      "examples": [
        "mean(1, 2, 3) = 2",
        "mean(0, 5, 10) = 5",
        "mean(13, 97, 376, 709) = 298.75"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Number",
      "patterns": [
        "mean(numbers: numbers)"
      ]
    },
    {
      "id": "function_median",
      "name": "median",
      "description": [
        "Get the middle value of a sorted list of numbers. If the list has an even number of values, the median is the average of the two middle numbers.",
        "You cannot get the median of a set of numbers that includes NaN."
      ],
      "examples": [
        "median(1, 2, 3, 4, 5) = 3",
        "median(1, 2, 3, 4, 5, 6) = 3.5",
        "median(0, 123, 456, 789) = 289.5"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Number",
      "patterns": [
        "median(numbers: numbers)"
      ]
    },
    {
      "id": "function_min",
      "name": "min",
      "description": [
        "Returns the minimum number from a list of numbers."
      ],
      "examples": [
        "min(1) = 1",
        "min(1, 2, 3, 4) = 1",
        "min({some list variable::*})"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "min(ns: numbers)"
      ]
    },
    {
      "id": "function_mod",
      "name": "mod",
      "description": [
        "Returns the modulo of the given arguments, i.e. the remainder of the division d/m, where d and m are the arguments of this function.",
        "The returned value is always positive. Returns NaN (not a number) if the second argument is zero."
      ],
      "examples": [
        "mod(3, 2) = 1",
        "mod(256436, 100) = 36",
        "mod(-1, 10) = 9"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "mod(d: number, m: number)"
      ]
    },
    {
      "id": "function_offlineplayer",
      "name": "offlineplayer",
      "description": [
        "Returns a offline player from their name or UUID. This function will still return the player if they're online. If Paper 1.16.5+ is used, the 'allowLookup' parameter can be set to false to prevent this function from doing a web lookup for players who have not joined before. Lookups can cause lag spikes of up to multiple seconds, so use offline players with caution."
      ],
      "examples": [
        "set {_p} to offlineplayer(\"Notch\")",
        "set {_p} to offlineplayer(\"069a79f4-44e9-4726-a5be-fca90e38aaf5\")",
        "set {_p} to offlineplayer(\"Notch\", false)"
      ],
      "since": [
        "2.8.0, 2.9.0 (prevent lookups)"
      ],
      "return type": "Offline Player",
      "patterns": [
        "offlineplayer(nameOrUUID: string, allowLookups: boolean = true)"
      ]
    },
    {
      "id": "function_permutations",
      "name": "permutations",
      "description": [
        "Get the number of possible ordered arrangements from 1 to 'options' with each arrangement having a size equal to 'selected'",
        "For example, permutations with 3 options and an arrangement size of 1, returns 3: (1), (2), (3)",
        "Permutations with 3 options and an arrangement size of 2 returns 6: (1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)",
        "Note that the bigger the 'options' and lower the 'selected' may result in approximations or even infinity values.",
        "Permutations differ from combinations in that permutations account for the arrangement of elements within the set, whereas combinations focus on unique sets and ignore the order of elements.",
        "Example: (1, 2) and (2, 1) are two distinct permutations because the positions of '1' and '2' are different, but they represent a single combination since order doesn't matter in combinations."
      ],
      "examples": [
        "permutations(10, 2) = 90",
        "permutations(10, 4) = 5040",
        "permutations(size of {some list::*}, 2)"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Number",
      "patterns": [
        "permutations(options: number, selected: number)"
      ]
    },
    {
      "id": "function_player",
      "name": "player",
      "description": [
        "Returns an online player from their name or UUID, if player is offline function will return nothing.",
        "Setting 'getExactPlayer' parameter to true will return the player whose name is exactly equal to the provided name instead of returning a player that their name starts with the provided name."
      ],
      "examples": [
        "set {_p} to player(\"Notch\") # will return an online player whose name is or starts with 'Notch'",
        "set {_p} to player(\"Notch\", true) # will return the only online player whose name is 'Notch'",
        "set {_p} to player(\"069a79f4-44e9-4726-a5be-fca90e38aaf5\") # <none> if player is offline"
      ],
      "since": [
        "2.8.0"
      ],
      "return type": "Player",
      "patterns": [
        "player(nameOrUUID: string, getExactPlayer: boolean = false)"
      ]
    },
    {
      "id": "function_product",
      "name": "product",
      "description": [
        "Calculates the product of a list of numbers."
      ],
      "examples": [
        "product(1) = 1",
        "product(2, 3, 4) = 24",
        "product({some list variable::*})",
        "product(2, {_v::*}, and the player's y-coordinate)"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "product(ns: numbers)"
      ]
    },
    {
      "id": "function_quaternion",
      "name": "quaternion",
      "description": [
        "Returns a quaternion from the given W, X, Y and Z parameters. "
      ],
      "examples": [
        "quaternion(1, 5.6, 45.21, 10)"
      ],
      "since": [
        "2.10"
      ],
      "return type": "Quaternion",
      "patterns": [
        "quaternion(w: number, x: number, y: number, z: number)"
      ]
    },
    {
      "id": "function_rgb",
      "name": "rgb",
      "description": [
        "Returns a RGB color from the given red, green and blue parameters. Alpha values can be added optionally, but these only take affect in certain situations, like text display backgrounds."
      ],
      "examples": [
        "dye player's leggings rgb(120, 30, 45)",
        "set the colour of a text display to rgb(10, 50, 100, 50)"
      ],
      "since": [
        "2.5, 2.10 (alpha)"
      ],
      "return type": "Color",
      "patterns": [
        "rgb(red: long, green: long, blue: long, alpha: long = 255)"
      ]
    },
    {
      "id": "function_root",
      "name": "root",
      "description": [
        "Calculates the nth root of a number."
      ],
      "examples": [
        "root(2, 4) = 2 # same as sqrt(4)",
        "root(4, 16) = 2",
        "root(-4, 16) = 0.5 # same as 16^(-1/4)"
      ],
      "since": [
        "2.11"
      ],
      "return type": "Number",
      "patterns": [
        "root(n: number, number: number)"
      ]
    },
    {
      "id": "function_round",
      "name": "round",
      "description": [
        "Rounds a number, i.e. returns the closest integer to the argument. Place a second argument to define the decimal placement."
      ],
      "examples": [
        "round(2.34) = 2",
        "round(2) = 2",
        "round(2.99) = 3",
        "round(2.5) = 3"
      ],
      "since": [
        "2.2, 2.7 (decimal placement)"
      ],
      "return type": "Number",
      "patterns": [
        "round(n: number, d: number = 0)"
      ]
    },
    {
      "id": "function_sin",
      "name": "sin",
      "description": [
        "The sine function. It starts at 0° with a value of 0, goes to 1 at 90°, back to 0 at 180°, to -1 at 270° and then repeats every 360°. Uses degrees, not radians."
      ],
      "examples": [
        "sin(90) = 1",
        "sin(60) = 0.866"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "sin(n: number)"
      ]
    },
    {
      "id": "function_sqrt",
      "name": "sqrt",
      "description": [
        "The square root, which is the inverse operation to squaring a number (for positive numbers only). This is the same as (argument) ^ (1/2) – other roots can be calculated via number ^ (1/root), e.g. set {_l} to {_volume}^(1/3).",
        "Returns NaN (not a number) if the argument is negative."
      ],
      "examples": [
        "sqrt(4) = 2",
        "sqrt(2) = 1.4142",
        "sqrt(-1) = NaN"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "sqrt(n: number)"
      ]
    },
    {
      "id": "function_sum",
      "name": "sum",
      "description": [
        "Sums a list of numbers."
      ],
      "examples": [
        "sum(1) = 1",
        "sum(2, 3, 4) = 9",
        "sum({some list variable::*})",
        "sum(2, {_v::*}, and the player's y-coordinate)"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "sum(ns: numbers)"
      ]
    },
    {
      "id": "function_tan",
      "name": "tan",
      "description": [
        "The tangent function. This is basically <a href='#sin'>sin(arg)/cos(arg)</code>. Uses degrees, not radians."
      ],
      "examples": [
        "tan(0) = 0",
        "tan(45) = 1",
        "tan(89.99) = 5729.5779"
      ],
      "since": [
        "2.2"
      ],
      "return type": "Number",
      "patterns": [
        "tan(n: number)"
      ]
    },
    {
      "id": "function_uuid",
      "name": "uuid",
      "description": [
        "Returns a UUID from the given string. The string must be in the format of a UUID."
      ],
      "examples": [
        "uuid(\"069a79f4-44e9-4726-a5be-fca90e38aaf5\")"
      ],
      "since": [
        "2.11"
      ],
      "return type": "UUID",
      "patterns": [
        "uuid(uuid: string)"
      ]
    },
    {
      "id": "function_vector",
      "name": "vector",
      "description": [
        "Creates a new vector, which can be used with various expressions, effects and functions."
      ],
      "examples": [
        "vector(0, 0, 0)"
      ],
      "since": [
        "2.2-dev23"
      ],
      "return type": "Vector",
      "patterns": [
        "vector(x: number, y: number, z: number)"
      ]
    },
    {
      "id": "function_world",
      "name": "world",
      "description": [
        "Gets a world from its name."
      ],
      "examples": [
        "set {_nether} to world(\"%{_world}%_nether\")"
      ],
      "since": [
        "2.2"
      ],
      "return type": "World",
      "patterns": [
        "world(name: string)"
      ]
    }
  ],
  "sections": [
    {
      "id": "SecConditional",
      "name": "Conditionals",
      "description": [
        "Conditional sections",
        "if: executed when its condition is true",
        "else if: executed if all previous chained conditionals weren't executed, and its condition is true",
        "else: executed if all previous chained conditionals weren't executed",
        "",
        "parse if: a special case of 'if' condition that its code will not be parsed if the condition is not true",
        "else parse if: another special case of 'else if' condition that its code will not be parsed if all previous chained conditionals weren't executed, and its condition is true"
      ],
      "examples": [
        "if player's health is greater than or equal to 4:",
        "\tsend \"Your health is okay so far but be careful!\"",
        "",
        "else if player's health is greater than 2:",
        "\tsend \"You need to heal ASAP, your health is very low!\"",
        "",
        "else: # Less than 2 hearts",
        "\tsend \"You are about to DIE if you don't heal NOW. You have only %player's health% heart(s)!\"",
        "",
        "parse if plugin \"SomePluginName\" is enabled: # parse if %condition%",
        "\t# This code will only be executed if the condition used is met otherwise Skript will not parse this section therefore will not give any errors/info about this section",
        ""
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "else",
        "else [parse] if <.+>",
        "else [parse] if (any|at least one [of])",
        "else [parse] if [all]",
        "[parse] if (any|at least one [of])",
        "[parse] if [all]",
        "[parse] if <.+>",
        "then [run]",
        "<.+>"
      ]
    },
    {
      "id": "SecFilter",
      "name": "Filter",
      "description": [
        "Filters a variable list based on the supplied conditions. Unlike the filter expression, this effect maintains the indices of the filtered list.",
        "It also supports filtering based on meeting any of the given criteria, rather than all, like multi-line if statements."
      ],
      "examples": [
        "set {_a::*} to integers between -10 and 10",
        "",
        "filter {_a::*} to match:",
        "\tinput is a number",
        "\tmod(input, 2) = 0",
        "\tinput > 0",
        "",
        "send {_a::*} # sends 2, 4, 6, 8, and 10"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "filter %objects% to match [any|all]"
      ]
    },
    {
      "id": "SecFor",
      "name": "For Each Loop (Experimental)",
      "description": [
        "A specialised loop section run for each element in a list.\nUnlike the basic loop, this is designed for extracting the key & value from pairs.\nThe loop element's key/index and value can be stored in a variable for convenience.\n\nWhen looping a simple (non-indexed) set of values, e.g. all players, the index will be the loop counter number."
      ],
      "examples": [
        "for each {_player} in players:",
        "\tsend \"Hello %{_player}%!\" to {_player}",
        "",
        "loop {_item} in {list of items::*}:",
        "\tbroadcast {_item}'s name",
        "",
        "for each key {_index} in {list of items::*}:",
        "\tbroadcast {_index}",
        "",
        "loop key {_index} and value {_value} in {list of items::*}:",
        "\tbroadcast \"%{_index}% = %{_value}%\"",
        "",
        "for each {_index}, {_value} in {my list::*}:",
        "\tbroadcast \"%{_index}% = %{_value}%\""
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "(for [each]|loop) [value] %object% in %objects%",
        "(for [each]|loop) (key|index) %object% in %objects%",
        "(for [each]|loop) [key|index] %object%(,| and) [value] %object% in %objects%"
      ]
    },
    {
      "id": "SecLoop",
      "name": "Loop",
      "description": [
        "Loop sections repeat their code with multiple values.",
        "",
        "A loop will loop through all elements of the given expression, e.g. all players, worlds, items, etc. The conditions & effects inside the loop will be executed for every of those elements, which can be accessed with ‘loop-’, e.g. <code>send \"hello\" to loop-player. When a condition inside a loop is not fulfilled the loop will start over with the next element of the loop. You can however use stop loop to exit the loop completely and resume code execution after the end of the loop.",
        "",
        "Loopable Values",
        "All expressions that represent more than one value, e.g. ‘all players’, ‘worlds’, etc., as well as list variables, can be looped. You can also use a list of expressions, e.g. loop the victim and the attacker, to execute the same code for only a few values.",
        "",
        "List Variables",
        "When looping list variables, you can also use loop-index in addition to loop-value inside the loop. loop-value is the value of the currently looped variable, and loop-index is the last part of the variable's name (the part where the list variable has its asterisk *)."
      ],
      "examples": [
        "loop all players:",
        "\tsend \"Hello %loop-player%!\" to loop-player",
        "",
        "loop items in player's inventory:",
        "\tif loop-item is dirt:",
        "\t\tset loop-item to air",
        "",
        "loop 10 times:",
        "\tsend title \"%11 - loop-value%\" and subtitle \"seconds left until the game begins\" to player for 1 second # 10, 9, 8 etc.",
        "\twait 1 second",
        "",
        "loop {Coins::*}:",
        "\tset {Coins::%loop-index%} to loop-value + 5 # Same as \"add 5 to {Coins::%loop-index%}\" where loop-index is the uuid of the player and loop-value is the number of coins for the player",
        "",
        "loop shuffled (integers between 0 and 8):",
        "\tif all:",
        "\t\tprevious loop-value = 1",
        "\t\tloop-value = 4",
        "\t\tnext loop-value = 8",
        "\tthen:",
        "\t\t kill all players"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "loop %objects%"
      ]
    },
    {
      "id": "EffSecShoot",
      "name": "Shoot",
      "description": [
        "Shoots a projectile (or any other entity) from a given entity or location."
      ],
      "examples": [
        "shoot arrow from all players at speed 2",
        "shoot a pig from all players:",
        "\tadd event-entity to {_projectiles::*}"
      ],
      "since": [
        "2.10"
      ],
      "patterns": [
        "shoot %entitydatas% [from %livingentities/locations%] [(at|with) (speed|velocity) %number%] [%direction%]",
        "(make|let) %livingentities/locations% shoot %entitydatas% [(at|with) (speed|velocity) %number%] [%direction%]"
      ]
    },
    {
      "id": "EffSecSpawn",
      "name": "Spawn",
      "description": [
        "Spawns entities. This can be used as an effect and as a section.",
        "",
        "If it is used as a section, the section is run before the entity is added to the world.",
        "You can modify the entity in this section, using for example 'event-entity' or 'cow'. ",
        "Do note that other event values, such as 'player', won't work in this section.",
        "",
        "If you're spawning a display and want it to be empty on initialization, like not having a block display be stone, set hidden config node 'spawn empty displays' to true.",
        "",
        "Note that when spawning an entity via entity snapshots, the code within the section will not run instantaneously as compared to spawning normally (via 'a zombie')."
      ],
      "examples": [
        "spawn 3 creepers at the targeted block",
        "spawn a ghast 5 meters above the player",
        "spawn a zombie at the player:",
        "\tset name of the zombie to \"\"",
        "",
        "spawn a block display of a ladder[waterlogged=true] at location above player:",
        "\tset billboard of event-display to center # allows the display to rotate around the center axis"
      ],
      "since": [
        "1.0, 2.6.1 (with section), 2.8.6 (dropped items), 2.10 (entity snapshots)"
      ],
      "patterns": [
        "(spawn|summon) %entitytypes/entitysnapshots% [%directions% %locations%]",
        "(spawn|summon) %number% of %entitytypes/entitysnapshots% [%directions% %locations%]"
      ],
      "required plugins": [
        "Minecraft 1.20.2+ (entity snapshots)"
      ]
    },
    {
      "id": "SecWhile",
      "name": "While Loop",
      "description": [
        "While Loop sections are loops that will just keep repeating as long as a condition is met."
      ],
      "examples": [
        "while size of all players < 5:",
        "\tsend \"More players are needed to begin the adventure\" to all players",
        "\twait 5 seconds",
        "",
        "set {_counter} to 1",
        "do while {_counter} > 1: # false but will increase {_counter} by 1 then get out",
        "\tadd 1 to {_counter}",
        "",
        "# Be careful when using while loops with conditions that are almost ",
        "# always true for a long time without using 'wait %timespan%' inside it, ",
        "# otherwise it will probably hang and crash your server.",
        "while player is online:",
        "\tgive player 1 dirt",
        "\twait 1 second # without using a delay effect the server will crash"
      ],
      "since": [
        "2.0, 2.6 (do while)"
      ],
      "patterns": [
        "[do] while <.+>"
      ]
    }
  ],
  "structures": [
    {
      "id": "StructAliases",
      "name": "Aliases",
      "description": [
        "Used for registering custom aliases for a script."
      ],
      "examples": [
        "aliases:",
        "\tblacklisted items = TNT, bedrock, obsidian, mob spawner, lava, lava bucket",
        "\tshiny swords = golden sword, iron sword, diamond sword"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "aliases"
      ]
    },
    {
      "id": "StructCommand",
      "name": "Command",
      "description": [
        "Used for registering custom commands."
      ],
      "examples": [
        "command /broadcast <string>:",
        "\tusage: A command for broadcasting a message to all players.",
        "\tpermission: skript.command.broadcast",
        "\tpermission message: You don't have permission to broadcast messages",
        "\taliases: /bc",
        "\texecutable by: players and console",
        "\tcooldown: 15 seconds",
        "\tcooldown message: You last broadcast a message %elapsed time% ago. You can broadcast another message in %remaining time%.",
        "\tcooldown bypass: skript.command.broadcast.admin",
        "\tcooldown storage: {cooldown::%player%}",
        "\ttrigger:",
        "\t\tbroadcast the argument"
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "command <.+>"
      ],
      "entries": [
        {
          "name": "usage",
          "isRequired": false,
          "isSection": false
        },
        {
          "name": "description",
          "isRequired": false,
          "isSection": false,
          "defaultValue": ""
        },
        {
          "name": "prefix",
          "isRequired": false,
          "isSection": false
        },
        {
          "name": "permission",
          "isRequired": false,
          "isSection": false,
          "defaultValue": ""
        },
        {
          "name": "permission message",
          "isRequired": false,
          "isSection": false
        },
        {
          "name": "aliases",
          "isRequired": false,
          "isSection": false,
          "defaultValue": "[]"
        },
        {
          "name": "executable by",
          "isRequired": false,
          "isSection": false,
          "defaultValue": "3"
        },
        {
          "name": "cooldown",
          "isRequired": false,
          "isSection": false
        },
        {
          "name": "cooldown message",
          "isRequired": false,
          "isSection": false
        },
        {
          "name": "cooldown bypass",
          "isRequired": false,
          "isSection": false
        },
        {
          "name": "cooldown storage",
          "isRequired": false,
          "isSection": false
        },
        {
          "name": "trigger",
          "isRequired": true,
          "isSection": true
        }
      ]
    },
    {
      "id": "StructFunction",
      "name": "Function",
      "description": [
        "Functions are structures that can be executed with arguments/parameters to run code.",
        "They can also return a value to the trigger that is executing the function.",
        "Note that local functions come before global functions execution"
      ],
      "examples": [
        "function sayMessage(message: text):",
        "\tbroadcast {_message} # our message argument is available in '{_message}'",
        "",
        "local function giveApple(amount: number) :: item:",
        "\treturn {_amount} of apple",
        "",
        "function getPoints(p: player) returns number:",
        "\treturn {points::%{_p}%}"
      ],
      "since": [
        "2.2, 2.7 (local functions)"
      ],
      "patterns": [
        "[local] function <.+>"
      ]
    },
    {
      "id": "StructOptions",
      "name": "Options",
      "description": [
        "Options are used for replacing parts of a script with something else.",
        "For example, an option may represent a message that appears in multiple locations.",
        "Take a look at the example below that showcases this."
      ],
      "examples": [
        "options:",
        "\tno_permission: You're missing the required permission to execute this command!",
        "",
        "command /ping:",
        "\tpermission: command.ping",
        "\tpermission message: {@no_permission}",
        "\ttrigger:",
        "\t\tmessage \"Pong!\"",
        "",
        "command /pong:",
        "\tpermission: command.pong",
        "\tpermission message: {@no_permission}",
        "\ttrigger:",
        "\t\tmessage \"Ping!\""
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "options"
      ]
    },
    {
      "id": "StructUsing",
      "name": "Using Experimental Feature",
      "description": [
        "Place at the top of a script file to enable an optional experimental feature.",
        "For example, this might include "
      ],
      "examples": [
        "using 1.21",
        "using the experiment my-cool-addon-feature"
      ],
      "since": [
        "2.9.0"
      ],
      "patterns": [
        "using [[the] experiment] <.+>"
      ]
    },
    {
      "id": "StructVariables",
      "name": "Variables",
      "description": [
        "Used for defining variables present within a script.",
        "This section is not required, but it ensures that a variable has a value if it doesn't exist when the script is loaded."
      ],
      "examples": [
        "variables:",
        "\t{joins} = 0",
        "\t{balance::%player%} = 0",
        "",
        "on join:",
        "\tadd 1 to {joins}",
        "\tmessage \"Your balance is %{balance::%player%}%\"",
        ""
      ],
      "since": [
        "1.0"
      ],
      "patterns": [
        "variables"
      ]
    }
  ]
}